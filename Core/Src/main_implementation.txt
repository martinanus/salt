void read_system_status(void);
void read_speed(void);
void read_hasler_speed(void);
void read_pulse_generator_speed(void);
void read_gps_speed(void);
void read_current_zone(void);
void read_gps_status(void);
void read_SIS_status(void);
void read_activation_switches_state(void);
void read_MAL_switch_state(void);
void read_MAT_switch_state(void);
void read_commands(void);
void read_remote_command(void);
void read_local_command(void);
void display_system_status(void);    
void build_system_status(void);
void send_system_status(void);
void activate_zone_relay(void);
void save_logs_local(void);
void transmit_events_remote(void);

/* -----------------------------------------------------------------*/
/* ------------START READING----------------------------------------*/
/* -----------------------------------------------------------------*/

void read_system_status(void){
    read_speed();
	
	read_current_zone();

    read_gps_status();

	read_SIS_status();

	read_activation_switches_state();	

	read_commands();
	
}

float speed;
typedef enum
{
  SPEED_NONE        = 0,      
  HASLER            = 1,      
  PULSE_GENERATOR   = 2,      
  GPS               = 3,      
} speed_source_t;
speed_source_t speed_source;

void read_speed(void){
    read_hasler_speed();
    read_pulse_generator_speed();
    read_gps_speed();
}

float hasler_speed;
void read_hasler_speed(void){

}

float pulse_generator_speed;
void read_pulse_generator_speed(void){

}

float gps_speed;
void read_gps_speed(void){

}

typedef enum
{
    NO_ZONE     = 0,      
    ZONE_1      = 1,      
    ZONE_2      = 2,      
    ZONE_3      = 3,      
} zones_t;
zones_t current_zone;

void read_current_zone(void){

}

uint8_t gps_status;

void read_gps_status(void){

}

typedef enum 
{
    OPEN    = 0,
    CLOSED  = 1
} relay_state_t;
relay_state_t SIS_status[5]; 

void read_SIS_status(void){

}


void read_activation_switches_state(void){
    read_MAL_switch_state();
	read_MAT_switch_state();
}

typedef enum 
{        
    OFF         = 0,    
    ON          = 1
} off_on_state_t;

off_on_state_t MAL_switch_state;

void read_MAL_switch_state(void){

}

off_on_state_t MAT_switch_state;

void read_MAT_switch_state(void){

}

#define MAX_COMMAND_LENGTH 256
typedef enum 
{
    INACTIVE    = 0,
    ACTIVE      = 1
} command_states_t;

void read_commands(void){
    read_remote_command(); 
	read_local_command(); 
}

char remote_command_buffer[MAX_COMMAND_LENGTH];
command_states_t remote_command_active;

void read_remote_command(void){

}

char local_command_buffer[MAX_COMMAND_LENGTH];
command_states_t local_command_active;
void read_local_command(void){

}


/* -----------------------------------------------------------------*/
/* ------------END READING------------------------------------------*/
/* -----------------------------------------------------------------*/

/* -----------------------------------------------------------------*/
/* ------------START DISPLAYING-------------------------------------*/
/* -----------------------------------------------------------------*/

void display_system_status(void){    
    build_system_status();
    send_system_status();
}

typedef enum 
{
                        //    RGB
    ALL_OFF     = 0,    // 0b 000
    B           = 1,    // 0b 001
    G           = 2,    // 0b 010
    BG          = 3,    // 0b 011
    R           = 4,    // 0b 100
    RB          = 5,    // 0b 101
    RG          = 6,    // 0b 110
    RGB         = 7,    // 0b 111
} rgb_led_state_t;




typedef enum
{
    ZERO    = 0,    // 0b 0000
    ONE     = 1,    // 0b 0001
    TWO     = 2,    // 0b 0010
    THREE   = 3,    // 0b 0011
    FOUR    = 4,    // 0b 0100
    FIVE    = 5,    // 0b 0101
    SIX     = 6,    // 0b 0110
    SEVEN   = 7,    // 0b 0111
    EIGHT   = 8,    // 0b 1000
    NINE    = 9,    // 0b 1001
    DASH    = 10    // 0b 1001
} seven_segment_digit_t;

typedef struct 
{
  seven_segment_digit_t digit;
  uint8_t decimal_point;  
} seven_segment_t;


// RGB
rgb_led_state_t zone_led;

// only set RG
rgb_led_state_t SIS_leds[5];
rgb_led_state_t CT_led;
rgb_led_state_t FE_led;
rgb_led_state_t active_command_led;
rgb_led_state_t gps_led;

// Green leds
off_on_state_t power_led;
off_on_state_t mode_MAL_led;
off_on_state_t mode_MAT_led;
off_on_state_t chop_profile_led;
off_on_state_t buzzer_state;


seven_segment_t speed_display[4];

void build_system_status(void){

}

void send_system_status(void){

}


/* -----------------------------------------------------------------*/
/* ------------END DISPLAYING---------------------------------------*/
/* -----------------------------------------------------------------*/

/* -----------------------------------------------------------------*/
/* ------------START RELE ACTIVATIONS-------------------------------*/
/* -----------------------------------------------------------------*/
relay_state_t zone_relay; 
void activate_zone_relay(void){
    
}

/* -----------------------------------------------------------------*/
/* ------------END RELE ACTIVATIONS---------------------------------*/
/* -----------------------------------------------------------------*/


/* -----------------------------------------------------------------*/
/* ------------START LOGGING----------------------------------------*/
/* -----------------------------------------------------------------*/
#define MAX_LOG_LENGTH 256
char local_log_buffer[MAX_LOG_LENGTH];
void save_logs_local(void){

}

char remote_events_buffer[MAX_LOG_LENGTH];
void transmit_events_remote(void){

}


/* -----------------------------------------------------------------*/
/* ------------END LOGGING------------------------------------------*/
/* -----------------------------------------------------------------*/
