
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000980c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080099c0  080099c0  000199c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e04  08009e04  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e04  08009e04  00019e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e0c  08009e0c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e0c  08009e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e10  08009e10  00019e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          0000474c  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004924  20004924  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019c51  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003954  00000000  00000000  00039e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001600  00000000  00000000  0003d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001112  00000000  00000000  0003edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026e4e  00000000  00000000  0003ff02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018468  00000000  00000000  00066d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e75a7  00000000  00000000  0007f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d7c  00000000  00000000  00166760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0016d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080099a4 	.word	0x080099a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	080099a4 	.word	0x080099a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200001f4 	.word	0x200001f4
 8000ef4:	20000294 	.word	0x20000294

08000ef8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirect printf to uart debug
int _write(int file, char *ptr, int len) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&UART_HANDLE, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <_write+0x28>)
 8000f10:	f002 fa1a 	bl	8003348 <HAL_UART_Transmit>
    return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000494 	.word	0x20000494

08000f24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000f2e:	f000 fd7f 	bl	8001a30 <HAL_GetTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f36:	6013      	str	r3, [r2, #0]
	if (GPIO_PIN == USER_Btn_Pin && currentMillis - previousMillis > 20){
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f3e:	d11f      	bne.n	8000f80 <HAL_GPIO_EXTI_Callback+0x5c>
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x68>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b14      	cmp	r3, #20
 8000f4c:	d918      	bls.n	8000f80 <HAL_GPIO_EXTI_Callback+0x5c>
		printf("interrupt callback! \n");
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f50:	f006 fd38 	bl	80079c4 <puts>
		previousMillis = currentMillis;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x68>)
 8000f5a:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR(interruptSemaphoreHandle, &xHigherPriorityTaskWoken);
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	490d      	ldr	r1, [pc, #52]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 f8c8 	bl	80050f8 <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_EXTI_Callback+0x5c>
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x78>)
 8000f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	f3bf 8f4f 	dsb	sy
 8000f7c:	f3bf 8f6f 	isb	sy

	}
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000a2c 	.word	0x20000a2c
 8000f8c:	20000a30 	.word	0x20000a30
 8000f90:	080099c0 	.word	0x080099c0
 8000f94:	20000a20 	.word	0x20000a20
 8000f98:	20000a24 	.word	0x20000a24
 8000f9c:	e000ed04 	.word	0xe000ed04

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b098      	sub	sp, #96	; 0x60
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f000 fd0d 	bl	80019c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f865 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 f925 	bl	80011fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fb2:	f000 f8cb 	bl	800114c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fb6:	f000 f8f3 	bl	80011a0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  idx = 0;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <main+0xb4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
  new_line = 0;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <main+0xb8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of interruptSemaphore */
  osSemaphoreDef(interruptSemaphore);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fca:	2300      	movs	r3, #0
 8000fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  interruptSemaphoreHandle = osSemaphoreCreate(osSemaphore(interruptSemaphore), 1);
 8000fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fd70 	bl	8004aba <osSemaphoreCreate>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a1f      	ldr	r2, [pc, #124]	; (800105c <main+0xbc>)
 8000fde:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, startLedTask, osPriorityLow, 0, 128);
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <main+0xc0>)
 8000fe2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000ff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fcfd 	bl	80049fa <osThreadCreate>
 8001000:	4603      	mov	r3, r0
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <main+0xc4>)
 8001004:	6013      	str	r3, [r2, #0]

  /* definition and creation of keepAliveTask */
  osThreadDef(keepAliveTask, startKeepAliveTask, osPriorityNormal, 0, 128);
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <main+0xc8>)
 8001008:	f107 0420 	add.w	r4, r7, #32
 800100c:	461d      	mov	r5, r3
 800100e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keepAliveTaskHandle = osThreadCreate(osThread(keepAliveTask), NULL);
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fcea 	bl	80049fa <osThreadCreate>
 8001026:	4603      	mov	r3, r0
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <main+0xcc>)
 800102a:	6013      	str	r3, [r2, #0]

  /* definition and creation of interruptTask */
  osThreadDef(interruptTask, startInterruptTask, osPriorityHigh, 0, 128);
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <main+0xd0>)
 800102e:	1d3c      	adds	r4, r7, #4
 8001030:	461d      	mov	r5, r3
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  interruptTaskHandle = osThreadCreate(osThread(interruptTask), NULL);
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fcd9 	bl	80049fa <osThreadCreate>
 8001048:	4603      	mov	r3, r0
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <main+0xd4>)
 800104c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800104e:	f003 fccd 	bl	80049ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001052:	e7fe      	b.n	8001052 <main+0xb2>
 8001054:	20000a28 	.word	0x20000a28
 8001058:	20000a29 	.word	0x20000a29
 800105c:	20000a20 	.word	0x20000a20
 8001060:	080099e0 	.word	0x080099e0
 8001064:	20000a14 	.word	0x20000a14
 8001068:	08009a0c 	.word	0x08009a0c
 800106c:	20000a18 	.word	0x20000a18
 8001070:	08009a38 	.word	0x08009a38
 8001074:	20000a1c 	.word	0x20000a1c

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 fd7c 	bl	8007b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <SystemClock_Config+0xcc>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <SystemClock_Config+0xcc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <SystemClock_Config+0xd0>)
 80010c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <SystemClock_Config+0xd0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010ec:	23a8      	movs	r3, #168	; 0xa8
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f4:	2307      	movs	r3, #7
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f951 	bl	80023a4 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001108:	f000 f9f4 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2105      	movs	r1, #5
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fbb2 	bl	8002894 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001136:	f000 f9dd 	bl	80014f4 <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART3_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART3_UART_Init+0x4c>)
 8001184:	f002 f886 	bl	8003294 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 f9b1 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000494 	.word	0x20000494
 800119c:	40004800 	.word	0x40004800

080011a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d8:	2201      	movs	r2, #1
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e4:	f000 ffc0 	bl	8002168 <HAL_PCD_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f981 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000508 	.word	0x20000508

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <MX_GPIO_Init+0x220>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a80      	ldr	r2, [pc, #512]	; (800141c <MX_GPIO_Init+0x220>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b7e      	ldr	r3, [pc, #504]	; (800141c <MX_GPIO_Init+0x220>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b7a      	ldr	r3, [pc, #488]	; (800141c <MX_GPIO_Init+0x220>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a79      	ldr	r2, [pc, #484]	; (800141c <MX_GPIO_Init+0x220>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b77      	ldr	r3, [pc, #476]	; (800141c <MX_GPIO_Init+0x220>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <MX_GPIO_Init+0x220>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a72      	ldr	r2, [pc, #456]	; (800141c <MX_GPIO_Init+0x220>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b70      	ldr	r3, [pc, #448]	; (800141c <MX_GPIO_Init+0x220>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b6c      	ldr	r3, [pc, #432]	; (800141c <MX_GPIO_Init+0x220>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a6b      	ldr	r2, [pc, #428]	; (800141c <MX_GPIO_Init+0x220>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <MX_GPIO_Init+0x220>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b65      	ldr	r3, [pc, #404]	; (800141c <MX_GPIO_Init+0x220>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a64      	ldr	r2, [pc, #400]	; (800141c <MX_GPIO_Init+0x220>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <MX_GPIO_Init+0x220>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b5e      	ldr	r3, [pc, #376]	; (800141c <MX_GPIO_Init+0x220>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a5d      	ldr	r2, [pc, #372]	; (800141c <MX_GPIO_Init+0x220>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <MX_GPIO_Init+0x220>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <MX_GPIO_Init+0x220>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a56      	ldr	r2, [pc, #344]	; (800141c <MX_GPIO_Init+0x220>)
 80012c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b54      	ldr	r3, [pc, #336]	; (800141c <MX_GPIO_Init+0x220>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2108      	movs	r1, #8
 80012da:	4851      	ldr	r0, [pc, #324]	; (8001420 <MX_GPIO_Init+0x224>)
 80012dc:	f000 fef8 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f244 0181 	movw	r1, #16513	; 0x4081
 80012e6:	484f      	ldr	r0, [pc, #316]	; (8001424 <MX_GPIO_Init+0x228>)
 80012e8:	f000 fef2 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2140      	movs	r1, #64	; 0x40
 80012f0:	484d      	ldr	r0, [pc, #308]	; (8001428 <MX_GPIO_Init+0x22c>)
 80012f2:	f000 feed 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	4847      	ldr	r0, [pc, #284]	; (800142c <MX_GPIO_Init+0x230>)
 800130e:	f000 fd33 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001312:	2308      	movs	r3, #8
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	483d      	ldr	r0, [pc, #244]	; (8001420 <MX_GPIO_Init+0x224>)
 800132a:	f000 fd25 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800132e:	2332      	movs	r3, #50	; 0x32
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133e:	230b      	movs	r3, #11
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4838      	ldr	r0, [pc, #224]	; (800142c <MX_GPIO_Init+0x230>)
 800134a:	f000 fd15 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800134e:	2386      	movs	r3, #134	; 0x86
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135e:	230b      	movs	r3, #11
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4831      	ldr	r0, [pc, #196]	; (8001430 <MX_GPIO_Init+0x234>)
 800136a:	f000 fd05 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800136e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4827      	ldr	r0, [pc, #156]	; (8001424 <MX_GPIO_Init+0x228>)
 8001388:	f000 fcf6 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139e:	230b      	movs	r3, #11
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <MX_GPIO_Init+0x228>)
 80013aa:	f000 fce5 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <MX_GPIO_Init+0x22c>)
 80013c6:	f000 fcd7 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4812      	ldr	r0, [pc, #72]	; (8001428 <MX_GPIO_Init+0x22c>)
 80013de:	f000 fccb 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f4:	230b      	movs	r3, #11
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <MX_GPIO_Init+0x22c>)
 8001400:	f000 fcba 	bl	8001d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2105      	movs	r1, #5
 8001408:	2028      	movs	r0, #40	; 0x28
 800140a:	f000 fbf9 	bl	8001c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f000 fc12 	bl	8001c38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40021400 	.word	0x40021400
 8001424:	40020400 	.word	0x40020400
 8001428:	40021800 	.word	0x40021800
 800142c:	40020800 	.word	0x40020800
 8001430:	40020000 	.word	0x40020000

08001434 <startLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startLedTask */
void startLedTask(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800143c:	2101      	movs	r1, #1
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <startLedTask+0x1c>)
 8001440:	f000 fe5f 	bl	8002102 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001448:	f003 fb23 	bl	8004a92 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800144c:	e7f6      	b.n	800143c <startLedTask+0x8>
 800144e:	bf00      	nop
 8001450:	40020400 	.word	0x40020400

08001454 <startKeepAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startKeepAliveTask */
void startKeepAliveTask(void const * argument)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startKeepAliveTask */
  /* Infinite loop */
  for(;;)
  {
    printf("Hello %d\n", idx);
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <startKeepAliveTask+0x2c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <startKeepAliveTask+0x30>)
 8001464:	f006 fa48 	bl	80078f8 <iprintf>
    idx++;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <startKeepAliveTask+0x2c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <startKeepAliveTask+0x2c>)
 8001472:	701a      	strb	r2, [r3, #0]
    osDelay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001478:	f003 fb0b 	bl	8004a92 <osDelay>
    printf("Hello %d\n", idx);
 800147c:	e7ee      	b.n	800145c <startKeepAliveTask+0x8>
 800147e:	bf00      	nop
 8001480:	20000a28 	.word	0x20000a28
 8001484:	08009a54 	.word	0x08009a54

08001488 <startInterruptTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startInterruptTask */
void startInterruptTask(void const * argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startInterruptTask */
  xSemaphoreTake(interruptSemaphoreHandle, portMAX_DELAY);
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <startInterruptTask+0x3c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001498:	4618      	mov	r0, r3
 800149a:	f003 febb 	bl	8005214 <xQueueSemaphoreTake>
  /* Infinite loop */
  for(;;)
  {
    if(xSemaphoreTake(interruptSemaphoreHandle, portMAX_DELAY) == pdTRUE){
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <startInterruptTask+0x3c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 feb4 	bl	8005214 <xQueueSemaphoreTake>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d1f5      	bne.n	800149e <startInterruptTask+0x16>
    	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <startInterruptTask+0x40>)
 80014b6:	f000 fe24 	bl	8002102 <HAL_GPIO_TogglePin>
		printf("Interrupt Task\n");
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <startInterruptTask+0x44>)
 80014bc:	f006 fa82 	bl	80079c4 <puts>
    if(xSemaphoreTake(interruptSemaphoreHandle, portMAX_DELAY) == pdTRUE){
 80014c0:	e7ed      	b.n	800149e <startInterruptTask+0x16>
 80014c2:	bf00      	nop
 80014c4:	20000a20 	.word	0x20000a20
 80014c8:	40020400 	.word	0x40020400
 80014cc:	08009a60 	.word	0x08009a60

080014d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014e2:	f000 fa91 	bl	8001a08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40010000 	.word	0x40010000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_MspInit+0x54>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_MspInit+0x54>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x54>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_MspInit+0x54>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_MspInit+0x54>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_MspInit+0x54>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	210f      	movs	r1, #15
 8001542:	f06f 0001 	mvn.w	r0, #1
 8001546:	f000 fb5b 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_UART_MspInit+0x94>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d134      	bne.n	80015e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_UART_MspInit+0x98>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x98>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x98>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x98>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x98>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0x98>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c4:	2307      	movs	r3, #7
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_UART_MspInit+0x9c>)
 80015d0:	f000 fbd2 	bl	8001d78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	2027      	movs	r0, #39	; 0x27
 80015da:	f000 fb11 	bl	8001c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015de:	2027      	movs	r0, #39	; 0x27
 80015e0:	f000 fb2a 	bl	8001c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004800 	.word	0x40004800
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001618:	d13f      	bne.n	800169a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001636:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001648:	230a      	movs	r3, #10
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <HAL_PCD_MspInit+0xb0>)
 8001654:	f000 fb90 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <HAL_PCD_MspInit+0xb0>)
 800166e:	f000 fb83 	bl	8001d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6353      	str	r3, [r2, #52]	; 0x34
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_PCD_MspInit+0xac>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_InitTick+0xd4>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	4a2e      	ldr	r2, [pc, #184]	; (8001780 <HAL_InitTick+0xd4>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6453      	str	r3, [r2, #68]	; 0x44
 80016cc:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <HAL_InitTick+0xd4>)
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 faf6 	bl	8002cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016e8:	f001 fae0 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80016ec:	4603      	mov	r3, r0
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	4a23      	ldr	r2, [pc, #140]	; (8001784 <HAL_InitTick+0xd8>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	3b01      	subs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_InitTick+0xdc>)
 8001702:	4a22      	ldr	r2, [pc, #136]	; (800178c <HAL_InitTick+0xe0>)
 8001704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_InitTick+0xdc>)
 8001708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800170c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_InitTick+0xdc>)
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_InitTick+0xdc>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_InitTick+0xdc>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_InitTick+0xdc>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001726:	4818      	ldr	r0, [pc, #96]	; (8001788 <HAL_InitTick+0xdc>)
 8001728:	f001 fb06 	bl	8002d38 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11b      	bne.n	8001772 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800173a:	4813      	ldr	r0, [pc, #76]	; (8001788 <HAL_InitTick+0xdc>)
 800173c:	f001 fb56 	bl	8002dec <HAL_TIM_Base_Start_IT>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800174a:	2b00      	cmp	r3, #0
 800174c:	d111      	bne.n	8001772 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800174e:	2019      	movs	r0, #25
 8001750:	f000 fa72 	bl	8001c38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	d808      	bhi.n	800176c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800175a:	2200      	movs	r2, #0
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	2019      	movs	r0, #25
 8001760:	f000 fa4e 	bl	8001c00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_InitTick+0xe4>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e002      	b.n	8001772 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001776:	4618      	mov	r0, r3
 8001778:	3730      	adds	r7, #48	; 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	431bde83 	.word	0x431bde83
 8001788:	20000a34 	.word	0x20000a34
 800178c:	40010000 	.word	0x40010000
 8001790:	20000004 	.word	0x20000004

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017c6:	f001 fb81 	bl	8002ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000a34 	.word	0x20000a34

080017d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USART3_IRQHandler+0x10>)
 80017da:	f001 fe47 	bl	800346c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000494 	.word	0x20000494

080017e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80017ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017f0:	f000 fca2 	bl	8002138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001812:	f006 fa5f 	bl	8007cd4 <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
  return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
  while (1) {}    /* Make sure we hang here */
 800183a:	e7fe      	b.n	800183a <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
  }

  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
  return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f006 f9e0 	bl	8007cd4 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20030000 	.word	0x20030000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000a7c 	.word	0x20000a7c
 8001948:	20004928 	.word	0x20004928

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001976:	490e      	ldr	r1, [pc, #56]	; (80019b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800198c:	4c0b      	ldr	r4, [pc, #44]	; (80019bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199a:	f7ff ffd7 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f006 f99f 	bl	8007ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff fafd 	bl	8000fa0 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019b4:	08009e14 	.word	0x08009e14
  ldr r2, =_sbss
 80019b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019bc:	20004924 	.word	0x20004924

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_Init+0x40>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_Init+0x40>)
 80019da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_Init+0x40>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f8fc 	bl	8001bea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f7ff fe5a 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fd82 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000a80 	.word	0x20000a80

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000a80 	.word	0x20000a80

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff4c 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c12:	f7ff ff61 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f7ff ffb1 	bl	8001b84 <NVIC_EncodePriority>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff80 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff54 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7ff fee5 	bl	8001a30 <HAL_GetTick>
 8001c66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e052      	b.n	8001d2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0216 	bic.w	r2, r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <HAL_DMA_Abort+0x62>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd6:	e013      	b.n	8001d00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd8:	f7ff feaa 	bl	8001a30 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d90c      	bls.n	8001d00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e015      	b.n	8001d2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e4      	bne.n	8001cd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	223f      	movs	r2, #63	; 0x3f
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00c      	b.n	8001d6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2205      	movs	r2, #5
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e177      	b.n	8002084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	f040 8166 	bne.w	800207e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d005      	beq.n	8001dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d130      	bne.n	8001e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e00:	2201      	movs	r2, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 0201 	and.w	r2, r3, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d017      	beq.n	8001e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80c0 	beq.w	800207e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1a:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_GPIO_Init+0x32c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d037      	beq.n	8001fb6 <HAL_GPIO_Init+0x23e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_GPIO_Init+0x23a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a56      	ldr	r2, [pc, #344]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_GPIO_Init+0x236>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a55      	ldr	r2, [pc, #340]	; (80020b0 <HAL_GPIO_Init+0x338>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_GPIO_Init+0x33c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_GPIO_Init+0x340>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x22a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_GPIO_Init+0x344>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x34c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f8e:	2309      	movs	r3, #9
 8001f90:	e012      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f92:	230a      	movs	r3, #10
 8001f94:	e010      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f96:	2308      	movs	r3, #8
 8001f98:	e00e      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e00c      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_GPIO_Init+0x354>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_GPIO_Init+0x354>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_GPIO_Init+0x354>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204e:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_GPIO_Init+0x354>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_GPIO_Init+0x354>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f ae84 	bls.w	8001d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40021c00 	.word	0x40021c00
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40022400 	.word	0x40022400
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fee4 	bl	8000f24 <HAL_GPIO_EXTI_Callback>
  }
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	b08f      	sub	sp, #60	; 0x3c
 800216c:	af0a      	add	r7, sp, #40	; 0x28
 800216e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e10f      	b.n	800239a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fa2f 	bl	80015f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 f95e 	bl	800447a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	687e      	ldr	r6, [r7, #4]
 80021c6:	466d      	mov	r5, sp
 80021c8:	f106 0410 	add.w	r4, r6, #16
 80021cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021dc:	1d33      	adds	r3, r6, #4
 80021de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f002 f8e9 	bl	80043b8 <USB_CoreInit>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 f94c 	bl	800449c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e04a      	b.n	80022a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	333d      	adds	r3, #61	; 0x3d
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	333c      	adds	r3, #60	; 0x3c
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	b298      	uxth	r0, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3344      	adds	r3, #68	; 0x44
 8002246:	4602      	mov	r2, r0
 8002248:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3340      	adds	r3, #64	; 0x40
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3348      	adds	r3, #72	; 0x48
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	334c      	adds	r3, #76	; 0x4c
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3354      	adds	r3, #84	; 0x54
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	3301      	adds	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3af      	bcc.n	800220a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e044      	b.n	800233a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3301      	adds	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d3b5      	bcc.n	80022b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	687e      	ldr	r6, [r7, #4]
 800234c:	466d      	mov	r5, sp
 800234e:	f106 0410 	add.w	r4, r6, #16
 8002352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800235a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800235e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002362:	1d33      	adds	r3, r6, #4
 8002364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	f002 f8e4 	bl	8004534 <USB_DevInit>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00d      	b.n	800239a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 faaf 	bl	80048f6 <USB_DevDisconnect>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e267      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d075      	beq.n	80024ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d112      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e6:	d10b      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05b      	beq.n	80024ac <HAL_RCC_OscConfig+0x108>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d157      	bne.n	80024ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e242      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x74>
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a75      	ldr	r2, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x98>
 8002422:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6c      	ldr	r2, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 800243c:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fae8 	bl	8001a30 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff fae4 	bl	8001a30 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e207      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xc0>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fad4 	bl	8001a30 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fad0 	bl	8001a30 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1f3      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0xe8>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ba:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c7      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4937      	ldr	r1, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_OscConfig+0x244>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7ff fa89 	bl	8001a30 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fa85 	bl	8001a30 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1a8      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4925      	ldr	r1, [pc, #148]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_OscConfig+0x244>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fa68 	bl	8001a30 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7ff fa64 	bl	8001a30 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e187      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d036      	beq.n	80025fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_RCC_OscConfig+0x248>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff fa48 	bl	8001a30 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fa44 	bl	8001a30 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e167      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x200>
 80025c2:	e01b      	b.n	80025fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_OscConfig+0x248>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff fa31 	bl	8001a30 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	e00e      	b.n	80025f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d2:	f7ff fa2d 	bl	8001a30 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d907      	bls.n	80025f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e150      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ea      	bne.n	80025d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8097 	beq.w	8002738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b7d      	ldr	r3, [pc, #500]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b7a      	ldr	r3, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b77      	ldr	r3, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b74      	ldr	r3, [pc, #464]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a73      	ldr	r2, [pc, #460]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7ff f9ed 	bl	8001a30 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7ff f9e9 	bl	8001a30 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e10c      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x2ea>
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a63      	ldr	r2, [pc, #396]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	e01c      	b.n	80026c8 <HAL_RCC_OscConfig+0x324>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x30c>
 8002696:	4b5f      	ldr	r3, [pc, #380]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
 80026a2:	4b5c      	ldr	r3, [pc, #368]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a5b      	ldr	r2, [pc, #364]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x324>
 80026b0:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	4b55      	ldr	r3, [pc, #340]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a54      	ldr	r2, [pc, #336]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7ff f9ae 	bl	8001a30 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7ff f9aa 	bl	8001a30 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0cb      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ee      	beq.n	80026d8 <HAL_RCC_OscConfig+0x334>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7ff f998 	bl	8001a30 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7ff f994 	bl	8001a30 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0b5      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ee      	bne.n	8002704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a1 	beq.w	8002884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b08      	cmp	r3, #8
 800274c:	d05c      	beq.n	8002808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d141      	bne.n	80027da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_OscConfig+0x478>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff f968 	bl	8001a30 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff f964 	bl	8001a30 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e087      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	491b      	ldr	r1, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x478>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff f93d 	bl	8001a30 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff f939 	bl	8001a30 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e05c      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x416>
 80027d8:	e054      	b.n	8002884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x478>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f926 	bl	8001a30 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff f922 	bl	8001a30 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e045      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x444>
 8002806:	e03d      	b.n	8002884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e038      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000
 800281c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d028      	beq.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d121      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d11a      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	3b01      	subs	r3, #1
 800286a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0cc      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d90c      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d044      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d119      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e067      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7ff f854 	bl	8001a30 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7ff f850 	bl	8001a30 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d20c      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fe36 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08009a78 	.word	0x08009a78
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a64:	b094      	sub	sp, #80	; 0x50
 8002a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a70:	2300      	movs	r3, #0
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a78:	4b79      	ldr	r3, [pc, #484]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d00d      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	f200 80e1 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x34>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a92:	e0db      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a98:	e0db      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9e:	e0d8      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa0:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	2200      	movs	r2, #0
 8002abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	462b      	mov	r3, r5
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	0159      	lsls	r1, r3, #5
 8002ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae4:	0150      	lsls	r0, r2, #5
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4621      	mov	r1, r4
 8002aec:	1a51      	subs	r1, r2, r1
 8002aee:	6139      	str	r1, [r7, #16]
 8002af0:	4629      	mov	r1, r5
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b04:	4659      	mov	r1, fp
 8002b06:	018b      	lsls	r3, r1, #6
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0e:	4651      	mov	r1, sl
 8002b10:	018a      	lsls	r2, r1, #6
 8002b12:	4651      	mov	r1, sl
 8002b14:	ebb2 0801 	subs.w	r8, r2, r1
 8002b18:	4659      	mov	r1, fp
 8002b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b32:	4690      	mov	r8, r2
 8002b34:	4699      	mov	r9, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	eb18 0303 	adds.w	r3, r8, r3
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	462b      	mov	r3, r5
 8002b40:	eb49 0303 	adc.w	r3, r9, r3
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b52:	4629      	mov	r1, r5
 8002b54:	024b      	lsls	r3, r1, #9
 8002b56:	4621      	mov	r1, r4
 8002b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	024a      	lsls	r2, r1, #9
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b66:	2200      	movs	r2, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b70:	f7fe f82a 	bl	8000bc8 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b7c:	e058      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	2200      	movs	r2, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	4611      	mov	r1, r2
 8002b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	0159      	lsls	r1, r3, #5
 8002ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002baa:	0150      	lsls	r0, r2, #5
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	00eb      	lsls	r3, r5, #3
 8002be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be6:	00e2      	lsls	r2, r4, #3
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	4643      	mov	r3, r8
 8002bee:	18e3      	adds	r3, r4, r3
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	eb45 0303 	adc.w	r3, r5, r3
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	61fa      	str	r2, [r7, #28]
 8002c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c24:	f7fd ffd0 	bl	8000bc8 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3750      	adds	r7, #80	; 0x50
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	007a1200 	.word	0x007a1200

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08009a88 	.word	0x08009a88

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffdc 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08009a88 	.word	0x08009a88

08002cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_RCC_GetClockConfig+0x60>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40023c00 	.word	0x40023c00

08002d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e041      	b.n	8002dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f839 	bl	8002dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f000 f9d8 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e04e      	b.n	8002ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2e:	d01d      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d111      	bne.n	8002e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d010      	beq.n	8002ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8e:	e007      	b.n	8002ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	40010400 	.word	0x40010400
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40001800 	.word	0x40001800

08002ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0202 	mvn.w	r2, #2
 8002ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8ee 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8e0 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8f1 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0204 	mvn.w	r2, #4
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8c4 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8b6 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8c7 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0208 	mvn.w	r2, #8
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f89a 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f88c 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f89d 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0210 	mvn.w	r2, #16
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f870 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f862 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f873 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0201 	mvn.w	r2, #1
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fa40 	bl	80014d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b80      	cmp	r3, #128	; 0x80
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f902 	bl	8003280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f838 	bl	8003118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0220 	mvn.w	r2, #32
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8cc 	bl	800326c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a40      	ldr	r2, [pc, #256]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <TIM_Base_SetConfig+0x120>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d027      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d023      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <TIM_Base_SetConfig+0x120>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <TIM_Base_SetConfig+0x124>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d017      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <TIM_Base_SetConfig+0x128>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <TIM_Base_SetConfig+0x12c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <TIM_Base_SetConfig+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <TIM_Base_SetConfig+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <TIM_Base_SetConfig+0x138>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <TIM_Base_SetConfig+0x13c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010400 	.word	0x40010400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	40001800 	.word	0x40001800
 8003264:	40001c00 	.word	0x40001c00
 8003268:	40002000 	.word	0x40002000

0800326c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e04a      	b.n	800333c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d111      	bne.n	80032d6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fbc4 	bl	8003a48 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_UART_Init+0xb0>)
 80032cc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2224      	movs	r2, #36	; 0x24
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fdee 	bl	8003ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003302:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003312:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003322:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	08001559 	.word	0x08001559

08003348 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b20      	cmp	r3, #32
 8003366:	d17c      	bne.n	8003462 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Transmit+0x2c>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e075      	b.n	8003464 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_UART_Transmit+0x3e>
 8003382:	2302      	movs	r3, #2
 8003384:	e06e      	b.n	8003464 <HAL_UART_Transmit+0x11c>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2221      	movs	r2, #33	; 0x21
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339c:	f7fe fb48 	bl	8001a30 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	d108      	bne.n	80033ca <HAL_UART_Transmit+0x82>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	e003      	b.n	80033d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033da:	e02a      	b.n	8003432 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2200      	movs	r2, #0
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fb66 	bl	8003ab8 <UART_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e036      	b.n	8003464 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	3302      	adds	r3, #2
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e007      	b.n	8003424 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	781a      	ldrb	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3301      	adds	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1cf      	bne.n	80033dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fb36 	bl	8003ab8 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e006      	b.n	8003464 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0ba      	sub	sp, #232	; 0xe8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_UART_IRQHandler+0x66>
 80034be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fc43 	bl	8003d56 <UART_Receive_IT>
      return;
 80034d0:	e25b      	b.n	800398a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80e1 	beq.w	800369e <HAL_UART_IRQHandler+0x232>
 80034dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80d4 	beq.w	800369e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_UART_IRQHandler+0xae>
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0xd2>
 8003526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0202 	orr.w	r2, r3, #2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0xf6>
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_UART_IRQHandler+0x126>
 800356e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800357a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0208 	orr.w	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 81f2 	beq.w	8003980 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_UART_IRQHandler+0x14e>
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fbce 	bl	8003d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <HAL_UART_IRQHandler+0x17a>
 80035de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d051      	beq.n	800368a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fad4 	bl	8003b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d142      	bne.n	8003680 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3314      	adds	r3, #20
 8003600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800362a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800363e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1d9      	bne.n	80035fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	2b00      	cmp	r3, #0
 800364c:	d013      	beq.n	8003676 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4a7f      	ldr	r2, [pc, #508]	; (8003850 <HAL_UART_IRQHandler+0x3e4>)
 8003654:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fb6a 	bl	8001d34 <HAL_DMA_Abort_IT>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d019      	beq.n	800369a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003670:	4610      	mov	r0, r2
 8003672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	e011      	b.n	800369a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367e:	e00c      	b.n	800369a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e007      	b.n	800369a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003698:	e172      	b.n	8003980 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369a:	bf00      	nop
    return;
 800369c:	e170      	b.n	8003980 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 814c 	bne.w	8003940 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8145 	beq.w	8003940 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 813e 	beq.w	8003940 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	f040 80b5 	bne.w	8003854 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8142 	beq.w	8003984 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003708:	429a      	cmp	r2, r3
 800370a:	f080 813b 	bcs.w	8003984 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003714:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003720:	f000 8088 	beq.w	8003834 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800373a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800373e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003750:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800375c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1d9      	bne.n	8003724 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3314      	adds	r3, #20
 8003790:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003794:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003798:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800379c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e1      	bne.n	8003770 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e3      	bne.n	80037ac <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003804:	f023 0310 	bic.w	r3, r3, #16
 8003808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003816:	65ba      	str	r2, [r7, #88]	; 0x58
 8003818:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800381c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e3      	bne.n	80037f2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fa10 	bl	8001c54 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003840:	b292      	uxth	r2, r2
 8003842:	1a8a      	subs	r2, r1, r2
 8003844:	b292      	uxth	r2, r2
 8003846:	4611      	mov	r1, r2
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800384c:	e09a      	b.n	8003984 <HAL_UART_IRQHandler+0x518>
 800384e:	bf00      	nop
 8003850:	08003c5b 	.word	0x08003c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800385c:	b29b      	uxth	r3, r3
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 808c 	beq.w	8003988 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8087 	beq.w	8003988 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800389e:	647a      	str	r2, [r7, #68]	; 0x44
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e3      	bne.n	800387a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	623b      	str	r3, [r7, #32]
   return(result);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038d6:	633a      	str	r2, [r7, #48]	; 0x30
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e3      	bne.n	80038b2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	60fb      	str	r3, [r7, #12]
   return(result);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800391c:	61fa      	str	r2, [r7, #28]
 800391e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	617b      	str	r3, [r7, #20]
   return(result);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e3      	bne.n	80038f8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003934:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003938:	4611      	mov	r1, r2
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800393e:	e023      	b.n	8003988 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <HAL_UART_IRQHandler+0x4f4>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f993 	bl	8003c84 <UART_Transmit_IT>
    return;
 800395e:	e014      	b.n	800398a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <HAL_UART_IRQHandler+0x51e>
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f9d3 	bl	8003d24 <UART_EndTransmit_IT>
    return;
 800397e:	e004      	b.n	800398a <HAL_UART_IRQHandler+0x51e>
    return;
 8003980:	bf00      	nop
 8003982:	e002      	b.n	800398a <HAL_UART_IRQHandler+0x51e>
      return;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <HAL_UART_IRQHandler+0x51e>
      return;
 8003988:	bf00      	nop
  }
}
 800398a:	37e8      	adds	r7, #232	; 0xe8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <UART_InitCallbacksToDefault+0x4c>)
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <UART_InitCallbacksToDefault+0x50>)
 8003a5a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <UART_InitCallbacksToDefault+0x54>)
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <UART_InitCallbacksToDefault+0x58>)
 8003a66:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <UART_InitCallbacksToDefault+0x5c>)
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <UART_InitCallbacksToDefault+0x60>)
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <UART_InitCallbacksToDefault+0x64>)
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <UART_InitCallbacksToDefault+0x68>)
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <UART_InitCallbacksToDefault+0x6c>)
 8003a84:	669a      	str	r2, [r3, #104]	; 0x68

}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	080039a5 	.word	0x080039a5
 8003a98:	08003991 	.word	0x08003991
 8003a9c:	080039cd 	.word	0x080039cd
 8003aa0:	080039b9 	.word	0x080039b9
 8003aa4:	080039e1 	.word	0x080039e1
 8003aa8:	080039f5 	.word	0x080039f5
 8003aac:	08003a09 	.word	0x08003a09
 8003ab0:	08003a1d 	.word	0x08003a1d
 8003ab4:	08003a31 	.word	0x08003a31

08003ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b090      	sub	sp, #64	; 0x40
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac8:	e050      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad0:	d04c      	beq.n	8003b6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad8:	f7fd ffaa 	bl	8001a30 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d241      	bcs.n	8003b6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b08:	637a      	str	r2, [r7, #52]	; 0x34
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b3c:	623a      	str	r2, [r7, #32]
 8003b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	69f9      	ldr	r1, [r7, #28]
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e00f      	b.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d09f      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3740      	adds	r7, #64	; 0x40
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b095      	sub	sp, #84	; 0x54
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d119      	bne.n	8003c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c2c:	61ba      	str	r2, [r7, #24]
 8003c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c4e:	bf00      	nop
 8003c50:	3754      	adds	r7, #84	; 0x54
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b21      	cmp	r3, #33	; 0x21
 8003c96:	d13e      	bne.n	8003d16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d114      	bne.n	8003ccc <UART_Transmit_IT+0x48>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d110      	bne.n	8003ccc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]
 8003cca:	e008      	b.n	8003cde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6211      	str	r1, [r2, #32]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4619      	mov	r1, r3
 8003cec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b08c      	sub	sp, #48	; 0x30
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b22      	cmp	r3, #34	; 0x22
 8003d68:	f040 80ad 	bne.w	8003ec6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d74:	d117      	bne.n	8003da6 <UART_Receive_IT+0x50>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	1c9a      	adds	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
 8003da4:	e026      	b.n	8003df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d007      	beq.n	8003dca <UART_Receive_IT+0x74>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <UART_Receive_IT+0x82>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e008      	b.n	8003dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4619      	mov	r1, r3
 8003e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d15c      	bne.n	8003ec2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0220 	bic.w	r2, r2, #32
 8003e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d136      	bne.n	8003eb6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f023 0310 	bic.w	r3, r3, #16
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	623a      	str	r2, [r7, #32]
 8003e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	69f9      	ldr	r1, [r7, #28]
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d10a      	bne.n	8003ea6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003eae:	4611      	mov	r1, r2
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
 8003eb4:	e003      	b.n	8003ebe <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e002      	b.n	8003ec8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3730      	adds	r7, #48	; 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b0c0      	sub	sp, #256	; 0x100
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	68d9      	ldr	r1, [r3, #12]
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	ea40 0301 	orr.w	r3, r0, r1
 8003ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f28:	f021 010c 	bic.w	r1, r1, #12
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f36:	430b      	orrs	r3, r1
 8003f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	6999      	ldr	r1, [r3, #24]
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	ea40 0301 	orr.w	r3, r0, r1
 8003f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b8f      	ldr	r3, [pc, #572]	; (800419c <UART_SetConfig+0x2cc>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d005      	beq.n	8003f70 <UART_SetConfig+0xa0>
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b8d      	ldr	r3, [pc, #564]	; (80041a0 <UART_SetConfig+0x2d0>)
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d104      	bne.n	8003f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fe fe9c 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003f74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f78:	e003      	b.n	8003f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f7a:	f7fe fe83 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	f040 810c 	bne.w	80041a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	1891      	adds	r1, r2, r2
 8003fa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003faa:	415b      	adcs	r3, r3
 8003fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	eb12 0801 	adds.w	r8, r2, r1
 8003fb8:	4629      	mov	r1, r5
 8003fba:	eb43 0901 	adc.w	r9, r3, r1
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	eb18 0303 	adds.w	r3, r8, r3
 8003fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	eb49 0303 	adc.w	r3, r9, r3
 8003fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ffe:	460b      	mov	r3, r1
 8004000:	18db      	adds	r3, r3, r3
 8004002:	653b      	str	r3, [r7, #80]	; 0x50
 8004004:	4613      	mov	r3, r2
 8004006:	eb42 0303 	adc.w	r3, r2, r3
 800400a:	657b      	str	r3, [r7, #84]	; 0x54
 800400c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004014:	f7fc fdd8 	bl	8000bc8 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <UART_SetConfig+0x2d4>)
 800401e:	fba3 2302 	umull	r2, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	011c      	lsls	r4, r3, #4
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004030:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	1891      	adds	r1, r2, r2
 800403e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004040:	415b      	adcs	r3, r3
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004048:	4641      	mov	r1, r8
 800404a:	eb12 0a01 	adds.w	sl, r2, r1
 800404e:	4649      	mov	r1, r9
 8004050:	eb43 0b01 	adc.w	fp, r3, r1
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004068:	4692      	mov	sl, r2
 800406a:	469b      	mov	fp, r3
 800406c:	4643      	mov	r3, r8
 800406e:	eb1a 0303 	adds.w	r3, sl, r3
 8004072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004076:	464b      	mov	r3, r9
 8004078:	eb4b 0303 	adc.w	r3, fp, r3
 800407c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800408c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004094:	460b      	mov	r3, r1
 8004096:	18db      	adds	r3, r3, r3
 8004098:	643b      	str	r3, [r7, #64]	; 0x40
 800409a:	4613      	mov	r3, r2
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	647b      	str	r3, [r7, #68]	; 0x44
 80040a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040aa:	f7fc fd8d 	bl	8000bc8 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <UART_SetConfig+0x2d4>)
 80040b6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2264      	movs	r2, #100	; 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	1acb      	subs	r3, r1, r3
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ca:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <UART_SetConfig+0x2d4>)
 80040cc:	fba3 2302 	umull	r2, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040d8:	441c      	add	r4, r3
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040f4:	415b      	adcs	r3, r3
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040fc:	4641      	mov	r1, r8
 80040fe:	1851      	adds	r1, r2, r1
 8004100:	6339      	str	r1, [r7, #48]	; 0x30
 8004102:	4649      	mov	r1, r9
 8004104:	414b      	adcs	r3, r1
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004114:	4659      	mov	r1, fp
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411e:	4651      	mov	r1, sl
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4642      	mov	r2, r8
 800412a:	189b      	adds	r3, r3, r2
 800412c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004148:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800414c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004150:	460b      	mov	r3, r1
 8004152:	18db      	adds	r3, r3, r3
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	4613      	mov	r3, r2
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004166:	f7fc fd2f 	bl	8000bc8 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <UART_SetConfig+0x2d4>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <UART_SetConfig+0x2d4>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4422      	add	r2, r4
 8004196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004198:	e106      	b.n	80043a8 <UART_SetConfig+0x4d8>
 800419a:	bf00      	nop
 800419c:	40011000 	.word	0x40011000
 80041a0:	40011400 	.word	0x40011400
 80041a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ba:	4642      	mov	r2, r8
 80041bc:	464b      	mov	r3, r9
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	6239      	str	r1, [r7, #32]
 80041c2:	415b      	adcs	r3, r3
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ca:	4641      	mov	r1, r8
 80041cc:	1854      	adds	r4, r2, r1
 80041ce:	4649      	mov	r1, r9
 80041d0:	eb43 0501 	adc.w	r5, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041f0:	464b      	mov	r3, r9
 80041f2:	eb45 0303 	adc.w	r3, r5, r3
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004206:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004216:	4629      	mov	r1, r5
 8004218:	008b      	lsls	r3, r1, #2
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004220:	4621      	mov	r1, r4
 8004222:	008a      	lsls	r2, r1, #2
 8004224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004228:	f7fc fcce 	bl	8000bc8 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b60      	ldr	r3, [pc, #384]	; (80043b4 <UART_SetConfig+0x4e4>)
 8004232:	fba3 2302 	umull	r2, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	011c      	lsls	r4, r3, #4
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004244:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	61b9      	str	r1, [r7, #24]
 8004254:	415b      	adcs	r3, r3
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425c:	4641      	mov	r1, r8
 800425e:	1851      	adds	r1, r2, r1
 8004260:	6139      	str	r1, [r7, #16]
 8004262:	4649      	mov	r1, r9
 8004264:	414b      	adcs	r3, r1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004274:	4659      	mov	r1, fp
 8004276:	00cb      	lsls	r3, r1, #3
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427e:	4651      	mov	r1, sl
 8004280:	00ca      	lsls	r2, r1, #3
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	4603      	mov	r3, r0
 8004288:	4642      	mov	r2, r8
 800428a:	189b      	adds	r3, r3, r2
 800428c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004290:	464b      	mov	r3, r9
 8004292:	460a      	mov	r2, r1
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042b4:	4649      	mov	r1, r9
 80042b6:	008b      	lsls	r3, r1, #2
 80042b8:	4641      	mov	r1, r8
 80042ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042be:	4641      	mov	r1, r8
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042c6:	f7fc fc7f 	bl	8000bc8 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <UART_SetConfig+0x4e4>)
 80042d2:	fba3 2301 	umull	r2, r3, r3, r1
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2264      	movs	r2, #100	; 0x64
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	1acb      	subs	r3, r1, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	3332      	adds	r3, #50	; 0x32
 80042e4:	4a33      	ldr	r2, [pc, #204]	; (80043b4 <UART_SetConfig+0x4e4>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f0:	441c      	add	r4, r3
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	673b      	str	r3, [r7, #112]	; 0x70
 80042fa:	677a      	str	r2, [r7, #116]	; 0x74
 80042fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	415b      	adcs	r3, r3
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6039      	str	r1, [r7, #0]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	66bb      	str	r3, [r7, #104]	; 0x68
 8004342:	464b      	mov	r3, r9
 8004344:	460a      	mov	r2, r1
 8004346:	eb42 0303 	adc.w	r3, r2, r3
 800434a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	663b      	str	r3, [r7, #96]	; 0x60
 8004356:	667a      	str	r2, [r7, #100]	; 0x64
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004364:	4649      	mov	r1, r9
 8004366:	008b      	lsls	r3, r1, #2
 8004368:	4641      	mov	r1, r8
 800436a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436e:	4641      	mov	r1, r8
 8004370:	008a      	lsls	r2, r1, #2
 8004372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004376:	f7fc fc27 	bl	8000bc8 <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <UART_SetConfig+0x4e4>)
 8004380:	fba3 1302 	umull	r1, r3, r3, r2
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	2164      	movs	r1, #100	; 0x64
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	3332      	adds	r3, #50	; 0x32
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <UART_SetConfig+0x4e4>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4422      	add	r2, r4
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043ae:	46bd      	mov	sp, r7
 80043b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b4:	51eb851f 	.word	0x51eb851f

080043b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043b8:	b084      	sub	sp, #16
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	f107 001c 	add.w	r0, r7, #28
 80043c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d122      	bne.n	8004416 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 faa2 	bl	8004954 <USB_CoreReset>
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e01a      	b.n	800444c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa96 	bl	8004954 <USB_CoreReset>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
 800443e:	e005      	b.n	800444c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10b      	bne.n	800446a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f043 0206 	orr.w	r2, r3, #6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004476:	b004      	add	sp, #16
 8004478:	4770      	bx	lr

0800447a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d115      	bne.n	80044ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fd fabc 	bl	8001a48 <HAL_Delay>
      ms++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa2e 	bl	8004938 <USB_GetMode>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d01e      	beq.n	8004520 <USB_SetCurrentMode+0x84>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b31      	cmp	r3, #49	; 0x31
 80044e6:	d9f0      	bls.n	80044ca <USB_SetCurrentMode+0x2e>
 80044e8:	e01a      	b.n	8004520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d115      	bne.n	800451c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044fc:	2001      	movs	r0, #1
 80044fe:	f7fd faa3 	bl	8001a48 <HAL_Delay>
      ms++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa15 	bl	8004938 <USB_GetMode>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <USB_SetCurrentMode+0x84>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b31      	cmp	r3, #49	; 0x31
 8004518:	d9f0      	bls.n	80044fc <USB_SetCurrentMode+0x60>
 800451a:	e001      	b.n	8004520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e005      	b.n	800452c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b32      	cmp	r3, #50	; 0x32
 8004524:	d101      	bne.n	800452a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004534:	b084      	sub	sp, #16
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e009      	b.n	8004568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3340      	adds	r3, #64	; 0x40
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	2200      	movs	r2, #0
 8004560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b0e      	cmp	r3, #14
 800456c:	d9f2      	bls.n	8004554 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11c      	bne.n	80045ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
 80045ac:	e00b      	b.n	80045c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d8:	4619      	mov	r1, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	461a      	mov	r2, r3
 80045e2:	680b      	ldr	r3, [r1, #0]
 80045e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045f2:	2100      	movs	r1, #0
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f965 	bl	80048c4 <USB_SetDevSpeed>
 80045fa:	e008      	b.n	800460e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045fc:	2101      	movs	r1, #1
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f960 	bl	80048c4 <USB_SetDevSpeed>
 8004604:	e003      	b.n	800460e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004606:	2103      	movs	r1, #3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f95b 	bl	80048c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800460e:	2110      	movs	r1, #16
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8f3 	bl	80047fc <USB_FlushTxFifo>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f91f 	bl	8004864 <USB_FlushRxFifo>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e043      	b.n	80046e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004670:	d118      	bne.n	80046a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e013      	b.n	80046b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e008      	b.n	80046b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3301      	adds	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3b7      	bcc.n	800465a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e043      	b.n	8004778 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004706:	d118      	bne.n	800473a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e013      	b.n	800474c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	461a      	mov	r2, r3
 8004732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e008      	b.n	800474c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	2300      	movs	r3, #0
 800474a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3301      	adds	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d3b7      	bcc.n	80046f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f043 0210 	orr.w	r2, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <USB_DevInit+0x2c4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f043 0208 	orr.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f4:	b004      	add	sp, #16
 80047f6:	4770      	bx	lr
 80047f8:	803c3800 	.word	0x803c3800

080047fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <USB_FlushTxFifo+0x64>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e01b      	b.n	8004854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	daf2      	bge.n	800480a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	019b      	lsls	r3, r3, #6
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a08      	ldr	r2, [pc, #32]	; (8004860 <USB_FlushTxFifo+0x64>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e006      	b.n	8004854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b20      	cmp	r3, #32
 8004850:	d0f0      	beq.n	8004834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	00030d40 	.word	0x00030d40

08004864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <USB_FlushRxFifo+0x5c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e018      	b.n	80048b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	daf2      	bge.n	8004870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2210      	movs	r2, #16
 8004892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <USB_FlushRxFifo+0x5c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d0f0      	beq.n	8004894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	00030d40 	.word	0x00030d40

080048c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004910:	f023 0303 	bic.w	r3, r3, #3
 8004914:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0301 	and.w	r3, r3, #1
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <USB_CoreReset+0x64>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e01b      	b.n	80049aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	daf2      	bge.n	8004960 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <USB_CoreReset+0x64>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e006      	b.n	80049aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d0f0      	beq.n	800498a <USB_CoreReset+0x36>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	00030d40 	.word	0x00030d40

080049bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ce:	2b84      	cmp	r3, #132	; 0x84
 80049d0:	d005      	beq.n	80049de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	3303      	adds	r3, #3
 80049dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049f0:	f000 fffc 	bl	80059ec <vTaskStartScheduler>
  
  return osOK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	bd80      	pop	{r7, pc}

080049fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fc:	b089      	sub	sp, #36	; 0x24
 80049fe:	af04      	add	r7, sp, #16
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <osThreadCreate+0x54>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01c      	beq.n	8004a4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685c      	ldr	r4, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691e      	ldr	r6, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff ffc8 	bl	80049bc <makeFreeRtosPriority>
 8004a2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a36:	9202      	str	r2, [sp, #8]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	9100      	str	r1, [sp, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4632      	mov	r2, r6
 8004a40:	4629      	mov	r1, r5
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 fdf4 	bl	8005630 <xTaskCreateStatic>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e01c      	b.n	8004a88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685c      	ldr	r4, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffaa 	bl	80049bc <makeFreeRtosPriority>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	f107 030c 	add.w	r3, r7, #12
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	9200      	str	r2, [sp, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	4632      	mov	r2, r6
 8004a76:	4629      	mov	r1, r5
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fe36 	bl	80056ea <xTaskCreate>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d001      	beq.n	8004a88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <osDelay+0x16>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	e000      	b.n	8004aaa <osDelay+0x18>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 ff6a 	bl	8005984 <vTaskDelay>
  
  return osOK;
 8004ab0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af02      	add	r7, sp, #8
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00f      	beq.n	8004aec <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10a      	bne.n	8004ae8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	9200      	str	r2, [sp, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f000 f93a 	bl	8004d58 <xQueueGenericCreateStatic>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	e016      	b.n	8004b16 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e014      	b.n	8004b16 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d110      	bne.n	8004b14 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004af2:	2203      	movs	r2, #3
 8004af4:	2100      	movs	r1, #0
 8004af6:	2001      	movs	r0, #1
 8004af8:	f000 f9a6 	bl	8004e48 <xQueueGenericCreate>
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <osSemaphoreCreate+0x56>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f9f6 	bl	8004efc <xQueueGenericSend>
      return sema;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	e000      	b.n	8004b16 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004b14:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f103 0208 	add.w	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f103 0208 	add.w	r2, r3, #8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f103 0208 	add.w	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd6:	d103      	bne.n	8004be0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e00c      	b.n	8004bfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3308      	adds	r3, #8
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e002      	b.n	8004bee <vListInsert+0x2e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d2f6      	bcs.n	8004be8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6892      	ldr	r2, [r2, #8]
 8004c48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6852      	ldr	r2, [r2, #4]
 8004c52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d103      	bne.n	8004c66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cb2:	f001 fdff 	bl	80068b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	68f9      	ldr	r1, [r7, #12]
 8004ce6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	22ff      	movs	r2, #255	; 0xff
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d114      	bne.n	8004d32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01a      	beq.n	8004d46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3310      	adds	r3, #16
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f8bb 	bl	8005e90 <xTaskRemoveFromEventList>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d012      	beq.n	8004d46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <xQueueGenericReset+0xcc>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	e009      	b.n	8004d46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3310      	adds	r3, #16
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fef1 	bl	8004b1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3324      	adds	r3, #36	; 0x24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff feec 	bl	8004b1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d46:	f001 fde5 	bl	8006914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d4a:	2301      	movs	r3, #1
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <xQueueGenericCreateStatic+0x52>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <xQueueGenericCreateStatic+0x56>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueGenericCreateStatic+0x58>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	623b      	str	r3, [r7, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <xQueueGenericCreateStatic+0x7e>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <xQueueGenericCreateStatic+0x82>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xQueueGenericCreateStatic+0x84>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61fb      	str	r3, [r7, #28]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004df6:	2348      	movs	r3, #72	; 0x48
 8004df8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b48      	cmp	r3, #72	; 0x48
 8004dfe:	d00a      	beq.n	8004e16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	61bb      	str	r3, [r7, #24]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00d      	beq.n	8004e3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f83f 	bl	8004ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3730      	adds	r7, #48	; 0x30
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	613b      	str	r3, [r7, #16]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3348      	adds	r3, #72	; 0x48
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fe39 	bl	8006af8 <pvPortMalloc>
 8004e86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3348      	adds	r3, #72	; 0x48
 8004e96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea0:	79fa      	ldrb	r2, [r7, #7]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f805 	bl	8004ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
	}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eea:	2101      	movs	r1, #1
 8004eec:	69b8      	ldr	r0, [r7, #24]
 8004eee:	f7ff fecb 	bl	8004c88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xQueueGenericSend+0x32>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <xQueueGenericSend+0x40>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <xQueueGenericSend+0x44>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <xQueueGenericSend+0x46>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <xQueueGenericSend+0x60>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d103      	bne.n	8004f6a <xQueueGenericSend+0x6e>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <xQueueGenericSend+0x72>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <xQueueGenericSend+0x74>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	623b      	str	r3, [r7, #32]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f8a:	f001 f941 	bl	8006210 <xTaskGetSchedulerState>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <xQueueGenericSend+0x9e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <xQueueGenericSend+0xa2>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <xQueueGenericSend+0xa4>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <xQueueGenericSend+0xbe>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	61fb      	str	r3, [r7, #28]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fba:	f001 fc7b 	bl	80068b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <xQueueGenericSend+0xd4>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d129      	bne.n	8005024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd6:	f000 fa41 	bl	800545c <prvCopyDataToQueue>
 8004fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 ff51 	bl	8005e90 <xTaskRemoveFromEventList>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <xQueueGenericSend+0x1f8>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	e00a      	b.n	800501c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800500c:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <xQueueGenericSend+0x1f8>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800501c:	f001 fc7a 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 8005020:	2301      	movs	r3, #1
 8005022:	e063      	b.n	80050ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800502a:	f001 fc73 	bl	8006914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800502e:	2300      	movs	r3, #0
 8005030:	e05c      	b.n	80050ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4618      	mov	r0, r3
 800503e:	f000 ff89 	bl	8005f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005046:	f001 fc65 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800504a:	f000 fd39 	bl	8005ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800504e:	f001 fc31 	bl	80068b4 <vPortEnterCritical>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005058:	b25b      	sxtb	r3, r3
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800505e:	d103      	bne.n	8005068 <xQueueGenericSend+0x16c>
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005074:	d103      	bne.n	800507e <xQueueGenericSend+0x182>
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800507e:	f001 fc49 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005082:	1d3a      	adds	r2, r7, #4
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f000 ff78 	bl	8005f80 <xTaskCheckForTimeOut>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d124      	bne.n	80050e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005098:	f000 fab2 	bl	8005600 <prvIsQueueFull>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	3310      	adds	r3, #16
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fecc 	bl	8005e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050b2:	f000 fa3d 	bl	8005530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050b6:	f000 fd11 	bl	8005adc <xTaskResumeAll>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af7c 	bne.w	8004fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <xQueueGenericSend+0x1f8>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	e772      	b.n	8004fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d6:	f000 fa2b 	bl	8005530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050da:	f000 fcff 	bl	8005adc <xTaskResumeAll>
 80050de:	e76c      	b.n	8004fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050e2:	f000 fa25 	bl	8005530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e6:	f000 fcf9 	bl	8005adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3738      	adds	r7, #56	; 0x38
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08e      	sub	sp, #56	; 0x38
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	623b      	str	r3, [r7, #32]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <xQueueGiveFromISR+0x48>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	61fb      	str	r3, [r7, #28]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <xQueueGiveFromISR+0x58>
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <xQueueGiveFromISR+0x5c>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <xQueueGiveFromISR+0x5e>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <xQueueGiveFromISR+0x78>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	61bb      	str	r3, [r7, #24]
}
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005170:	f001 fc82 	bl	8006a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005174:	f3ef 8211 	mrs	r2, BASEPRI
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	617a      	str	r2, [r7, #20]
 800518a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800518c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519c:	429a      	cmp	r2, r3
 800519e:	d22b      	bcs.n	80051f8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ba:	d112      	bne.n	80051e2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d016      	beq.n	80051f2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	3324      	adds	r3, #36	; 0x24
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fe61 	bl	8005e90 <xTaskRemoveFromEventList>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e007      	b.n	80051f2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051e6:	3301      	adds	r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	b25a      	sxtb	r2, r3
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051f2:	2301      	movs	r3, #1
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
 80051f6:	e001      	b.n	80051fc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005206:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800520a:	4618      	mov	r0, r3
 800520c:	3738      	adds	r7, #56	; 0x38
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08e      	sub	sp, #56	; 0x38
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	623b      	str	r3, [r7, #32]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	61fb      	str	r3, [r7, #28]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005264:	f000 ffd4 	bl	8006210 <xTaskGetSchedulerState>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <xQueueSemaphoreTake+0x60>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <xQueueSemaphoreTake+0x64>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueSemaphoreTake+0x66>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	61bb      	str	r3, [r7, #24]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005294:	f001 fb0e 	bl	80068b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d024      	beq.n	80052ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	1e5a      	subs	r2, r3, #1
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80052b4:	f001 f954 	bl	8006560 <pvTaskIncrementMutexHeldCount>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00f      	beq.n	80052e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	3310      	adds	r3, #16
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fde0 	bl	8005e90 <xTaskRemoveFromEventList>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <xQueueSemaphoreTake+0x214>)
 80052d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052e6:	f001 fb15 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e097      	b.n	800541e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d111      	bne.n	8005318 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	617b      	str	r3, [r7, #20]
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005310:	f001 fb00 	bl	8006914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005314:	2300      	movs	r3, #0
 8005316:	e082      	b.n	800541e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531e:	f107 030c 	add.w	r3, r7, #12
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fe16 	bl	8005f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800532c:	f001 faf2 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005330:	f000 fbc6 	bl	8005ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005334:	f001 fabe 	bl	80068b4 <vPortEnterCritical>
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533e:	b25b      	sxtb	r3, r3
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005344:	d103      	bne.n	800534e <xQueueSemaphoreTake+0x13a>
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005354:	b25b      	sxtb	r3, r3
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535a:	d103      	bne.n	8005364 <xQueueSemaphoreTake+0x150>
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005364:	f001 fad6 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005368:	463a      	mov	r2, r7
 800536a:	f107 030c 	add.w	r3, r7, #12
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fe05 	bl	8005f80 <xTaskCheckForTimeOut>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d132      	bne.n	80053e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800537e:	f000 f929 	bl	80055d4 <prvIsQueueEmpty>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d026      	beq.n	80053d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005390:	f001 fa90 	bl	80068b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 ff57 	bl	800624c <xTaskPriorityInherit>
 800539e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80053a0:	f001 fab8 	bl	8006914 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	3324      	adds	r3, #36	; 0x24
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fd4b 	bl	8005e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053b4:	f000 f8bc 	bl	8005530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053b8:	f000 fb90 	bl	8005adc <xTaskResumeAll>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f47f af68 	bne.w	8005294 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80053c4:	4b18      	ldr	r3, [pc, #96]	; (8005428 <xQueueSemaphoreTake+0x214>)
 80053c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	e75e      	b.n	8005294 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053d8:	f000 f8aa 	bl	8005530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053dc:	f000 fb7e 	bl	8005adc <xTaskResumeAll>
 80053e0:	e758      	b.n	8005294 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053e4:	f000 f8a4 	bl	8005530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053e8:	f000 fb78 	bl	8005adc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053ee:	f000 f8f1 	bl	80055d4 <prvIsQueueEmpty>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f43f af4d 	beq.w	8005294 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005400:	f001 fa58 	bl	80068b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005406:	f000 f811 	bl	800542c <prvGetDisinheritPriorityAfterTimeout>
 800540a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f816 	bl	8006444 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005418:	f001 fa7c 	bl	8006914 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800541c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800541e:	4618      	mov	r0, r3
 8005420:	3738      	adds	r7, #56	; 0x38
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1c3 0307 	rsb	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e001      	b.n	800544e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800544e:	68fb      	ldr	r3, [r7, #12]
	}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d14d      	bne.n	800551e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ff56 	bl	8006338 <xTaskPriorityDisinherit>
 800548c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	e043      	b.n	800551e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d119      	bne.n	80054d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6858      	ldr	r0, [r3, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	461a      	mov	r2, r3
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	f002 fc40 	bl	8007d2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d32b      	bcc.n	800551e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	e026      	b.n	800551e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68d8      	ldr	r0, [r3, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	461a      	mov	r2, r3
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	f002 fc26 	bl	8007d2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	425b      	negs	r3, r3
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d207      	bcs.n	800550c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	425b      	negs	r3, r3
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d105      	bne.n	800551e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005526:	697b      	ldr	r3, [r7, #20]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005538:	f001 f9bc 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005544:	e011      	b.n	800556a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3324      	adds	r3, #36	; 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fc9c 	bl	8005e90 <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800555e:	f000 fd71 	bl	8006044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	3b01      	subs	r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	dce9      	bgt.n	8005546 <prvUnlockQueue+0x16>
 8005572:	e000      	b.n	8005576 <prvUnlockQueue+0x46>
					break;
 8005574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800557e:	f001 f9c9 	bl	8006914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005582:	f001 f997 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800558c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800558e:	e011      	b.n	80055b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d012      	beq.n	80055be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3310      	adds	r3, #16
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fc77 	bl	8005e90 <xTaskRemoveFromEventList>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055a8:	f000 fd4c 	bl	8006044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	dce9      	bgt.n	8005590 <prvUnlockQueue+0x60>
 80055bc:	e000      	b.n	80055c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	22ff      	movs	r2, #255	; 0xff
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055c8:	f001 f9a4 	bl	8006914 <vPortExitCritical>
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055dc:	f001 f96a 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e001      	b.n	80055f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f2:	f001 f98f 	bl	8006914 <vPortExitCritical>

	return xReturn;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005608:	f001 f954 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	429a      	cmp	r2, r3
 8005616:	d102      	bne.n	800561e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e001      	b.n	8005622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005622:	f001 f977 	bl	8006914 <vPortExitCritical>

	return xReturn;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08e      	sub	sp, #56	; 0x38
 8005634:	af04      	add	r7, sp, #16
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	623b      	str	r3, [r7, #32]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xTaskCreateStatic+0x46>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	61fb      	str	r3, [r7, #28]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005676:	23a0      	movs	r3, #160	; 0xa0
 8005678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2ba0      	cmp	r3, #160	; 0xa0
 800567e:	d00a      	beq.n	8005696 <xTaskCreateStatic+0x66>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	61bb      	str	r3, [r7, #24]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005696:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01e      	beq.n	80056dc <xTaskCreateStatic+0xac>
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056b6:	2300      	movs	r3, #0
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	f107 0314 	add.w	r3, r7, #20
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f850 	bl	8005774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056d6:	f000 f8eb 	bl	80058b0 <prvAddNewTaskToReadyList>
 80056da:	e001      	b.n	80056e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e0:	697b      	ldr	r3, [r7, #20]
	}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3728      	adds	r7, #40	; 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08c      	sub	sp, #48	; 0x30
 80056ee:	af04      	add	r7, sp, #16
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f9fa 	bl	8006af8 <pvPortMalloc>
 8005704:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800570c:	20a0      	movs	r0, #160	; 0xa0
 800570e:	f001 f9f3 	bl	8006af8 <pvPortMalloc>
 8005712:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
 8005720:	e005      	b.n	800572e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f001 fab4 	bl	8006c90 <vPortFree>
 8005728:	e001      	b.n	800572e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d017      	beq.n	8005764 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	2300      	movs	r3, #0
 8005740:	9303      	str	r3, [sp, #12]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	9302      	str	r3, [sp, #8]
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f80e 	bl	8005774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005758:	69f8      	ldr	r0, [r7, #28]
 800575a:	f000 f8a9 	bl	80058b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800575e:	2301      	movs	r3, #1
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e002      	b.n	800576a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005768:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800576a:	69bb      	ldr	r3, [r7, #24]
	}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800578c:	3b01      	subs	r3, #1
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f023 0307 	bic.w	r3, r3, #7
 800579a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	617b      	str	r3, [r7, #20]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01f      	beq.n	8005802 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	e012      	b.n	80057ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	7819      	ldrb	r1, [r3, #0]
 80057d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	3334      	adds	r3, #52	; 0x34
 80057d8:	460a      	mov	r2, r1
 80057da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d006      	beq.n	80057f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3301      	adds	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	2b0f      	cmp	r3, #15
 80057f2:	d9e9      	bls.n	80057c8 <prvInitialiseNewTask+0x54>
 80057f4:	e000      	b.n	80057f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80057f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005800:	e003      	b.n	800580a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b06      	cmp	r3, #6
 800580e:	d901      	bls.n	8005814 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005810:	2306      	movs	r3, #6
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	2200      	movs	r2, #0
 8005824:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff f997 	bl	8004b5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	3318      	adds	r3, #24
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff f992 	bl	8004b5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	f1c3 0207 	rsb	r2, r3, #7
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	2200      	movs	r2, #0
 800585c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	334c      	adds	r3, #76	; 0x4c
 8005864:	224c      	movs	r2, #76	; 0x4c
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f002 f98b 	bl	8007b84 <memset>
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <prvInitialiseNewTask+0x130>)
 8005872:	651a      	str	r2, [r3, #80]	; 0x50
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <prvInitialiseNewTask+0x134>)
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	4a0b      	ldr	r2, [pc, #44]	; (80058ac <prvInitialiseNewTask+0x138>)
 800587e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	69b8      	ldr	r0, [r7, #24]
 8005886:	f000 fee5 	bl	8006654 <pxPortInitialiseStack>
 800588a:	4602      	mov	r2, r0
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800589c:	bf00      	nop
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	200047d8 	.word	0x200047d8
 80058a8:	20004840 	.word	0x20004840
 80058ac:	200048a8 	.word	0x200048a8

080058b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058b8:	f000 fffc 	bl	80068b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <prvAddNewTaskToReadyList+0xb8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	4a29      	ldr	r2, [pc, #164]	; (8005968 <prvAddNewTaskToReadyList+0xb8>)
 80058c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058c6:	4b29      	ldr	r3, [pc, #164]	; (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ce:	4a27      	ldr	r2, [pc, #156]	; (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058d4:	4b24      	ldr	r3, [pc, #144]	; (8005968 <prvAddNewTaskToReadyList+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d110      	bne.n	80058fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058dc:	f000 fbd6 	bl	800608c <prvInitialiseTaskLists>
 80058e0:	e00d      	b.n	80058fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058e2:	4b23      	ldr	r3, [pc, #140]	; (8005970 <prvAddNewTaskToReadyList+0xc0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d802      	bhi.n	80058fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058f8:	4a1c      	ldr	r2, [pc, #112]	; (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <prvAddNewTaskToReadyList+0xc4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <prvAddNewTaskToReadyList+0xc4>)
 8005906:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	2201      	movs	r2, #1
 800590e:	409a      	lsls	r2, r3
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <prvAddNewTaskToReadyList+0xc8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <prvAddNewTaskToReadyList+0xc8>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a15      	ldr	r2, [pc, #84]	; (800597c <prvAddNewTaskToReadyList+0xcc>)
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7ff f921 	bl	8004b78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005936:	f000 ffed 	bl	8006914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800593a:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <prvAddNewTaskToReadyList+0xc0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <prvAddNewTaskToReadyList+0xbc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d207      	bcs.n	8005960 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <prvAddNewTaskToReadyList+0xd0>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000b84 	.word	0x20000b84
 800596c:	20000a84 	.word	0x20000a84
 8005970:	20000b90 	.word	0x20000b90
 8005974:	20000ba0 	.word	0x20000ba0
 8005978:	20000b8c 	.word	0x20000b8c
 800597c:	20000a88 	.word	0x20000a88
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d017      	beq.n	80059c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <vTaskDelay+0x60>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <vTaskDelay+0x30>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	60bb      	str	r3, [r7, #8]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059b4:	f000 f884 	bl	8005ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059b8:	2100      	movs	r1, #0
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fde4 	bl	8006588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059c0:	f000 f88c 	bl	8005adc <xTaskResumeAll>
 80059c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <vTaskDelay+0x64>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000bac 	.word	0x20000bac
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059fa:	463a      	mov	r2, r7
 80059fc:	1d39      	adds	r1, r7, #4
 80059fe:	f107 0308 	add.w	r3, r7, #8
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fb fa5e 	bl	8000ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	9202      	str	r2, [sp, #8]
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	2300      	movs	r3, #0
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	2300      	movs	r3, #0
 8005a18:	460a      	mov	r2, r1
 8005a1a:	4921      	ldr	r1, [pc, #132]	; (8005aa0 <vTaskStartScheduler+0xb4>)
 8005a1c:	4821      	ldr	r0, [pc, #132]	; (8005aa4 <vTaskStartScheduler+0xb8>)
 8005a1e:	f7ff fe07 	bl	8005630 <xTaskCreateStatic>
 8005a22:	4603      	mov	r3, r0
 8005a24:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <vTaskStartScheduler+0xbc>)
 8005a26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a28:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <vTaskStartScheduler+0xbc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e001      	b.n	8005a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d11b      	bne.n	8005a78 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <vTaskStartScheduler+0xc0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	334c      	adds	r3, #76	; 0x4c
 8005a5a:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <vTaskStartScheduler+0xc4>)
 8005a5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <vTaskStartScheduler+0xc8>)
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <vTaskStartScheduler+0xcc>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <vTaskStartScheduler+0xd0>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a72:	f000 fe7d 	bl	8006770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a76:	e00e      	b.n	8005a96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7e:	d10a      	bne.n	8005a96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <vTaskStartScheduler+0xa8>
}
 8005a96:	bf00      	nop
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08009a70 	.word	0x08009a70
 8005aa4:	0800605d 	.word	0x0800605d
 8005aa8:	20000ba8 	.word	0x20000ba8
 8005aac:	20000a84 	.word	0x20000a84
 8005ab0:	20000068 	.word	0x20000068
 8005ab4:	20000ba4 	.word	0x20000ba4
 8005ab8:	20000b90 	.word	0x20000b90
 8005abc:	20000b88 	.word	0x20000b88

08005ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <vTaskSuspendAll+0x18>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	4a03      	ldr	r2, [pc, #12]	; (8005ad8 <vTaskSuspendAll+0x18>)
 8005acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20000bac 	.word	0x20000bac

08005adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005aea:	4b41      	ldr	r3, [pc, #260]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	603b      	str	r3, [r7, #0]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b08:	f000 fed4 	bl	80068b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b0c:	4b38      	ldr	r3, [pc, #224]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	4a37      	ldr	r2, [pc, #220]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <xTaskResumeAll+0x114>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d161      	bne.n	8005be2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b1e:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <xTaskResumeAll+0x118>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d05d      	beq.n	8005be2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b26:	e02e      	b.n	8005b86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b28:	4b33      	ldr	r3, [pc, #204]	; (8005bf8 <xTaskResumeAll+0x11c>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3318      	adds	r3, #24
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff f87c 	bl	8004c32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff f877 	bl	8004c32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	2201      	movs	r2, #1
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <xTaskResumeAll+0x120>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <xTaskResumeAll+0x120>)
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <xTaskResumeAll+0x124>)
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7ff f803 	bl	8004b78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b76:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <xTaskResumeAll+0x128>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d302      	bcc.n	8005b86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b80:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <xTaskResumeAll+0x12c>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b86:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <xTaskResumeAll+0x11c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1cc      	bne.n	8005b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b94:	f000 fb1c 	bl	80061d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <xTaskResumeAll+0x130>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ba4:	f000 f836 	bl	8005c14 <xTaskIncrementTick>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005bae:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <xTaskResumeAll+0x12c>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f1      	bne.n	8005ba4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <xTaskResumeAll+0x130>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xTaskResumeAll+0x12c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <xTaskResumeAll+0x134>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005be2:	f000 fe97 	bl	8006914 <vPortExitCritical>

	return xAlreadyYielded;
 8005be6:	68bb      	ldr	r3, [r7, #8]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000bac 	.word	0x20000bac
 8005bf4:	20000b84 	.word	0x20000b84
 8005bf8:	20000b44 	.word	0x20000b44
 8005bfc:	20000b8c 	.word	0x20000b8c
 8005c00:	20000a88 	.word	0x20000a88
 8005c04:	20000a84 	.word	0x20000a84
 8005c08:	20000b98 	.word	0x20000b98
 8005c0c:	20000b94 	.word	0x20000b94
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1e:	4b4e      	ldr	r3, [pc, #312]	; (8005d58 <xTaskIncrementTick+0x144>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 808e 	bne.w	8005d44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c28:	4b4c      	ldr	r3, [pc, #304]	; (8005d5c <xTaskIncrementTick+0x148>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c30:	4a4a      	ldr	r2, [pc, #296]	; (8005d5c <xTaskIncrementTick+0x148>)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d120      	bne.n	8005c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c3c:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	603b      	str	r3, [r7, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xTaskIncrementTick+0x46>
 8005c5c:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a3e      	ldr	r2, [pc, #248]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4a3e      	ldr	r2, [pc, #248]	; (8005d64 <xTaskIncrementTick+0x150>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <xTaskIncrementTick+0x154>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	4a3c      	ldr	r2, [pc, #240]	; (8005d68 <xTaskIncrementTick+0x154>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	f000 faa9 	bl	80061d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d348      	bcc.n	8005d1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c88:	4b35      	ldr	r3, [pc, #212]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c92:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c98:	601a      	str	r2, [r3, #0]
					break;
 8005c9a:	e03e      	b.n	8005d1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <xTaskIncrementTick+0x14c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d203      	bcs.n	8005cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <xTaskIncrementTick+0x158>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cba:	e02e      	b.n	8005d1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe ffb6 	bl	8004c32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3318      	adds	r3, #24
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe ffad 	bl	8004c32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <xTaskIncrementTick+0x15c>)
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <xTaskIncrementTick+0x160>)
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4610      	mov	r0, r2
 8005d02:	f7fe ff39 	bl	8004b78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <xTaskIncrementTick+0x164>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d3b9      	bcc.n	8005c88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d18:	e7b6      	b.n	8005c88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <xTaskIncrementTick+0x164>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4914      	ldr	r1, [pc, #80]	; (8005d74 <xTaskIncrementTick+0x160>)
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d901      	bls.n	8005d36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <xTaskIncrementTick+0x168>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e004      	b.n	8005d4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <xTaskIncrementTick+0x16c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <xTaskIncrementTick+0x16c>)
 8005d4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000bac 	.word	0x20000bac
 8005d5c:	20000b88 	.word	0x20000b88
 8005d60:	20000b3c 	.word	0x20000b3c
 8005d64:	20000b40 	.word	0x20000b40
 8005d68:	20000b9c 	.word	0x20000b9c
 8005d6c:	20000ba4 	.word	0x20000ba4
 8005d70:	20000b8c 	.word	0x20000b8c
 8005d74:	20000a88 	.word	0x20000a88
 8005d78:	20000a84 	.word	0x20000a84
 8005d7c:	20000b98 	.word	0x20000b98
 8005d80:	20000b94 	.word	0x20000b94

08005d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d8a:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <vTaskSwitchContext+0xac>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d92:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <vTaskSwitchContext+0xb0>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d98:	e044      	b.n	8005e24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <vTaskSwitchContext+0xb0>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da0:	4b25      	ldr	r3, [pc, #148]	; (8005e38 <vTaskSwitchContext+0xb4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	fab3 f383 	clz	r3, r3
 8005dac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	f1c3 031f 	rsb	r3, r3, #31
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	4921      	ldr	r1, [pc, #132]	; (8005e3c <vTaskSwitchContext+0xb8>)
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <vTaskSwitchContext+0x5a>
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <vTaskSwitchContext+0xb8>)
 8005dec:	4413      	add	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3308      	adds	r3, #8
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d104      	bne.n	8005e10 <vTaskSwitchContext+0x8c>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <vTaskSwitchContext+0xbc>)
 8005e18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <vTaskSwitchContext+0xbc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	334c      	adds	r3, #76	; 0x4c
 8005e20:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <vTaskSwitchContext+0xc0>)
 8005e22:	6013      	str	r3, [r2, #0]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000bac 	.word	0x20000bac
 8005e34:	20000b98 	.word	0x20000b98
 8005e38:	20000b8c 	.word	0x20000b8c
 8005e3c:	20000a88 	.word	0x20000a88
 8005e40:	20000a84 	.word	0x20000a84
 8005e44:	20000068 	.word	0x20000068

08005e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	60fb      	str	r3, [r7, #12]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <vTaskPlaceOnEventList+0x44>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3318      	adds	r3, #24
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fe fea2 	bl	8004bc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	6838      	ldr	r0, [r7, #0]
 8005e80:	f000 fb82 	bl	8006588 <prvAddCurrentTaskToDelayedList>
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000a84 	.word	0x20000a84

08005e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	3318      	adds	r3, #24
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe feb6 	bl	8004c32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <xTaskRemoveFromEventList+0xac>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d11c      	bne.n	8005f08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe fead 	bl	8004c32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <xTaskRemoveFromEventList+0xb0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <xTaskRemoveFromEventList+0xb0>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <xTaskRemoveFromEventList+0xb4>)
 8005ef8:	441a      	add	r2, r3
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f7fe fe39 	bl	8004b78 <vListInsertEnd>
 8005f06:	e005      	b.n	8005f14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	480e      	ldr	r0, [pc, #56]	; (8005f48 <xTaskRemoveFromEventList+0xb8>)
 8005f10:	f7fe fe32 	bl	8004b78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <xTaskRemoveFromEventList+0xbc>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d905      	bls.n	8005f2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <xTaskRemoveFromEventList+0xc0>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e001      	b.n	8005f32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f32:	697b      	ldr	r3, [r7, #20]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000bac 	.word	0x20000bac
 8005f40:	20000b8c 	.word	0x20000b8c
 8005f44:	20000a88 	.word	0x20000a88
 8005f48:	20000b44 	.word	0x20000b44
 8005f4c:	20000a84 	.word	0x20000a84
 8005f50:	20000b98 	.word	0x20000b98

08005f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <vTaskInternalSetTimeOutState+0x24>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <vTaskInternalSetTimeOutState+0x28>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000b9c 	.word	0x20000b9c
 8005f7c:	20000b88 	.word	0x20000b88

08005f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fc2:	f000 fc77 	bl	80068b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <xTaskCheckForTimeOut+0xbc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fde:	d102      	bne.n	8005fe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e023      	b.n	800602e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b15      	ldr	r3, [pc, #84]	; (8006040 <xTaskCheckForTimeOut+0xc0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d007      	beq.n	8006002 <xTaskCheckForTimeOut+0x82>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	e015      	b.n	800602e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	d20b      	bcs.n	8006024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ff9b 	bl	8005f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	e004      	b.n	800602e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800602e:	f000 fc71 	bl	8006914 <vPortExitCritical>

	return xReturn;
 8006032:	69fb      	ldr	r3, [r7, #28]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000b88 	.word	0x20000b88
 8006040:	20000b9c 	.word	0x20000b9c

08006044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <vTaskMissedYield+0x14>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
}
 800604e:	bf00      	nop
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	20000b98 	.word	0x20000b98

0800605c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006064:	f000 f852 	bl	800610c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <prvIdleTask+0x28>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d9f9      	bls.n	8006064 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <prvIdleTask+0x2c>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006080:	e7f0      	b.n	8006064 <prvIdleTask+0x8>
 8006082:	bf00      	nop
 8006084:	20000a88 	.word	0x20000a88
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	e00c      	b.n	80060b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4a12      	ldr	r2, [pc, #72]	; (80060ec <prvInitialiseTaskLists+0x60>)
 80060a4:	4413      	add	r3, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fd39 	bl	8004b1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3301      	adds	r3, #1
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d9ef      	bls.n	8006098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060b8:	480d      	ldr	r0, [pc, #52]	; (80060f0 <prvInitialiseTaskLists+0x64>)
 80060ba:	f7fe fd30 	bl	8004b1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060be:	480d      	ldr	r0, [pc, #52]	; (80060f4 <prvInitialiseTaskLists+0x68>)
 80060c0:	f7fe fd2d 	bl	8004b1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c4:	480c      	ldr	r0, [pc, #48]	; (80060f8 <prvInitialiseTaskLists+0x6c>)
 80060c6:	f7fe fd2a 	bl	8004b1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060ca:	480c      	ldr	r0, [pc, #48]	; (80060fc <prvInitialiseTaskLists+0x70>)
 80060cc:	f7fe fd27 	bl	8004b1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060d0:	480b      	ldr	r0, [pc, #44]	; (8006100 <prvInitialiseTaskLists+0x74>)
 80060d2:	f7fe fd24 	bl	8004b1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <prvInitialiseTaskLists+0x78>)
 80060d8:	4a05      	ldr	r2, [pc, #20]	; (80060f0 <prvInitialiseTaskLists+0x64>)
 80060da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <prvInitialiseTaskLists+0x7c>)
 80060de:	4a05      	ldr	r2, [pc, #20]	; (80060f4 <prvInitialiseTaskLists+0x68>)
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000a88 	.word	0x20000a88
 80060f0:	20000b14 	.word	0x20000b14
 80060f4:	20000b28 	.word	0x20000b28
 80060f8:	20000b44 	.word	0x20000b44
 80060fc:	20000b58 	.word	0x20000b58
 8006100:	20000b70 	.word	0x20000b70
 8006104:	20000b3c 	.word	0x20000b3c
 8006108:	20000b40 	.word	0x20000b40

0800610c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006112:	e019      	b.n	8006148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006114:	f000 fbce 	bl	80068b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006118:	4b10      	ldr	r3, [pc, #64]	; (800615c <prvCheckTasksWaitingTermination+0x50>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe fd84 	bl	8004c32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <prvCheckTasksWaitingTermination+0x54>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3b01      	subs	r3, #1
 8006130:	4a0b      	ldr	r2, [pc, #44]	; (8006160 <prvCheckTasksWaitingTermination+0x54>)
 8006132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvCheckTasksWaitingTermination+0x58>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3b01      	subs	r3, #1
 800613a:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <prvCheckTasksWaitingTermination+0x58>)
 800613c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800613e:	f000 fbe9 	bl	8006914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f810 	bl	8006168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <prvCheckTasksWaitingTermination+0x58>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e1      	bne.n	8006114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000b58 	.word	0x20000b58
 8006160:	20000b84 	.word	0x20000b84
 8006164:	20000b6c 	.word	0x20000b6c

08006168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	334c      	adds	r3, #76	; 0x4c
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fd21 	bl	8007bbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006180:	2b00      	cmp	r3, #0
 8006182:	d108      	bne.n	8006196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fd81 	bl	8006c90 <vPortFree>
				vPortFree( pxTCB );
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fd7e 	bl	8006c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006194:	e018      	b.n	80061c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800619c:	2b01      	cmp	r3, #1
 800619e:	d103      	bne.n	80061a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fd75 	bl	8006c90 <vPortFree>
	}
 80061a6:	e00f      	b.n	80061c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d00a      	beq.n	80061c8 <prvDeleteTCB+0x60>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60fb      	str	r3, [r7, #12]
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <prvDeleteTCB+0x5e>
	}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvResetNextTaskUnblockTime+0x38>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <prvResetNextTaskUnblockTime+0x3c>)
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061e8:	e008      	b.n	80061fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <prvResetNextTaskUnblockTime+0x38>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a04      	ldr	r2, [pc, #16]	; (800620c <prvResetNextTaskUnblockTime+0x3c>)
 80061fa:	6013      	str	r3, [r2, #0]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	20000b3c 	.word	0x20000b3c
 800620c:	20000ba4 	.word	0x20000ba4

08006210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <xTaskGetSchedulerState+0x34>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800621e:	2301      	movs	r3, #1
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	e008      	b.n	8006236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006224:	4b08      	ldr	r3, [pc, #32]	; (8006248 <xTaskGetSchedulerState+0x38>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800622c:	2302      	movs	r3, #2
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	e001      	b.n	8006236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006232:	2300      	movs	r3, #0
 8006234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006236:	687b      	ldr	r3, [r7, #4]
	}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20000b90 	.word	0x20000b90
 8006248:	20000bac 	.word	0x20000bac

0800624c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d05e      	beq.n	8006320 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4b31      	ldr	r3, [pc, #196]	; (800632c <xTaskPriorityInherit+0xe0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	429a      	cmp	r2, r3
 800626e:	d24e      	bcs.n	800630e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	db06      	blt.n	8006286 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	4b2c      	ldr	r3, [pc, #176]	; (800632c <xTaskPriorityInherit+0xe0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	f1c3 0207 	rsb	r2, r3, #7
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4a26      	ldr	r2, [pc, #152]	; (8006330 <xTaskPriorityInherit+0xe4>)
 8006298:	4413      	add	r3, r2
 800629a:	4299      	cmp	r1, r3
 800629c:	d12f      	bne.n	80062fe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe fcc5 	bl	8004c32 <uxListRemove>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	2201      	movs	r2, #1
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	43da      	mvns	r2, r3
 80062ba:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <xTaskPriorityInherit+0xe8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4013      	ands	r3, r2
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <xTaskPriorityInherit+0xe8>)
 80062c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <xTaskPriorityInherit+0xe0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	2201      	movs	r2, #1
 80062d4:	409a      	lsls	r2, r3
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <xTaskPriorityInherit+0xe8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4313      	orrs	r3, r2
 80062dc:	4a15      	ldr	r2, [pc, #84]	; (8006334 <xTaskPriorityInherit+0xe8>)
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4a10      	ldr	r2, [pc, #64]	; (8006330 <xTaskPriorityInherit+0xe4>)
 80062ee:	441a      	add	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f7fe fc3e 	bl	8004b78 <vListInsertEnd>
 80062fc:	e004      	b.n	8006308 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062fe:	4b0b      	ldr	r3, [pc, #44]	; (800632c <xTaskPriorityInherit+0xe0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e008      	b.n	8006320 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <xTaskPriorityInherit+0xe0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	429a      	cmp	r2, r3
 800631a:	d201      	bcs.n	8006320 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006320:	68fb      	ldr	r3, [r7, #12]
	}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000a84 	.word	0x20000a84
 8006330:	20000a88 	.word	0x20000a88
 8006334:	20000b8c 	.word	0x20000b8c

08006338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d06e      	beq.n	800642c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800634e:	4b3a      	ldr	r3, [pc, #232]	; (8006438 <xTaskPriorityDisinherit+0x100>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	429a      	cmp	r2, r3
 8006356:	d00a      	beq.n	800636e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	60fb      	str	r3, [r7, #12]
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60bb      	str	r3, [r7, #8]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006390:	1e5a      	subs	r2, r3, #1
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	429a      	cmp	r2, r3
 80063a0:	d044      	beq.n	800642c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d140      	bne.n	800642c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fc3f 	bl	8004c32 <uxListRemove>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d115      	bne.n	80063e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	491f      	ldr	r1, [pc, #124]	; (800643c <xTaskPriorityDisinherit+0x104>)
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTaskPriorityDisinherit+0xae>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	2201      	movs	r2, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43da      	mvns	r2, r3
 80063dc:	4b18      	ldr	r3, [pc, #96]	; (8006440 <xTaskPriorityDisinherit+0x108>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4013      	ands	r3, r2
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <xTaskPriorityDisinherit+0x108>)
 80063e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	f1c3 0207 	rsb	r2, r3, #7
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	2201      	movs	r2, #1
 8006400:	409a      	lsls	r2, r3
 8006402:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <xTaskPriorityDisinherit+0x108>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4313      	orrs	r3, r2
 8006408:	4a0d      	ldr	r2, [pc, #52]	; (8006440 <xTaskPriorityDisinherit+0x108>)
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4a08      	ldr	r2, [pc, #32]	; (800643c <xTaskPriorityDisinherit+0x104>)
 800641a:	441a      	add	r2, r3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fe fba8 	bl	8004b78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006428:	2301      	movs	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800642c:	697b      	ldr	r3, [r7, #20]
	}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000a84 	.word	0x20000a84
 800643c:	20000a88 	.word	0x20000a88
 8006440:	20000b8c 	.word	0x20000b8c

08006444 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d077      	beq.n	800654c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d902      	bls.n	800648a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e002      	b.n	8006490 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	429a      	cmp	r2, r3
 8006498:	d058      	beq.n	800654c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d153      	bne.n	800654c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d10a      	bne.n	80064c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60bb      	str	r3, [r7, #8]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	db04      	blt.n	80064e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f1c3 0207 	rsb	r2, r3, #7
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	6959      	ldr	r1, [r3, #20]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4a19      	ldr	r2, [pc, #100]	; (8006558 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80064f2:	4413      	add	r3, r2
 80064f4:	4299      	cmp	r1, r3
 80064f6:	d129      	bne.n	800654c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fb98 	bl	8004c32 <uxListRemove>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	2201      	movs	r2, #1
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43da      	mvns	r2, r3
 8006514:	4b11      	ldr	r3, [pc, #68]	; (800655c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4013      	ands	r3, r2
 800651a:	4a10      	ldr	r2, [pc, #64]	; (800655c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800651c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	2201      	movs	r2, #1
 8006524:	409a      	lsls	r2, r3
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4313      	orrs	r3, r2
 800652c:	4a0b      	ldr	r2, [pc, #44]	; (800655c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4a06      	ldr	r2, [pc, #24]	; (8006558 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800653e:	441a      	add	r2, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fe fb16 	bl	8004b78 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800654c:	bf00      	nop
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000a84 	.word	0x20000a84
 8006558:	20000a88 	.word	0x20000a88
 800655c:	20000b8c 	.word	0x20000b8c

08006560 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <pvTaskIncrementMutexHeldCount+0x24>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <pvTaskIncrementMutexHeldCount+0x24>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006572:	3201      	adds	r2, #1
 8006574:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006576:	4b03      	ldr	r3, [pc, #12]	; (8006584 <pvTaskIncrementMutexHeldCount+0x24>)
 8006578:	681b      	ldr	r3, [r3, #0]
	}
 800657a:	4618      	mov	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	20000a84 	.word	0x20000a84

08006588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006592:	4b29      	ldr	r3, [pc, #164]	; (8006638 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006598:	4b28      	ldr	r3, [pc, #160]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3304      	adds	r3, #4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fb47 	bl	8004c32 <uxListRemove>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	2201      	movs	r2, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43da      	mvns	r2, r3
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4013      	ands	r3, r2
 80065be:	4a20      	ldr	r2, [pc, #128]	; (8006640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065c8:	d10a      	bne.n	80065e0 <prvAddCurrentTaskToDelayedList+0x58>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d0:	4b1a      	ldr	r3, [pc, #104]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	481a      	ldr	r0, [pc, #104]	; (8006644 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065da:	f7fe facd 	bl	8004b78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065de:	e026      	b.n	800662e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065e8:	4b14      	ldr	r3, [pc, #80]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d209      	bcs.n	800660c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <prvAddCurrentTaskToDelayedList+0xc0>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe fadb 	bl	8004bc0 <vListInsert>
}
 800660a:	e010      	b.n	800662e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <prvAddCurrentTaskToDelayedList+0xc4>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe fad1 	bl	8004bc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800661e:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d202      	bcs.n	800662e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <prvAddCurrentTaskToDelayedList+0xc8>)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6013      	str	r3, [r2, #0]
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000b88 	.word	0x20000b88
 800663c:	20000a84 	.word	0x20000a84
 8006640:	20000b8c 	.word	0x20000b8c
 8006644:	20000b70 	.word	0x20000b70
 8006648:	20000b40 	.word	0x20000b40
 800664c:	20000b3c 	.word	0x20000b3c
 8006650:	20000ba4 	.word	0x20000ba4

08006654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3b04      	subs	r3, #4
 8006664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800666c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3b04      	subs	r3, #4
 8006672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3b04      	subs	r3, #4
 8006682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006684:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <pxPortInitialiseStack+0x64>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3b14      	subs	r3, #20
 800668e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b04      	subs	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f06f 0202 	mvn.w	r2, #2
 80066a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b20      	subs	r3, #32
 80066a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	080066bd 	.word	0x080066bd

080066bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <prvTaskExitError+0x54>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ce:	d00a      	beq.n	80066e6 <prvTaskExitError+0x2a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <prvTaskExitError+0x28>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066fa:	bf00      	nop
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0fc      	beq.n	80066fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	2000000c 	.word	0x2000000c
	...

08006720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <pxCurrentTCBConst2>)
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f380 8809 	msr	PSP, r0
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8811 	msr	BASEPRI, r0
 800673a:	4770      	bx	lr
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst2>:
 8006740:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <prvPortStartFirstTask+0x24>)
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f380 8808 	msr	MSP, r0
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8814 	msr	CONTROL, r0
 800675a:	b662      	cpsie	i
 800675c:	b661      	cpsie	f
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	df00      	svc	0
 8006768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800676a:	bf00      	nop
 800676c:	e000ed08 	.word	0xe000ed08

08006770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006776:	4b46      	ldr	r3, [pc, #280]	; (8006890 <xPortStartScheduler+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a46      	ldr	r2, [pc, #280]	; (8006894 <xPortStartScheduler+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10a      	bne.n	8006796 <xPortStartScheduler+0x26>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <xPortStartScheduler+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x46>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <xPortStartScheduler+0x12c>)
 80067b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <xPortStartScheduler+0x130>)
 80067dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067de:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e0:	2207      	movs	r2, #7
 80067e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067e4:	e009      	b.n	80067fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <xPortStartScheduler+0x134>)
 80067ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d0ef      	beq.n	80067e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f1c3 0307 	rsb	r3, r3, #7
 800680e:	2b04      	cmp	r3, #4
 8006810:	d00a      	beq.n	8006828 <xPortStartScheduler+0xb8>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006828:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <xPortStartScheduler+0x134>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <xPortStartScheduler+0x134>)
 8006830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <xPortStartScheduler+0x134>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800683a:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <xPortStartScheduler+0x134>)
 800683c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <xPortStartScheduler+0x138>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <xPortStartScheduler+0x138>)
 800684c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <xPortStartScheduler+0x138>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <xPortStartScheduler+0x138>)
 8006858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800685c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800685e:	f000 f8dd 	bl	8006a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <xPortStartScheduler+0x13c>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006868:	f000 f8fc 	bl	8006a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <xPortStartScheduler+0x140>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <xPortStartScheduler+0x140>)
 8006872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006878:	f7ff ff66 	bl	8006748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800687c:	f7ff fa82 	bl	8005d84 <vTaskSwitchContext>
	prvTaskExitError();
 8006880:	f7ff ff1c 	bl	80066bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed00 	.word	0xe000ed00
 8006894:	410fc271 	.word	0x410fc271
 8006898:	410fc270 	.word	0x410fc270
 800689c:	e000e400 	.word	0xe000e400
 80068a0:	20000bb0 	.word	0x20000bb0
 80068a4:	20000bb4 	.word	0x20000bb4
 80068a8:	e000ed20 	.word	0xe000ed20
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	e000ef34 	.word	0xe000ef34

080068b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <vPortEnterCritical+0x58>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a0d      	ldr	r2, [pc, #52]	; (800690c <vPortEnterCritical+0x58>)
 80068d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <vPortEnterCritical+0x58>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10f      	bne.n	8006900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortEnterCritical+0x5c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <vPortEnterCritical+0x4c>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	603b      	str	r3, [r7, #0]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vPortEnterCritical+0x4a>
	}
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	2000000c 	.word	0x2000000c
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <vPortExitCritical+0x50>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <vPortExitCritical+0x24>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <vPortExitCritical+0x50>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3b01      	subs	r3, #1
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <vPortExitCritical+0x50>)
 8006940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <vPortExitCritical+0x50>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <vPortExitCritical+0x42>
 800694a:	2300      	movs	r3, #0
 800694c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c
	...

08006970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006970:	f3ef 8009 	mrs	r0, PSP
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <pxCurrentTCBConst>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	f01e 0f10 	tst.w	lr, #16
 8006980:	bf08      	it	eq
 8006982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	6010      	str	r0, [r2, #0]
 800698c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006994:	f380 8811 	msr	BASEPRI, r0
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f7ff f9f0 	bl	8005d84 <vTaskSwitchContext>
 80069a4:	f04f 0000 	mov.w	r0, #0
 80069a8:	f380 8811 	msr	BASEPRI, r0
 80069ac:	bc09      	pop	{r0, r3}
 80069ae:	6819      	ldr	r1, [r3, #0]
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b6:	f01e 0f10 	tst.w	lr, #16
 80069ba:	bf08      	it	eq
 80069bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069c0:	f380 8809 	msr	PSP, r0
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst>:
 80069d0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069f2:	f7ff f90f 	bl	8005c14 <xTaskIncrementTick>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <SysTick_Handler+0x40>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <vPortSetupTimerInterrupt+0x38>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <vPortSetupTimerInterrupt+0x3c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <vPortSetupTimerInterrupt+0x40>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <vPortSetupTimerInterrupt+0x44>)
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000e010 	.word	0xe000e010
 8006a54:	e000e018 	.word	0xe000e018
 8006a58:	20000000 	.word	0x20000000
 8006a5c:	10624dd3 	.word	0x10624dd3
 8006a60:	e000e014 	.word	0xe000e014

08006a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a74 <vPortEnableVFP+0x10>
 8006a68:	6801      	ldr	r1, [r0, #0]
 8006a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a6e:	6001      	str	r1, [r0, #0]
 8006a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a72:	bf00      	nop
 8006a74:	e000ed88 	.word	0xe000ed88

08006a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a7e:	f3ef 8305 	mrs	r3, IPSR
 8006a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	d914      	bls.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a8a:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <vPortValidateInterruptPriority+0x70>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <vPortValidateInterruptPriority+0x74>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	7afa      	ldrb	r2, [r7, #11]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d20a      	bcs.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <vPortValidateInterruptPriority+0x78>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <vPortValidateInterruptPriority+0x7c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d90a      	bls.n	8006ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	603b      	str	r3, [r7, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <vPortValidateInterruptPriority+0x60>
	}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e000e3f0 	.word	0xe000e3f0
 8006aec:	20000bb0 	.word	0x20000bb0
 8006af0:	e000ed0c 	.word	0xe000ed0c
 8006af4:	20000bb4 	.word	0x20000bb4

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b04:	f7fe ffdc 	bl	8005ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b5b      	ldr	r3, [pc, #364]	; (8006c78 <pvPortMalloc+0x180>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f920 	bl	8006d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <pvPortMalloc+0x184>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8093 	bne.w	8006c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01d      	beq.n	8006b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b28:	2208      	movs	r2, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <pvPortMalloc+0x6c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06e      	beq.n	8006c48 <pvPortMalloc+0x150>
 8006b6a:	4b45      	ldr	r3, [pc, #276]	; (8006c80 <pvPortMalloc+0x188>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d869      	bhi.n	8006c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0xa4>
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <pvPortMalloc+0x180>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d050      	beq.n	8006c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d91f      	bls.n	8006c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	613b      	str	r3, [r7, #16]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c02:	69b8      	ldr	r0, [r7, #24]
 8006c04:	f000 f908 	bl	8006e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <pvPortMalloc+0x188>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <pvPortMalloc+0x188>)
 8006c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <pvPortMalloc+0x188>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <pvPortMalloc+0x190>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <pvPortMalloc+0x188>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <pvPortMalloc+0x190>)
 8006c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x184>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <pvPortMalloc+0x194>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <pvPortMalloc+0x194>)
 8006c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c48:	f7fe ff48 	bl	8005adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <pvPortMalloc+0x174>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <pvPortMalloc+0x172>
	return pvReturn;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200047c0 	.word	0x200047c0
 8006c7c:	200047d4 	.word	0x200047d4
 8006c80:	200047c4 	.word	0x200047c4
 8006c84:	200047b8 	.word	0x200047b8
 8006c88:	200047c8 	.word	0x200047c8
 8006c8c:	200047cc 	.word	0x200047cc

08006c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d04d      	beq.n	8006d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	425b      	negs	r3, r3
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <vPortFree+0xb8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <vPortFree+0x44>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <vPortFree+0x62>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60bb      	str	r3, [r7, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <vPortFree+0xb8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01e      	beq.n	8006d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <vPortFree+0xb8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d18:	f7fe fed2 	bl	8005ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <vPortFree+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <vPortFree+0xbc>)
 8006d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 f874 	bl	8006e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <vPortFree+0xc0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	4a06      	ldr	r2, [pc, #24]	; (8006d50 <vPortFree+0xc0>)
 8006d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d3a:	f7fe fecf 	bl	8005adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200047d4 	.word	0x200047d4
 8006d4c:	200047c4 	.word	0x200047c4
 8006d50:	200047d0 	.word	0x200047d0

08006d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <prvHeapInit+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <prvHeapInit+0xac>)
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <prvHeapInit+0xb0>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <prvHeapInit+0xb0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da0:	2208      	movs	r2, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <prvHeapInit+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <prvHeapInit+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <prvHeapInit+0xb4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <prvHeapInit+0xb4>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <prvHeapInit+0xb8>)
 8006de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <prvHeapInit+0xbc>)
 8006dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <prvHeapInit+0xc0>)
 8006dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000bb8 	.word	0x20000bb8
 8006e04:	200047b8 	.word	0x200047b8
 8006e08:	200047c0 	.word	0x200047c0
 8006e0c:	200047c8 	.word	0x200047c8
 8006e10:	200047c4 	.word	0x200047c4
 8006e14:	200047d4 	.word	0x200047d4

08006e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e002      	b.n	8006e2c <prvInsertBlockIntoFreeList+0x14>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d8f7      	bhi.n	8006e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d108      	bne.n	8006e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d118      	bne.n	8006ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d00d      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e008      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e003      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	200047b8 	.word	0x200047b8
 8006ec8:	200047c0 	.word	0x200047c0

08006ecc <__cvt>:
 8006ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	ec55 4b10 	vmov	r4, r5, d0
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	460e      	mov	r6, r1
 8006ed8:	4619      	mov	r1, r3
 8006eda:	462b      	mov	r3, r5
 8006edc:	bfbb      	ittet	lt
 8006ede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ee2:	461d      	movlt	r5, r3
 8006ee4:	2300      	movge	r3, #0
 8006ee6:	232d      	movlt	r3, #45	; 0x2d
 8006ee8:	700b      	strb	r3, [r1, #0]
 8006eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ef0:	4691      	mov	r9, r2
 8006ef2:	f023 0820 	bic.w	r8, r3, #32
 8006ef6:	bfbc      	itt	lt
 8006ef8:	4622      	movlt	r2, r4
 8006efa:	4614      	movlt	r4, r2
 8006efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f00:	d005      	beq.n	8006f0e <__cvt+0x42>
 8006f02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f06:	d100      	bne.n	8006f0a <__cvt+0x3e>
 8006f08:	3601      	adds	r6, #1
 8006f0a:	2102      	movs	r1, #2
 8006f0c:	e000      	b.n	8006f10 <__cvt+0x44>
 8006f0e:	2103      	movs	r1, #3
 8006f10:	ab03      	add	r3, sp, #12
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	ab02      	add	r3, sp, #8
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	ec45 4b10 	vmov	d0, r4, r5
 8006f1c:	4653      	mov	r3, sl
 8006f1e:	4632      	mov	r2, r6
 8006f20:	f000 ff9a 	bl	8007e58 <_dtoa_r>
 8006f24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f28:	4607      	mov	r7, r0
 8006f2a:	d102      	bne.n	8006f32 <__cvt+0x66>
 8006f2c:	f019 0f01 	tst.w	r9, #1
 8006f30:	d022      	beq.n	8006f78 <__cvt+0xac>
 8006f32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f36:	eb07 0906 	add.w	r9, r7, r6
 8006f3a:	d110      	bne.n	8006f5e <__cvt+0x92>
 8006f3c:	783b      	ldrb	r3, [r7, #0]
 8006f3e:	2b30      	cmp	r3, #48	; 0x30
 8006f40:	d10a      	bne.n	8006f58 <__cvt+0x8c>
 8006f42:	2200      	movs	r2, #0
 8006f44:	2300      	movs	r3, #0
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 fdcd 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f4e:	b918      	cbnz	r0, 8006f58 <__cvt+0x8c>
 8006f50:	f1c6 0601 	rsb	r6, r6, #1
 8006f54:	f8ca 6000 	str.w	r6, [sl]
 8006f58:	f8da 3000 	ldr.w	r3, [sl]
 8006f5c:	4499      	add	r9, r3
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2300      	movs	r3, #0
 8006f62:	4620      	mov	r0, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7f9 fdbf 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f6a:	b108      	cbz	r0, 8006f70 <__cvt+0xa4>
 8006f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f70:	2230      	movs	r2, #48	; 0x30
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	454b      	cmp	r3, r9
 8006f76:	d307      	bcc.n	8006f88 <__cvt+0xbc>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f7c:	1bdb      	subs	r3, r3, r7
 8006f7e:	4638      	mov	r0, r7
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	b004      	add	sp, #16
 8006f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f88:	1c59      	adds	r1, r3, #1
 8006f8a:	9103      	str	r1, [sp, #12]
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e7f0      	b.n	8006f72 <__cvt+0xa6>

08006f90 <__exponent>:
 8006f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f92:	4603      	mov	r3, r0
 8006f94:	2900      	cmp	r1, #0
 8006f96:	bfb8      	it	lt
 8006f98:	4249      	neglt	r1, r1
 8006f9a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f9e:	bfb4      	ite	lt
 8006fa0:	222d      	movlt	r2, #45	; 0x2d
 8006fa2:	222b      	movge	r2, #43	; 0x2b
 8006fa4:	2909      	cmp	r1, #9
 8006fa6:	7042      	strb	r2, [r0, #1]
 8006fa8:	dd2a      	ble.n	8007000 <__exponent+0x70>
 8006faa:	f10d 0207 	add.w	r2, sp, #7
 8006fae:	4617      	mov	r7, r2
 8006fb0:	260a      	movs	r6, #10
 8006fb2:	4694      	mov	ip, r2
 8006fb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fb8:	fb06 1415 	mls	r4, r6, r5, r1
 8006fbc:	3430      	adds	r4, #48	; 0x30
 8006fbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	2c63      	cmp	r4, #99	; 0x63
 8006fc6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006fca:	4629      	mov	r1, r5
 8006fcc:	dcf1      	bgt.n	8006fb2 <__exponent+0x22>
 8006fce:	3130      	adds	r1, #48	; 0x30
 8006fd0:	f1ac 0402 	sub.w	r4, ip, #2
 8006fd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fd8:	1c41      	adds	r1, r0, #1
 8006fda:	4622      	mov	r2, r4
 8006fdc:	42ba      	cmp	r2, r7
 8006fde:	d30a      	bcc.n	8006ff6 <__exponent+0x66>
 8006fe0:	f10d 0209 	add.w	r2, sp, #9
 8006fe4:	eba2 020c 	sub.w	r2, r2, ip
 8006fe8:	42bc      	cmp	r4, r7
 8006fea:	bf88      	it	hi
 8006fec:	2200      	movhi	r2, #0
 8006fee:	4413      	add	r3, r2
 8006ff0:	1a18      	subs	r0, r3, r0
 8006ff2:	b003      	add	sp, #12
 8006ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ffa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ffe:	e7ed      	b.n	8006fdc <__exponent+0x4c>
 8007000:	2330      	movs	r3, #48	; 0x30
 8007002:	3130      	adds	r1, #48	; 0x30
 8007004:	7083      	strb	r3, [r0, #2]
 8007006:	70c1      	strb	r1, [r0, #3]
 8007008:	1d03      	adds	r3, r0, #4
 800700a:	e7f1      	b.n	8006ff0 <__exponent+0x60>

0800700c <_printf_float>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	ed2d 8b02 	vpush	{d8}
 8007014:	b08d      	sub	sp, #52	; 0x34
 8007016:	460c      	mov	r4, r1
 8007018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800701c:	4616      	mov	r6, r2
 800701e:	461f      	mov	r7, r3
 8007020:	4605      	mov	r5, r0
 8007022:	f000 fdb7 	bl	8007b94 <_localeconv_r>
 8007026:	f8d0 a000 	ldr.w	sl, [r0]
 800702a:	4650      	mov	r0, sl
 800702c:	f7f9 f930 	bl	8000290 <strlen>
 8007030:	2300      	movs	r3, #0
 8007032:	930a      	str	r3, [sp, #40]	; 0x28
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	9305      	str	r3, [sp, #20]
 8007038:	f8d8 3000 	ldr.w	r3, [r8]
 800703c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007040:	3307      	adds	r3, #7
 8007042:	f023 0307 	bic.w	r3, r3, #7
 8007046:	f103 0208 	add.w	r2, r3, #8
 800704a:	f8c8 2000 	str.w	r2, [r8]
 800704e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	f8cd 8018 	str.w	r8, [sp, #24]
 800705c:	ee08 0a10 	vmov	s16, r0
 8007060:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007068:	4b9e      	ldr	r3, [pc, #632]	; (80072e4 <_printf_float+0x2d8>)
 800706a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800706e:	f7f9 fd6d 	bl	8000b4c <__aeabi_dcmpun>
 8007072:	bb88      	cbnz	r0, 80070d8 <_printf_float+0xcc>
 8007074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007078:	4b9a      	ldr	r3, [pc, #616]	; (80072e4 <_printf_float+0x2d8>)
 800707a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707e:	f7f9 fd47 	bl	8000b10 <__aeabi_dcmple>
 8007082:	bb48      	cbnz	r0, 80070d8 <_printf_float+0xcc>
 8007084:	2200      	movs	r2, #0
 8007086:	2300      	movs	r3, #0
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 fd36 	bl	8000afc <__aeabi_dcmplt>
 8007090:	b110      	cbz	r0, 8007098 <_printf_float+0x8c>
 8007092:	232d      	movs	r3, #45	; 0x2d
 8007094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007098:	4a93      	ldr	r2, [pc, #588]	; (80072e8 <_printf_float+0x2dc>)
 800709a:	4b94      	ldr	r3, [pc, #592]	; (80072ec <_printf_float+0x2e0>)
 800709c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070a0:	bf94      	ite	ls
 80070a2:	4690      	movls	r8, r2
 80070a4:	4698      	movhi	r8, r3
 80070a6:	2303      	movs	r3, #3
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	9b05      	ldr	r3, [sp, #20]
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	f04f 0900 	mov.w	r9, #0
 80070b6:	9700      	str	r7, [sp, #0]
 80070b8:	4633      	mov	r3, r6
 80070ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f9da 	bl	8007478 <_printf_common>
 80070c4:	3001      	adds	r0, #1
 80070c6:	f040 8090 	bne.w	80071ea <_printf_float+0x1de>
 80070ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ce:	b00d      	add	sp, #52	; 0x34
 80070d0:	ecbd 8b02 	vpop	{d8}
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 fd34 	bl	8000b4c <__aeabi_dcmpun>
 80070e4:	b140      	cbz	r0, 80070f8 <_printf_float+0xec>
 80070e6:	464b      	mov	r3, r9
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfbc      	itt	lt
 80070ec:	232d      	movlt	r3, #45	; 0x2d
 80070ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070f2:	4a7f      	ldr	r2, [pc, #508]	; (80072f0 <_printf_float+0x2e4>)
 80070f4:	4b7f      	ldr	r3, [pc, #508]	; (80072f4 <_printf_float+0x2e8>)
 80070f6:	e7d1      	b.n	800709c <_printf_float+0x90>
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070fe:	9206      	str	r2, [sp, #24]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	d13f      	bne.n	8007184 <_printf_float+0x178>
 8007104:	2306      	movs	r3, #6
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	6861      	ldr	r1, [r4, #4]
 800710c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007110:	2300      	movs	r3, #0
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	ab0a      	add	r3, sp, #40	; 0x28
 8007116:	e9cd b301 	strd	fp, r3, [sp, #4]
 800711a:	ab09      	add	r3, sp, #36	; 0x24
 800711c:	ec49 8b10 	vmov	d0, r8, r9
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	6022      	str	r2, [r4, #0]
 8007124:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007128:	4628      	mov	r0, r5
 800712a:	f7ff fecf 	bl	8006ecc <__cvt>
 800712e:	9b06      	ldr	r3, [sp, #24]
 8007130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007132:	2b47      	cmp	r3, #71	; 0x47
 8007134:	4680      	mov	r8, r0
 8007136:	d108      	bne.n	800714a <_printf_float+0x13e>
 8007138:	1cc8      	adds	r0, r1, #3
 800713a:	db02      	blt.n	8007142 <_printf_float+0x136>
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	4299      	cmp	r1, r3
 8007140:	dd41      	ble.n	80071c6 <_printf_float+0x1ba>
 8007142:	f1ab 0302 	sub.w	r3, fp, #2
 8007146:	fa5f fb83 	uxtb.w	fp, r3
 800714a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800714e:	d820      	bhi.n	8007192 <_printf_float+0x186>
 8007150:	3901      	subs	r1, #1
 8007152:	465a      	mov	r2, fp
 8007154:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007158:	9109      	str	r1, [sp, #36]	; 0x24
 800715a:	f7ff ff19 	bl	8006f90 <__exponent>
 800715e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007160:	1813      	adds	r3, r2, r0
 8007162:	2a01      	cmp	r2, #1
 8007164:	4681      	mov	r9, r0
 8007166:	6123      	str	r3, [r4, #16]
 8007168:	dc02      	bgt.n	8007170 <_printf_float+0x164>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	07d2      	lsls	r2, r2, #31
 800716e:	d501      	bpl.n	8007174 <_printf_float+0x168>
 8007170:	3301      	adds	r3, #1
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007178:	2b00      	cmp	r3, #0
 800717a:	d09c      	beq.n	80070b6 <_printf_float+0xaa>
 800717c:	232d      	movs	r3, #45	; 0x2d
 800717e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007182:	e798      	b.n	80070b6 <_printf_float+0xaa>
 8007184:	9a06      	ldr	r2, [sp, #24]
 8007186:	2a47      	cmp	r2, #71	; 0x47
 8007188:	d1be      	bne.n	8007108 <_printf_float+0xfc>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1bc      	bne.n	8007108 <_printf_float+0xfc>
 800718e:	2301      	movs	r3, #1
 8007190:	e7b9      	b.n	8007106 <_printf_float+0xfa>
 8007192:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007196:	d118      	bne.n	80071ca <_printf_float+0x1be>
 8007198:	2900      	cmp	r1, #0
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	dd0b      	ble.n	80071b6 <_printf_float+0x1aa>
 800719e:	6121      	str	r1, [r4, #16]
 80071a0:	b913      	cbnz	r3, 80071a8 <_printf_float+0x19c>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	07d0      	lsls	r0, r2, #31
 80071a6:	d502      	bpl.n	80071ae <_printf_float+0x1a2>
 80071a8:	3301      	adds	r3, #1
 80071aa:	440b      	add	r3, r1
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80071b0:	f04f 0900 	mov.w	r9, #0
 80071b4:	e7de      	b.n	8007174 <_printf_float+0x168>
 80071b6:	b913      	cbnz	r3, 80071be <_printf_float+0x1b2>
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	07d2      	lsls	r2, r2, #31
 80071bc:	d501      	bpl.n	80071c2 <_printf_float+0x1b6>
 80071be:	3302      	adds	r3, #2
 80071c0:	e7f4      	b.n	80071ac <_printf_float+0x1a0>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e7f2      	b.n	80071ac <_printf_float+0x1a0>
 80071c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071cc:	4299      	cmp	r1, r3
 80071ce:	db05      	blt.n	80071dc <_printf_float+0x1d0>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	6121      	str	r1, [r4, #16]
 80071d4:	07d8      	lsls	r0, r3, #31
 80071d6:	d5ea      	bpl.n	80071ae <_printf_float+0x1a2>
 80071d8:	1c4b      	adds	r3, r1, #1
 80071da:	e7e7      	b.n	80071ac <_printf_float+0x1a0>
 80071dc:	2900      	cmp	r1, #0
 80071de:	bfd4      	ite	le
 80071e0:	f1c1 0202 	rsble	r2, r1, #2
 80071e4:	2201      	movgt	r2, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	e7e0      	b.n	80071ac <_printf_float+0x1a0>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	055a      	lsls	r2, r3, #21
 80071ee:	d407      	bmi.n	8007200 <_printf_float+0x1f4>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	4642      	mov	r2, r8
 80071f4:	4631      	mov	r1, r6
 80071f6:	4628      	mov	r0, r5
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	d12c      	bne.n	8007258 <_printf_float+0x24c>
 80071fe:	e764      	b.n	80070ca <_printf_float+0xbe>
 8007200:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007204:	f240 80e0 	bls.w	80073c8 <_printf_float+0x3bc>
 8007208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800720c:	2200      	movs	r2, #0
 800720e:	2300      	movs	r3, #0
 8007210:	f7f9 fc6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007214:	2800      	cmp	r0, #0
 8007216:	d034      	beq.n	8007282 <_printf_float+0x276>
 8007218:	4a37      	ldr	r2, [pc, #220]	; (80072f8 <_printf_float+0x2ec>)
 800721a:	2301      	movs	r3, #1
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f af51 	beq.w	80070ca <_printf_float+0xbe>
 8007228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722c:	429a      	cmp	r2, r3
 800722e:	db02      	blt.n	8007236 <_printf_float+0x22a>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	07d8      	lsls	r0, r3, #31
 8007234:	d510      	bpl.n	8007258 <_printf_float+0x24c>
 8007236:	ee18 3a10 	vmov	r3, s16
 800723a:	4652      	mov	r2, sl
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af41 	beq.w	80070ca <_printf_float+0xbe>
 8007248:	f04f 0800 	mov.w	r8, #0
 800724c:	f104 091a 	add.w	r9, r4, #26
 8007250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007252:	3b01      	subs	r3, #1
 8007254:	4543      	cmp	r3, r8
 8007256:	dc09      	bgt.n	800726c <_printf_float+0x260>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	079b      	lsls	r3, r3, #30
 800725c:	f100 8107 	bmi.w	800746e <_printf_float+0x462>
 8007260:	68e0      	ldr	r0, [r4, #12]
 8007262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007264:	4298      	cmp	r0, r3
 8007266:	bfb8      	it	lt
 8007268:	4618      	movlt	r0, r3
 800726a:	e730      	b.n	80070ce <_printf_float+0xc2>
 800726c:	2301      	movs	r3, #1
 800726e:	464a      	mov	r2, r9
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f af27 	beq.w	80070ca <_printf_float+0xbe>
 800727c:	f108 0801 	add.w	r8, r8, #1
 8007280:	e7e6      	b.n	8007250 <_printf_float+0x244>
 8007282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc39      	bgt.n	80072fc <_printf_float+0x2f0>
 8007288:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <_printf_float+0x2ec>)
 800728a:	2301      	movs	r3, #1
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f af19 	beq.w	80070ca <_printf_float+0xbe>
 8007298:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800729c:	4313      	orrs	r3, r2
 800729e:	d102      	bne.n	80072a6 <_printf_float+0x29a>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	07d9      	lsls	r1, r3, #31
 80072a4:	d5d8      	bpl.n	8007258 <_printf_float+0x24c>
 80072a6:	ee18 3a10 	vmov	r3, s16
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af09 	beq.w	80070ca <_printf_float+0xbe>
 80072b8:	f04f 0900 	mov.w	r9, #0
 80072bc:	f104 0a1a 	add.w	sl, r4, #26
 80072c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c2:	425b      	negs	r3, r3
 80072c4:	454b      	cmp	r3, r9
 80072c6:	dc01      	bgt.n	80072cc <_printf_float+0x2c0>
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	e792      	b.n	80071f2 <_printf_float+0x1e6>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4652      	mov	r2, sl
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f aef7 	beq.w	80070ca <_printf_float+0xbe>
 80072dc:	f109 0901 	add.w	r9, r9, #1
 80072e0:	e7ee      	b.n	80072c0 <_printf_float+0x2b4>
 80072e2:	bf00      	nop
 80072e4:	7fefffff 	.word	0x7fefffff
 80072e8:	08009a90 	.word	0x08009a90
 80072ec:	08009a94 	.word	0x08009a94
 80072f0:	08009a98 	.word	0x08009a98
 80072f4:	08009a9c 	.word	0x08009a9c
 80072f8:	08009aa0 	.word	0x08009aa0
 80072fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007300:	429a      	cmp	r2, r3
 8007302:	bfa8      	it	ge
 8007304:	461a      	movge	r2, r3
 8007306:	2a00      	cmp	r2, #0
 8007308:	4691      	mov	r9, r2
 800730a:	dc37      	bgt.n	800737c <_printf_float+0x370>
 800730c:	f04f 0b00 	mov.w	fp, #0
 8007310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007314:	f104 021a 	add.w	r2, r4, #26
 8007318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	eba3 0309 	sub.w	r3, r3, r9
 8007320:	455b      	cmp	r3, fp
 8007322:	dc33      	bgt.n	800738c <_printf_float+0x380>
 8007324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007328:	429a      	cmp	r2, r3
 800732a:	db3b      	blt.n	80073a4 <_printf_float+0x398>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07da      	lsls	r2, r3, #31
 8007330:	d438      	bmi.n	80073a4 <_printf_float+0x398>
 8007332:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007336:	eba2 0903 	sub.w	r9, r2, r3
 800733a:	9b05      	ldr	r3, [sp, #20]
 800733c:	1ad2      	subs	r2, r2, r3
 800733e:	4591      	cmp	r9, r2
 8007340:	bfa8      	it	ge
 8007342:	4691      	movge	r9, r2
 8007344:	f1b9 0f00 	cmp.w	r9, #0
 8007348:	dc35      	bgt.n	80073b6 <_printf_float+0x3aa>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007352:	f104 0a1a 	add.w	sl, r4, #26
 8007356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	eba3 0309 	sub.w	r3, r3, r9
 8007360:	4543      	cmp	r3, r8
 8007362:	f77f af79 	ble.w	8007258 <_printf_float+0x24c>
 8007366:	2301      	movs	r3, #1
 8007368:	4652      	mov	r2, sl
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f aeaa 	beq.w	80070ca <_printf_float+0xbe>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	e7ec      	b.n	8007356 <_printf_float+0x34a>
 800737c:	4613      	mov	r3, r2
 800737e:	4631      	mov	r1, r6
 8007380:	4642      	mov	r2, r8
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d1c0      	bne.n	800730c <_printf_float+0x300>
 800738a:	e69e      	b.n	80070ca <_printf_float+0xbe>
 800738c:	2301      	movs	r3, #1
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	9205      	str	r2, [sp, #20]
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f ae97 	beq.w	80070ca <_printf_float+0xbe>
 800739c:	9a05      	ldr	r2, [sp, #20]
 800739e:	f10b 0b01 	add.w	fp, fp, #1
 80073a2:	e7b9      	b.n	8007318 <_printf_float+0x30c>
 80073a4:	ee18 3a10 	vmov	r3, s16
 80073a8:	4652      	mov	r2, sl
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	d1be      	bne.n	8007332 <_printf_float+0x326>
 80073b4:	e689      	b.n	80070ca <_printf_float+0xbe>
 80073b6:	9a05      	ldr	r2, [sp, #20]
 80073b8:	464b      	mov	r3, r9
 80073ba:	4442      	add	r2, r8
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	d1c1      	bne.n	800734a <_printf_float+0x33e>
 80073c6:	e680      	b.n	80070ca <_printf_float+0xbe>
 80073c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ca:	2a01      	cmp	r2, #1
 80073cc:	dc01      	bgt.n	80073d2 <_printf_float+0x3c6>
 80073ce:	07db      	lsls	r3, r3, #31
 80073d0:	d53a      	bpl.n	8007448 <_printf_float+0x43c>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4642      	mov	r2, r8
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f ae74 	beq.w	80070ca <_printf_float+0xbe>
 80073e2:	ee18 3a10 	vmov	r3, s16
 80073e6:	4652      	mov	r2, sl
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	f43f ae6b 	beq.w	80070ca <_printf_float+0xbe>
 80073f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007400:	f7f9 fb72 	bl	8000ae8 <__aeabi_dcmpeq>
 8007404:	b9d8      	cbnz	r0, 800743e <_printf_float+0x432>
 8007406:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800740a:	f108 0201 	add.w	r2, r8, #1
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	d10e      	bne.n	8007436 <_printf_float+0x42a>
 8007418:	e657      	b.n	80070ca <_printf_float+0xbe>
 800741a:	2301      	movs	r3, #1
 800741c:	4652      	mov	r2, sl
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f ae50 	beq.w	80070ca <_printf_float+0xbe>
 800742a:	f108 0801 	add.w	r8, r8, #1
 800742e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007430:	3b01      	subs	r3, #1
 8007432:	4543      	cmp	r3, r8
 8007434:	dcf1      	bgt.n	800741a <_printf_float+0x40e>
 8007436:	464b      	mov	r3, r9
 8007438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800743c:	e6da      	b.n	80071f4 <_printf_float+0x1e8>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f104 0a1a 	add.w	sl, r4, #26
 8007446:	e7f2      	b.n	800742e <_printf_float+0x422>
 8007448:	2301      	movs	r3, #1
 800744a:	4642      	mov	r2, r8
 800744c:	e7df      	b.n	800740e <_printf_float+0x402>
 800744e:	2301      	movs	r3, #1
 8007450:	464a      	mov	r2, r9
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae36 	beq.w	80070ca <_printf_float+0xbe>
 800745e:	f108 0801 	add.w	r8, r8, #1
 8007462:	68e3      	ldr	r3, [r4, #12]
 8007464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007466:	1a5b      	subs	r3, r3, r1
 8007468:	4543      	cmp	r3, r8
 800746a:	dcf0      	bgt.n	800744e <_printf_float+0x442>
 800746c:	e6f8      	b.n	8007260 <_printf_float+0x254>
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	f104 0919 	add.w	r9, r4, #25
 8007476:	e7f4      	b.n	8007462 <_printf_float+0x456>

08007478 <_printf_common>:
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	4616      	mov	r6, r2
 800747e:	4699      	mov	r9, r3
 8007480:	688a      	ldr	r2, [r1, #8]
 8007482:	690b      	ldr	r3, [r1, #16]
 8007484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007488:	4293      	cmp	r3, r2
 800748a:	bfb8      	it	lt
 800748c:	4613      	movlt	r3, r2
 800748e:	6033      	str	r3, [r6, #0]
 8007490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007494:	4607      	mov	r7, r0
 8007496:	460c      	mov	r4, r1
 8007498:	b10a      	cbz	r2, 800749e <_printf_common+0x26>
 800749a:	3301      	adds	r3, #1
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	0699      	lsls	r1, r3, #26
 80074a2:	bf42      	ittt	mi
 80074a4:	6833      	ldrmi	r3, [r6, #0]
 80074a6:	3302      	addmi	r3, #2
 80074a8:	6033      	strmi	r3, [r6, #0]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	f015 0506 	ands.w	r5, r5, #6
 80074b0:	d106      	bne.n	80074c0 <_printf_common+0x48>
 80074b2:	f104 0a19 	add.w	sl, r4, #25
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	6832      	ldr	r2, [r6, #0]
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	42ab      	cmp	r3, r5
 80074be:	dc26      	bgt.n	800750e <_printf_common+0x96>
 80074c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c4:	1e13      	subs	r3, r2, #0
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	bf18      	it	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	0692      	lsls	r2, r2, #26
 80074ce:	d42b      	bmi.n	8007528 <_printf_common+0xb0>
 80074d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d4:	4649      	mov	r1, r9
 80074d6:	4638      	mov	r0, r7
 80074d8:	47c0      	blx	r8
 80074da:	3001      	adds	r0, #1
 80074dc:	d01e      	beq.n	800751c <_printf_common+0xa4>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	f003 0306 	and.w	r3, r3, #6
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	bf02      	ittt	eq
 80074ea:	68e5      	ldreq	r5, [r4, #12]
 80074ec:	6833      	ldreq	r3, [r6, #0]
 80074ee:	1aed      	subeq	r5, r5, r3
 80074f0:	68a3      	ldr	r3, [r4, #8]
 80074f2:	bf0c      	ite	eq
 80074f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f8:	2500      	movne	r5, #0
 80074fa:	4293      	cmp	r3, r2
 80074fc:	bfc4      	itt	gt
 80074fe:	1a9b      	subgt	r3, r3, r2
 8007500:	18ed      	addgt	r5, r5, r3
 8007502:	2600      	movs	r6, #0
 8007504:	341a      	adds	r4, #26
 8007506:	42b5      	cmp	r5, r6
 8007508:	d11a      	bne.n	8007540 <_printf_common+0xc8>
 800750a:	2000      	movs	r0, #0
 800750c:	e008      	b.n	8007520 <_printf_common+0xa8>
 800750e:	2301      	movs	r3, #1
 8007510:	4652      	mov	r2, sl
 8007512:	4649      	mov	r1, r9
 8007514:	4638      	mov	r0, r7
 8007516:	47c0      	blx	r8
 8007518:	3001      	adds	r0, #1
 800751a:	d103      	bne.n	8007524 <_printf_common+0xac>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	3501      	adds	r5, #1
 8007526:	e7c6      	b.n	80074b6 <_printf_common+0x3e>
 8007528:	18e1      	adds	r1, r4, r3
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	2030      	movs	r0, #48	; 0x30
 800752e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007532:	4422      	add	r2, r4
 8007534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800753c:	3302      	adds	r3, #2
 800753e:	e7c7      	b.n	80074d0 <_printf_common+0x58>
 8007540:	2301      	movs	r3, #1
 8007542:	4622      	mov	r2, r4
 8007544:	4649      	mov	r1, r9
 8007546:	4638      	mov	r0, r7
 8007548:	47c0      	blx	r8
 800754a:	3001      	adds	r0, #1
 800754c:	d0e6      	beq.n	800751c <_printf_common+0xa4>
 800754e:	3601      	adds	r6, #1
 8007550:	e7d9      	b.n	8007506 <_printf_common+0x8e>
	...

08007554 <_printf_i>:
 8007554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007558:	7e0f      	ldrb	r7, [r1, #24]
 800755a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800755c:	2f78      	cmp	r7, #120	; 0x78
 800755e:	4691      	mov	r9, r2
 8007560:	4680      	mov	r8, r0
 8007562:	460c      	mov	r4, r1
 8007564:	469a      	mov	sl, r3
 8007566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800756a:	d807      	bhi.n	800757c <_printf_i+0x28>
 800756c:	2f62      	cmp	r7, #98	; 0x62
 800756e:	d80a      	bhi.n	8007586 <_printf_i+0x32>
 8007570:	2f00      	cmp	r7, #0
 8007572:	f000 80d4 	beq.w	800771e <_printf_i+0x1ca>
 8007576:	2f58      	cmp	r7, #88	; 0x58
 8007578:	f000 80c0 	beq.w	80076fc <_printf_i+0x1a8>
 800757c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007584:	e03a      	b.n	80075fc <_printf_i+0xa8>
 8007586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800758a:	2b15      	cmp	r3, #21
 800758c:	d8f6      	bhi.n	800757c <_printf_i+0x28>
 800758e:	a101      	add	r1, pc, #4	; (adr r1, 8007594 <_printf_i+0x40>)
 8007590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007594:	080075ed 	.word	0x080075ed
 8007598:	08007601 	.word	0x08007601
 800759c:	0800757d 	.word	0x0800757d
 80075a0:	0800757d 	.word	0x0800757d
 80075a4:	0800757d 	.word	0x0800757d
 80075a8:	0800757d 	.word	0x0800757d
 80075ac:	08007601 	.word	0x08007601
 80075b0:	0800757d 	.word	0x0800757d
 80075b4:	0800757d 	.word	0x0800757d
 80075b8:	0800757d 	.word	0x0800757d
 80075bc:	0800757d 	.word	0x0800757d
 80075c0:	08007705 	.word	0x08007705
 80075c4:	0800762d 	.word	0x0800762d
 80075c8:	080076bf 	.word	0x080076bf
 80075cc:	0800757d 	.word	0x0800757d
 80075d0:	0800757d 	.word	0x0800757d
 80075d4:	08007727 	.word	0x08007727
 80075d8:	0800757d 	.word	0x0800757d
 80075dc:	0800762d 	.word	0x0800762d
 80075e0:	0800757d 	.word	0x0800757d
 80075e4:	0800757d 	.word	0x0800757d
 80075e8:	080076c7 	.word	0x080076c7
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	1d1a      	adds	r2, r3, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	602a      	str	r2, [r5, #0]
 80075f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075fc:	2301      	movs	r3, #1
 80075fe:	e09f      	b.n	8007740 <_printf_i+0x1ec>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	0607      	lsls	r7, r0, #24
 8007606:	f103 0104 	add.w	r1, r3, #4
 800760a:	6029      	str	r1, [r5, #0]
 800760c:	d501      	bpl.n	8007612 <_printf_i+0xbe>
 800760e:	681e      	ldr	r6, [r3, #0]
 8007610:	e003      	b.n	800761a <_printf_i+0xc6>
 8007612:	0646      	lsls	r6, r0, #25
 8007614:	d5fb      	bpl.n	800760e <_printf_i+0xba>
 8007616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800761a:	2e00      	cmp	r6, #0
 800761c:	da03      	bge.n	8007626 <_printf_i+0xd2>
 800761e:	232d      	movs	r3, #45	; 0x2d
 8007620:	4276      	negs	r6, r6
 8007622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007626:	485a      	ldr	r0, [pc, #360]	; (8007790 <_printf_i+0x23c>)
 8007628:	230a      	movs	r3, #10
 800762a:	e012      	b.n	8007652 <_printf_i+0xfe>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	1d19      	adds	r1, r3, #4
 8007632:	6029      	str	r1, [r5, #0]
 8007634:	0605      	lsls	r5, r0, #24
 8007636:	d501      	bpl.n	800763c <_printf_i+0xe8>
 8007638:	681e      	ldr	r6, [r3, #0]
 800763a:	e002      	b.n	8007642 <_printf_i+0xee>
 800763c:	0641      	lsls	r1, r0, #25
 800763e:	d5fb      	bpl.n	8007638 <_printf_i+0xe4>
 8007640:	881e      	ldrh	r6, [r3, #0]
 8007642:	4853      	ldr	r0, [pc, #332]	; (8007790 <_printf_i+0x23c>)
 8007644:	2f6f      	cmp	r7, #111	; 0x6f
 8007646:	bf0c      	ite	eq
 8007648:	2308      	moveq	r3, #8
 800764a:	230a      	movne	r3, #10
 800764c:	2100      	movs	r1, #0
 800764e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007652:	6865      	ldr	r5, [r4, #4]
 8007654:	60a5      	str	r5, [r4, #8]
 8007656:	2d00      	cmp	r5, #0
 8007658:	bfa2      	ittt	ge
 800765a:	6821      	ldrge	r1, [r4, #0]
 800765c:	f021 0104 	bicge.w	r1, r1, #4
 8007660:	6021      	strge	r1, [r4, #0]
 8007662:	b90e      	cbnz	r6, 8007668 <_printf_i+0x114>
 8007664:	2d00      	cmp	r5, #0
 8007666:	d04b      	beq.n	8007700 <_printf_i+0x1ac>
 8007668:	4615      	mov	r5, r2
 800766a:	fbb6 f1f3 	udiv	r1, r6, r3
 800766e:	fb03 6711 	mls	r7, r3, r1, r6
 8007672:	5dc7      	ldrb	r7, [r0, r7]
 8007674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007678:	4637      	mov	r7, r6
 800767a:	42bb      	cmp	r3, r7
 800767c:	460e      	mov	r6, r1
 800767e:	d9f4      	bls.n	800766a <_printf_i+0x116>
 8007680:	2b08      	cmp	r3, #8
 8007682:	d10b      	bne.n	800769c <_printf_i+0x148>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	07de      	lsls	r6, r3, #31
 8007688:	d508      	bpl.n	800769c <_printf_i+0x148>
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	6861      	ldr	r1, [r4, #4]
 800768e:	4299      	cmp	r1, r3
 8007690:	bfde      	ittt	le
 8007692:	2330      	movle	r3, #48	; 0x30
 8007694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007698:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800769c:	1b52      	subs	r2, r2, r5
 800769e:	6122      	str	r2, [r4, #16]
 80076a0:	f8cd a000 	str.w	sl, [sp]
 80076a4:	464b      	mov	r3, r9
 80076a6:	aa03      	add	r2, sp, #12
 80076a8:	4621      	mov	r1, r4
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7ff fee4 	bl	8007478 <_printf_common>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d14a      	bne.n	800774a <_printf_i+0x1f6>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b8:	b004      	add	sp, #16
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	4833      	ldr	r0, [pc, #204]	; (8007794 <_printf_i+0x240>)
 80076c8:	2778      	movs	r7, #120	; 0x78
 80076ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	6829      	ldr	r1, [r5, #0]
 80076d2:	061f      	lsls	r7, r3, #24
 80076d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80076d8:	d402      	bmi.n	80076e0 <_printf_i+0x18c>
 80076da:	065f      	lsls	r7, r3, #25
 80076dc:	bf48      	it	mi
 80076de:	b2b6      	uxthmi	r6, r6
 80076e0:	07df      	lsls	r7, r3, #31
 80076e2:	bf48      	it	mi
 80076e4:	f043 0320 	orrmi.w	r3, r3, #32
 80076e8:	6029      	str	r1, [r5, #0]
 80076ea:	bf48      	it	mi
 80076ec:	6023      	strmi	r3, [r4, #0]
 80076ee:	b91e      	cbnz	r6, 80076f8 <_printf_i+0x1a4>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	f023 0320 	bic.w	r3, r3, #32
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	2310      	movs	r3, #16
 80076fa:	e7a7      	b.n	800764c <_printf_i+0xf8>
 80076fc:	4824      	ldr	r0, [pc, #144]	; (8007790 <_printf_i+0x23c>)
 80076fe:	e7e4      	b.n	80076ca <_printf_i+0x176>
 8007700:	4615      	mov	r5, r2
 8007702:	e7bd      	b.n	8007680 <_printf_i+0x12c>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	6826      	ldr	r6, [r4, #0]
 8007708:	6961      	ldr	r1, [r4, #20]
 800770a:	1d18      	adds	r0, r3, #4
 800770c:	6028      	str	r0, [r5, #0]
 800770e:	0635      	lsls	r5, r6, #24
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	d501      	bpl.n	8007718 <_printf_i+0x1c4>
 8007714:	6019      	str	r1, [r3, #0]
 8007716:	e002      	b.n	800771e <_printf_i+0x1ca>
 8007718:	0670      	lsls	r0, r6, #25
 800771a:	d5fb      	bpl.n	8007714 <_printf_i+0x1c0>
 800771c:	8019      	strh	r1, [r3, #0]
 800771e:	2300      	movs	r3, #0
 8007720:	6123      	str	r3, [r4, #16]
 8007722:	4615      	mov	r5, r2
 8007724:	e7bc      	b.n	80076a0 <_printf_i+0x14c>
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	602a      	str	r2, [r5, #0]
 800772c:	681d      	ldr	r5, [r3, #0]
 800772e:	6862      	ldr	r2, [r4, #4]
 8007730:	2100      	movs	r1, #0
 8007732:	4628      	mov	r0, r5
 8007734:	f7f8 fd5c 	bl	80001f0 <memchr>
 8007738:	b108      	cbz	r0, 800773e <_printf_i+0x1ea>
 800773a:	1b40      	subs	r0, r0, r5
 800773c:	6060      	str	r0, [r4, #4]
 800773e:	6863      	ldr	r3, [r4, #4]
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	2300      	movs	r3, #0
 8007744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007748:	e7aa      	b.n	80076a0 <_printf_i+0x14c>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	462a      	mov	r2, r5
 800774e:	4649      	mov	r1, r9
 8007750:	4640      	mov	r0, r8
 8007752:	47d0      	blx	sl
 8007754:	3001      	adds	r0, #1
 8007756:	d0ad      	beq.n	80076b4 <_printf_i+0x160>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	079b      	lsls	r3, r3, #30
 800775c:	d413      	bmi.n	8007786 <_printf_i+0x232>
 800775e:	68e0      	ldr	r0, [r4, #12]
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	4298      	cmp	r0, r3
 8007764:	bfb8      	it	lt
 8007766:	4618      	movlt	r0, r3
 8007768:	e7a6      	b.n	80076b8 <_printf_i+0x164>
 800776a:	2301      	movs	r3, #1
 800776c:	4632      	mov	r2, r6
 800776e:	4649      	mov	r1, r9
 8007770:	4640      	mov	r0, r8
 8007772:	47d0      	blx	sl
 8007774:	3001      	adds	r0, #1
 8007776:	d09d      	beq.n	80076b4 <_printf_i+0x160>
 8007778:	3501      	adds	r5, #1
 800777a:	68e3      	ldr	r3, [r4, #12]
 800777c:	9903      	ldr	r1, [sp, #12]
 800777e:	1a5b      	subs	r3, r3, r1
 8007780:	42ab      	cmp	r3, r5
 8007782:	dcf2      	bgt.n	800776a <_printf_i+0x216>
 8007784:	e7eb      	b.n	800775e <_printf_i+0x20a>
 8007786:	2500      	movs	r5, #0
 8007788:	f104 0619 	add.w	r6, r4, #25
 800778c:	e7f5      	b.n	800777a <_printf_i+0x226>
 800778e:	bf00      	nop
 8007790:	08009aa2 	.word	0x08009aa2
 8007794:	08009ab3 	.word	0x08009ab3

08007798 <std>:
 8007798:	2300      	movs	r3, #0
 800779a:	b510      	push	{r4, lr}
 800779c:	4604      	mov	r4, r0
 800779e:	e9c0 3300 	strd	r3, r3, [r0]
 80077a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077a6:	6083      	str	r3, [r0, #8]
 80077a8:	8181      	strh	r1, [r0, #12]
 80077aa:	6643      	str	r3, [r0, #100]	; 0x64
 80077ac:	81c2      	strh	r2, [r0, #14]
 80077ae:	6183      	str	r3, [r0, #24]
 80077b0:	4619      	mov	r1, r3
 80077b2:	2208      	movs	r2, #8
 80077b4:	305c      	adds	r0, #92	; 0x5c
 80077b6:	f000 f9e5 	bl	8007b84 <memset>
 80077ba:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <std+0x38>)
 80077bc:	6263      	str	r3, [r4, #36]	; 0x24
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <std+0x3c>)
 80077c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <std+0x40>)
 80077c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <std+0x44>)
 80077c8:	6224      	str	r4, [r4, #32]
 80077ca:	6323      	str	r3, [r4, #48]	; 0x30
 80077cc:	bd10      	pop	{r4, pc}
 80077ce:	bf00      	nop
 80077d0:	080079d5 	.word	0x080079d5
 80077d4:	080079f7 	.word	0x080079f7
 80077d8:	08007a2f 	.word	0x08007a2f
 80077dc:	08007a53 	.word	0x08007a53

080077e0 <stdio_exit_handler>:
 80077e0:	4a02      	ldr	r2, [pc, #8]	; (80077ec <stdio_exit_handler+0xc>)
 80077e2:	4903      	ldr	r1, [pc, #12]	; (80077f0 <stdio_exit_handler+0x10>)
 80077e4:	4803      	ldr	r0, [pc, #12]	; (80077f4 <stdio_exit_handler+0x14>)
 80077e6:	f000 b869 	b.w	80078bc <_fwalk_sglue>
 80077ea:	bf00      	nop
 80077ec:	20000010 	.word	0x20000010
 80077f0:	080096c9 	.word	0x080096c9
 80077f4:	2000001c 	.word	0x2000001c

080077f8 <cleanup_stdio>:
 80077f8:	6841      	ldr	r1, [r0, #4]
 80077fa:	4b0c      	ldr	r3, [pc, #48]	; (800782c <cleanup_stdio+0x34>)
 80077fc:	4299      	cmp	r1, r3
 80077fe:	b510      	push	{r4, lr}
 8007800:	4604      	mov	r4, r0
 8007802:	d001      	beq.n	8007808 <cleanup_stdio+0x10>
 8007804:	f001 ff60 	bl	80096c8 <_fflush_r>
 8007808:	68a1      	ldr	r1, [r4, #8]
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <cleanup_stdio+0x38>)
 800780c:	4299      	cmp	r1, r3
 800780e:	d002      	beq.n	8007816 <cleanup_stdio+0x1e>
 8007810:	4620      	mov	r0, r4
 8007812:	f001 ff59 	bl	80096c8 <_fflush_r>
 8007816:	68e1      	ldr	r1, [r4, #12]
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <cleanup_stdio+0x3c>)
 800781a:	4299      	cmp	r1, r3
 800781c:	d004      	beq.n	8007828 <cleanup_stdio+0x30>
 800781e:	4620      	mov	r0, r4
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f001 bf50 	b.w	80096c8 <_fflush_r>
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	200047d8 	.word	0x200047d8
 8007830:	20004840 	.word	0x20004840
 8007834:	200048a8 	.word	0x200048a8

08007838 <global_stdio_init.part.0>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <global_stdio_init.part.0+0x30>)
 800783c:	4c0b      	ldr	r4, [pc, #44]	; (800786c <global_stdio_init.part.0+0x34>)
 800783e:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <global_stdio_init.part.0+0x38>)
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	4620      	mov	r0, r4
 8007844:	2200      	movs	r2, #0
 8007846:	2104      	movs	r1, #4
 8007848:	f7ff ffa6 	bl	8007798 <std>
 800784c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007850:	2201      	movs	r2, #1
 8007852:	2109      	movs	r1, #9
 8007854:	f7ff ffa0 	bl	8007798 <std>
 8007858:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800785c:	2202      	movs	r2, #2
 800785e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007862:	2112      	movs	r1, #18
 8007864:	f7ff bf98 	b.w	8007798 <std>
 8007868:	20004910 	.word	0x20004910
 800786c:	200047d8 	.word	0x200047d8
 8007870:	080077e1 	.word	0x080077e1

08007874 <__sfp_lock_acquire>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__sfp_lock_acquire+0x8>)
 8007876:	f000 ba57 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	20004919 	.word	0x20004919

08007880 <__sfp_lock_release>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_release+0x8>)
 8007882:	f000 ba52 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	20004919 	.word	0x20004919

0800788c <__sinit>:
 800788c:	b510      	push	{r4, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	f7ff fff0 	bl	8007874 <__sfp_lock_acquire>
 8007894:	6a23      	ldr	r3, [r4, #32]
 8007896:	b11b      	cbz	r3, 80078a0 <__sinit+0x14>
 8007898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800789c:	f7ff bff0 	b.w	8007880 <__sfp_lock_release>
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <__sinit+0x28>)
 80078a2:	6223      	str	r3, [r4, #32]
 80078a4:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <__sinit+0x2c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <__sinit+0xc>
 80078ac:	f7ff ffc4 	bl	8007838 <global_stdio_init.part.0>
 80078b0:	e7f2      	b.n	8007898 <__sinit+0xc>
 80078b2:	bf00      	nop
 80078b4:	080077f9 	.word	0x080077f9
 80078b8:	20004910 	.word	0x20004910

080078bc <_fwalk_sglue>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	4607      	mov	r7, r0
 80078c2:	4688      	mov	r8, r1
 80078c4:	4614      	mov	r4, r2
 80078c6:	2600      	movs	r6, #0
 80078c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078cc:	f1b9 0901 	subs.w	r9, r9, #1
 80078d0:	d505      	bpl.n	80078de <_fwalk_sglue+0x22>
 80078d2:	6824      	ldr	r4, [r4, #0]
 80078d4:	2c00      	cmp	r4, #0
 80078d6:	d1f7      	bne.n	80078c8 <_fwalk_sglue+0xc>
 80078d8:	4630      	mov	r0, r6
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d907      	bls.n	80078f4 <_fwalk_sglue+0x38>
 80078e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e8:	3301      	adds	r3, #1
 80078ea:	d003      	beq.n	80078f4 <_fwalk_sglue+0x38>
 80078ec:	4629      	mov	r1, r5
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c0      	blx	r8
 80078f2:	4306      	orrs	r6, r0
 80078f4:	3568      	adds	r5, #104	; 0x68
 80078f6:	e7e9      	b.n	80078cc <_fwalk_sglue+0x10>

080078f8 <iprintf>:
 80078f8:	b40f      	push	{r0, r1, r2, r3}
 80078fa:	b507      	push	{r0, r1, r2, lr}
 80078fc:	4906      	ldr	r1, [pc, #24]	; (8007918 <iprintf+0x20>)
 80078fe:	ab04      	add	r3, sp, #16
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	f853 2b04 	ldr.w	r2, [r3], #4
 8007906:	6881      	ldr	r1, [r0, #8]
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	f001 fd3d 	bl	8009388 <_vfiprintf_r>
 800790e:	b003      	add	sp, #12
 8007910:	f85d eb04 	ldr.w	lr, [sp], #4
 8007914:	b004      	add	sp, #16
 8007916:	4770      	bx	lr
 8007918:	20000068 	.word	0x20000068

0800791c <_puts_r>:
 800791c:	6a03      	ldr	r3, [r0, #32]
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	6884      	ldr	r4, [r0, #8]
 8007922:	4605      	mov	r5, r0
 8007924:	460e      	mov	r6, r1
 8007926:	b90b      	cbnz	r3, 800792c <_puts_r+0x10>
 8007928:	f7ff ffb0 	bl	800788c <__sinit>
 800792c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800792e:	07db      	lsls	r3, r3, #31
 8007930:	d405      	bmi.n	800793e <_puts_r+0x22>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0598      	lsls	r0, r3, #22
 8007936:	d402      	bmi.n	800793e <_puts_r+0x22>
 8007938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793a:	f000 f9f5 	bl	8007d28 <__retarget_lock_acquire_recursive>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	0719      	lsls	r1, r3, #28
 8007942:	d513      	bpl.n	800796c <_puts_r+0x50>
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	b18b      	cbz	r3, 800796c <_puts_r+0x50>
 8007948:	3e01      	subs	r6, #1
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007950:	3b01      	subs	r3, #1
 8007952:	60a3      	str	r3, [r4, #8]
 8007954:	b9e9      	cbnz	r1, 8007992 <_puts_r+0x76>
 8007956:	2b00      	cmp	r3, #0
 8007958:	da2e      	bge.n	80079b8 <_puts_r+0x9c>
 800795a:	4622      	mov	r2, r4
 800795c:	210a      	movs	r1, #10
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f87b 	bl	8007a5a <__swbuf_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d007      	beq.n	8007978 <_puts_r+0x5c>
 8007968:	250a      	movs	r5, #10
 800796a:	e007      	b.n	800797c <_puts_r+0x60>
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f8b0 	bl	8007ad4 <__swsetup_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	d0e7      	beq.n	8007948 <_puts_r+0x2c>
 8007978:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800797c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797e:	07da      	lsls	r2, r3, #31
 8007980:	d405      	bmi.n	800798e <_puts_r+0x72>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	059b      	lsls	r3, r3, #22
 8007986:	d402      	bmi.n	800798e <_puts_r+0x72>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f000 f9ce 	bl	8007d2a <__retarget_lock_release_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	2b00      	cmp	r3, #0
 8007994:	da04      	bge.n	80079a0 <_puts_r+0x84>
 8007996:	69a2      	ldr	r2, [r4, #24]
 8007998:	429a      	cmp	r2, r3
 800799a:	dc06      	bgt.n	80079aa <_puts_r+0x8e>
 800799c:	290a      	cmp	r1, #10
 800799e:	d004      	beq.n	80079aa <_puts_r+0x8e>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	6022      	str	r2, [r4, #0]
 80079a6:	7019      	strb	r1, [r3, #0]
 80079a8:	e7cf      	b.n	800794a <_puts_r+0x2e>
 80079aa:	4622      	mov	r2, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f854 	bl	8007a5a <__swbuf_r>
 80079b2:	3001      	adds	r0, #1
 80079b4:	d1c9      	bne.n	800794a <_puts_r+0x2e>
 80079b6:	e7df      	b.n	8007978 <_puts_r+0x5c>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	250a      	movs	r5, #10
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	701d      	strb	r5, [r3, #0]
 80079c2:	e7db      	b.n	800797c <_puts_r+0x60>

080079c4 <puts>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <puts+0xc>)
 80079c6:	4601      	mov	r1, r0
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	f7ff bfa7 	b.w	800791c <_puts_r>
 80079ce:	bf00      	nop
 80079d0:	20000068 	.word	0x20000068

080079d4 <__sread>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	f000 f956 	bl	8007c8c <_read_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	bfab      	itete	ge
 80079e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079e6:	89a3      	ldrhlt	r3, [r4, #12]
 80079e8:	181b      	addge	r3, r3, r0
 80079ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ee:	bfac      	ite	ge
 80079f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f2:	81a3      	strhlt	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__swrite>:
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	461f      	mov	r7, r3
 80079fc:	898b      	ldrh	r3, [r1, #12]
 80079fe:	05db      	lsls	r3, r3, #23
 8007a00:	4605      	mov	r5, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	4616      	mov	r6, r2
 8007a06:	d505      	bpl.n	8007a14 <__swrite+0x1e>
 8007a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f000 f92a 	bl	8007c68 <_lseek_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	4632      	mov	r2, r6
 8007a22:	463b      	mov	r3, r7
 8007a24:	4628      	mov	r0, r5
 8007a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	f000 b941 	b.w	8007cb0 <_write_r>

08007a2e <__sseek>:
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 f917 	bl	8007c68 <_lseek_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	bf15      	itete	ne
 8007a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4a:	81a3      	strheq	r3, [r4, #12]
 8007a4c:	bf18      	it	ne
 8007a4e:	81a3      	strhne	r3, [r4, #12]
 8007a50:	bd10      	pop	{r4, pc}

08007a52 <__sclose>:
 8007a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a56:	f000 b8a1 	b.w	8007b9c <_close_r>

08007a5a <__swbuf_r>:
 8007a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	4614      	mov	r4, r2
 8007a60:	4605      	mov	r5, r0
 8007a62:	b118      	cbz	r0, 8007a6c <__swbuf_r+0x12>
 8007a64:	6a03      	ldr	r3, [r0, #32]
 8007a66:	b90b      	cbnz	r3, 8007a6c <__swbuf_r+0x12>
 8007a68:	f7ff ff10 	bl	800788c <__sinit>
 8007a6c:	69a3      	ldr	r3, [r4, #24]
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	071a      	lsls	r2, r3, #28
 8007a74:	d525      	bpl.n	8007ac2 <__swbuf_r+0x68>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	b31b      	cbz	r3, 8007ac2 <__swbuf_r+0x68>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	1a98      	subs	r0, r3, r2
 8007a80:	6963      	ldr	r3, [r4, #20]
 8007a82:	b2f6      	uxtb	r6, r6
 8007a84:	4283      	cmp	r3, r0
 8007a86:	4637      	mov	r7, r6
 8007a88:	dc04      	bgt.n	8007a94 <__swbuf_r+0x3a>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f001 fe1b 	bl	80096c8 <_fflush_r>
 8007a92:	b9e0      	cbnz	r0, 8007ace <__swbuf_r+0x74>
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	60a3      	str	r3, [r4, #8]
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	701e      	strb	r6, [r3, #0]
 8007aa2:	6962      	ldr	r2, [r4, #20]
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d004      	beq.n	8007ab4 <__swbuf_r+0x5a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	07db      	lsls	r3, r3, #31
 8007aae:	d506      	bpl.n	8007abe <__swbuf_r+0x64>
 8007ab0:	2e0a      	cmp	r6, #10
 8007ab2:	d104      	bne.n	8007abe <__swbuf_r+0x64>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f001 fe06 	bl	80096c8 <_fflush_r>
 8007abc:	b938      	cbnz	r0, 8007ace <__swbuf_r+0x74>
 8007abe:	4638      	mov	r0, r7
 8007ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f805 	bl	8007ad4 <__swsetup_r>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0d5      	beq.n	8007a7a <__swbuf_r+0x20>
 8007ace:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ad2:	e7f4      	b.n	8007abe <__swbuf_r+0x64>

08007ad4 <__swsetup_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4b2a      	ldr	r3, [pc, #168]	; (8007b80 <__swsetup_r+0xac>)
 8007ad8:	4605      	mov	r5, r0
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	460c      	mov	r4, r1
 8007ade:	b118      	cbz	r0, 8007ae8 <__swsetup_r+0x14>
 8007ae0:	6a03      	ldr	r3, [r0, #32]
 8007ae2:	b90b      	cbnz	r3, 8007ae8 <__swsetup_r+0x14>
 8007ae4:	f7ff fed2 	bl	800788c <__sinit>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aee:	0718      	lsls	r0, r3, #28
 8007af0:	d422      	bmi.n	8007b38 <__swsetup_r+0x64>
 8007af2:	06d9      	lsls	r1, r3, #27
 8007af4:	d407      	bmi.n	8007b06 <__swsetup_r+0x32>
 8007af6:	2309      	movs	r3, #9
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b04:	e034      	b.n	8007b70 <__swsetup_r+0x9c>
 8007b06:	0758      	lsls	r0, r3, #29
 8007b08:	d512      	bpl.n	8007b30 <__swsetup_r+0x5c>
 8007b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b0c:	b141      	cbz	r1, 8007b20 <__swsetup_r+0x4c>
 8007b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b12:	4299      	cmp	r1, r3
 8007b14:	d002      	beq.n	8007b1c <__swsetup_r+0x48>
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 ff90 	bl	8008a3c <_free_r>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6363      	str	r3, [r4, #52]	; 0x34
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6063      	str	r3, [r4, #4]
 8007b2c:	6923      	ldr	r3, [r4, #16]
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	f043 0308 	orr.w	r3, r3, #8
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	b94b      	cbnz	r3, 8007b50 <__swsetup_r+0x7c>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b46:	d003      	beq.n	8007b50 <__swsetup_r+0x7c>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f001 fe0a 	bl	8009764 <__smakebuf_r>
 8007b50:	89a0      	ldrh	r0, [r4, #12]
 8007b52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b56:	f010 0301 	ands.w	r3, r0, #1
 8007b5a:	d00a      	beq.n	8007b72 <__swsetup_r+0x9e>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6963      	ldr	r3, [r4, #20]
 8007b62:	425b      	negs	r3, r3
 8007b64:	61a3      	str	r3, [r4, #24]
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	b943      	cbnz	r3, 8007b7c <__swsetup_r+0xa8>
 8007b6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b6e:	d1c4      	bne.n	8007afa <__swsetup_r+0x26>
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	0781      	lsls	r1, r0, #30
 8007b74:	bf58      	it	pl
 8007b76:	6963      	ldrpl	r3, [r4, #20]
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	e7f4      	b.n	8007b66 <__swsetup_r+0x92>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7f7      	b.n	8007b70 <__swsetup_r+0x9c>
 8007b80:	20000068 	.word	0x20000068

08007b84 <memset>:
 8007b84:	4402      	add	r2, r0
 8007b86:	4603      	mov	r3, r0
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d100      	bne.n	8007b8e <memset+0xa>
 8007b8c:	4770      	bx	lr
 8007b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b92:	e7f9      	b.n	8007b88 <memset+0x4>

08007b94 <_localeconv_r>:
 8007b94:	4800      	ldr	r0, [pc, #0]	; (8007b98 <_localeconv_r+0x4>)
 8007b96:	4770      	bx	lr
 8007b98:	2000015c 	.word	0x2000015c

08007b9c <_close_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d06      	ldr	r5, [pc, #24]	; (8007bb8 <_close_r+0x1c>)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	f7f9 fe65 	bl	8001876 <_close>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d102      	bne.n	8007bb6 <_close_r+0x1a>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b103      	cbz	r3, 8007bb6 <_close_r+0x1a>
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	20004914 	.word	0x20004914

08007bbc <_reclaim_reent>:
 8007bbc:	4b29      	ldr	r3, [pc, #164]	; (8007c64 <_reclaim_reent+0xa8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4283      	cmp	r3, r0
 8007bc2:	b570      	push	{r4, r5, r6, lr}
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	d04b      	beq.n	8007c60 <_reclaim_reent+0xa4>
 8007bc8:	69c3      	ldr	r3, [r0, #28]
 8007bca:	b143      	cbz	r3, 8007bde <_reclaim_reent+0x22>
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d144      	bne.n	8007c5c <_reclaim_reent+0xa0>
 8007bd2:	69e3      	ldr	r3, [r4, #28]
 8007bd4:	6819      	ldr	r1, [r3, #0]
 8007bd6:	b111      	cbz	r1, 8007bde <_reclaim_reent+0x22>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 ff2f 	bl	8008a3c <_free_r>
 8007bde:	6961      	ldr	r1, [r4, #20]
 8007be0:	b111      	cbz	r1, 8007be8 <_reclaim_reent+0x2c>
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 ff2a 	bl	8008a3c <_free_r>
 8007be8:	69e1      	ldr	r1, [r4, #28]
 8007bea:	b111      	cbz	r1, 8007bf2 <_reclaim_reent+0x36>
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 ff25 	bl	8008a3c <_free_r>
 8007bf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007bf4:	b111      	cbz	r1, 8007bfc <_reclaim_reent+0x40>
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 ff20 	bl	8008a3c <_free_r>
 8007bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bfe:	b111      	cbz	r1, 8007c06 <_reclaim_reent+0x4a>
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 ff1b 	bl	8008a3c <_free_r>
 8007c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c08:	b111      	cbz	r1, 8007c10 <_reclaim_reent+0x54>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 ff16 	bl	8008a3c <_free_r>
 8007c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c12:	b111      	cbz	r1, 8007c1a <_reclaim_reent+0x5e>
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 ff11 	bl	8008a3c <_free_r>
 8007c1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c1c:	b111      	cbz	r1, 8007c24 <_reclaim_reent+0x68>
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 ff0c 	bl	8008a3c <_free_r>
 8007c24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c26:	b111      	cbz	r1, 8007c2e <_reclaim_reent+0x72>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 ff07 	bl	8008a3c <_free_r>
 8007c2e:	6a23      	ldr	r3, [r4, #32]
 8007c30:	b1b3      	cbz	r3, 8007c60 <_reclaim_reent+0xa4>
 8007c32:	4620      	mov	r0, r4
 8007c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c38:	4718      	bx	r3
 8007c3a:	5949      	ldr	r1, [r1, r5]
 8007c3c:	b941      	cbnz	r1, 8007c50 <_reclaim_reent+0x94>
 8007c3e:	3504      	adds	r5, #4
 8007c40:	69e3      	ldr	r3, [r4, #28]
 8007c42:	2d80      	cmp	r5, #128	; 0x80
 8007c44:	68d9      	ldr	r1, [r3, #12]
 8007c46:	d1f8      	bne.n	8007c3a <_reclaim_reent+0x7e>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fef7 	bl	8008a3c <_free_r>
 8007c4e:	e7c0      	b.n	8007bd2 <_reclaim_reent+0x16>
 8007c50:	680e      	ldr	r6, [r1, #0]
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fef2 	bl	8008a3c <_free_r>
 8007c58:	4631      	mov	r1, r6
 8007c5a:	e7ef      	b.n	8007c3c <_reclaim_reent+0x80>
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	e7ef      	b.n	8007c40 <_reclaim_reent+0x84>
 8007c60:	bd70      	pop	{r4, r5, r6, pc}
 8007c62:	bf00      	nop
 8007c64:	20000068 	.word	0x20000068

08007c68 <_lseek_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d07      	ldr	r5, [pc, #28]	; (8007c88 <_lseek_r+0x20>)
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4608      	mov	r0, r1
 8007c70:	4611      	mov	r1, r2
 8007c72:	2200      	movs	r2, #0
 8007c74:	602a      	str	r2, [r5, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	f7f9 fe24 	bl	80018c4 <_lseek>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_lseek_r+0x1e>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_lseek_r+0x1e>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	20004914 	.word	0x20004914

08007c8c <_read_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d07      	ldr	r5, [pc, #28]	; (8007cac <_read_r+0x20>)
 8007c90:	4604      	mov	r4, r0
 8007c92:	4608      	mov	r0, r1
 8007c94:	4611      	mov	r1, r2
 8007c96:	2200      	movs	r2, #0
 8007c98:	602a      	str	r2, [r5, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f7f9 fdce 	bl	800183c <_read>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_read_r+0x1e>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_read_r+0x1e>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	20004914 	.word	0x20004914

08007cb0 <_write_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	; (8007cd0 <_write_r+0x20>)
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	602a      	str	r2, [r5, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f7f9 f91a 	bl	8000ef8 <_write>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_write_r+0x1e>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_write_r+0x1e>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	20004914 	.word	0x20004914

08007cd4 <__errno>:
 8007cd4:	4b01      	ldr	r3, [pc, #4]	; (8007cdc <__errno+0x8>)
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000068 	.word	0x20000068

08007ce0 <__libc_init_array>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4d0d      	ldr	r5, [pc, #52]	; (8007d18 <__libc_init_array+0x38>)
 8007ce4:	4c0d      	ldr	r4, [pc, #52]	; (8007d1c <__libc_init_array+0x3c>)
 8007ce6:	1b64      	subs	r4, r4, r5
 8007ce8:	10a4      	asrs	r4, r4, #2
 8007cea:	2600      	movs	r6, #0
 8007cec:	42a6      	cmp	r6, r4
 8007cee:	d109      	bne.n	8007d04 <__libc_init_array+0x24>
 8007cf0:	4d0b      	ldr	r5, [pc, #44]	; (8007d20 <__libc_init_array+0x40>)
 8007cf2:	4c0c      	ldr	r4, [pc, #48]	; (8007d24 <__libc_init_array+0x44>)
 8007cf4:	f001 fe56 	bl	80099a4 <_init>
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	42a6      	cmp	r6, r4
 8007d00:	d105      	bne.n	8007d0e <__libc_init_array+0x2e>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d08:	4798      	blx	r3
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7ee      	b.n	8007cec <__libc_init_array+0xc>
 8007d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d12:	4798      	blx	r3
 8007d14:	3601      	adds	r6, #1
 8007d16:	e7f2      	b.n	8007cfe <__libc_init_array+0x1e>
 8007d18:	08009e0c 	.word	0x08009e0c
 8007d1c:	08009e0c 	.word	0x08009e0c
 8007d20:	08009e0c 	.word	0x08009e0c
 8007d24:	08009e10 	.word	0x08009e10

08007d28 <__retarget_lock_acquire_recursive>:
 8007d28:	4770      	bx	lr

08007d2a <__retarget_lock_release_recursive>:
 8007d2a:	4770      	bx	lr

08007d2c <memcpy>:
 8007d2c:	440a      	add	r2, r1
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d34:	d100      	bne.n	8007d38 <memcpy+0xc>
 8007d36:	4770      	bx	lr
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d42:	4291      	cmp	r1, r2
 8007d44:	d1f9      	bne.n	8007d3a <memcpy+0xe>
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <quorem>:
 8007d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	6903      	ldr	r3, [r0, #16]
 8007d4e:	690c      	ldr	r4, [r1, #16]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	4607      	mov	r7, r0
 8007d54:	db7e      	blt.n	8007e54 <quorem+0x10c>
 8007d56:	3c01      	subs	r4, #1
 8007d58:	f101 0814 	add.w	r8, r1, #20
 8007d5c:	f100 0514 	add.w	r5, r0, #20
 8007d60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	429a      	cmp	r2, r3
 8007d72:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d7e:	d331      	bcc.n	8007de4 <quorem+0x9c>
 8007d80:	f04f 0e00 	mov.w	lr, #0
 8007d84:	4640      	mov	r0, r8
 8007d86:	46ac      	mov	ip, r5
 8007d88:	46f2      	mov	sl, lr
 8007d8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d8e:	b293      	uxth	r3, r2
 8007d90:	fb06 e303 	mla	r3, r6, r3, lr
 8007d94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d98:	0c1a      	lsrs	r2, r3, #16
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007da0:	f8dc a000 	ldr.w	sl, [ip]
 8007da4:	fa13 f38a 	uxtah	r3, r3, sl
 8007da8:	fb06 220e 	mla	r2, r6, lr, r2
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007db4:	b292      	uxth	r2, r2
 8007db6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dbe:	f8bd 3000 	ldrh.w	r3, [sp]
 8007dc2:	4581      	cmp	r9, r0
 8007dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc8:	f84c 3b04 	str.w	r3, [ip], #4
 8007dcc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dd0:	d2db      	bcs.n	8007d8a <quorem+0x42>
 8007dd2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007dd6:	b92b      	cbnz	r3, 8007de4 <quorem+0x9c>
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	3b04      	subs	r3, #4
 8007ddc:	429d      	cmp	r5, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	d32c      	bcc.n	8007e3c <quorem+0xf4>
 8007de2:	613c      	str	r4, [r7, #16]
 8007de4:	4638      	mov	r0, r7
 8007de6:	f001 f9a5 	bl	8009134 <__mcmp>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	db22      	blt.n	8007e34 <quorem+0xec>
 8007dee:	3601      	adds	r6, #1
 8007df0:	4629      	mov	r1, r5
 8007df2:	2000      	movs	r0, #0
 8007df4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007df8:	f8d1 c000 	ldr.w	ip, [r1]
 8007dfc:	b293      	uxth	r3, r2
 8007dfe:	1ac3      	subs	r3, r0, r3
 8007e00:	0c12      	lsrs	r2, r2, #16
 8007e02:	fa13 f38c 	uxtah	r3, r3, ip
 8007e06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007e0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e14:	45c1      	cmp	r9, r8
 8007e16:	f841 3b04 	str.w	r3, [r1], #4
 8007e1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e1e:	d2e9      	bcs.n	8007df4 <quorem+0xac>
 8007e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e28:	b922      	cbnz	r2, 8007e34 <quorem+0xec>
 8007e2a:	3b04      	subs	r3, #4
 8007e2c:	429d      	cmp	r5, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	d30a      	bcc.n	8007e48 <quorem+0x100>
 8007e32:	613c      	str	r4, [r7, #16]
 8007e34:	4630      	mov	r0, r6
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	6812      	ldr	r2, [r2, #0]
 8007e3e:	3b04      	subs	r3, #4
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	d1ce      	bne.n	8007de2 <quorem+0x9a>
 8007e44:	3c01      	subs	r4, #1
 8007e46:	e7c9      	b.n	8007ddc <quorem+0x94>
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	d1f0      	bne.n	8007e32 <quorem+0xea>
 8007e50:	3c01      	subs	r4, #1
 8007e52:	e7eb      	b.n	8007e2c <quorem+0xe4>
 8007e54:	2000      	movs	r0, #0
 8007e56:	e7ee      	b.n	8007e36 <quorem+0xee>

08007e58 <_dtoa_r>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	ed2d 8b04 	vpush	{d8-d9}
 8007e60:	69c5      	ldr	r5, [r0, #28]
 8007e62:	b093      	sub	sp, #76	; 0x4c
 8007e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e68:	ec57 6b10 	vmov	r6, r7, d0
 8007e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e70:	9107      	str	r1, [sp, #28]
 8007e72:	4604      	mov	r4, r0
 8007e74:	920a      	str	r2, [sp, #40]	; 0x28
 8007e76:	930d      	str	r3, [sp, #52]	; 0x34
 8007e78:	b975      	cbnz	r5, 8007e98 <_dtoa_r+0x40>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f000 fe2a 	bl	8008ad4 <malloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	61e0      	str	r0, [r4, #28]
 8007e84:	b920      	cbnz	r0, 8007e90 <_dtoa_r+0x38>
 8007e86:	4bae      	ldr	r3, [pc, #696]	; (8008140 <_dtoa_r+0x2e8>)
 8007e88:	21ef      	movs	r1, #239	; 0xef
 8007e8a:	48ae      	ldr	r0, [pc, #696]	; (8008144 <_dtoa_r+0x2ec>)
 8007e8c:	f001 fcd8 	bl	8009840 <__assert_func>
 8007e90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e94:	6005      	str	r5, [r0, #0]
 8007e96:	60c5      	str	r5, [r0, #12]
 8007e98:	69e3      	ldr	r3, [r4, #28]
 8007e9a:	6819      	ldr	r1, [r3, #0]
 8007e9c:	b151      	cbz	r1, 8007eb4 <_dtoa_r+0x5c>
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	604a      	str	r2, [r1, #4]
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4093      	lsls	r3, r2
 8007ea6:	608b      	str	r3, [r1, #8]
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 ff07 	bl	8008cbc <_Bfree>
 8007eae:	69e3      	ldr	r3, [r4, #28]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	1e3b      	subs	r3, r7, #0
 8007eb6:	bfbb      	ittet	lt
 8007eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ebc:	9303      	strlt	r3, [sp, #12]
 8007ebe:	2300      	movge	r3, #0
 8007ec0:	2201      	movlt	r2, #1
 8007ec2:	bfac      	ite	ge
 8007ec4:	f8c8 3000 	strge.w	r3, [r8]
 8007ec8:	f8c8 2000 	strlt.w	r2, [r8]
 8007ecc:	4b9e      	ldr	r3, [pc, #632]	; (8008148 <_dtoa_r+0x2f0>)
 8007ece:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ed2:	ea33 0308 	bics.w	r3, r3, r8
 8007ed6:	d11b      	bne.n	8007f10 <_dtoa_r+0xb8>
 8007ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eda:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ee4:	4333      	orrs	r3, r6
 8007ee6:	f000 8593 	beq.w	8008a10 <_dtoa_r+0xbb8>
 8007eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eec:	b963      	cbnz	r3, 8007f08 <_dtoa_r+0xb0>
 8007eee:	4b97      	ldr	r3, [pc, #604]	; (800814c <_dtoa_r+0x2f4>)
 8007ef0:	e027      	b.n	8007f42 <_dtoa_r+0xea>
 8007ef2:	4b97      	ldr	r3, [pc, #604]	; (8008150 <_dtoa_r+0x2f8>)
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	9800      	ldr	r0, [sp, #0]
 8007efe:	b013      	add	sp, #76	; 0x4c
 8007f00:	ecbd 8b04 	vpop	{d8-d9}
 8007f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f08:	4b90      	ldr	r3, [pc, #576]	; (800814c <_dtoa_r+0x2f4>)
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	3303      	adds	r3, #3
 8007f0e:	e7f3      	b.n	8007ef8 <_dtoa_r+0xa0>
 8007f10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f14:	2200      	movs	r2, #0
 8007f16:	ec51 0b17 	vmov	r0, r1, d7
 8007f1a:	eeb0 8a47 	vmov.f32	s16, s14
 8007f1e:	eef0 8a67 	vmov.f32	s17, s15
 8007f22:	2300      	movs	r3, #0
 8007f24:	f7f8 fde0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f28:	4681      	mov	r9, r0
 8007f2a:	b160      	cbz	r0, 8007f46 <_dtoa_r+0xee>
 8007f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f2e:	2301      	movs	r3, #1
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8568 	beq.w	8008a0a <_dtoa_r+0xbb2>
 8007f3a:	4b86      	ldr	r3, [pc, #536]	; (8008154 <_dtoa_r+0x2fc>)
 8007f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	e7da      	b.n	8007efc <_dtoa_r+0xa4>
 8007f46:	aa10      	add	r2, sp, #64	; 0x40
 8007f48:	a911      	add	r1, sp, #68	; 0x44
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f50:	eef0 0a68 	vmov.f32	s1, s17
 8007f54:	f001 f994 	bl	8009280 <__d2b>
 8007f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	d07f      	beq.n	8008062 <_dtoa_r+0x20a>
 8007f62:	ee18 3a90 	vmov	r3, s17
 8007f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f6e:	ec51 0b18 	vmov	r0, r1, d8
 8007f72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f7e:	4619      	mov	r1, r3
 8007f80:	2200      	movs	r2, #0
 8007f82:	4b75      	ldr	r3, [pc, #468]	; (8008158 <_dtoa_r+0x300>)
 8007f84:	f7f8 f990 	bl	80002a8 <__aeabi_dsub>
 8007f88:	a367      	add	r3, pc, #412	; (adr r3, 8008128 <_dtoa_r+0x2d0>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 fb43 	bl	8000618 <__aeabi_dmul>
 8007f92:	a367      	add	r3, pc, #412	; (adr r3, 8008130 <_dtoa_r+0x2d8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f988 	bl	80002ac <__adddf3>
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	f7f8 facf 	bl	8000544 <__aeabi_i2d>
 8007fa6:	a364      	add	r3, pc, #400	; (adr r3, 8008138 <_dtoa_r+0x2e0>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fb34 	bl	8000618 <__aeabi_dmul>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	f7f8 f978 	bl	80002ac <__adddf3>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	f7f8 fdda 	bl	8000b78 <__aeabi_d2iz>
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4683      	mov	fp, r0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fd95 	bl	8000afc <__aeabi_dcmplt>
 8007fd2:	b148      	cbz	r0, 8007fe8 <_dtoa_r+0x190>
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f7f8 fab5 	bl	8000544 <__aeabi_i2d>
 8007fda:	4632      	mov	r2, r6
 8007fdc:	463b      	mov	r3, r7
 8007fde:	f7f8 fd83 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fe2:	b908      	cbnz	r0, 8007fe8 <_dtoa_r+0x190>
 8007fe4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007fe8:	f1bb 0f16 	cmp.w	fp, #22
 8007fec:	d857      	bhi.n	800809e <_dtoa_r+0x246>
 8007fee:	4b5b      	ldr	r3, [pc, #364]	; (800815c <_dtoa_r+0x304>)
 8007ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	ec51 0b18 	vmov	r0, r1, d8
 8007ffc:	f7f8 fd7e 	bl	8000afc <__aeabi_dcmplt>
 8008000:	2800      	cmp	r0, #0
 8008002:	d04e      	beq.n	80080a2 <_dtoa_r+0x24a>
 8008004:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008008:	2300      	movs	r3, #0
 800800a:	930c      	str	r3, [sp, #48]	; 0x30
 800800c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800e:	1b5b      	subs	r3, r3, r5
 8008010:	1e5a      	subs	r2, r3, #1
 8008012:	bf45      	ittet	mi
 8008014:	f1c3 0301 	rsbmi	r3, r3, #1
 8008018:	9305      	strmi	r3, [sp, #20]
 800801a:	2300      	movpl	r3, #0
 800801c:	2300      	movmi	r3, #0
 800801e:	9206      	str	r2, [sp, #24]
 8008020:	bf54      	ite	pl
 8008022:	9305      	strpl	r3, [sp, #20]
 8008024:	9306      	strmi	r3, [sp, #24]
 8008026:	f1bb 0f00 	cmp.w	fp, #0
 800802a:	db3c      	blt.n	80080a6 <_dtoa_r+0x24e>
 800802c:	9b06      	ldr	r3, [sp, #24]
 800802e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008032:	445b      	add	r3, fp
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	2300      	movs	r3, #0
 8008038:	9308      	str	r3, [sp, #32]
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b09      	cmp	r3, #9
 800803e:	d868      	bhi.n	8008112 <_dtoa_r+0x2ba>
 8008040:	2b05      	cmp	r3, #5
 8008042:	bfc4      	itt	gt
 8008044:	3b04      	subgt	r3, #4
 8008046:	9307      	strgt	r3, [sp, #28]
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	f1a3 0302 	sub.w	r3, r3, #2
 800804e:	bfcc      	ite	gt
 8008050:	2500      	movgt	r5, #0
 8008052:	2501      	movle	r5, #1
 8008054:	2b03      	cmp	r3, #3
 8008056:	f200 8085 	bhi.w	8008164 <_dtoa_r+0x30c>
 800805a:	e8df f003 	tbb	[pc, r3]
 800805e:	3b2e      	.short	0x3b2e
 8008060:	5839      	.short	0x5839
 8008062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008066:	441d      	add	r5, r3
 8008068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800806c:	2b20      	cmp	r3, #32
 800806e:	bfc1      	itttt	gt
 8008070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008074:	fa08 f803 	lslgt.w	r8, r8, r3
 8008078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800807c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008080:	bfd6      	itet	le
 8008082:	f1c3 0320 	rsble	r3, r3, #32
 8008086:	ea48 0003 	orrgt.w	r0, r8, r3
 800808a:	fa06 f003 	lslle.w	r0, r6, r3
 800808e:	f7f8 fa49 	bl	8000524 <__aeabi_ui2d>
 8008092:	2201      	movs	r2, #1
 8008094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008098:	3d01      	subs	r5, #1
 800809a:	920e      	str	r2, [sp, #56]	; 0x38
 800809c:	e76f      	b.n	8007f7e <_dtoa_r+0x126>
 800809e:	2301      	movs	r3, #1
 80080a0:	e7b3      	b.n	800800a <_dtoa_r+0x1b2>
 80080a2:	900c      	str	r0, [sp, #48]	; 0x30
 80080a4:	e7b2      	b.n	800800c <_dtoa_r+0x1b4>
 80080a6:	9b05      	ldr	r3, [sp, #20]
 80080a8:	eba3 030b 	sub.w	r3, r3, fp
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	f1cb 0300 	rsb	r3, fp, #0
 80080b2:	9308      	str	r3, [sp, #32]
 80080b4:	2300      	movs	r3, #0
 80080b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080b8:	e7bf      	b.n	800803a <_dtoa_r+0x1e2>
 80080ba:	2300      	movs	r3, #0
 80080bc:	9309      	str	r3, [sp, #36]	; 0x24
 80080be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	dc52      	bgt.n	800816a <_dtoa_r+0x312>
 80080c4:	2301      	movs	r3, #1
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	461a      	mov	r2, r3
 80080cc:	920a      	str	r2, [sp, #40]	; 0x28
 80080ce:	e00b      	b.n	80080e8 <_dtoa_r+0x290>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e7f3      	b.n	80080bc <_dtoa_r+0x264>
 80080d4:	2300      	movs	r3, #0
 80080d6:	9309      	str	r3, [sp, #36]	; 0x24
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	445b      	add	r3, fp
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	3301      	adds	r3, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	bfb8      	it	lt
 80080e6:	2301      	movlt	r3, #1
 80080e8:	69e0      	ldr	r0, [r4, #28]
 80080ea:	2100      	movs	r1, #0
 80080ec:	2204      	movs	r2, #4
 80080ee:	f102 0614 	add.w	r6, r2, #20
 80080f2:	429e      	cmp	r6, r3
 80080f4:	d93d      	bls.n	8008172 <_dtoa_r+0x31a>
 80080f6:	6041      	str	r1, [r0, #4]
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fd9f 	bl	8008c3c <_Balloc>
 80080fe:	9000      	str	r0, [sp, #0]
 8008100:	2800      	cmp	r0, #0
 8008102:	d139      	bne.n	8008178 <_dtoa_r+0x320>
 8008104:	4b16      	ldr	r3, [pc, #88]	; (8008160 <_dtoa_r+0x308>)
 8008106:	4602      	mov	r2, r0
 8008108:	f240 11af 	movw	r1, #431	; 0x1af
 800810c:	e6bd      	b.n	8007e8a <_dtoa_r+0x32>
 800810e:	2301      	movs	r3, #1
 8008110:	e7e1      	b.n	80080d6 <_dtoa_r+0x27e>
 8008112:	2501      	movs	r5, #1
 8008114:	2300      	movs	r3, #0
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	9509      	str	r5, [sp, #36]	; 0x24
 800811a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	2312      	movs	r3, #18
 8008126:	e7d1      	b.n	80080cc <_dtoa_r+0x274>
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	08009ad1 	.word	0x08009ad1
 8008144:	08009ae8 	.word	0x08009ae8
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	08009acd 	.word	0x08009acd
 8008150:	08009ac4 	.word	0x08009ac4
 8008154:	08009aa1 	.word	0x08009aa1
 8008158:	3ff80000 	.word	0x3ff80000
 800815c:	08009bd8 	.word	0x08009bd8
 8008160:	08009b40 	.word	0x08009b40
 8008164:	2301      	movs	r3, #1
 8008166:	9309      	str	r3, [sp, #36]	; 0x24
 8008168:	e7d7      	b.n	800811a <_dtoa_r+0x2c2>
 800816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	e7ba      	b.n	80080e8 <_dtoa_r+0x290>
 8008172:	3101      	adds	r1, #1
 8008174:	0052      	lsls	r2, r2, #1
 8008176:	e7ba      	b.n	80080ee <_dtoa_r+0x296>
 8008178:	69e3      	ldr	r3, [r4, #28]
 800817a:	9a00      	ldr	r2, [sp, #0]
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	2b0e      	cmp	r3, #14
 8008182:	f200 80a8 	bhi.w	80082d6 <_dtoa_r+0x47e>
 8008186:	2d00      	cmp	r5, #0
 8008188:	f000 80a5 	beq.w	80082d6 <_dtoa_r+0x47e>
 800818c:	f1bb 0f00 	cmp.w	fp, #0
 8008190:	dd38      	ble.n	8008204 <_dtoa_r+0x3ac>
 8008192:	4bc0      	ldr	r3, [pc, #768]	; (8008494 <_dtoa_r+0x63c>)
 8008194:	f00b 020f 	and.w	r2, fp, #15
 8008198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80081a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80081a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80081a8:	d019      	beq.n	80081de <_dtoa_r+0x386>
 80081aa:	4bbb      	ldr	r3, [pc, #748]	; (8008498 <_dtoa_r+0x640>)
 80081ac:	ec51 0b18 	vmov	r0, r1, d8
 80081b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b4:	f7f8 fb5a 	bl	800086c <__aeabi_ddiv>
 80081b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081bc:	f008 080f 	and.w	r8, r8, #15
 80081c0:	2503      	movs	r5, #3
 80081c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008498 <_dtoa_r+0x640>
 80081c6:	f1b8 0f00 	cmp.w	r8, #0
 80081ca:	d10a      	bne.n	80081e2 <_dtoa_r+0x38a>
 80081cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d0:	4632      	mov	r2, r6
 80081d2:	463b      	mov	r3, r7
 80081d4:	f7f8 fb4a 	bl	800086c <__aeabi_ddiv>
 80081d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081dc:	e02b      	b.n	8008236 <_dtoa_r+0x3de>
 80081de:	2502      	movs	r5, #2
 80081e0:	e7ef      	b.n	80081c2 <_dtoa_r+0x36a>
 80081e2:	f018 0f01 	tst.w	r8, #1
 80081e6:	d008      	beq.n	80081fa <_dtoa_r+0x3a2>
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081f0:	f7f8 fa12 	bl	8000618 <__aeabi_dmul>
 80081f4:	3501      	adds	r5, #1
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081fe:	f109 0908 	add.w	r9, r9, #8
 8008202:	e7e0      	b.n	80081c6 <_dtoa_r+0x36e>
 8008204:	f000 809f 	beq.w	8008346 <_dtoa_r+0x4ee>
 8008208:	f1cb 0600 	rsb	r6, fp, #0
 800820c:	4ba1      	ldr	r3, [pc, #644]	; (8008494 <_dtoa_r+0x63c>)
 800820e:	4fa2      	ldr	r7, [pc, #648]	; (8008498 <_dtoa_r+0x640>)
 8008210:	f006 020f 	and.w	r2, r6, #15
 8008214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	ec51 0b18 	vmov	r0, r1, d8
 8008220:	f7f8 f9fa 	bl	8000618 <__aeabi_dmul>
 8008224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008228:	1136      	asrs	r6, r6, #4
 800822a:	2300      	movs	r3, #0
 800822c:	2502      	movs	r5, #2
 800822e:	2e00      	cmp	r6, #0
 8008230:	d17e      	bne.n	8008330 <_dtoa_r+0x4d8>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1d0      	bne.n	80081d8 <_dtoa_r+0x380>
 8008236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008238:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8084 	beq.w	800834a <_dtoa_r+0x4f2>
 8008242:	4b96      	ldr	r3, [pc, #600]	; (800849c <_dtoa_r+0x644>)
 8008244:	2200      	movs	r2, #0
 8008246:	4640      	mov	r0, r8
 8008248:	4649      	mov	r1, r9
 800824a:	f7f8 fc57 	bl	8000afc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d07b      	beq.n	800834a <_dtoa_r+0x4f2>
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d078      	beq.n	800834a <_dtoa_r+0x4f2>
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dd39      	ble.n	80082d2 <_dtoa_r+0x47a>
 800825e:	4b90      	ldr	r3, [pc, #576]	; (80084a0 <_dtoa_r+0x648>)
 8008260:	2200      	movs	r2, #0
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f9d7 	bl	8000618 <__aeabi_dmul>
 800826a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826e:	9e01      	ldr	r6, [sp, #4]
 8008270:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008274:	3501      	adds	r5, #1
 8008276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800827a:	4628      	mov	r0, r5
 800827c:	f7f8 f962 	bl	8000544 <__aeabi_i2d>
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	f7f8 f9c8 	bl	8000618 <__aeabi_dmul>
 8008288:	4b86      	ldr	r3, [pc, #536]	; (80084a4 <_dtoa_r+0x64c>)
 800828a:	2200      	movs	r2, #0
 800828c:	f7f8 f80e 	bl	80002ac <__adddf3>
 8008290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	2e00      	cmp	r6, #0
 800829c:	d158      	bne.n	8008350 <_dtoa_r+0x4f8>
 800829e:	4b82      	ldr	r3, [pc, #520]	; (80084a8 <_dtoa_r+0x650>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	f7f7 ffff 	bl	80002a8 <__aeabi_dsub>
 80082aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	f7f8 fc41 	bl	8000b38 <__aeabi_dcmpgt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f040 8296 	bne.w	80087e8 <_dtoa_r+0x990>
 80082bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082c0:	4640      	mov	r0, r8
 80082c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 fc18 	bl	8000afc <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f040 8289 	bne.w	80087e4 <_dtoa_r+0x98c>
 80082d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f2c0 814e 	blt.w	800857a <_dtoa_r+0x722>
 80082de:	f1bb 0f0e 	cmp.w	fp, #14
 80082e2:	f300 814a 	bgt.w	800857a <_dtoa_r+0x722>
 80082e6:	4b6b      	ldr	r3, [pc, #428]	; (8008494 <_dtoa_r+0x63c>)
 80082e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f280 80dc 	bge.w	80084b0 <_dtoa_r+0x658>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f300 80d8 	bgt.w	80084b0 <_dtoa_r+0x658>
 8008300:	f040 826f 	bne.w	80087e2 <_dtoa_r+0x98a>
 8008304:	4b68      	ldr	r3, [pc, #416]	; (80084a8 <_dtoa_r+0x650>)
 8008306:	2200      	movs	r2, #0
 8008308:	4640      	mov	r0, r8
 800830a:	4649      	mov	r1, r9
 800830c:	f7f8 f984 	bl	8000618 <__aeabi_dmul>
 8008310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008314:	f7f8 fc06 	bl	8000b24 <__aeabi_dcmpge>
 8008318:	9e04      	ldr	r6, [sp, #16]
 800831a:	4637      	mov	r7, r6
 800831c:	2800      	cmp	r0, #0
 800831e:	f040 8245 	bne.w	80087ac <_dtoa_r+0x954>
 8008322:	9d00      	ldr	r5, [sp, #0]
 8008324:	2331      	movs	r3, #49	; 0x31
 8008326:	f805 3b01 	strb.w	r3, [r5], #1
 800832a:	f10b 0b01 	add.w	fp, fp, #1
 800832e:	e241      	b.n	80087b4 <_dtoa_r+0x95c>
 8008330:	07f2      	lsls	r2, r6, #31
 8008332:	d505      	bpl.n	8008340 <_dtoa_r+0x4e8>
 8008334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008338:	f7f8 f96e 	bl	8000618 <__aeabi_dmul>
 800833c:	3501      	adds	r5, #1
 800833e:	2301      	movs	r3, #1
 8008340:	1076      	asrs	r6, r6, #1
 8008342:	3708      	adds	r7, #8
 8008344:	e773      	b.n	800822e <_dtoa_r+0x3d6>
 8008346:	2502      	movs	r5, #2
 8008348:	e775      	b.n	8008236 <_dtoa_r+0x3de>
 800834a:	9e04      	ldr	r6, [sp, #16]
 800834c:	465f      	mov	r7, fp
 800834e:	e792      	b.n	8008276 <_dtoa_r+0x41e>
 8008350:	9900      	ldr	r1, [sp, #0]
 8008352:	4b50      	ldr	r3, [pc, #320]	; (8008494 <_dtoa_r+0x63c>)
 8008354:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008358:	4431      	add	r1, r6
 800835a:	9102      	str	r1, [sp, #8]
 800835c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800835e:	eeb0 9a47 	vmov.f32	s18, s14
 8008362:	eef0 9a67 	vmov.f32	s19, s15
 8008366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800836a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800836e:	2900      	cmp	r1, #0
 8008370:	d044      	beq.n	80083fc <_dtoa_r+0x5a4>
 8008372:	494e      	ldr	r1, [pc, #312]	; (80084ac <_dtoa_r+0x654>)
 8008374:	2000      	movs	r0, #0
 8008376:	f7f8 fa79 	bl	800086c <__aeabi_ddiv>
 800837a:	ec53 2b19 	vmov	r2, r3, d9
 800837e:	f7f7 ff93 	bl	80002a8 <__aeabi_dsub>
 8008382:	9d00      	ldr	r5, [sp, #0]
 8008384:	ec41 0b19 	vmov	d9, r0, r1
 8008388:	4649      	mov	r1, r9
 800838a:	4640      	mov	r0, r8
 800838c:	f7f8 fbf4 	bl	8000b78 <__aeabi_d2iz>
 8008390:	4606      	mov	r6, r0
 8008392:	f7f8 f8d7 	bl	8000544 <__aeabi_i2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f7 ff83 	bl	80002a8 <__aeabi_dsub>
 80083a2:	3630      	adds	r6, #48	; 0x30
 80083a4:	f805 6b01 	strb.w	r6, [r5], #1
 80083a8:	ec53 2b19 	vmov	r2, r3, d9
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	f7f8 fba4 	bl	8000afc <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d164      	bne.n	8008482 <_dtoa_r+0x62a>
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	4937      	ldr	r1, [pc, #220]	; (800849c <_dtoa_r+0x644>)
 80083be:	2000      	movs	r0, #0
 80083c0:	f7f7 ff72 	bl	80002a8 <__aeabi_dsub>
 80083c4:	ec53 2b19 	vmov	r2, r3, d9
 80083c8:	f7f8 fb98 	bl	8000afc <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f040 80b6 	bne.w	800853e <_dtoa_r+0x6e6>
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	429d      	cmp	r5, r3
 80083d6:	f43f af7c 	beq.w	80082d2 <_dtoa_r+0x47a>
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <_dtoa_r+0x648>)
 80083dc:	ec51 0b19 	vmov	r0, r1, d9
 80083e0:	2200      	movs	r2, #0
 80083e2:	f7f8 f919 	bl	8000618 <__aeabi_dmul>
 80083e6:	4b2e      	ldr	r3, [pc, #184]	; (80084a0 <_dtoa_r+0x648>)
 80083e8:	ec41 0b19 	vmov	d9, r0, r1
 80083ec:	2200      	movs	r2, #0
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	f7f8 f911 	bl	8000618 <__aeabi_dmul>
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	e7c5      	b.n	8008388 <_dtoa_r+0x530>
 80083fc:	ec51 0b17 	vmov	r0, r1, d7
 8008400:	f7f8 f90a 	bl	8000618 <__aeabi_dmul>
 8008404:	9b02      	ldr	r3, [sp, #8]
 8008406:	9d00      	ldr	r5, [sp, #0]
 8008408:	930f      	str	r3, [sp, #60]	; 0x3c
 800840a:	ec41 0b19 	vmov	d9, r0, r1
 800840e:	4649      	mov	r1, r9
 8008410:	4640      	mov	r0, r8
 8008412:	f7f8 fbb1 	bl	8000b78 <__aeabi_d2iz>
 8008416:	4606      	mov	r6, r0
 8008418:	f7f8 f894 	bl	8000544 <__aeabi_i2d>
 800841c:	3630      	adds	r6, #48	; 0x30
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff3f 	bl	80002a8 <__aeabi_dsub>
 800842a:	f805 6b01 	strb.w	r6, [r5], #1
 800842e:	9b02      	ldr	r3, [sp, #8]
 8008430:	429d      	cmp	r5, r3
 8008432:	4680      	mov	r8, r0
 8008434:	4689      	mov	r9, r1
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	d124      	bne.n	8008486 <_dtoa_r+0x62e>
 800843c:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <_dtoa_r+0x654>)
 800843e:	ec51 0b19 	vmov	r0, r1, d9
 8008442:	f7f7 ff33 	bl	80002ac <__adddf3>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	f7f8 fb73 	bl	8000b38 <__aeabi_dcmpgt>
 8008452:	2800      	cmp	r0, #0
 8008454:	d173      	bne.n	800853e <_dtoa_r+0x6e6>
 8008456:	ec53 2b19 	vmov	r2, r3, d9
 800845a:	4914      	ldr	r1, [pc, #80]	; (80084ac <_dtoa_r+0x654>)
 800845c:	2000      	movs	r0, #0
 800845e:	f7f7 ff23 	bl	80002a8 <__aeabi_dsub>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f8 fb47 	bl	8000afc <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	f43f af2f 	beq.w	80082d2 <_dtoa_r+0x47a>
 8008474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008476:	1e6b      	subs	r3, r5, #1
 8008478:	930f      	str	r3, [sp, #60]	; 0x3c
 800847a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800847e:	2b30      	cmp	r3, #48	; 0x30
 8008480:	d0f8      	beq.n	8008474 <_dtoa_r+0x61c>
 8008482:	46bb      	mov	fp, r7
 8008484:	e04a      	b.n	800851c <_dtoa_r+0x6c4>
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <_dtoa_r+0x648>)
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	4680      	mov	r8, r0
 800848e:	4689      	mov	r9, r1
 8008490:	e7bd      	b.n	800840e <_dtoa_r+0x5b6>
 8008492:	bf00      	nop
 8008494:	08009bd8 	.word	0x08009bd8
 8008498:	08009bb0 	.word	0x08009bb0
 800849c:	3ff00000 	.word	0x3ff00000
 80084a0:	40240000 	.word	0x40240000
 80084a4:	401c0000 	.word	0x401c0000
 80084a8:	40140000 	.word	0x40140000
 80084ac:	3fe00000 	.word	0x3fe00000
 80084b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084b4:	9d00      	ldr	r5, [sp, #0]
 80084b6:	4642      	mov	r2, r8
 80084b8:	464b      	mov	r3, r9
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f8 f9d5 	bl	800086c <__aeabi_ddiv>
 80084c2:	f7f8 fb59 	bl	8000b78 <__aeabi_d2iz>
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	f7f8 f83c 	bl	8000544 <__aeabi_i2d>
 80084cc:	4642      	mov	r2, r8
 80084ce:	464b      	mov	r3, r9
 80084d0:	f7f8 f8a2 	bl	8000618 <__aeabi_dmul>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f7 fee4 	bl	80002a8 <__aeabi_dsub>
 80084e0:	9e01      	ldr	r6, [sp, #4]
 80084e2:	9f04      	ldr	r7, [sp, #16]
 80084e4:	3630      	adds	r6, #48	; 0x30
 80084e6:	f805 6b01 	strb.w	r6, [r5], #1
 80084ea:	9e00      	ldr	r6, [sp, #0]
 80084ec:	1bae      	subs	r6, r5, r6
 80084ee:	42b7      	cmp	r7, r6
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	d134      	bne.n	8008560 <_dtoa_r+0x708>
 80084f6:	f7f7 fed9 	bl	80002ac <__adddf3>
 80084fa:	4642      	mov	r2, r8
 80084fc:	464b      	mov	r3, r9
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f7f8 fb19 	bl	8000b38 <__aeabi_dcmpgt>
 8008506:	b9c8      	cbnz	r0, 800853c <_dtoa_r+0x6e4>
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	4630      	mov	r0, r6
 800850e:	4639      	mov	r1, r7
 8008510:	f7f8 faea 	bl	8000ae8 <__aeabi_dcmpeq>
 8008514:	b110      	cbz	r0, 800851c <_dtoa_r+0x6c4>
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	07db      	lsls	r3, r3, #31
 800851a:	d40f      	bmi.n	800853c <_dtoa_r+0x6e4>
 800851c:	4651      	mov	r1, sl
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fbcc 	bl	8008cbc <_Bfree>
 8008524:	2300      	movs	r3, #0
 8008526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008528:	702b      	strb	r3, [r5, #0]
 800852a:	f10b 0301 	add.w	r3, fp, #1
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f ace2 	beq.w	8007efc <_dtoa_r+0xa4>
 8008538:	601d      	str	r5, [r3, #0]
 800853a:	e4df      	b.n	8007efc <_dtoa_r+0xa4>
 800853c:	465f      	mov	r7, fp
 800853e:	462b      	mov	r3, r5
 8008540:	461d      	mov	r5, r3
 8008542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008546:	2a39      	cmp	r2, #57	; 0x39
 8008548:	d106      	bne.n	8008558 <_dtoa_r+0x700>
 800854a:	9a00      	ldr	r2, [sp, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d1f7      	bne.n	8008540 <_dtoa_r+0x6e8>
 8008550:	9900      	ldr	r1, [sp, #0]
 8008552:	2230      	movs	r2, #48	; 0x30
 8008554:	3701      	adds	r7, #1
 8008556:	700a      	strb	r2, [r1, #0]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	3201      	adds	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e790      	b.n	8008482 <_dtoa_r+0x62a>
 8008560:	4ba3      	ldr	r3, [pc, #652]	; (80087f0 <_dtoa_r+0x998>)
 8008562:	2200      	movs	r2, #0
 8008564:	f7f8 f858 	bl	8000618 <__aeabi_dmul>
 8008568:	2200      	movs	r2, #0
 800856a:	2300      	movs	r3, #0
 800856c:	4606      	mov	r6, r0
 800856e:	460f      	mov	r7, r1
 8008570:	f7f8 faba 	bl	8000ae8 <__aeabi_dcmpeq>
 8008574:	2800      	cmp	r0, #0
 8008576:	d09e      	beq.n	80084b6 <_dtoa_r+0x65e>
 8008578:	e7d0      	b.n	800851c <_dtoa_r+0x6c4>
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	2a00      	cmp	r2, #0
 800857e:	f000 80ca 	beq.w	8008716 <_dtoa_r+0x8be>
 8008582:	9a07      	ldr	r2, [sp, #28]
 8008584:	2a01      	cmp	r2, #1
 8008586:	f300 80ad 	bgt.w	80086e4 <_dtoa_r+0x88c>
 800858a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858c:	2a00      	cmp	r2, #0
 800858e:	f000 80a5 	beq.w	80086dc <_dtoa_r+0x884>
 8008592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008596:	9e08      	ldr	r6, [sp, #32]
 8008598:	9d05      	ldr	r5, [sp, #20]
 800859a:	9a05      	ldr	r2, [sp, #20]
 800859c:	441a      	add	r2, r3
 800859e:	9205      	str	r2, [sp, #20]
 80085a0:	9a06      	ldr	r2, [sp, #24]
 80085a2:	2101      	movs	r1, #1
 80085a4:	441a      	add	r2, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	9206      	str	r2, [sp, #24]
 80085aa:	f000 fc3d 	bl	8008e28 <__i2b>
 80085ae:	4607      	mov	r7, r0
 80085b0:	b165      	cbz	r5, 80085cc <_dtoa_r+0x774>
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd09      	ble.n	80085cc <_dtoa_r+0x774>
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	9a05      	ldr	r2, [sp, #20]
 80085bc:	bfa8      	it	ge
 80085be:	462b      	movge	r3, r5
 80085c0:	1ad2      	subs	r2, r2, r3
 80085c2:	9205      	str	r2, [sp, #20]
 80085c4:	9a06      	ldr	r2, [sp, #24]
 80085c6:	1aed      	subs	r5, r5, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	9b08      	ldr	r3, [sp, #32]
 80085ce:	b1f3      	cbz	r3, 800860e <_dtoa_r+0x7b6>
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a3 	beq.w	800871e <_dtoa_r+0x8c6>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	dd10      	ble.n	80085fe <_dtoa_r+0x7a6>
 80085dc:	4639      	mov	r1, r7
 80085de:	4632      	mov	r2, r6
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fce1 	bl	8008fa8 <__pow5mult>
 80085e6:	4652      	mov	r2, sl
 80085e8:	4601      	mov	r1, r0
 80085ea:	4607      	mov	r7, r0
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fc31 	bl	8008e54 <__multiply>
 80085f2:	4651      	mov	r1, sl
 80085f4:	4680      	mov	r8, r0
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fb60 	bl	8008cbc <_Bfree>
 80085fc:	46c2      	mov	sl, r8
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	1b9a      	subs	r2, r3, r6
 8008602:	d004      	beq.n	800860e <_dtoa_r+0x7b6>
 8008604:	4651      	mov	r1, sl
 8008606:	4620      	mov	r0, r4
 8008608:	f000 fcce 	bl	8008fa8 <__pow5mult>
 800860c:	4682      	mov	sl, r0
 800860e:	2101      	movs	r1, #1
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fc09 	bl	8008e28 <__i2b>
 8008616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	4606      	mov	r6, r0
 800861c:	f340 8081 	ble.w	8008722 <_dtoa_r+0x8ca>
 8008620:	461a      	mov	r2, r3
 8008622:	4601      	mov	r1, r0
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fcbf 	bl	8008fa8 <__pow5mult>
 800862a:	9b07      	ldr	r3, [sp, #28]
 800862c:	2b01      	cmp	r3, #1
 800862e:	4606      	mov	r6, r0
 8008630:	dd7a      	ble.n	8008728 <_dtoa_r+0x8d0>
 8008632:	f04f 0800 	mov.w	r8, #0
 8008636:	6933      	ldr	r3, [r6, #16]
 8008638:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800863c:	6918      	ldr	r0, [r3, #16]
 800863e:	f000 fba5 	bl	8008d8c <__hi0bits>
 8008642:	f1c0 0020 	rsb	r0, r0, #32
 8008646:	9b06      	ldr	r3, [sp, #24]
 8008648:	4418      	add	r0, r3
 800864a:	f010 001f 	ands.w	r0, r0, #31
 800864e:	f000 8094 	beq.w	800877a <_dtoa_r+0x922>
 8008652:	f1c0 0320 	rsb	r3, r0, #32
 8008656:	2b04      	cmp	r3, #4
 8008658:	f340 8085 	ble.w	8008766 <_dtoa_r+0x90e>
 800865c:	9b05      	ldr	r3, [sp, #20]
 800865e:	f1c0 001c 	rsb	r0, r0, #28
 8008662:	4403      	add	r3, r0
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	4403      	add	r3, r0
 800866a:	4405      	add	r5, r0
 800866c:	9306      	str	r3, [sp, #24]
 800866e:	9b05      	ldr	r3, [sp, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd05      	ble.n	8008680 <_dtoa_r+0x828>
 8008674:	4651      	mov	r1, sl
 8008676:	461a      	mov	r2, r3
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fcef 	bl	800905c <__lshift>
 800867e:	4682      	mov	sl, r0
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	dd05      	ble.n	8008692 <_dtoa_r+0x83a>
 8008686:	4631      	mov	r1, r6
 8008688:	461a      	mov	r2, r3
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fce6 	bl	800905c <__lshift>
 8008690:	4606      	mov	r6, r0
 8008692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008694:	2b00      	cmp	r3, #0
 8008696:	d072      	beq.n	800877e <_dtoa_r+0x926>
 8008698:	4631      	mov	r1, r6
 800869a:	4650      	mov	r0, sl
 800869c:	f000 fd4a 	bl	8009134 <__mcmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	da6c      	bge.n	800877e <_dtoa_r+0x926>
 80086a4:	2300      	movs	r3, #0
 80086a6:	4651      	mov	r1, sl
 80086a8:	220a      	movs	r2, #10
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fb28 	bl	8008d00 <__multadd>
 80086b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80086b6:	4682      	mov	sl, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 81b0 	beq.w	8008a1e <_dtoa_r+0xbc6>
 80086be:	2300      	movs	r3, #0
 80086c0:	4639      	mov	r1, r7
 80086c2:	220a      	movs	r2, #10
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fb1b 	bl	8008d00 <__multadd>
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	4607      	mov	r7, r0
 80086d0:	f300 8096 	bgt.w	8008800 <_dtoa_r+0x9a8>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	dc59      	bgt.n	800878e <_dtoa_r+0x936>
 80086da:	e091      	b.n	8008800 <_dtoa_r+0x9a8>
 80086dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086e2:	e758      	b.n	8008596 <_dtoa_r+0x73e>
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	1e5e      	subs	r6, r3, #1
 80086e8:	9b08      	ldr	r3, [sp, #32]
 80086ea:	42b3      	cmp	r3, r6
 80086ec:	bfbf      	itttt	lt
 80086ee:	9b08      	ldrlt	r3, [sp, #32]
 80086f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80086f2:	9608      	strlt	r6, [sp, #32]
 80086f4:	1af3      	sublt	r3, r6, r3
 80086f6:	bfb4      	ite	lt
 80086f8:	18d2      	addlt	r2, r2, r3
 80086fa:	1b9e      	subge	r6, r3, r6
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	bfbc      	itt	lt
 8008700:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008702:	2600      	movlt	r6, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfb7      	itett	lt
 8008708:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800870c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008710:	1a9d      	sublt	r5, r3, r2
 8008712:	2300      	movlt	r3, #0
 8008714:	e741      	b.n	800859a <_dtoa_r+0x742>
 8008716:	9e08      	ldr	r6, [sp, #32]
 8008718:	9d05      	ldr	r5, [sp, #20]
 800871a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800871c:	e748      	b.n	80085b0 <_dtoa_r+0x758>
 800871e:	9a08      	ldr	r2, [sp, #32]
 8008720:	e770      	b.n	8008604 <_dtoa_r+0x7ac>
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	2b01      	cmp	r3, #1
 8008726:	dc19      	bgt.n	800875c <_dtoa_r+0x904>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	b9bb      	cbnz	r3, 800875c <_dtoa_r+0x904>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008732:	b99b      	cbnz	r3, 800875c <_dtoa_r+0x904>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800873a:	0d1b      	lsrs	r3, r3, #20
 800873c:	051b      	lsls	r3, r3, #20
 800873e:	b183      	cbz	r3, 8008762 <_dtoa_r+0x90a>
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	3301      	adds	r3, #1
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	3301      	adds	r3, #1
 800874a:	9306      	str	r3, [sp, #24]
 800874c:	f04f 0801 	mov.w	r8, #1
 8008750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008752:	2b00      	cmp	r3, #0
 8008754:	f47f af6f 	bne.w	8008636 <_dtoa_r+0x7de>
 8008758:	2001      	movs	r0, #1
 800875a:	e774      	b.n	8008646 <_dtoa_r+0x7ee>
 800875c:	f04f 0800 	mov.w	r8, #0
 8008760:	e7f6      	b.n	8008750 <_dtoa_r+0x8f8>
 8008762:	4698      	mov	r8, r3
 8008764:	e7f4      	b.n	8008750 <_dtoa_r+0x8f8>
 8008766:	d082      	beq.n	800866e <_dtoa_r+0x816>
 8008768:	9a05      	ldr	r2, [sp, #20]
 800876a:	331c      	adds	r3, #28
 800876c:	441a      	add	r2, r3
 800876e:	9205      	str	r2, [sp, #20]
 8008770:	9a06      	ldr	r2, [sp, #24]
 8008772:	441a      	add	r2, r3
 8008774:	441d      	add	r5, r3
 8008776:	9206      	str	r2, [sp, #24]
 8008778:	e779      	b.n	800866e <_dtoa_r+0x816>
 800877a:	4603      	mov	r3, r0
 800877c:	e7f4      	b.n	8008768 <_dtoa_r+0x910>
 800877e:	9b04      	ldr	r3, [sp, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	dc37      	bgt.n	80087f4 <_dtoa_r+0x99c>
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	2b02      	cmp	r3, #2
 8008788:	dd34      	ble.n	80087f4 <_dtoa_r+0x99c>
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	b963      	cbnz	r3, 80087ac <_dtoa_r+0x954>
 8008792:	4631      	mov	r1, r6
 8008794:	2205      	movs	r2, #5
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fab2 	bl	8008d00 <__multadd>
 800879c:	4601      	mov	r1, r0
 800879e:	4606      	mov	r6, r0
 80087a0:	4650      	mov	r0, sl
 80087a2:	f000 fcc7 	bl	8009134 <__mcmp>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f73f adbb 	bgt.w	8008322 <_dtoa_r+0x4ca>
 80087ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ae:	9d00      	ldr	r5, [sp, #0]
 80087b0:	ea6f 0b03 	mvn.w	fp, r3
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	4631      	mov	r1, r6
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fa7e 	bl	8008cbc <_Bfree>
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	f43f aeab 	beq.w	800851c <_dtoa_r+0x6c4>
 80087c6:	f1b8 0f00 	cmp.w	r8, #0
 80087ca:	d005      	beq.n	80087d8 <_dtoa_r+0x980>
 80087cc:	45b8      	cmp	r8, r7
 80087ce:	d003      	beq.n	80087d8 <_dtoa_r+0x980>
 80087d0:	4641      	mov	r1, r8
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fa72 	bl	8008cbc <_Bfree>
 80087d8:	4639      	mov	r1, r7
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fa6e 	bl	8008cbc <_Bfree>
 80087e0:	e69c      	b.n	800851c <_dtoa_r+0x6c4>
 80087e2:	2600      	movs	r6, #0
 80087e4:	4637      	mov	r7, r6
 80087e6:	e7e1      	b.n	80087ac <_dtoa_r+0x954>
 80087e8:	46bb      	mov	fp, r7
 80087ea:	4637      	mov	r7, r6
 80087ec:	e599      	b.n	8008322 <_dtoa_r+0x4ca>
 80087ee:	bf00      	nop
 80087f0:	40240000 	.word	0x40240000
 80087f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80c8 	beq.w	800898c <_dtoa_r+0xb34>
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	2d00      	cmp	r5, #0
 8008802:	dd05      	ble.n	8008810 <_dtoa_r+0x9b8>
 8008804:	4639      	mov	r1, r7
 8008806:	462a      	mov	r2, r5
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fc27 	bl	800905c <__lshift>
 800880e:	4607      	mov	r7, r0
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	d05b      	beq.n	80088ce <_dtoa_r+0xa76>
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fa0f 	bl	8008c3c <_Balloc>
 800881e:	4605      	mov	r5, r0
 8008820:	b928      	cbnz	r0, 800882e <_dtoa_r+0x9d6>
 8008822:	4b83      	ldr	r3, [pc, #524]	; (8008a30 <_dtoa_r+0xbd8>)
 8008824:	4602      	mov	r2, r0
 8008826:	f240 21ef 	movw	r1, #751	; 0x2ef
 800882a:	f7ff bb2e 	b.w	8007e8a <_dtoa_r+0x32>
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	3202      	adds	r2, #2
 8008832:	0092      	lsls	r2, r2, #2
 8008834:	f107 010c 	add.w	r1, r7, #12
 8008838:	300c      	adds	r0, #12
 800883a:	f7ff fa77 	bl	8007d2c <memcpy>
 800883e:	2201      	movs	r2, #1
 8008840:	4629      	mov	r1, r5
 8008842:	4620      	mov	r0, r4
 8008844:	f000 fc0a 	bl	800905c <__lshift>
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008852:	4413      	add	r3, r2
 8008854:	9308      	str	r3, [sp, #32]
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	46b8      	mov	r8, r7
 800885e:	9306      	str	r3, [sp, #24]
 8008860:	4607      	mov	r7, r0
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	4631      	mov	r1, r6
 8008866:	3b01      	subs	r3, #1
 8008868:	4650      	mov	r0, sl
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	f7ff fa6c 	bl	8007d48 <quorem>
 8008870:	4641      	mov	r1, r8
 8008872:	9002      	str	r0, [sp, #8]
 8008874:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008878:	4650      	mov	r0, sl
 800887a:	f000 fc5b 	bl	8009134 <__mcmp>
 800887e:	463a      	mov	r2, r7
 8008880:	9005      	str	r0, [sp, #20]
 8008882:	4631      	mov	r1, r6
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fc71 	bl	800916c <__mdiff>
 800888a:	68c2      	ldr	r2, [r0, #12]
 800888c:	4605      	mov	r5, r0
 800888e:	bb02      	cbnz	r2, 80088d2 <_dtoa_r+0xa7a>
 8008890:	4601      	mov	r1, r0
 8008892:	4650      	mov	r0, sl
 8008894:	f000 fc4e 	bl	8009134 <__mcmp>
 8008898:	4602      	mov	r2, r0
 800889a:	4629      	mov	r1, r5
 800889c:	4620      	mov	r0, r4
 800889e:	9209      	str	r2, [sp, #36]	; 0x24
 80088a0:	f000 fa0c 	bl	8008cbc <_Bfree>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a8:	9d04      	ldr	r5, [sp, #16]
 80088aa:	ea43 0102 	orr.w	r1, r3, r2
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	4319      	orrs	r1, r3
 80088b2:	d110      	bne.n	80088d6 <_dtoa_r+0xa7e>
 80088b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088b8:	d029      	beq.n	800890e <_dtoa_r+0xab6>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd02      	ble.n	80088c6 <_dtoa_r+0xa6e>
 80088c0:	9b02      	ldr	r3, [sp, #8]
 80088c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	f883 9000 	strb.w	r9, [r3]
 80088cc:	e774      	b.n	80087b8 <_dtoa_r+0x960>
 80088ce:	4638      	mov	r0, r7
 80088d0:	e7ba      	b.n	8008848 <_dtoa_r+0x9f0>
 80088d2:	2201      	movs	r2, #1
 80088d4:	e7e1      	b.n	800889a <_dtoa_r+0xa42>
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db04      	blt.n	80088e6 <_dtoa_r+0xa8e>
 80088dc:	9907      	ldr	r1, [sp, #28]
 80088de:	430b      	orrs	r3, r1
 80088e0:	9906      	ldr	r1, [sp, #24]
 80088e2:	430b      	orrs	r3, r1
 80088e4:	d120      	bne.n	8008928 <_dtoa_r+0xad0>
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	dded      	ble.n	80088c6 <_dtoa_r+0xa6e>
 80088ea:	4651      	mov	r1, sl
 80088ec:	2201      	movs	r2, #1
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fbb4 	bl	800905c <__lshift>
 80088f4:	4631      	mov	r1, r6
 80088f6:	4682      	mov	sl, r0
 80088f8:	f000 fc1c 	bl	8009134 <__mcmp>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc03      	bgt.n	8008908 <_dtoa_r+0xab0>
 8008900:	d1e1      	bne.n	80088c6 <_dtoa_r+0xa6e>
 8008902:	f019 0f01 	tst.w	r9, #1
 8008906:	d0de      	beq.n	80088c6 <_dtoa_r+0xa6e>
 8008908:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800890c:	d1d8      	bne.n	80088c0 <_dtoa_r+0xa68>
 800890e:	9a01      	ldr	r2, [sp, #4]
 8008910:	2339      	movs	r3, #57	; 0x39
 8008912:	7013      	strb	r3, [r2, #0]
 8008914:	462b      	mov	r3, r5
 8008916:	461d      	mov	r5, r3
 8008918:	3b01      	subs	r3, #1
 800891a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800891e:	2a39      	cmp	r2, #57	; 0x39
 8008920:	d06c      	beq.n	80089fc <_dtoa_r+0xba4>
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e747      	b.n	80087b8 <_dtoa_r+0x960>
 8008928:	2a00      	cmp	r2, #0
 800892a:	dd07      	ble.n	800893c <_dtoa_r+0xae4>
 800892c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008930:	d0ed      	beq.n	800890e <_dtoa_r+0xab6>
 8008932:	9a01      	ldr	r2, [sp, #4]
 8008934:	f109 0301 	add.w	r3, r9, #1
 8008938:	7013      	strb	r3, [r2, #0]
 800893a:	e73d      	b.n	80087b8 <_dtoa_r+0x960>
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	9a08      	ldr	r2, [sp, #32]
 8008940:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008944:	4293      	cmp	r3, r2
 8008946:	d043      	beq.n	80089d0 <_dtoa_r+0xb78>
 8008948:	4651      	mov	r1, sl
 800894a:	2300      	movs	r3, #0
 800894c:	220a      	movs	r2, #10
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f9d6 	bl	8008d00 <__multadd>
 8008954:	45b8      	cmp	r8, r7
 8008956:	4682      	mov	sl, r0
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	f04f 020a 	mov.w	r2, #10
 8008960:	4641      	mov	r1, r8
 8008962:	4620      	mov	r0, r4
 8008964:	d107      	bne.n	8008976 <_dtoa_r+0xb1e>
 8008966:	f000 f9cb 	bl	8008d00 <__multadd>
 800896a:	4680      	mov	r8, r0
 800896c:	4607      	mov	r7, r0
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	3301      	adds	r3, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	e775      	b.n	8008862 <_dtoa_r+0xa0a>
 8008976:	f000 f9c3 	bl	8008d00 <__multadd>
 800897a:	4639      	mov	r1, r7
 800897c:	4680      	mov	r8, r0
 800897e:	2300      	movs	r3, #0
 8008980:	220a      	movs	r2, #10
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f9bc 	bl	8008d00 <__multadd>
 8008988:	4607      	mov	r7, r0
 800898a:	e7f0      	b.n	800896e <_dtoa_r+0xb16>
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	9d00      	ldr	r5, [sp, #0]
 8008992:	4631      	mov	r1, r6
 8008994:	4650      	mov	r0, sl
 8008996:	f7ff f9d7 	bl	8007d48 <quorem>
 800899a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800899e:	9b00      	ldr	r3, [sp, #0]
 80089a0:	f805 9b01 	strb.w	r9, [r5], #1
 80089a4:	1aea      	subs	r2, r5, r3
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	dd07      	ble.n	80089bc <_dtoa_r+0xb64>
 80089ac:	4651      	mov	r1, sl
 80089ae:	2300      	movs	r3, #0
 80089b0:	220a      	movs	r2, #10
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f9a4 	bl	8008d00 <__multadd>
 80089b8:	4682      	mov	sl, r0
 80089ba:	e7ea      	b.n	8008992 <_dtoa_r+0xb3a>
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bfc8      	it	gt
 80089c2:	461d      	movgt	r5, r3
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	bfd8      	it	le
 80089c8:	2501      	movle	r5, #1
 80089ca:	441d      	add	r5, r3
 80089cc:	f04f 0800 	mov.w	r8, #0
 80089d0:	4651      	mov	r1, sl
 80089d2:	2201      	movs	r2, #1
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 fb41 	bl	800905c <__lshift>
 80089da:	4631      	mov	r1, r6
 80089dc:	4682      	mov	sl, r0
 80089de:	f000 fba9 	bl	8009134 <__mcmp>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	dc96      	bgt.n	8008914 <_dtoa_r+0xabc>
 80089e6:	d102      	bne.n	80089ee <_dtoa_r+0xb96>
 80089e8:	f019 0f01 	tst.w	r9, #1
 80089ec:	d192      	bne.n	8008914 <_dtoa_r+0xabc>
 80089ee:	462b      	mov	r3, r5
 80089f0:	461d      	mov	r5, r3
 80089f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f6:	2a30      	cmp	r2, #48	; 0x30
 80089f8:	d0fa      	beq.n	80089f0 <_dtoa_r+0xb98>
 80089fa:	e6dd      	b.n	80087b8 <_dtoa_r+0x960>
 80089fc:	9a00      	ldr	r2, [sp, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d189      	bne.n	8008916 <_dtoa_r+0xabe>
 8008a02:	f10b 0b01 	add.w	fp, fp, #1
 8008a06:	2331      	movs	r3, #49	; 0x31
 8008a08:	e796      	b.n	8008938 <_dtoa_r+0xae0>
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <_dtoa_r+0xbdc>)
 8008a0c:	f7ff ba99 	b.w	8007f42 <_dtoa_r+0xea>
 8008a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f47f aa6d 	bne.w	8007ef2 <_dtoa_r+0x9a>
 8008a18:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <_dtoa_r+0xbe0>)
 8008a1a:	f7ff ba92 	b.w	8007f42 <_dtoa_r+0xea>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dcb5      	bgt.n	8008990 <_dtoa_r+0xb38>
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	f73f aeb1 	bgt.w	800878e <_dtoa_r+0x936>
 8008a2c:	e7b0      	b.n	8008990 <_dtoa_r+0xb38>
 8008a2e:	bf00      	nop
 8008a30:	08009b40 	.word	0x08009b40
 8008a34:	08009aa0 	.word	0x08009aa0
 8008a38:	08009ac4 	.word	0x08009ac4

08008a3c <_free_r>:
 8008a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d044      	beq.n	8008acc <_free_r+0x90>
 8008a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a4e:	bfb8      	it	lt
 8008a50:	18e4      	addlt	r4, r4, r3
 8008a52:	f000 f8e7 	bl	8008c24 <__malloc_lock>
 8008a56:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <_free_r+0x94>)
 8008a58:	9801      	ldr	r0, [sp, #4]
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	b933      	cbnz	r3, 8008a6c <_free_r+0x30>
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a68:	f000 b8e2 	b.w	8008c30 <__malloc_unlock>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d908      	bls.n	8008a82 <_free_r+0x46>
 8008a70:	6825      	ldr	r5, [r4, #0]
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf01      	itttt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	1949      	addeq	r1, r1, r5
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	e7ed      	b.n	8008a5e <_free_r+0x22>
 8008a82:	461a      	mov	r2, r3
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b10b      	cbz	r3, 8008a8c <_free_r+0x50>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d9fa      	bls.n	8008a82 <_free_r+0x46>
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	1855      	adds	r5, r2, r1
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d10b      	bne.n	8008aac <_free_r+0x70>
 8008a94:	6824      	ldr	r4, [r4, #0]
 8008a96:	4421      	add	r1, r4
 8008a98:	1854      	adds	r4, r2, r1
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	d1e0      	bne.n	8008a62 <_free_r+0x26>
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	6053      	str	r3, [r2, #4]
 8008aa6:	440c      	add	r4, r1
 8008aa8:	6014      	str	r4, [r2, #0]
 8008aaa:	e7da      	b.n	8008a62 <_free_r+0x26>
 8008aac:	d902      	bls.n	8008ab4 <_free_r+0x78>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	e7d6      	b.n	8008a62 <_free_r+0x26>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf04      	itt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	bf04      	itt	eq
 8008ac4:	1949      	addeq	r1, r1, r5
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	6054      	str	r4, [r2, #4]
 8008aca:	e7ca      	b.n	8008a62 <_free_r+0x26>
 8008acc:	b003      	add	sp, #12
 8008ace:	bd30      	pop	{r4, r5, pc}
 8008ad0:	2000491c 	.word	0x2000491c

08008ad4 <malloc>:
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <malloc+0xc>)
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f000 b823 	b.w	8008b24 <_malloc_r>
 8008ade:	bf00      	nop
 8008ae0:	20000068 	.word	0x20000068

08008ae4 <sbrk_aligned>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4e0e      	ldr	r6, [pc, #56]	; (8008b20 <sbrk_aligned+0x3c>)
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6831      	ldr	r1, [r6, #0]
 8008aec:	4605      	mov	r5, r0
 8008aee:	b911      	cbnz	r1, 8008af6 <sbrk_aligned+0x12>
 8008af0:	f000 fe96 	bl	8009820 <_sbrk_r>
 8008af4:	6030      	str	r0, [r6, #0]
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 fe91 	bl	8009820 <_sbrk_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d00a      	beq.n	8008b18 <sbrk_aligned+0x34>
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d007      	beq.n	8008b1c <sbrk_aligned+0x38>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 fe86 	bl	8009820 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d101      	bne.n	8008b1c <sbrk_aligned+0x38>
 8008b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	20004920 	.word	0x20004920

08008b24 <_malloc_r>:
 8008b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b28:	1ccd      	adds	r5, r1, #3
 8008b2a:	f025 0503 	bic.w	r5, r5, #3
 8008b2e:	3508      	adds	r5, #8
 8008b30:	2d0c      	cmp	r5, #12
 8008b32:	bf38      	it	cc
 8008b34:	250c      	movcc	r5, #12
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	4607      	mov	r7, r0
 8008b3a:	db01      	blt.n	8008b40 <_malloc_r+0x1c>
 8008b3c:	42a9      	cmp	r1, r5
 8008b3e:	d905      	bls.n	8008b4c <_malloc_r+0x28>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	2600      	movs	r6, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c20 <_malloc_r+0xfc>
 8008b50:	f000 f868 	bl	8008c24 <__malloc_lock>
 8008b54:	f8d8 3000 	ldr.w	r3, [r8]
 8008b58:	461c      	mov	r4, r3
 8008b5a:	bb5c      	cbnz	r4, 8008bb4 <_malloc_r+0x90>
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4638      	mov	r0, r7
 8008b60:	f7ff ffc0 	bl	8008ae4 <sbrk_aligned>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	4604      	mov	r4, r0
 8008b68:	d155      	bne.n	8008c16 <_malloc_r+0xf2>
 8008b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8008b6e:	4626      	mov	r6, r4
 8008b70:	2e00      	cmp	r6, #0
 8008b72:	d145      	bne.n	8008c00 <_malloc_r+0xdc>
 8008b74:	2c00      	cmp	r4, #0
 8008b76:	d048      	beq.n	8008c0a <_malloc_r+0xe6>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	eb04 0903 	add.w	r9, r4, r3
 8008b82:	f000 fe4d 	bl	8009820 <_sbrk_r>
 8008b86:	4581      	cmp	r9, r0
 8008b88:	d13f      	bne.n	8008c0a <_malloc_r+0xe6>
 8008b8a:	6821      	ldr	r1, [r4, #0]
 8008b8c:	1a6d      	subs	r5, r5, r1
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff ffa7 	bl	8008ae4 <sbrk_aligned>
 8008b96:	3001      	adds	r0, #1
 8008b98:	d037      	beq.n	8008c0a <_malloc_r+0xe6>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	442b      	add	r3, r5
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d038      	beq.n	8008c1a <_malloc_r+0xf6>
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	42a2      	cmp	r2, r4
 8008bac:	d12b      	bne.n	8008c06 <_malloc_r+0xe2>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	e00f      	b.n	8008bd4 <_malloc_r+0xb0>
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	1b52      	subs	r2, r2, r5
 8008bb8:	d41f      	bmi.n	8008bfa <_malloc_r+0xd6>
 8008bba:	2a0b      	cmp	r2, #11
 8008bbc:	d917      	bls.n	8008bee <_malloc_r+0xca>
 8008bbe:	1961      	adds	r1, r4, r5
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	6025      	str	r5, [r4, #0]
 8008bc4:	bf18      	it	ne
 8008bc6:	6059      	strne	r1, [r3, #4]
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	bf08      	it	eq
 8008bcc:	f8c8 1000 	streq.w	r1, [r8]
 8008bd0:	5162      	str	r2, [r4, r5]
 8008bd2:	604b      	str	r3, [r1, #4]
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f104 060b 	add.w	r6, r4, #11
 8008bda:	f000 f829 	bl	8008c30 <__malloc_unlock>
 8008bde:	f026 0607 	bic.w	r6, r6, #7
 8008be2:	1d23      	adds	r3, r4, #4
 8008be4:	1af2      	subs	r2, r6, r3
 8008be6:	d0ae      	beq.n	8008b46 <_malloc_r+0x22>
 8008be8:	1b9b      	subs	r3, r3, r6
 8008bea:	50a3      	str	r3, [r4, r2]
 8008bec:	e7ab      	b.n	8008b46 <_malloc_r+0x22>
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	6862      	ldr	r2, [r4, #4]
 8008bf2:	d1dd      	bne.n	8008bb0 <_malloc_r+0x8c>
 8008bf4:	f8c8 2000 	str.w	r2, [r8]
 8008bf8:	e7ec      	b.n	8008bd4 <_malloc_r+0xb0>
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	6864      	ldr	r4, [r4, #4]
 8008bfe:	e7ac      	b.n	8008b5a <_malloc_r+0x36>
 8008c00:	4634      	mov	r4, r6
 8008c02:	6876      	ldr	r6, [r6, #4]
 8008c04:	e7b4      	b.n	8008b70 <_malloc_r+0x4c>
 8008c06:	4613      	mov	r3, r2
 8008c08:	e7cc      	b.n	8008ba4 <_malloc_r+0x80>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f000 f80e 	bl	8008c30 <__malloc_unlock>
 8008c14:	e797      	b.n	8008b46 <_malloc_r+0x22>
 8008c16:	6025      	str	r5, [r4, #0]
 8008c18:	e7dc      	b.n	8008bd4 <_malloc_r+0xb0>
 8008c1a:	605b      	str	r3, [r3, #4]
 8008c1c:	deff      	udf	#255	; 0xff
 8008c1e:	bf00      	nop
 8008c20:	2000491c 	.word	0x2000491c

08008c24 <__malloc_lock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__malloc_lock+0x8>)
 8008c26:	f7ff b87f 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20004918 	.word	0x20004918

08008c30 <__malloc_unlock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_unlock+0x8>)
 8008c32:	f7ff b87a 	b.w	8007d2a <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20004918 	.word	0x20004918

08008c3c <_Balloc>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	69c6      	ldr	r6, [r0, #28]
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	b976      	cbnz	r6, 8008c64 <_Balloc+0x28>
 8008c46:	2010      	movs	r0, #16
 8008c48:	f7ff ff44 	bl	8008ad4 <malloc>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	61e0      	str	r0, [r4, #28]
 8008c50:	b920      	cbnz	r0, 8008c5c <_Balloc+0x20>
 8008c52:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <_Balloc+0x78>)
 8008c54:	4818      	ldr	r0, [pc, #96]	; (8008cb8 <_Balloc+0x7c>)
 8008c56:	216b      	movs	r1, #107	; 0x6b
 8008c58:	f000 fdf2 	bl	8009840 <__assert_func>
 8008c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c60:	6006      	str	r6, [r0, #0]
 8008c62:	60c6      	str	r6, [r0, #12]
 8008c64:	69e6      	ldr	r6, [r4, #28]
 8008c66:	68f3      	ldr	r3, [r6, #12]
 8008c68:	b183      	cbz	r3, 8008c8c <_Balloc+0x50>
 8008c6a:	69e3      	ldr	r3, [r4, #28]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c72:	b9b8      	cbnz	r0, 8008ca4 <_Balloc+0x68>
 8008c74:	2101      	movs	r1, #1
 8008c76:	fa01 f605 	lsl.w	r6, r1, r5
 8008c7a:	1d72      	adds	r2, r6, #5
 8008c7c:	0092      	lsls	r2, r2, #2
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fdfc 	bl	800987c <_calloc_r>
 8008c84:	b160      	cbz	r0, 8008ca0 <_Balloc+0x64>
 8008c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c8a:	e00e      	b.n	8008caa <_Balloc+0x6e>
 8008c8c:	2221      	movs	r2, #33	; 0x21
 8008c8e:	2104      	movs	r1, #4
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 fdf3 	bl	800987c <_calloc_r>
 8008c96:	69e3      	ldr	r3, [r4, #28]
 8008c98:	60f0      	str	r0, [r6, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e4      	bne.n	8008c6a <_Balloc+0x2e>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	6802      	ldr	r2, [r0, #0]
 8008ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008caa:	2300      	movs	r3, #0
 8008cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cb0:	e7f7      	b.n	8008ca2 <_Balloc+0x66>
 8008cb2:	bf00      	nop
 8008cb4:	08009ad1 	.word	0x08009ad1
 8008cb8:	08009b51 	.word	0x08009b51

08008cbc <_Bfree>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	69c6      	ldr	r6, [r0, #28]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b976      	cbnz	r6, 8008ce4 <_Bfree+0x28>
 8008cc6:	2010      	movs	r0, #16
 8008cc8:	f7ff ff04 	bl	8008ad4 <malloc>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	61e8      	str	r0, [r5, #28]
 8008cd0:	b920      	cbnz	r0, 8008cdc <_Bfree+0x20>
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <_Bfree+0x3c>)
 8008cd4:	4809      	ldr	r0, [pc, #36]	; (8008cfc <_Bfree+0x40>)
 8008cd6:	218f      	movs	r1, #143	; 0x8f
 8008cd8:	f000 fdb2 	bl	8009840 <__assert_func>
 8008cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ce0:	6006      	str	r6, [r0, #0]
 8008ce2:	60c6      	str	r6, [r0, #12]
 8008ce4:	b13c      	cbz	r4, 8008cf6 <_Bfree+0x3a>
 8008ce6:	69eb      	ldr	r3, [r5, #28]
 8008ce8:	6862      	ldr	r2, [r4, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cf0:	6021      	str	r1, [r4, #0]
 8008cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	08009ad1 	.word	0x08009ad1
 8008cfc:	08009b51 	.word	0x08009b51

08008d00 <__multadd>:
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	690d      	ldr	r5, [r1, #16]
 8008d06:	4607      	mov	r7, r0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	461e      	mov	r6, r3
 8008d0c:	f101 0c14 	add.w	ip, r1, #20
 8008d10:	2000      	movs	r0, #0
 8008d12:	f8dc 3000 	ldr.w	r3, [ip]
 8008d16:	b299      	uxth	r1, r3
 8008d18:	fb02 6101 	mla	r1, r2, r1, r6
 8008d1c:	0c1e      	lsrs	r6, r3, #16
 8008d1e:	0c0b      	lsrs	r3, r1, #16
 8008d20:	fb02 3306 	mla	r3, r2, r6, r3
 8008d24:	b289      	uxth	r1, r1
 8008d26:	3001      	adds	r0, #1
 8008d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d2c:	4285      	cmp	r5, r0
 8008d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d36:	dcec      	bgt.n	8008d12 <__multadd+0x12>
 8008d38:	b30e      	cbz	r6, 8008d7e <__multadd+0x7e>
 8008d3a:	68a3      	ldr	r3, [r4, #8]
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dc19      	bgt.n	8008d74 <__multadd+0x74>
 8008d40:	6861      	ldr	r1, [r4, #4]
 8008d42:	4638      	mov	r0, r7
 8008d44:	3101      	adds	r1, #1
 8008d46:	f7ff ff79 	bl	8008c3c <_Balloc>
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	b928      	cbnz	r0, 8008d5a <__multadd+0x5a>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <__multadd+0x84>)
 8008d52:	480d      	ldr	r0, [pc, #52]	; (8008d88 <__multadd+0x88>)
 8008d54:	21ba      	movs	r1, #186	; 0xba
 8008d56:	f000 fd73 	bl	8009840 <__assert_func>
 8008d5a:	6922      	ldr	r2, [r4, #16]
 8008d5c:	3202      	adds	r2, #2
 8008d5e:	f104 010c 	add.w	r1, r4, #12
 8008d62:	0092      	lsls	r2, r2, #2
 8008d64:	300c      	adds	r0, #12
 8008d66:	f7fe ffe1 	bl	8007d2c <memcpy>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ffa5 	bl	8008cbc <_Bfree>
 8008d72:	4644      	mov	r4, r8
 8008d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d78:	3501      	adds	r5, #1
 8008d7a:	615e      	str	r6, [r3, #20]
 8008d7c:	6125      	str	r5, [r4, #16]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d84:	08009b40 	.word	0x08009b40
 8008d88:	08009b51 	.word	0x08009b51

08008d8c <__hi0bits>:
 8008d8c:	0c03      	lsrs	r3, r0, #16
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	b9d3      	cbnz	r3, 8008dc8 <__hi0bits+0x3c>
 8008d92:	0400      	lsls	r0, r0, #16
 8008d94:	2310      	movs	r3, #16
 8008d96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d9a:	bf04      	itt	eq
 8008d9c:	0200      	lsleq	r0, r0, #8
 8008d9e:	3308      	addeq	r3, #8
 8008da0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008da4:	bf04      	itt	eq
 8008da6:	0100      	lsleq	r0, r0, #4
 8008da8:	3304      	addeq	r3, #4
 8008daa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dae:	bf04      	itt	eq
 8008db0:	0080      	lsleq	r0, r0, #2
 8008db2:	3302      	addeq	r3, #2
 8008db4:	2800      	cmp	r0, #0
 8008db6:	db05      	blt.n	8008dc4 <__hi0bits+0x38>
 8008db8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008dbc:	f103 0301 	add.w	r3, r3, #1
 8008dc0:	bf08      	it	eq
 8008dc2:	2320      	moveq	r3, #32
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	4770      	bx	lr
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e7e4      	b.n	8008d96 <__hi0bits+0xa>

08008dcc <__lo0bits>:
 8008dcc:	6803      	ldr	r3, [r0, #0]
 8008dce:	f013 0207 	ands.w	r2, r3, #7
 8008dd2:	d00c      	beq.n	8008dee <__lo0bits+0x22>
 8008dd4:	07d9      	lsls	r1, r3, #31
 8008dd6:	d422      	bmi.n	8008e1e <__lo0bits+0x52>
 8008dd8:	079a      	lsls	r2, r3, #30
 8008dda:	bf49      	itett	mi
 8008ddc:	085b      	lsrmi	r3, r3, #1
 8008dde:	089b      	lsrpl	r3, r3, #2
 8008de0:	6003      	strmi	r3, [r0, #0]
 8008de2:	2201      	movmi	r2, #1
 8008de4:	bf5c      	itt	pl
 8008de6:	6003      	strpl	r3, [r0, #0]
 8008de8:	2202      	movpl	r2, #2
 8008dea:	4610      	mov	r0, r2
 8008dec:	4770      	bx	lr
 8008dee:	b299      	uxth	r1, r3
 8008df0:	b909      	cbnz	r1, 8008df6 <__lo0bits+0x2a>
 8008df2:	0c1b      	lsrs	r3, r3, #16
 8008df4:	2210      	movs	r2, #16
 8008df6:	b2d9      	uxtb	r1, r3
 8008df8:	b909      	cbnz	r1, 8008dfe <__lo0bits+0x32>
 8008dfa:	3208      	adds	r2, #8
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	0719      	lsls	r1, r3, #28
 8008e00:	bf04      	itt	eq
 8008e02:	091b      	lsreq	r3, r3, #4
 8008e04:	3204      	addeq	r2, #4
 8008e06:	0799      	lsls	r1, r3, #30
 8008e08:	bf04      	itt	eq
 8008e0a:	089b      	lsreq	r3, r3, #2
 8008e0c:	3202      	addeq	r2, #2
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d403      	bmi.n	8008e1a <__lo0bits+0x4e>
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	f102 0201 	add.w	r2, r2, #1
 8008e18:	d003      	beq.n	8008e22 <__lo0bits+0x56>
 8008e1a:	6003      	str	r3, [r0, #0]
 8008e1c:	e7e5      	b.n	8008dea <__lo0bits+0x1e>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	e7e3      	b.n	8008dea <__lo0bits+0x1e>
 8008e22:	2220      	movs	r2, #32
 8008e24:	e7e1      	b.n	8008dea <__lo0bits+0x1e>
	...

08008e28 <__i2b>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	f7ff ff05 	bl	8008c3c <_Balloc>
 8008e32:	4602      	mov	r2, r0
 8008e34:	b928      	cbnz	r0, 8008e42 <__i2b+0x1a>
 8008e36:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <__i2b+0x24>)
 8008e38:	4805      	ldr	r0, [pc, #20]	; (8008e50 <__i2b+0x28>)
 8008e3a:	f240 1145 	movw	r1, #325	; 0x145
 8008e3e:	f000 fcff 	bl	8009840 <__assert_func>
 8008e42:	2301      	movs	r3, #1
 8008e44:	6144      	str	r4, [r0, #20]
 8008e46:	6103      	str	r3, [r0, #16]
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08009b40 	.word	0x08009b40
 8008e50:	08009b51 	.word	0x08009b51

08008e54 <__multiply>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4691      	mov	r9, r2
 8008e5a:	690a      	ldr	r2, [r1, #16]
 8008e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	bfb8      	it	lt
 8008e64:	460b      	movlt	r3, r1
 8008e66:	460c      	mov	r4, r1
 8008e68:	bfbc      	itt	lt
 8008e6a:	464c      	movlt	r4, r9
 8008e6c:	4699      	movlt	r9, r3
 8008e6e:	6927      	ldr	r7, [r4, #16]
 8008e70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e74:	68a3      	ldr	r3, [r4, #8]
 8008e76:	6861      	ldr	r1, [r4, #4]
 8008e78:	eb07 060a 	add.w	r6, r7, sl
 8008e7c:	42b3      	cmp	r3, r6
 8008e7e:	b085      	sub	sp, #20
 8008e80:	bfb8      	it	lt
 8008e82:	3101      	addlt	r1, #1
 8008e84:	f7ff feda 	bl	8008c3c <_Balloc>
 8008e88:	b930      	cbnz	r0, 8008e98 <__multiply+0x44>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <__multiply+0x14c>)
 8008e8e:	4845      	ldr	r0, [pc, #276]	; (8008fa4 <__multiply+0x150>)
 8008e90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008e94:	f000 fcd4 	bl	8009840 <__assert_func>
 8008e98:	f100 0514 	add.w	r5, r0, #20
 8008e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	4543      	cmp	r3, r8
 8008ea6:	d321      	bcc.n	8008eec <__multiply+0x98>
 8008ea8:	f104 0314 	add.w	r3, r4, #20
 8008eac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008eb0:	f109 0314 	add.w	r3, r9, #20
 8008eb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008eb8:	9202      	str	r2, [sp, #8]
 8008eba:	1b3a      	subs	r2, r7, r4
 8008ebc:	3a15      	subs	r2, #21
 8008ebe:	f022 0203 	bic.w	r2, r2, #3
 8008ec2:	3204      	adds	r2, #4
 8008ec4:	f104 0115 	add.w	r1, r4, #21
 8008ec8:	428f      	cmp	r7, r1
 8008eca:	bf38      	it	cc
 8008ecc:	2204      	movcc	r2, #4
 8008ece:	9201      	str	r2, [sp, #4]
 8008ed0:	9a02      	ldr	r2, [sp, #8]
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d80c      	bhi.n	8008ef2 <__multiply+0x9e>
 8008ed8:	2e00      	cmp	r6, #0
 8008eda:	dd03      	ble.n	8008ee4 <__multiply+0x90>
 8008edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d05b      	beq.n	8008f9c <__multiply+0x148>
 8008ee4:	6106      	str	r6, [r0, #16]
 8008ee6:	b005      	add	sp, #20
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	f843 2b04 	str.w	r2, [r3], #4
 8008ef0:	e7d8      	b.n	8008ea4 <__multiply+0x50>
 8008ef2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ef6:	f1ba 0f00 	cmp.w	sl, #0
 8008efa:	d024      	beq.n	8008f46 <__multiply+0xf2>
 8008efc:	f104 0e14 	add.w	lr, r4, #20
 8008f00:	46a9      	mov	r9, r5
 8008f02:	f04f 0c00 	mov.w	ip, #0
 8008f06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f0a:	f8d9 1000 	ldr.w	r1, [r9]
 8008f0e:	fa1f fb82 	uxth.w	fp, r2
 8008f12:	b289      	uxth	r1, r1
 8008f14:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008f20:	4461      	add	r1, ip
 8008f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f26:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f2e:	b289      	uxth	r1, r1
 8008f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f34:	4577      	cmp	r7, lr
 8008f36:	f849 1b04 	str.w	r1, [r9], #4
 8008f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f3e:	d8e2      	bhi.n	8008f06 <__multiply+0xb2>
 8008f40:	9a01      	ldr	r2, [sp, #4]
 8008f42:	f845 c002 	str.w	ip, [r5, r2]
 8008f46:	9a03      	ldr	r2, [sp, #12]
 8008f48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	f1b9 0f00 	cmp.w	r9, #0
 8008f52:	d021      	beq.n	8008f98 <__multiply+0x144>
 8008f54:	6829      	ldr	r1, [r5, #0]
 8008f56:	f104 0c14 	add.w	ip, r4, #20
 8008f5a:	46ae      	mov	lr, r5
 8008f5c:	f04f 0a00 	mov.w	sl, #0
 8008f60:	f8bc b000 	ldrh.w	fp, [ip]
 8008f64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f68:	fb09 220b 	mla	r2, r9, fp, r2
 8008f6c:	4452      	add	r2, sl
 8008f6e:	b289      	uxth	r1, r1
 8008f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f74:	f84e 1b04 	str.w	r1, [lr], #4
 8008f78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f80:	f8be 1000 	ldrh.w	r1, [lr]
 8008f84:	fb09 110a 	mla	r1, r9, sl, r1
 8008f88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008f8c:	4567      	cmp	r7, ip
 8008f8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f92:	d8e5      	bhi.n	8008f60 <__multiply+0x10c>
 8008f94:	9a01      	ldr	r2, [sp, #4]
 8008f96:	50a9      	str	r1, [r5, r2]
 8008f98:	3504      	adds	r5, #4
 8008f9a:	e799      	b.n	8008ed0 <__multiply+0x7c>
 8008f9c:	3e01      	subs	r6, #1
 8008f9e:	e79b      	b.n	8008ed8 <__multiply+0x84>
 8008fa0:	08009b40 	.word	0x08009b40
 8008fa4:	08009b51 	.word	0x08009b51

08008fa8 <__pow5mult>:
 8008fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fac:	4615      	mov	r5, r2
 8008fae:	f012 0203 	ands.w	r2, r2, #3
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	d007      	beq.n	8008fc8 <__pow5mult+0x20>
 8008fb8:	4c25      	ldr	r4, [pc, #148]	; (8009050 <__pow5mult+0xa8>)
 8008fba:	3a01      	subs	r2, #1
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fc2:	f7ff fe9d 	bl	8008d00 <__multadd>
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	10ad      	asrs	r5, r5, #2
 8008fca:	d03d      	beq.n	8009048 <__pow5mult+0xa0>
 8008fcc:	69f4      	ldr	r4, [r6, #28]
 8008fce:	b97c      	cbnz	r4, 8008ff0 <__pow5mult+0x48>
 8008fd0:	2010      	movs	r0, #16
 8008fd2:	f7ff fd7f 	bl	8008ad4 <malloc>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	61f0      	str	r0, [r6, #28]
 8008fda:	b928      	cbnz	r0, 8008fe8 <__pow5mult+0x40>
 8008fdc:	4b1d      	ldr	r3, [pc, #116]	; (8009054 <__pow5mult+0xac>)
 8008fde:	481e      	ldr	r0, [pc, #120]	; (8009058 <__pow5mult+0xb0>)
 8008fe0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008fe4:	f000 fc2c 	bl	8009840 <__assert_func>
 8008fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fec:	6004      	str	r4, [r0, #0]
 8008fee:	60c4      	str	r4, [r0, #12]
 8008ff0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ff8:	b94c      	cbnz	r4, 800900e <__pow5mult+0x66>
 8008ffa:	f240 2171 	movw	r1, #625	; 0x271
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7ff ff12 	bl	8008e28 <__i2b>
 8009004:	2300      	movs	r3, #0
 8009006:	f8c8 0008 	str.w	r0, [r8, #8]
 800900a:	4604      	mov	r4, r0
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	f04f 0900 	mov.w	r9, #0
 8009012:	07eb      	lsls	r3, r5, #31
 8009014:	d50a      	bpl.n	800902c <__pow5mult+0x84>
 8009016:	4639      	mov	r1, r7
 8009018:	4622      	mov	r2, r4
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ff1a 	bl	8008e54 <__multiply>
 8009020:	4639      	mov	r1, r7
 8009022:	4680      	mov	r8, r0
 8009024:	4630      	mov	r0, r6
 8009026:	f7ff fe49 	bl	8008cbc <_Bfree>
 800902a:	4647      	mov	r7, r8
 800902c:	106d      	asrs	r5, r5, #1
 800902e:	d00b      	beq.n	8009048 <__pow5mult+0xa0>
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	b938      	cbnz	r0, 8009044 <__pow5mult+0x9c>
 8009034:	4622      	mov	r2, r4
 8009036:	4621      	mov	r1, r4
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff ff0b 	bl	8008e54 <__multiply>
 800903e:	6020      	str	r0, [r4, #0]
 8009040:	f8c0 9000 	str.w	r9, [r0]
 8009044:	4604      	mov	r4, r0
 8009046:	e7e4      	b.n	8009012 <__pow5mult+0x6a>
 8009048:	4638      	mov	r0, r7
 800904a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904e:	bf00      	nop
 8009050:	08009ca0 	.word	0x08009ca0
 8009054:	08009ad1 	.word	0x08009ad1
 8009058:	08009b51 	.word	0x08009b51

0800905c <__lshift>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	460c      	mov	r4, r1
 8009062:	6849      	ldr	r1, [r1, #4]
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	4607      	mov	r7, r0
 800906e:	4691      	mov	r9, r2
 8009070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009074:	f108 0601 	add.w	r6, r8, #1
 8009078:	42b3      	cmp	r3, r6
 800907a:	db0b      	blt.n	8009094 <__lshift+0x38>
 800907c:	4638      	mov	r0, r7
 800907e:	f7ff fddd 	bl	8008c3c <_Balloc>
 8009082:	4605      	mov	r5, r0
 8009084:	b948      	cbnz	r0, 800909a <__lshift+0x3e>
 8009086:	4602      	mov	r2, r0
 8009088:	4b28      	ldr	r3, [pc, #160]	; (800912c <__lshift+0xd0>)
 800908a:	4829      	ldr	r0, [pc, #164]	; (8009130 <__lshift+0xd4>)
 800908c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009090:	f000 fbd6 	bl	8009840 <__assert_func>
 8009094:	3101      	adds	r1, #1
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	e7ee      	b.n	8009078 <__lshift+0x1c>
 800909a:	2300      	movs	r3, #0
 800909c:	f100 0114 	add.w	r1, r0, #20
 80090a0:	f100 0210 	add.w	r2, r0, #16
 80090a4:	4618      	mov	r0, r3
 80090a6:	4553      	cmp	r3, sl
 80090a8:	db33      	blt.n	8009112 <__lshift+0xb6>
 80090aa:	6920      	ldr	r0, [r4, #16]
 80090ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090b0:	f104 0314 	add.w	r3, r4, #20
 80090b4:	f019 091f 	ands.w	r9, r9, #31
 80090b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090c0:	d02b      	beq.n	800911a <__lshift+0xbe>
 80090c2:	f1c9 0e20 	rsb	lr, r9, #32
 80090c6:	468a      	mov	sl, r1
 80090c8:	2200      	movs	r2, #0
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	fa00 f009 	lsl.w	r0, r0, r9
 80090d0:	4310      	orrs	r0, r2
 80090d2:	f84a 0b04 	str.w	r0, [sl], #4
 80090d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090da:	459c      	cmp	ip, r3
 80090dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80090e0:	d8f3      	bhi.n	80090ca <__lshift+0x6e>
 80090e2:	ebac 0304 	sub.w	r3, ip, r4
 80090e6:	3b15      	subs	r3, #21
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	3304      	adds	r3, #4
 80090ee:	f104 0015 	add.w	r0, r4, #21
 80090f2:	4584      	cmp	ip, r0
 80090f4:	bf38      	it	cc
 80090f6:	2304      	movcc	r3, #4
 80090f8:	50ca      	str	r2, [r1, r3]
 80090fa:	b10a      	cbz	r2, 8009100 <__lshift+0xa4>
 80090fc:	f108 0602 	add.w	r6, r8, #2
 8009100:	3e01      	subs	r6, #1
 8009102:	4638      	mov	r0, r7
 8009104:	612e      	str	r6, [r5, #16]
 8009106:	4621      	mov	r1, r4
 8009108:	f7ff fdd8 	bl	8008cbc <_Bfree>
 800910c:	4628      	mov	r0, r5
 800910e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009112:	f842 0f04 	str.w	r0, [r2, #4]!
 8009116:	3301      	adds	r3, #1
 8009118:	e7c5      	b.n	80090a6 <__lshift+0x4a>
 800911a:	3904      	subs	r1, #4
 800911c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009120:	f841 2f04 	str.w	r2, [r1, #4]!
 8009124:	459c      	cmp	ip, r3
 8009126:	d8f9      	bhi.n	800911c <__lshift+0xc0>
 8009128:	e7ea      	b.n	8009100 <__lshift+0xa4>
 800912a:	bf00      	nop
 800912c:	08009b40 	.word	0x08009b40
 8009130:	08009b51 	.word	0x08009b51

08009134 <__mcmp>:
 8009134:	b530      	push	{r4, r5, lr}
 8009136:	6902      	ldr	r2, [r0, #16]
 8009138:	690c      	ldr	r4, [r1, #16]
 800913a:	1b12      	subs	r2, r2, r4
 800913c:	d10e      	bne.n	800915c <__mcmp+0x28>
 800913e:	f100 0314 	add.w	r3, r0, #20
 8009142:	3114      	adds	r1, #20
 8009144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800914c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009154:	42a5      	cmp	r5, r4
 8009156:	d003      	beq.n	8009160 <__mcmp+0x2c>
 8009158:	d305      	bcc.n	8009166 <__mcmp+0x32>
 800915a:	2201      	movs	r2, #1
 800915c:	4610      	mov	r0, r2
 800915e:	bd30      	pop	{r4, r5, pc}
 8009160:	4283      	cmp	r3, r0
 8009162:	d3f3      	bcc.n	800914c <__mcmp+0x18>
 8009164:	e7fa      	b.n	800915c <__mcmp+0x28>
 8009166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800916a:	e7f7      	b.n	800915c <__mcmp+0x28>

0800916c <__mdiff>:
 800916c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	460c      	mov	r4, r1
 8009172:	4606      	mov	r6, r0
 8009174:	4611      	mov	r1, r2
 8009176:	4620      	mov	r0, r4
 8009178:	4690      	mov	r8, r2
 800917a:	f7ff ffdb 	bl	8009134 <__mcmp>
 800917e:	1e05      	subs	r5, r0, #0
 8009180:	d110      	bne.n	80091a4 <__mdiff+0x38>
 8009182:	4629      	mov	r1, r5
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff fd59 	bl	8008c3c <_Balloc>
 800918a:	b930      	cbnz	r0, 800919a <__mdiff+0x2e>
 800918c:	4b3a      	ldr	r3, [pc, #232]	; (8009278 <__mdiff+0x10c>)
 800918e:	4602      	mov	r2, r0
 8009190:	f240 2137 	movw	r1, #567	; 0x237
 8009194:	4839      	ldr	r0, [pc, #228]	; (800927c <__mdiff+0x110>)
 8009196:	f000 fb53 	bl	8009840 <__assert_func>
 800919a:	2301      	movs	r3, #1
 800919c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a4:	bfa4      	itt	ge
 80091a6:	4643      	movge	r3, r8
 80091a8:	46a0      	movge	r8, r4
 80091aa:	4630      	mov	r0, r6
 80091ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091b0:	bfa6      	itte	ge
 80091b2:	461c      	movge	r4, r3
 80091b4:	2500      	movge	r5, #0
 80091b6:	2501      	movlt	r5, #1
 80091b8:	f7ff fd40 	bl	8008c3c <_Balloc>
 80091bc:	b920      	cbnz	r0, 80091c8 <__mdiff+0x5c>
 80091be:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <__mdiff+0x10c>)
 80091c0:	4602      	mov	r2, r0
 80091c2:	f240 2145 	movw	r1, #581	; 0x245
 80091c6:	e7e5      	b.n	8009194 <__mdiff+0x28>
 80091c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091cc:	6926      	ldr	r6, [r4, #16]
 80091ce:	60c5      	str	r5, [r0, #12]
 80091d0:	f104 0914 	add.w	r9, r4, #20
 80091d4:	f108 0514 	add.w	r5, r8, #20
 80091d8:	f100 0e14 	add.w	lr, r0, #20
 80091dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091e4:	f108 0210 	add.w	r2, r8, #16
 80091e8:	46f2      	mov	sl, lr
 80091ea:	2100      	movs	r1, #0
 80091ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80091f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091f4:	fa11 f88b 	uxtah	r8, r1, fp
 80091f8:	b299      	uxth	r1, r3
 80091fa:	0c1b      	lsrs	r3, r3, #16
 80091fc:	eba8 0801 	sub.w	r8, r8, r1
 8009200:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009204:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009208:	fa1f f888 	uxth.w	r8, r8
 800920c:	1419      	asrs	r1, r3, #16
 800920e:	454e      	cmp	r6, r9
 8009210:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009214:	f84a 3b04 	str.w	r3, [sl], #4
 8009218:	d8e8      	bhi.n	80091ec <__mdiff+0x80>
 800921a:	1b33      	subs	r3, r6, r4
 800921c:	3b15      	subs	r3, #21
 800921e:	f023 0303 	bic.w	r3, r3, #3
 8009222:	3304      	adds	r3, #4
 8009224:	3415      	adds	r4, #21
 8009226:	42a6      	cmp	r6, r4
 8009228:	bf38      	it	cc
 800922a:	2304      	movcc	r3, #4
 800922c:	441d      	add	r5, r3
 800922e:	4473      	add	r3, lr
 8009230:	469e      	mov	lr, r3
 8009232:	462e      	mov	r6, r5
 8009234:	4566      	cmp	r6, ip
 8009236:	d30e      	bcc.n	8009256 <__mdiff+0xea>
 8009238:	f10c 0203 	add.w	r2, ip, #3
 800923c:	1b52      	subs	r2, r2, r5
 800923e:	f022 0203 	bic.w	r2, r2, #3
 8009242:	3d03      	subs	r5, #3
 8009244:	45ac      	cmp	ip, r5
 8009246:	bf38      	it	cc
 8009248:	2200      	movcc	r2, #0
 800924a:	4413      	add	r3, r2
 800924c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009250:	b17a      	cbz	r2, 8009272 <__mdiff+0x106>
 8009252:	6107      	str	r7, [r0, #16]
 8009254:	e7a4      	b.n	80091a0 <__mdiff+0x34>
 8009256:	f856 8b04 	ldr.w	r8, [r6], #4
 800925a:	fa11 f288 	uxtah	r2, r1, r8
 800925e:	1414      	asrs	r4, r2, #16
 8009260:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009264:	b292      	uxth	r2, r2
 8009266:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800926a:	f84e 2b04 	str.w	r2, [lr], #4
 800926e:	1421      	asrs	r1, r4, #16
 8009270:	e7e0      	b.n	8009234 <__mdiff+0xc8>
 8009272:	3f01      	subs	r7, #1
 8009274:	e7ea      	b.n	800924c <__mdiff+0xe0>
 8009276:	bf00      	nop
 8009278:	08009b40 	.word	0x08009b40
 800927c:	08009b51 	.word	0x08009b51

08009280 <__d2b>:
 8009280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009284:	460f      	mov	r7, r1
 8009286:	2101      	movs	r1, #1
 8009288:	ec59 8b10 	vmov	r8, r9, d0
 800928c:	4616      	mov	r6, r2
 800928e:	f7ff fcd5 	bl	8008c3c <_Balloc>
 8009292:	4604      	mov	r4, r0
 8009294:	b930      	cbnz	r0, 80092a4 <__d2b+0x24>
 8009296:	4602      	mov	r2, r0
 8009298:	4b24      	ldr	r3, [pc, #144]	; (800932c <__d2b+0xac>)
 800929a:	4825      	ldr	r0, [pc, #148]	; (8009330 <__d2b+0xb0>)
 800929c:	f240 310f 	movw	r1, #783	; 0x30f
 80092a0:	f000 face 	bl	8009840 <__assert_func>
 80092a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092ac:	bb2d      	cbnz	r5, 80092fa <__d2b+0x7a>
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	f1b8 0300 	subs.w	r3, r8, #0
 80092b4:	d026      	beq.n	8009304 <__d2b+0x84>
 80092b6:	4668      	mov	r0, sp
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	f7ff fd87 	bl	8008dcc <__lo0bits>
 80092be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092c2:	b1e8      	cbz	r0, 8009300 <__d2b+0x80>
 80092c4:	f1c0 0320 	rsb	r3, r0, #32
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	430b      	orrs	r3, r1
 80092ce:	40c2      	lsrs	r2, r0
 80092d0:	6163      	str	r3, [r4, #20]
 80092d2:	9201      	str	r2, [sp, #4]
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	61a3      	str	r3, [r4, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bf14      	ite	ne
 80092dc:	2202      	movne	r2, #2
 80092de:	2201      	moveq	r2, #1
 80092e0:	6122      	str	r2, [r4, #16]
 80092e2:	b1bd      	cbz	r5, 8009314 <__d2b+0x94>
 80092e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092e8:	4405      	add	r5, r0
 80092ea:	603d      	str	r5, [r7, #0]
 80092ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092f0:	6030      	str	r0, [r6, #0]
 80092f2:	4620      	mov	r0, r4
 80092f4:	b003      	add	sp, #12
 80092f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092fe:	e7d6      	b.n	80092ae <__d2b+0x2e>
 8009300:	6161      	str	r1, [r4, #20]
 8009302:	e7e7      	b.n	80092d4 <__d2b+0x54>
 8009304:	a801      	add	r0, sp, #4
 8009306:	f7ff fd61 	bl	8008dcc <__lo0bits>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	6163      	str	r3, [r4, #20]
 800930e:	3020      	adds	r0, #32
 8009310:	2201      	movs	r2, #1
 8009312:	e7e5      	b.n	80092e0 <__d2b+0x60>
 8009314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800931c:	6038      	str	r0, [r7, #0]
 800931e:	6918      	ldr	r0, [r3, #16]
 8009320:	f7ff fd34 	bl	8008d8c <__hi0bits>
 8009324:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009328:	e7e2      	b.n	80092f0 <__d2b+0x70>
 800932a:	bf00      	nop
 800932c:	08009b40 	.word	0x08009b40
 8009330:	08009b51 	.word	0x08009b51

08009334 <__sfputc_r>:
 8009334:	6893      	ldr	r3, [r2, #8]
 8009336:	3b01      	subs	r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	b410      	push	{r4}
 800933c:	6093      	str	r3, [r2, #8]
 800933e:	da08      	bge.n	8009352 <__sfputc_r+0x1e>
 8009340:	6994      	ldr	r4, [r2, #24]
 8009342:	42a3      	cmp	r3, r4
 8009344:	db01      	blt.n	800934a <__sfputc_r+0x16>
 8009346:	290a      	cmp	r1, #10
 8009348:	d103      	bne.n	8009352 <__sfputc_r+0x1e>
 800934a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934e:	f7fe bb84 	b.w	8007a5a <__swbuf_r>
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	1c58      	adds	r0, r3, #1
 8009356:	6010      	str	r0, [r2, #0]
 8009358:	7019      	strb	r1, [r3, #0]
 800935a:	4608      	mov	r0, r1
 800935c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009360:	4770      	bx	lr

08009362 <__sfputs_r>:
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	4614      	mov	r4, r2
 800936a:	18d5      	adds	r5, r2, r3
 800936c:	42ac      	cmp	r4, r5
 800936e:	d101      	bne.n	8009374 <__sfputs_r+0x12>
 8009370:	2000      	movs	r0, #0
 8009372:	e007      	b.n	8009384 <__sfputs_r+0x22>
 8009374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009378:	463a      	mov	r2, r7
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ffda 	bl	8009334 <__sfputc_r>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d1f3      	bne.n	800936c <__sfputs_r+0xa>
 8009384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009388 <_vfiprintf_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	460d      	mov	r5, r1
 800938e:	b09d      	sub	sp, #116	; 0x74
 8009390:	4614      	mov	r4, r2
 8009392:	4698      	mov	r8, r3
 8009394:	4606      	mov	r6, r0
 8009396:	b118      	cbz	r0, 80093a0 <_vfiprintf_r+0x18>
 8009398:	6a03      	ldr	r3, [r0, #32]
 800939a:	b90b      	cbnz	r3, 80093a0 <_vfiprintf_r+0x18>
 800939c:	f7fe fa76 	bl	800788c <__sinit>
 80093a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_vfiprintf_r+0x2a>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_vfiprintf_r+0x2a>
 80093ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ae:	f7fe fcbb 	bl	8007d28 <__retarget_lock_acquire_recursive>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	071b      	lsls	r3, r3, #28
 80093b6:	d501      	bpl.n	80093bc <_vfiprintf_r+0x34>
 80093b8:	692b      	ldr	r3, [r5, #16]
 80093ba:	b99b      	cbnz	r3, 80093e4 <_vfiprintf_r+0x5c>
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f7fe fb88 	bl	8007ad4 <__swsetup_r>
 80093c4:	b170      	cbz	r0, 80093e4 <_vfiprintf_r+0x5c>
 80093c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c8:	07dc      	lsls	r4, r3, #31
 80093ca:	d504      	bpl.n	80093d6 <_vfiprintf_r+0x4e>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d0:	b01d      	add	sp, #116	; 0x74
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	0598      	lsls	r0, r3, #22
 80093da:	d4f7      	bmi.n	80093cc <_vfiprintf_r+0x44>
 80093dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093de:	f7fe fca4 	bl	8007d2a <__retarget_lock_release_recursive>
 80093e2:	e7f3      	b.n	80093cc <_vfiprintf_r+0x44>
 80093e4:	2300      	movs	r3, #0
 80093e6:	9309      	str	r3, [sp, #36]	; 0x24
 80093e8:	2320      	movs	r3, #32
 80093ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f2:	2330      	movs	r3, #48	; 0x30
 80093f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80095a8 <_vfiprintf_r+0x220>
 80093f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093fc:	f04f 0901 	mov.w	r9, #1
 8009400:	4623      	mov	r3, r4
 8009402:	469a      	mov	sl, r3
 8009404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009408:	b10a      	cbz	r2, 800940e <_vfiprintf_r+0x86>
 800940a:	2a25      	cmp	r2, #37	; 0x25
 800940c:	d1f9      	bne.n	8009402 <_vfiprintf_r+0x7a>
 800940e:	ebba 0b04 	subs.w	fp, sl, r4
 8009412:	d00b      	beq.n	800942c <_vfiprintf_r+0xa4>
 8009414:	465b      	mov	r3, fp
 8009416:	4622      	mov	r2, r4
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f7ff ffa1 	bl	8009362 <__sfputs_r>
 8009420:	3001      	adds	r0, #1
 8009422:	f000 80a9 	beq.w	8009578 <_vfiprintf_r+0x1f0>
 8009426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009428:	445a      	add	r2, fp
 800942a:	9209      	str	r2, [sp, #36]	; 0x24
 800942c:	f89a 3000 	ldrb.w	r3, [sl]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80a1 	beq.w	8009578 <_vfiprintf_r+0x1f0>
 8009436:	2300      	movs	r3, #0
 8009438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800943c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009440:	f10a 0a01 	add.w	sl, sl, #1
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	9307      	str	r3, [sp, #28]
 8009448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800944c:	931a      	str	r3, [sp, #104]	; 0x68
 800944e:	4654      	mov	r4, sl
 8009450:	2205      	movs	r2, #5
 8009452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009456:	4854      	ldr	r0, [pc, #336]	; (80095a8 <_vfiprintf_r+0x220>)
 8009458:	f7f6 feca 	bl	80001f0 <memchr>
 800945c:	9a04      	ldr	r2, [sp, #16]
 800945e:	b9d8      	cbnz	r0, 8009498 <_vfiprintf_r+0x110>
 8009460:	06d1      	lsls	r1, r2, #27
 8009462:	bf44      	itt	mi
 8009464:	2320      	movmi	r3, #32
 8009466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946a:	0713      	lsls	r3, r2, #28
 800946c:	bf44      	itt	mi
 800946e:	232b      	movmi	r3, #43	; 0x2b
 8009470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009474:	f89a 3000 	ldrb.w	r3, [sl]
 8009478:	2b2a      	cmp	r3, #42	; 0x2a
 800947a:	d015      	beq.n	80094a8 <_vfiprintf_r+0x120>
 800947c:	9a07      	ldr	r2, [sp, #28]
 800947e:	4654      	mov	r4, sl
 8009480:	2000      	movs	r0, #0
 8009482:	f04f 0c0a 	mov.w	ip, #10
 8009486:	4621      	mov	r1, r4
 8009488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800948c:	3b30      	subs	r3, #48	; 0x30
 800948e:	2b09      	cmp	r3, #9
 8009490:	d94d      	bls.n	800952e <_vfiprintf_r+0x1a6>
 8009492:	b1b0      	cbz	r0, 80094c2 <_vfiprintf_r+0x13a>
 8009494:	9207      	str	r2, [sp, #28]
 8009496:	e014      	b.n	80094c2 <_vfiprintf_r+0x13a>
 8009498:	eba0 0308 	sub.w	r3, r0, r8
 800949c:	fa09 f303 	lsl.w	r3, r9, r3
 80094a0:	4313      	orrs	r3, r2
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	46a2      	mov	sl, r4
 80094a6:	e7d2      	b.n	800944e <_vfiprintf_r+0xc6>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d19      	adds	r1, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9103      	str	r1, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfbb      	ittet	lt
 80094b4:	425b      	neglt	r3, r3
 80094b6:	f042 0202 	orrlt.w	r2, r2, #2
 80094ba:	9307      	strge	r3, [sp, #28]
 80094bc:	9307      	strlt	r3, [sp, #28]
 80094be:	bfb8      	it	lt
 80094c0:	9204      	strlt	r2, [sp, #16]
 80094c2:	7823      	ldrb	r3, [r4, #0]
 80094c4:	2b2e      	cmp	r3, #46	; 0x2e
 80094c6:	d10c      	bne.n	80094e2 <_vfiprintf_r+0x15a>
 80094c8:	7863      	ldrb	r3, [r4, #1]
 80094ca:	2b2a      	cmp	r3, #42	; 0x2a
 80094cc:	d134      	bne.n	8009538 <_vfiprintf_r+0x1b0>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	1d1a      	adds	r2, r3, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	9203      	str	r2, [sp, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bfb8      	it	lt
 80094da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094de:	3402      	adds	r4, #2
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80095b8 <_vfiprintf_r+0x230>
 80094e6:	7821      	ldrb	r1, [r4, #0]
 80094e8:	2203      	movs	r2, #3
 80094ea:	4650      	mov	r0, sl
 80094ec:	f7f6 fe80 	bl	80001f0 <memchr>
 80094f0:	b138      	cbz	r0, 8009502 <_vfiprintf_r+0x17a>
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	eba0 000a 	sub.w	r0, r0, sl
 80094f8:	2240      	movs	r2, #64	; 0x40
 80094fa:	4082      	lsls	r2, r0
 80094fc:	4313      	orrs	r3, r2
 80094fe:	3401      	adds	r4, #1
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009506:	4829      	ldr	r0, [pc, #164]	; (80095ac <_vfiprintf_r+0x224>)
 8009508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800950c:	2206      	movs	r2, #6
 800950e:	f7f6 fe6f 	bl	80001f0 <memchr>
 8009512:	2800      	cmp	r0, #0
 8009514:	d03f      	beq.n	8009596 <_vfiprintf_r+0x20e>
 8009516:	4b26      	ldr	r3, [pc, #152]	; (80095b0 <_vfiprintf_r+0x228>)
 8009518:	bb1b      	cbnz	r3, 8009562 <_vfiprintf_r+0x1da>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	3307      	adds	r3, #7
 800951e:	f023 0307 	bic.w	r3, r3, #7
 8009522:	3308      	adds	r3, #8
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009528:	443b      	add	r3, r7
 800952a:	9309      	str	r3, [sp, #36]	; 0x24
 800952c:	e768      	b.n	8009400 <_vfiprintf_r+0x78>
 800952e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009532:	460c      	mov	r4, r1
 8009534:	2001      	movs	r0, #1
 8009536:	e7a6      	b.n	8009486 <_vfiprintf_r+0xfe>
 8009538:	2300      	movs	r3, #0
 800953a:	3401      	adds	r4, #1
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	4619      	mov	r1, r3
 8009540:	f04f 0c0a 	mov.w	ip, #10
 8009544:	4620      	mov	r0, r4
 8009546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800954a:	3a30      	subs	r2, #48	; 0x30
 800954c:	2a09      	cmp	r2, #9
 800954e:	d903      	bls.n	8009558 <_vfiprintf_r+0x1d0>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0c6      	beq.n	80094e2 <_vfiprintf_r+0x15a>
 8009554:	9105      	str	r1, [sp, #20]
 8009556:	e7c4      	b.n	80094e2 <_vfiprintf_r+0x15a>
 8009558:	fb0c 2101 	mla	r1, ip, r1, r2
 800955c:	4604      	mov	r4, r0
 800955e:	2301      	movs	r3, #1
 8009560:	e7f0      	b.n	8009544 <_vfiprintf_r+0x1bc>
 8009562:	ab03      	add	r3, sp, #12
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	462a      	mov	r2, r5
 8009568:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <_vfiprintf_r+0x22c>)
 800956a:	a904      	add	r1, sp, #16
 800956c:	4630      	mov	r0, r6
 800956e:	f7fd fd4d 	bl	800700c <_printf_float>
 8009572:	4607      	mov	r7, r0
 8009574:	1c78      	adds	r0, r7, #1
 8009576:	d1d6      	bne.n	8009526 <_vfiprintf_r+0x19e>
 8009578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x202>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x202>
 8009584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009586:	f7fe fbd0 	bl	8007d2a <__retarget_lock_release_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	065b      	lsls	r3, r3, #25
 800958e:	f53f af1d 	bmi.w	80093cc <_vfiprintf_r+0x44>
 8009592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009594:	e71c      	b.n	80093d0 <_vfiprintf_r+0x48>
 8009596:	ab03      	add	r3, sp, #12
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462a      	mov	r2, r5
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <_vfiprintf_r+0x22c>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7fd ffd7 	bl	8007554 <_printf_i>
 80095a6:	e7e4      	b.n	8009572 <_vfiprintf_r+0x1ea>
 80095a8:	08009cac 	.word	0x08009cac
 80095ac:	08009cb6 	.word	0x08009cb6
 80095b0:	0800700d 	.word	0x0800700d
 80095b4:	08009363 	.word	0x08009363
 80095b8:	08009cb2 	.word	0x08009cb2

080095bc <__sflush_r>:
 80095bc:	898a      	ldrh	r2, [r1, #12]
 80095be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c2:	4605      	mov	r5, r0
 80095c4:	0710      	lsls	r0, r2, #28
 80095c6:	460c      	mov	r4, r1
 80095c8:	d458      	bmi.n	800967c <__sflush_r+0xc0>
 80095ca:	684b      	ldr	r3, [r1, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dc05      	bgt.n	80095dc <__sflush_r+0x20>
 80095d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dc02      	bgt.n	80095dc <__sflush_r+0x20>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095de:	2e00      	cmp	r6, #0
 80095e0:	d0f9      	beq.n	80095d6 <__sflush_r+0x1a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095e8:	682f      	ldr	r7, [r5, #0]
 80095ea:	6a21      	ldr	r1, [r4, #32]
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	d032      	beq.n	8009656 <__sflush_r+0x9a>
 80095f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	075a      	lsls	r2, r3, #29
 80095f6:	d505      	bpl.n	8009604 <__sflush_r+0x48>
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	1ac0      	subs	r0, r0, r3
 80095fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095fe:	b10b      	cbz	r3, 8009604 <__sflush_r+0x48>
 8009600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009602:	1ac0      	subs	r0, r0, r3
 8009604:	2300      	movs	r3, #0
 8009606:	4602      	mov	r2, r0
 8009608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800960a:	6a21      	ldr	r1, [r4, #32]
 800960c:	4628      	mov	r0, r5
 800960e:	47b0      	blx	r6
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	d106      	bne.n	8009624 <__sflush_r+0x68>
 8009616:	6829      	ldr	r1, [r5, #0]
 8009618:	291d      	cmp	r1, #29
 800961a:	d82b      	bhi.n	8009674 <__sflush_r+0xb8>
 800961c:	4a29      	ldr	r2, [pc, #164]	; (80096c4 <__sflush_r+0x108>)
 800961e:	410a      	asrs	r2, r1
 8009620:	07d6      	lsls	r6, r2, #31
 8009622:	d427      	bmi.n	8009674 <__sflush_r+0xb8>
 8009624:	2200      	movs	r2, #0
 8009626:	6062      	str	r2, [r4, #4]
 8009628:	04d9      	lsls	r1, r3, #19
 800962a:	6922      	ldr	r2, [r4, #16]
 800962c:	6022      	str	r2, [r4, #0]
 800962e:	d504      	bpl.n	800963a <__sflush_r+0x7e>
 8009630:	1c42      	adds	r2, r0, #1
 8009632:	d101      	bne.n	8009638 <__sflush_r+0x7c>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b903      	cbnz	r3, 800963a <__sflush_r+0x7e>
 8009638:	6560      	str	r0, [r4, #84]	; 0x54
 800963a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800963c:	602f      	str	r7, [r5, #0]
 800963e:	2900      	cmp	r1, #0
 8009640:	d0c9      	beq.n	80095d6 <__sflush_r+0x1a>
 8009642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009646:	4299      	cmp	r1, r3
 8009648:	d002      	beq.n	8009650 <__sflush_r+0x94>
 800964a:	4628      	mov	r0, r5
 800964c:	f7ff f9f6 	bl	8008a3c <_free_r>
 8009650:	2000      	movs	r0, #0
 8009652:	6360      	str	r0, [r4, #52]	; 0x34
 8009654:	e7c0      	b.n	80095d8 <__sflush_r+0x1c>
 8009656:	2301      	movs	r3, #1
 8009658:	4628      	mov	r0, r5
 800965a:	47b0      	blx	r6
 800965c:	1c41      	adds	r1, r0, #1
 800965e:	d1c8      	bne.n	80095f2 <__sflush_r+0x36>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0c5      	beq.n	80095f2 <__sflush_r+0x36>
 8009666:	2b1d      	cmp	r3, #29
 8009668:	d001      	beq.n	800966e <__sflush_r+0xb2>
 800966a:	2b16      	cmp	r3, #22
 800966c:	d101      	bne.n	8009672 <__sflush_r+0xb6>
 800966e:	602f      	str	r7, [r5, #0]
 8009670:	e7b1      	b.n	80095d6 <__sflush_r+0x1a>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	e7ad      	b.n	80095d8 <__sflush_r+0x1c>
 800967c:	690f      	ldr	r7, [r1, #16]
 800967e:	2f00      	cmp	r7, #0
 8009680:	d0a9      	beq.n	80095d6 <__sflush_r+0x1a>
 8009682:	0793      	lsls	r3, r2, #30
 8009684:	680e      	ldr	r6, [r1, #0]
 8009686:	bf08      	it	eq
 8009688:	694b      	ldreq	r3, [r1, #20]
 800968a:	600f      	str	r7, [r1, #0]
 800968c:	bf18      	it	ne
 800968e:	2300      	movne	r3, #0
 8009690:	eba6 0807 	sub.w	r8, r6, r7
 8009694:	608b      	str	r3, [r1, #8]
 8009696:	f1b8 0f00 	cmp.w	r8, #0
 800969a:	dd9c      	ble.n	80095d6 <__sflush_r+0x1a>
 800969c:	6a21      	ldr	r1, [r4, #32]
 800969e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096a0:	4643      	mov	r3, r8
 80096a2:	463a      	mov	r2, r7
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b0      	blx	r6
 80096a8:	2800      	cmp	r0, #0
 80096aa:	dc06      	bgt.n	80096ba <__sflush_r+0xfe>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b8:	e78e      	b.n	80095d8 <__sflush_r+0x1c>
 80096ba:	4407      	add	r7, r0
 80096bc:	eba8 0800 	sub.w	r8, r8, r0
 80096c0:	e7e9      	b.n	8009696 <__sflush_r+0xda>
 80096c2:	bf00      	nop
 80096c4:	dfbffffe 	.word	0xdfbffffe

080096c8 <_fflush_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	4605      	mov	r5, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	b913      	cbnz	r3, 80096d8 <_fflush_r+0x10>
 80096d2:	2500      	movs	r5, #0
 80096d4:	4628      	mov	r0, r5
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	b118      	cbz	r0, 80096e2 <_fflush_r+0x1a>
 80096da:	6a03      	ldr	r3, [r0, #32]
 80096dc:	b90b      	cbnz	r3, 80096e2 <_fflush_r+0x1a>
 80096de:	f7fe f8d5 	bl	800788c <__sinit>
 80096e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0f3      	beq.n	80096d2 <_fflush_r+0xa>
 80096ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096ec:	07d0      	lsls	r0, r2, #31
 80096ee:	d404      	bmi.n	80096fa <_fflush_r+0x32>
 80096f0:	0599      	lsls	r1, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_fflush_r+0x32>
 80096f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f6:	f7fe fb17 	bl	8007d28 <__retarget_lock_acquire_recursive>
 80096fa:	4628      	mov	r0, r5
 80096fc:	4621      	mov	r1, r4
 80096fe:	f7ff ff5d 	bl	80095bc <__sflush_r>
 8009702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009704:	07da      	lsls	r2, r3, #31
 8009706:	4605      	mov	r5, r0
 8009708:	d4e4      	bmi.n	80096d4 <_fflush_r+0xc>
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	059b      	lsls	r3, r3, #22
 800970e:	d4e1      	bmi.n	80096d4 <_fflush_r+0xc>
 8009710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009712:	f7fe fb0a 	bl	8007d2a <__retarget_lock_release_recursive>
 8009716:	e7dd      	b.n	80096d4 <_fflush_r+0xc>

08009718 <__swhatbuf_r>:
 8009718:	b570      	push	{r4, r5, r6, lr}
 800971a:	460c      	mov	r4, r1
 800971c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009720:	2900      	cmp	r1, #0
 8009722:	b096      	sub	sp, #88	; 0x58
 8009724:	4615      	mov	r5, r2
 8009726:	461e      	mov	r6, r3
 8009728:	da0d      	bge.n	8009746 <__swhatbuf_r+0x2e>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009730:	f04f 0100 	mov.w	r1, #0
 8009734:	bf0c      	ite	eq
 8009736:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800973a:	2340      	movne	r3, #64	; 0x40
 800973c:	2000      	movs	r0, #0
 800973e:	6031      	str	r1, [r6, #0]
 8009740:	602b      	str	r3, [r5, #0]
 8009742:	b016      	add	sp, #88	; 0x58
 8009744:	bd70      	pop	{r4, r5, r6, pc}
 8009746:	466a      	mov	r2, sp
 8009748:	f000 f848 	bl	80097dc <_fstat_r>
 800974c:	2800      	cmp	r0, #0
 800974e:	dbec      	blt.n	800972a <__swhatbuf_r+0x12>
 8009750:	9901      	ldr	r1, [sp, #4]
 8009752:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009756:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800975a:	4259      	negs	r1, r3
 800975c:	4159      	adcs	r1, r3
 800975e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009762:	e7eb      	b.n	800973c <__swhatbuf_r+0x24>

08009764 <__smakebuf_r>:
 8009764:	898b      	ldrh	r3, [r1, #12]
 8009766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009768:	079d      	lsls	r5, r3, #30
 800976a:	4606      	mov	r6, r0
 800976c:	460c      	mov	r4, r1
 800976e:	d507      	bpl.n	8009780 <__smakebuf_r+0x1c>
 8009770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	6123      	str	r3, [r4, #16]
 8009778:	2301      	movs	r3, #1
 800977a:	6163      	str	r3, [r4, #20]
 800977c:	b002      	add	sp, #8
 800977e:	bd70      	pop	{r4, r5, r6, pc}
 8009780:	ab01      	add	r3, sp, #4
 8009782:	466a      	mov	r2, sp
 8009784:	f7ff ffc8 	bl	8009718 <__swhatbuf_r>
 8009788:	9900      	ldr	r1, [sp, #0]
 800978a:	4605      	mov	r5, r0
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff f9c9 	bl	8008b24 <_malloc_r>
 8009792:	b948      	cbnz	r0, 80097a8 <__smakebuf_r+0x44>
 8009794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009798:	059a      	lsls	r2, r3, #22
 800979a:	d4ef      	bmi.n	800977c <__smakebuf_r+0x18>
 800979c:	f023 0303 	bic.w	r3, r3, #3
 80097a0:	f043 0302 	orr.w	r3, r3, #2
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	e7e3      	b.n	8009770 <__smakebuf_r+0xc>
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	9b00      	ldr	r3, [sp, #0]
 80097b4:	6163      	str	r3, [r4, #20]
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	6120      	str	r0, [r4, #16]
 80097ba:	b15b      	cbz	r3, 80097d4 <__smakebuf_r+0x70>
 80097bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097c0:	4630      	mov	r0, r6
 80097c2:	f000 f81d 	bl	8009800 <_isatty_r>
 80097c6:	b128      	cbz	r0, 80097d4 <__smakebuf_r+0x70>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	f043 0301 	orr.w	r3, r3, #1
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	431d      	orrs	r5, r3
 80097d8:	81a5      	strh	r5, [r4, #12]
 80097da:	e7cf      	b.n	800977c <__smakebuf_r+0x18>

080097dc <_fstat_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d07      	ldr	r5, [pc, #28]	; (80097fc <_fstat_r+0x20>)
 80097e0:	2300      	movs	r3, #0
 80097e2:	4604      	mov	r4, r0
 80097e4:	4608      	mov	r0, r1
 80097e6:	4611      	mov	r1, r2
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f7f8 f850 	bl	800188e <_fstat>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	d102      	bne.n	80097f8 <_fstat_r+0x1c>
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	b103      	cbz	r3, 80097f8 <_fstat_r+0x1c>
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	20004914 	.word	0x20004914

08009800 <_isatty_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	; (800981c <_isatty_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f8 f84f 	bl	80018ae <_isatty>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_isatty_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_isatty_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	20004914 	.word	0x20004914

08009820 <_sbrk_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d06      	ldr	r5, [pc, #24]	; (800983c <_sbrk_r+0x1c>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	f7f8 f858 	bl	80018e0 <_sbrk>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_sbrk_r+0x1a>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_sbrk_r+0x1a>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20004914 	.word	0x20004914

08009840 <__assert_func>:
 8009840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009842:	4614      	mov	r4, r2
 8009844:	461a      	mov	r2, r3
 8009846:	4b09      	ldr	r3, [pc, #36]	; (800986c <__assert_func+0x2c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4605      	mov	r5, r0
 800984c:	68d8      	ldr	r0, [r3, #12]
 800984e:	b14c      	cbz	r4, 8009864 <__assert_func+0x24>
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <__assert_func+0x30>)
 8009852:	9100      	str	r1, [sp, #0]
 8009854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009858:	4906      	ldr	r1, [pc, #24]	; (8009874 <__assert_func+0x34>)
 800985a:	462b      	mov	r3, r5
 800985c:	f000 f844 	bl	80098e8 <fiprintf>
 8009860:	f000 f854 	bl	800990c <abort>
 8009864:	4b04      	ldr	r3, [pc, #16]	; (8009878 <__assert_func+0x38>)
 8009866:	461c      	mov	r4, r3
 8009868:	e7f3      	b.n	8009852 <__assert_func+0x12>
 800986a:	bf00      	nop
 800986c:	20000068 	.word	0x20000068
 8009870:	08009cc7 	.word	0x08009cc7
 8009874:	08009cd4 	.word	0x08009cd4
 8009878:	08009d02 	.word	0x08009d02

0800987c <_calloc_r>:
 800987c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800987e:	fba1 2402 	umull	r2, r4, r1, r2
 8009882:	b94c      	cbnz	r4, 8009898 <_calloc_r+0x1c>
 8009884:	4611      	mov	r1, r2
 8009886:	9201      	str	r2, [sp, #4]
 8009888:	f7ff f94c 	bl	8008b24 <_malloc_r>
 800988c:	9a01      	ldr	r2, [sp, #4]
 800988e:	4605      	mov	r5, r0
 8009890:	b930      	cbnz	r0, 80098a0 <_calloc_r+0x24>
 8009892:	4628      	mov	r0, r5
 8009894:	b003      	add	sp, #12
 8009896:	bd30      	pop	{r4, r5, pc}
 8009898:	220c      	movs	r2, #12
 800989a:	6002      	str	r2, [r0, #0]
 800989c:	2500      	movs	r5, #0
 800989e:	e7f8      	b.n	8009892 <_calloc_r+0x16>
 80098a0:	4621      	mov	r1, r4
 80098a2:	f7fe f96f 	bl	8007b84 <memset>
 80098a6:	e7f4      	b.n	8009892 <_calloc_r+0x16>

080098a8 <__ascii_mbtowc>:
 80098a8:	b082      	sub	sp, #8
 80098aa:	b901      	cbnz	r1, 80098ae <__ascii_mbtowc+0x6>
 80098ac:	a901      	add	r1, sp, #4
 80098ae:	b142      	cbz	r2, 80098c2 <__ascii_mbtowc+0x1a>
 80098b0:	b14b      	cbz	r3, 80098c6 <__ascii_mbtowc+0x1e>
 80098b2:	7813      	ldrb	r3, [r2, #0]
 80098b4:	600b      	str	r3, [r1, #0]
 80098b6:	7812      	ldrb	r2, [r2, #0]
 80098b8:	1e10      	subs	r0, r2, #0
 80098ba:	bf18      	it	ne
 80098bc:	2001      	movne	r0, #1
 80098be:	b002      	add	sp, #8
 80098c0:	4770      	bx	lr
 80098c2:	4610      	mov	r0, r2
 80098c4:	e7fb      	b.n	80098be <__ascii_mbtowc+0x16>
 80098c6:	f06f 0001 	mvn.w	r0, #1
 80098ca:	e7f8      	b.n	80098be <__ascii_mbtowc+0x16>

080098cc <__ascii_wctomb>:
 80098cc:	b149      	cbz	r1, 80098e2 <__ascii_wctomb+0x16>
 80098ce:	2aff      	cmp	r2, #255	; 0xff
 80098d0:	bf85      	ittet	hi
 80098d2:	238a      	movhi	r3, #138	; 0x8a
 80098d4:	6003      	strhi	r3, [r0, #0]
 80098d6:	700a      	strbls	r2, [r1, #0]
 80098d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80098dc:	bf98      	it	ls
 80098de:	2001      	movls	r0, #1
 80098e0:	4770      	bx	lr
 80098e2:	4608      	mov	r0, r1
 80098e4:	4770      	bx	lr
	...

080098e8 <fiprintf>:
 80098e8:	b40e      	push	{r1, r2, r3}
 80098ea:	b503      	push	{r0, r1, lr}
 80098ec:	4601      	mov	r1, r0
 80098ee:	ab03      	add	r3, sp, #12
 80098f0:	4805      	ldr	r0, [pc, #20]	; (8009908 <fiprintf+0x20>)
 80098f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f6:	6800      	ldr	r0, [r0, #0]
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	f7ff fd45 	bl	8009388 <_vfiprintf_r>
 80098fe:	b002      	add	sp, #8
 8009900:	f85d eb04 	ldr.w	lr, [sp], #4
 8009904:	b003      	add	sp, #12
 8009906:	4770      	bx	lr
 8009908:	20000068 	.word	0x20000068

0800990c <abort>:
 800990c:	b508      	push	{r3, lr}
 800990e:	2006      	movs	r0, #6
 8009910:	f000 f82c 	bl	800996c <raise>
 8009914:	2001      	movs	r0, #1
 8009916:	f7f7 ff87 	bl	8001828 <_exit>

0800991a <_raise_r>:
 800991a:	291f      	cmp	r1, #31
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	d904      	bls.n	800992e <_raise_r+0x14>
 8009924:	2316      	movs	r3, #22
 8009926:	6003      	str	r3, [r0, #0]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009930:	b112      	cbz	r2, 8009938 <_raise_r+0x1e>
 8009932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009936:	b94b      	cbnz	r3, 800994c <_raise_r+0x32>
 8009938:	4620      	mov	r0, r4
 800993a:	f000 f831 	bl	80099a0 <_getpid_r>
 800993e:	462a      	mov	r2, r5
 8009940:	4601      	mov	r1, r0
 8009942:	4620      	mov	r0, r4
 8009944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009948:	f000 b818 	b.w	800997c <_kill_r>
 800994c:	2b01      	cmp	r3, #1
 800994e:	d00a      	beq.n	8009966 <_raise_r+0x4c>
 8009950:	1c59      	adds	r1, r3, #1
 8009952:	d103      	bne.n	800995c <_raise_r+0x42>
 8009954:	2316      	movs	r3, #22
 8009956:	6003      	str	r3, [r0, #0]
 8009958:	2001      	movs	r0, #1
 800995a:	e7e7      	b.n	800992c <_raise_r+0x12>
 800995c:	2400      	movs	r4, #0
 800995e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009962:	4628      	mov	r0, r5
 8009964:	4798      	blx	r3
 8009966:	2000      	movs	r0, #0
 8009968:	e7e0      	b.n	800992c <_raise_r+0x12>
	...

0800996c <raise>:
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <raise+0xc>)
 800996e:	4601      	mov	r1, r0
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	f7ff bfd2 	b.w	800991a <_raise_r>
 8009976:	bf00      	nop
 8009978:	20000068 	.word	0x20000068

0800997c <_kill_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d07      	ldr	r5, [pc, #28]	; (800999c <_kill_r+0x20>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	f7f7 ff3d 	bl	8001808 <_kill>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d102      	bne.n	8009998 <_kill_r+0x1c>
 8009992:	682b      	ldr	r3, [r5, #0]
 8009994:	b103      	cbz	r3, 8009998 <_kill_r+0x1c>
 8009996:	6023      	str	r3, [r4, #0]
 8009998:	bd38      	pop	{r3, r4, r5, pc}
 800999a:	bf00      	nop
 800999c:	20004914 	.word	0x20004914

080099a0 <_getpid_r>:
 80099a0:	f7f7 bf2a 	b.w	80017f8 <_getpid>

080099a4 <_init>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr

080099b0 <_fini>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr
