
gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08008d10  08008d10  00018d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009294  08009294  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800929c  0800929c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800929c  0800929c  0001929c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080092a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000830  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a0c  20000a0c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ce6e  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002005  00000000  00000000  0002d0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  0002f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000850  00000000  00000000  0002fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000242ff  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ce41  00000000  00000000  000546f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5ebe  00000000  00000000  00061538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004130  00000000  00000000  001373f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0013b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008cf4 	.word	0x08008cf4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08008cf4 	.word	0x08008cf4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <parse_GPRMC>:
#include <string.h>
#include "gps.h"

void
parse_GPRMC(const char *line, struct GPRMC *data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b092      	sub	sp, #72	; 0x48
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	int fieldStart = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
	int count = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	643b      	str	r3, [r7, #64]	; 0x40
	char temp_buff[MAX_FIELD_LENGTH + 1];

	// fieldize the input line
	for (int i = 0; line[i] != '\0'; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001026:	e1a5      	b.n	8001374 <parse_GPRMC+0x364>
		if (line[i] == ',' || line[i + 1] == '\0') {
 8001028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b2c      	cmp	r3, #44	; 0x2c
 8001032:	d007      	beq.n	8001044 <parse_GPRMC+0x34>
 8001034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001036:	3301      	adds	r3, #1
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8195 	bne.w	800136e <parse_GPRMC+0x35e>
			int fieldLength = i - fieldStart;
 8001044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
			char field[MAX_FIELD_LENGTH + 1];

			strncpy(field, line + fieldStart, fieldLength);
 800104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	18d1      	adds	r1, r2, r3
 8001052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f005 faf3 	bl	8006644 <strncpy>
			field[fieldLength] = '\0';
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	4413      	add	r3, r2
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			printf("count %i fiel %s\r\n", count, field);
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	461a      	mov	r2, r3
 8001070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001072:	48c6      	ldr	r0, [pc, #792]	; (800138c <parse_GPRMC+0x37c>)
 8001074:	f005 f986 	bl	8006384 <iprintf>

			switch (count) {
 8001078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800107a:	3b01      	subs	r3, #1
 800107c:	2b0c      	cmp	r3, #12
 800107e:	f200 8170 	bhi.w	8001362 <parse_GPRMC+0x352>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <parse_GPRMC+0x78>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	080010bd 	.word	0x080010bd
 800108c:	080010d5 	.word	0x080010d5
 8001090:	08001159 	.word	0x08001159
 8001094:	08001163 	.word	0x08001163
 8001098:	080011e7 	.word	0x080011e7
 800109c:	080011fd 	.word	0x080011fd
 80010a0:	08001281 	.word	0x08001281
 80010a4:	08001295 	.word	0x08001295
 80010a8:	08001363 	.word	0x08001363
 80010ac:	080012b3 	.word	0x080012b3
 80010b0:	08001363 	.word	0x08001363
 80010b4:	08001363 	.word	0x08001363
 80010b8:	08001337 	.word	0x08001337
			case 1:
				strncpy(data->log_header,
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	3301      	adds	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	4619      	mov	r1, r3
 80010c8:	f005 fabc 	bl	8006644 <strncpy>
				        field + 1,
				        LOG_HEADER_LENGTH);
				data->log_header[LOG_HEADER_LENGTH] = '\0';
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	715a      	strb	r2, [r3, #5]
				break;
 80010d2:	e146      	b.n	8001362 <parse_GPRMC+0x352>
			case 2:
				strncpy(temp_buff, field, UTC_HOURS_LENGTH);
 80010d4:	f107 0108 	add.w	r1, r7, #8
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	2202      	movs	r2, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fab0 	bl	8006644 <strncpy>
				temp_buff[UTC_HOURS_LENGTH] = '\0';
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.hours = atoi(temp_buff);
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fd87 	bl	8004c02 <atoi>
 80010f4:	4602      	mov	r2, r0
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	615a      	str	r2, [r3, #20]

				strncpy(temp_buff,
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	3302      	adds	r3, #2
 8001100:	f107 0020 	add.w	r0, r7, #32
 8001104:	2202      	movs	r2, #2
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fa9c 	bl	8006644 <strncpy>
				        field + UTC_HOURS_LENGTH,
				        UTC_MINUTES_LENGTH);
				temp_buff[2] = '\0';
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.minutes = atoi(temp_buff);
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fd73 	bl	8004c02 <atoi>
 800111c:	4602      	mov	r2, r0
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	619a      	str	r2, [r3, #24]

				strncpy(temp_buff,
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	3304      	adds	r3, #4
 8001128:	f107 0020 	add.w	r0, r7, #32
 800112c:	2205      	movs	r2, #5
 800112e:	4619      	mov	r1, r3
 8001130:	f005 fa88 	bl	8006644 <strncpy>
				        field + UTC_HOURS_LENGTH +
				                UTC_MINUTES_LENGTH,
				        UTC_SECOND_LENGTH);
				temp_buff[UTC_SECOND_LENGTH] = '\0';
 8001134:	2300      	movs	r3, #0
 8001136:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				data->datetime.seconds = atof(temp_buff);
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fd5c 	bl	8004bfc <atof>
 8001144:	ec53 2b10 	vmov	r2, r3, d0
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fd5c 	bl	8000c08 <__aeabi_d2f>
 8001150:	4602      	mov	r2, r0
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	61da      	str	r2, [r3, #28]
				break;
 8001156:	e104      	b.n	8001362 <parse_GPRMC+0x352>
			case 3:
				data->status = field[0];
 8001158:	7a3a      	ldrb	r2, [r7, #8]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f883 2020 	strb.w	r2, [r3, #32]
				break;
 8001160:	e0ff      	b.n	8001362 <parse_GPRMC+0x352>
			case 4:
				if (data->status == 'A') {
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001168:	2b41      	cmp	r3, #65	; 0x41
 800116a:	f040 80f3 	bne.w	8001354 <parse_GPRMC+0x344>
					strncpy(temp_buff,
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	2202      	movs	r2, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fa63 	bl	8006644 <strncpy>
					        field,
					        LATITUDE_DEGREES_LENGTH);
					temp_buff[LATITUDE_DEGREES_LENGTH] = '\0';
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->latitude.degrees = atoi(temp_buff);
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fd3a 	bl	8004c02 <atoi>
 800118e:	4602      	mov	r2, r0
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

					strncpy(temp_buff,
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	3302      	adds	r3, #2
 800119a:	f107 0020 	add.w	r0, r7, #32
 800119e:	2202      	movs	r2, #2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f005 fa4f 	bl	8006644 <strncpy>
					        field + LATITUDE_DEGREES_LENGTH,
					        LATITUDE_MINUTES_LENGTH);
					temp_buff[LATITUDE_MINUTES_LENGTH] = '\0';
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->latitude.minutes = atoi(temp_buff);
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fd26 	bl	8004c02 <atoi>
 80011b6:	4602      	mov	r2, r0
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28

					strncpy(temp_buff,
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	3305      	adds	r3, #5
 80011c2:	f107 0020 	add.w	r0, r7, #32
 80011c6:	220b      	movs	r2, #11
 80011c8:	4619      	mov	r1, r3
 80011ca:	f005 fa3b 	bl	8006644 <strncpy>
					        field + LATITUDE_DEGREES_LENGTH +
					                LATITUDE_MINUTES_LENGTH + 1,
					        LATITUDE_SECONDS_LENGTH);
					temp_buff[LATITUDE_SECONDS_LENGTH] = '\0';
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					data->latitude.seconds = atoi(temp_buff);
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fd12 	bl	8004c02 <atoi>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				break;
 80011e4:	e0b6      	b.n	8001354 <parse_GPRMC+0x344>
			case 5:
				if (data->status == 'A') {
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ec:	2b41      	cmp	r3, #65	; 0x41
 80011ee:	f040 80b3 	bne.w	8001358 <parse_GPRMC+0x348>
					data->latitude.direction = field[0];
 80011f2:	7a3a      	ldrb	r2, [r7, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
				break;
 80011fa:	e0ad      	b.n	8001358 <parse_GPRMC+0x348>
			case 6:
				if (data->status == 'A') {
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001202:	2b41      	cmp	r3, #65	; 0x41
 8001204:	f040 80aa 	bne.w	800135c <parse_GPRMC+0x34c>
					strncpy(temp_buff,
 8001208:	f107 0108 	add.w	r1, r7, #8
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	2202      	movs	r2, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fa16 	bl	8006644 <strncpy>
					        field,
					        LONGITUDE_DEGREES_LENGTH);
					temp_buff[LONGITUDE_DEGREES_LENGTH] = '\0';
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->longitude.degrees = atoi(temp_buff);
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fced 	bl	8004c02 <atoi>
 8001228:	4602      	mov	r2, r0
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	635a      	str	r2, [r3, #52]	; 0x34

					strncpy(temp_buff,
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	3302      	adds	r3, #2
 8001234:	f107 0020 	add.w	r0, r7, #32
 8001238:	2202      	movs	r2, #2
 800123a:	4619      	mov	r1, r3
 800123c:	f005 fa02 	bl	8006644 <strncpy>
					        field + LONGITUDE_DEGREES_LENGTH,
					        LONGITUDE_MINUTES_LENGTH);
					temp_buff[2] = '\0';
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->longitude.minutes = atoi(temp_buff);
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fcd9 	bl	8004c02 <atoi>
 8001250:	4602      	mov	r2, r0
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	639a      	str	r2, [r3, #56]	; 0x38

					strncpy(temp_buff,
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	3305      	adds	r3, #5
 800125c:	f107 0020 	add.w	r0, r7, #32
 8001260:	220b      	movs	r2, #11
 8001262:	4619      	mov	r1, r3
 8001264:	f005 f9ee 	bl	8006644 <strncpy>
					        field + LONGITUDE_DEGREES_LENGTH +
					                LONGITUDE_MINUTES_LENGTH +
					                1,
					        LONGITUDE_SECONDS_LENGTH);
					temp_buff[LONGITUDE_SECONDS_LENGTH] = '\0';
 8001268:	2300      	movs	r3, #0
 800126a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					data->longitude.seconds = atoi(temp_buff);
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fcc5 	bl	8004c02 <atoi>
 8001278:	4602      	mov	r2, r0
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
				}
				break;
 800127e:	e06d      	b.n	800135c <parse_GPRMC+0x34c>
			case 7:
				if (data->status == 'A') {
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001286:	2b41      	cmp	r3, #65	; 0x41
 8001288:	d16a      	bne.n	8001360 <parse_GPRMC+0x350>
					data->longitude.direction = field[0];
 800128a:	7a3a      	ldrb	r2, [r7, #8]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				}
				break;
 8001292:	e065      	b.n	8001360 <parse_GPRMC+0x350>
			case 8:
				data->speed = atof(field);
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fcaf 	bl	8004bfc <atof>
 800129e:	ec53 2b10 	vmov	r2, r3, d0
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fcaf 	bl	8000c08 <__aeabi_d2f>
 80012aa:	4602      	mov	r2, r0
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	645a      	str	r2, [r3, #68]	; 0x44
				break;
 80012b0:	e057      	b.n	8001362 <parse_GPRMC+0x352>
			case 10:
				strncpy(temp_buff, field, DAYS_LENGTH);
 80012b2:	f107 0108 	add.w	r1, r7, #8
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2202      	movs	r2, #2
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 f9c1 	bl	8006644 <strncpy>
				temp_buff[DAYS_LENGTH] = '\0';
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.day = atoi(temp_buff);
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fc98 	bl	8004c02 <atoi>
 80012d2:	4602      	mov	r2, r0
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	611a      	str	r2, [r3, #16]

				strncpy(temp_buff,
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	3302      	adds	r3, #2
 80012de:	f107 0020 	add.w	r0, r7, #32
 80012e2:	2202      	movs	r2, #2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f005 f9ad 	bl	8006644 <strncpy>
				        field + DAYS_LENGTH,
				        MONTHS_LENGTH);
				temp_buff[MONTHS_LENGTH] = '\0';
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.month = atoi(temp_buff);
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fc84 	bl	8004c02 <atoi>
 80012fa:	4602      	mov	r2, r0
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	60da      	str	r2, [r3, #12]

				strncpy(temp_buff,
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	3304      	adds	r3, #4
 8001306:	f107 0020 	add.w	r0, r7, #32
 800130a:	2202      	movs	r2, #2
 800130c:	4619      	mov	r1, r3
 800130e:	f005 f999 	bl	8006644 <strncpy>
				        field + DAYS_LENGTH + MONTHS_LENGTH,
				        YEARS_LENGTH);
				temp_buff[YEARS_LENGTH] = '\0';
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.year = atof(temp_buff);
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fc6d 	bl	8004bfc <atof>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc25 	bl	8000b78 <__aeabi_d2iz>
 800132e:	4602      	mov	r2, r0
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	609a      	str	r2, [r3, #8]
				break;
 8001334:	e015      	b.n	8001362 <parse_GPRMC+0x352>
			case 13:
				strncpy(data->checksum, field + 2, CHECKSUM_LENGTH);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	3302      	adds	r3, #2
 8001342:	2202      	movs	r2, #2
 8001344:	4619      	mov	r1, r3
 8001346:	f005 f97d 	bl	8006644 <strncpy>
				data->checksum[CHECKSUM_LENGTH] = '\0';
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				break;
 8001352:	e006      	b.n	8001362 <parse_GPRMC+0x352>
				break;
 8001354:	bf00      	nop
 8001356:	e004      	b.n	8001362 <parse_GPRMC+0x352>
				break;
 8001358:	bf00      	nop
 800135a:	e002      	b.n	8001362 <parse_GPRMC+0x352>
				break;
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <parse_GPRMC+0x352>
				break;
 8001360:	bf00      	nop
			}

			count++;
 8001362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001364:	3301      	adds	r3, #1
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
			fieldStart = i + 1;
 8001368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136a:	3301      	adds	r3, #1
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; line[i] != '\0'; i++) {
 800136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001370:	3301      	adds	r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f47f ae53 	bne.w	8001028 <parse_GPRMC+0x18>
		}
	}
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3748      	adds	r7, #72	; 0x48
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08008d10 	.word	0x08008d10

08001390 <print_GPRMC>:

void
print_GPRMC(struct GPRMC *data)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	// Access the struct members and do something with them
	printf("log_header: %s\r\n", data->log_header);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4619      	mov	r1, r3
 800139c:	4840      	ldr	r0, [pc, #256]	; (80014a0 <print_GPRMC+0x110>)
 800139e:	f004 fff1 	bl	8006384 <iprintf>
	printf("status:     %c\r\n", data->status);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	4619      	mov	r1, r3
 80013aa:	483e      	ldr	r0, [pc, #248]	; (80014a4 <print_GPRMC+0x114>)
 80013ac:	f004 ffea 	bl	8006384 <iprintf>

	printf("LATITUDE\r\n");
 80013b0:	483d      	ldr	r0, [pc, #244]	; (80014a8 <print_GPRMC+0x118>)
 80013b2:	f005 f84d 	bl	8006450 <puts>
	printf("   deg:     %i\r\n", data->latitude.degrees);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	483b      	ldr	r0, [pc, #236]	; (80014ac <print_GPRMC+0x11c>)
 80013be:	f004 ffe1 	bl	8006384 <iprintf>
	printf("   min:     %i\r\n", data->latitude.minutes);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4839      	ldr	r0, [pc, #228]	; (80014b0 <print_GPRMC+0x120>)
 80013ca:	f004 ffdb 	bl	8006384 <iprintf>
	printf("   sec:     %i\r\n", data->latitude.seconds);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4837      	ldr	r0, [pc, #220]	; (80014b4 <print_GPRMC+0x124>)
 80013d6:	f004 ffd5 	bl	8006384 <iprintf>
	printf("   dir:     %c\r\n", data->latitude.direction);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013e0:	4619      	mov	r1, r3
 80013e2:	4835      	ldr	r0, [pc, #212]	; (80014b8 <print_GPRMC+0x128>)
 80013e4:	f004 ffce 	bl	8006384 <iprintf>

	printf("LATITUDE\r\n");
 80013e8:	482f      	ldr	r0, [pc, #188]	; (80014a8 <print_GPRMC+0x118>)
 80013ea:	f005 f831 	bl	8006450 <puts>
	printf("   deg:     %i\r\n", data->longitude.degrees);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f2:	4619      	mov	r1, r3
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <print_GPRMC+0x11c>)
 80013f6:	f004 ffc5 	bl	8006384 <iprintf>
	printf("   min:     %i\r\n", data->longitude.minutes);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	4619      	mov	r1, r3
 8001400:	482b      	ldr	r0, [pc, #172]	; (80014b0 <print_GPRMC+0x120>)
 8001402:	f004 ffbf 	bl	8006384 <iprintf>
	printf("   sec:     %i\r\n", data->longitude.seconds);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	4619      	mov	r1, r3
 800140c:	4829      	ldr	r0, [pc, #164]	; (80014b4 <print_GPRMC+0x124>)
 800140e:	f004 ffb9 	bl	8006384 <iprintf>
	printf("   dir:     %c\r\n", data->longitude.direction);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001418:	4619      	mov	r1, r3
 800141a:	4827      	ldr	r0, [pc, #156]	; (80014b8 <print_GPRMC+0x128>)
 800141c:	f004 ffb2 	bl	8006384 <iprintf>

	printf("DATETIME\r\n");
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <print_GPRMC+0x12c>)
 8001422:	f005 f815 	bl	8006450 <puts>
	printf("   year:    %i\r\n", data->datetime.year);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4619      	mov	r1, r3
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <print_GPRMC+0x130>)
 800142e:	f004 ffa9 	bl	8006384 <iprintf>
	printf("   month:   %i\r\n", data->datetime.month);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	4619      	mov	r1, r3
 8001438:	4822      	ldr	r0, [pc, #136]	; (80014c4 <print_GPRMC+0x134>)
 800143a:	f004 ffa3 	bl	8006384 <iprintf>
	printf("   day:     %i\r\n", data->datetime.day);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4619      	mov	r1, r3
 8001444:	4820      	ldr	r0, [pc, #128]	; (80014c8 <print_GPRMC+0x138>)
 8001446:	f004 ff9d 	bl	8006384 <iprintf>
	printf("   hrs:     %i\r\n", data->datetime.hours);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	; (80014cc <print_GPRMC+0x13c>)
 8001452:	f004 ff97 	bl	8006384 <iprintf>
	printf("   min:     %i\r\n", data->datetime.minutes);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4619      	mov	r1, r3
 800145c:	4814      	ldr	r0, [pc, #80]	; (80014b0 <print_GPRMC+0x120>)
 800145e:	f004 ff91 	bl	8006384 <iprintf>
	printf("   sec:     %f\r\n", data->datetime.seconds);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f87e 	bl	8000568 <__aeabi_f2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4817      	ldr	r0, [pc, #92]	; (80014d0 <print_GPRMC+0x140>)
 8001472:	f004 ff87 	bl	8006384 <iprintf>


	printf("speed:      %f\r\n", data->speed);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f874 	bl	8000568 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <print_GPRMC+0x144>)
 8001486:	f004 ff7d 	bl	8006384 <iprintf>
	printf("checksum:   %s\r\n", data->checksum);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3348      	adds	r3, #72	; 0x48
 800148e:	4619      	mov	r1, r3
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <print_GPRMC+0x148>)
 8001492:	f004 ff77 	bl	8006384 <iprintf>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	08008d24 	.word	0x08008d24
 80014a4:	08008d38 	.word	0x08008d38
 80014a8:	08008d4c 	.word	0x08008d4c
 80014ac:	08008d58 	.word	0x08008d58
 80014b0:	08008d6c 	.word	0x08008d6c
 80014b4:	08008d80 	.word	0x08008d80
 80014b8:	08008d94 	.word	0x08008d94
 80014bc:	08008da8 	.word	0x08008da8
 80014c0:	08008db4 	.word	0x08008db4
 80014c4:	08008dc8 	.word	0x08008dc8
 80014c8:	08008ddc 	.word	0x08008ddc
 80014cc:	08008df0 	.word	0x08008df0
 80014d0:	08008e04 	.word	0x08008e04
 80014d4:	08008e18 	.word	0x08008e18
 80014d8:	08008e2c 	.word	0x08008e2c

080014dc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to uart debug
int _write(int file, char *ptr, int len) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&DEBUG_HUART, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <_write+0x28>)
 80014f4:	f001 ffda 	bl	80034ac <HAL_UART_Transmit>
    return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000026c 	.word	0x2000026c

08001508 <myUARTCallback>:

void myUARTCallback(UART_HandleTypeDef *huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

	  if (charRead == '$' || idx == 100){
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <myUARTCallback+0xe4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b24      	cmp	r3, #36	; 0x24
 8001516:	d003      	beq.n	8001520 <myUARTCallback+0x18>
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <myUARTCallback+0xe8>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d10d      	bne.n	800153c <myUARTCallback+0x34>
		  idx = 0;
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <myUARTCallback+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
		  rxBuff[idx++] = '$';
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <myUARTCallback+0xe8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	b2d1      	uxtb	r1, r2
 800152e:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <myUARTCallback+0xe8>)
 8001530:	7011      	strb	r1, [r2, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <myUARTCallback+0xec>)
 8001536:	2124      	movs	r1, #36	; 0x24
 8001538:	5499      	strb	r1, [r3, r2]
 800153a:	e04e      	b.n	80015da <myUARTCallback+0xd2>
	  } else if (charRead == '\r' || charRead == '\n'){
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <myUARTCallback+0xe4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b0d      	cmp	r3, #13
 8001542:	d003      	beq.n	800154c <myUARTCallback+0x44>
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <myUARTCallback+0xe4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b0a      	cmp	r3, #10
 800154a:	d13b      	bne.n	80015c4 <myUARTCallback+0xbc>

		  if (strncmp((char *)rxBuff, sentence, strlen(sentence)) == 0){
 800154c:	482a      	ldr	r0, [pc, #168]	; (80015f8 <myUARTCallback+0xf0>)
 800154e:	f7fe fe9f 	bl	8000290 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4928      	ldr	r1, [pc, #160]	; (80015f8 <myUARTCallback+0xf0>)
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <myUARTCallback+0xec>)
 800155a:	f005 f861 	bl	8006620 <strncmp>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d12b      	bne.n	80015bc <myUARTCallback+0xb4>
			  rxBuff[idx++] = '\r';
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <myUARTCallback+0xe8>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	b2d1      	uxtb	r1, r2
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <myUARTCallback+0xe8>)
 800156e:	7011      	strb	r1, [r2, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <myUARTCallback+0xec>)
 8001574:	210d      	movs	r1, #13
 8001576:	5499      	strb	r1, [r3, r2]
			  rxBuff[idx++] = '\n';
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <myUARTCallback+0xe8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	b2d1      	uxtb	r1, r2
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <myUARTCallback+0xe8>)
 8001582:	7011      	strb	r1, [r2, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <myUARTCallback+0xec>)
 8001588:	210a      	movs	r1, #10
 800158a:	5499      	strb	r1, [r3, r2]
			  rxBuff[idx++] = '\0';
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <myUARTCallback+0xe8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <myUARTCallback+0xe8>)
 8001596:	7011      	strb	r1, [r2, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <myUARTCallback+0xec>)
 800159c:	2100      	movs	r1, #0
 800159e:	5499      	strb	r1, [r3, r2]
			  memcpy(line, rxBuff, idx);
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <myUARTCallback+0xe8>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4913      	ldr	r1, [pc, #76]	; (80015f4 <myUARTCallback+0xec>)
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <myUARTCallback+0xf4>)
 80015aa:	f005 f8d5 	bl	8006758 <memcpy>
			  new_line = 1;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <myUARTCallback+0xf8>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
			  rxBuff[0] = 0;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <myUARTCallback+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
		  if (strncmp((char *)rxBuff, sentence, strlen(sentence)) == 0){
 80015ba:	e00e      	b.n	80015da <myUARTCallback+0xd2>
		  } else {
			  idx = 0;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <myUARTCallback+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
		  if (strncmp((char *)rxBuff, sentence, strlen(sentence)) == 0){
 80015c2:	e00a      	b.n	80015da <myUARTCallback+0xd2>
		  }
	  } else {
		  rxBuff[idx++] = charRead;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <myUARTCallback+0xe8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	b2d1      	uxtb	r1, r2
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <myUARTCallback+0xe8>)
 80015ce:	7011      	strb	r1, [r2, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <myUARTCallback+0xe4>)
 80015d4:	7819      	ldrb	r1, [r3, #0]
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <myUARTCallback+0xec>)
 80015d8:	5499      	strb	r1, [r3, r2]
	  }


	  HAL_UART_Receive_IT(&GPS_HUART, &charRead, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	4903      	ldr	r1, [pc, #12]	; (80015ec <myUARTCallback+0xe4>)
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <myUARTCallback+0xfc>)
 80015e0:	f001 fff6 	bl	80035d0 <HAL_UART_Receive_IT>

}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200008b4 	.word	0x200008b4
 80015f0:	200008b5 	.word	0x200008b5
 80015f4:	200007ec 	.word	0x200007ec
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000850 	.word	0x20000850
 8001600:	200008b6 	.word	0x200008b6
 8001604:	200001f8 	.word	0x200001f8

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	; 0x50
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f000 fc97 	bl	8001f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 f84d 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f000 f937 	bl	8001888 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800161a:	f000 f8dd 	bl	80017d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800161e:	f000 f905 	bl	800182c <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8001622:	f000 f8af 	bl	8001784 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  struct GPRMC gprms = {
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	224c      	movs	r2, #76	; 0x4c
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f004 ffef 	bl	8006610 <memset>





  HAL_UART_RegisterCallback(&GPS_HUART, HAL_UART_RX_COMPLETE_CB_ID, myUARTCallback);
 8001632:	4a17      	ldr	r2, [pc, #92]	; (8001690 <main+0x88>)
 8001634:	2103      	movs	r1, #3
 8001636:	4817      	ldr	r0, [pc, #92]	; (8001694 <main+0x8c>)
 8001638:	f001 fe90 	bl	800335c <HAL_UART_RegisterCallback>
  HAL_UART_Receive_IT(&GPS_HUART, &charRead, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	4916      	ldr	r1, [pc, #88]	; (8001698 <main+0x90>)
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <main+0x8c>)
 8001642:	f001 ffc5 	bl	80035d0 <HAL_UART_Receive_IT>


  idx = 0;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <main+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
  new_line = 0;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <main+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
  printf("Staring loop... \r\n");
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <main+0x9c>)
 8001654:	f004 fefc 	bl	8006450 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (new_line){
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <main+0x98>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0fb      	beq.n	8001658 <main+0x50>
		  	  HAL_UART_Transmit(&huart3, line, strlen((char*) line), 1000);
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <main+0xa0>)
 8001662:	f7fe fe15 	bl	8000290 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	490e      	ldr	r1, [pc, #56]	; (80016a8 <main+0xa0>)
 8001670:	480e      	ldr	r0, [pc, #56]	; (80016ac <main+0xa4>)
 8001672:	f001 ff1b 	bl	80034ac <HAL_UART_Transmit>
		  	  parse_GPRMC((char*)line, &gprms);
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <main+0xa0>)
 800167c:	f7ff fcc8 	bl	8001010 <parse_GPRMC>
		  	  print_GPRMC(&gprms);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe84 	bl	8001390 <print_GPRMC>
			  new_line = 0;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <main+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
	  if (new_line){
 800168e:	e7e3      	b.n	8001658 <main+0x50>
 8001690:	08001509 	.word	0x08001509
 8001694:	200001f8 	.word	0x200001f8
 8001698:	200008b4 	.word	0x200008b4
 800169c:	200008b5 	.word	0x200008b5
 80016a0:	200008b6 	.word	0x200008b6
 80016a4:	08008e40 	.word	0x08008e40
 80016a8:	20000850 	.word	0x20000850
 80016ac:	2000026c 	.word	0x2000026c

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 ffa6 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <SystemClock_Config+0xcc>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <SystemClock_Config+0xcc>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <SystemClock_Config+0xcc>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <SystemClock_Config+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <SystemClock_Config+0xd0>)
 80016fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <SystemClock_Config+0xd0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001710:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001720:	2304      	movs	r3, #4
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001724:	23a8      	movs	r3, #168	; 0xa8
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800172c:	2307      	movs	r3, #7
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f001 f91f 	bl	8002978 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001740:	f000 f9b6 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2105      	movs	r1, #5
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fb80 	bl	8002e68 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800176e:	f000 f99f 	bl	8001ab0 <Error_Handler>
  }
}
 8001772:	bf00      	nop
 8001774:	3750      	adds	r7, #80	; 0x50
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_UART5_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_UART5_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <MX_UART5_Init+0x4c>)
 8001790:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001794:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_UART5_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_UART5_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_UART5_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_UART5_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_UART5_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_UART5_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_UART5_Init+0x4c>)
 80017bc:	f001 fd74 	bl	80032a8 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f973 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001f8 	.word	0x200001f8
 80017d4:	40005000 	.word	0x40005000

080017d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_USART3_UART_Init+0x50>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_USART3_UART_Init+0x4c>)
 8001810:	f001 fd4a 	bl	80032a8 <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800181a:	f000 f949 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000026c 	.word	0x2000026c
 8001828:	40004800 	.word	0x40004800

0800182c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183a:	2204      	movs	r2, #4
 800183c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001840:	2202      	movs	r2, #2
 8001842:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184c:	2202      	movs	r2, #2
 800184e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001864:	2201      	movs	r2, #1
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001870:	f000 ff65 	bl	800273e <HAL_PCD_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800187a:	f000 f919 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002e0 	.word	0x200002e0

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <MX_GPIO_Init+0x210>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b65      	ldr	r3, [pc, #404]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a60      	ldr	r2, [pc, #384]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a59      	ldr	r2, [pc, #356]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <MX_GPIO_Init+0x210>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <MX_GPIO_Init+0x210>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a52      	ldr	r2, [pc, #328]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <MX_GPIO_Init+0x210>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2108      	movs	r1, #8
 8001966:	484d      	ldr	r0, [pc, #308]	; (8001a9c <MX_GPIO_Init+0x214>)
 8001968:	f000 fed0 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001972:	484b      	ldr	r0, [pc, #300]	; (8001aa0 <MX_GPIO_Init+0x218>)
 8001974:	f000 feca 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2140      	movs	r1, #64	; 0x40
 800197c:	4849      	ldr	r0, [pc, #292]	; (8001aa4 <MX_GPIO_Init+0x21c>)
 800197e:	f000 fec5 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001988:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4843      	ldr	r0, [pc, #268]	; (8001aa8 <MX_GPIO_Init+0x220>)
 800199a:	f000 fd0b 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800199e:	2308      	movs	r3, #8
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4839      	ldr	r0, [pc, #228]	; (8001a9c <MX_GPIO_Init+0x214>)
 80019b6:	f000 fcfd 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019ba:	2332      	movs	r3, #50	; 0x32
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ca:	230b      	movs	r3, #11
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4834      	ldr	r0, [pc, #208]	; (8001aa8 <MX_GPIO_Init+0x220>)
 80019d6:	f000 fced 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019da:	2386      	movs	r3, #134	; 0x86
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ea:	230b      	movs	r3, #11
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	482d      	ldr	r0, [pc, #180]	; (8001aac <MX_GPIO_Init+0x224>)
 80019f6:	f000 fcdd 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019fa:	f244 0381 	movw	r3, #16513	; 0x4081
 80019fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4823      	ldr	r0, [pc, #140]	; (8001aa0 <MX_GPIO_Init+0x218>)
 8001a14:	f000 fcce 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <MX_GPIO_Init+0x218>)
 8001a36:	f000 fcbd 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a3a:	2340      	movs	r3, #64	; 0x40
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_GPIO_Init+0x21c>)
 8001a52:	f000 fcaf 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <MX_GPIO_Init+0x21c>)
 8001a6a:	f000 fca3 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a80:	230b      	movs	r3, #11
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_GPIO_Init+0x21c>)
 8001a8c:	f000 fc92 	bl	80023b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>
	...

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_MspInit+0x4c>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_MspInit+0x4c>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <HAL_UART_MspInit+0x138>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d153      	bne.n	8001bd6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a36      	ldr	r2, [pc, #216]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b94:	2308      	movs	r3, #8
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	482b      	ldr	r0, [pc, #172]	; (8001c4c <HAL_UART_MspInit+0x140>)
 8001ba0:	f000 fc08 	bl	80023b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4824      	ldr	r0, [pc, #144]	; (8001c50 <HAL_UART_MspInit+0x144>)
 8001bc0:	f000 fbf8 	bl	80023b4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2035      	movs	r0, #53	; 0x35
 8001bca:	f000 fb2a 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001bce:	2035      	movs	r0, #53	; 0x35
 8001bd0:	f000 fb43 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bd4:	e031      	b.n	8001c3a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_UART_MspInit+0x148>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d12c      	bne.n	8001c3a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_UART_MspInit+0x13c>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4806      	ldr	r0, [pc, #24]	; (8001c50 <HAL_UART_MspInit+0x144>)
 8001c36:	f000 fbbd 	bl	80023b4 <HAL_GPIO_Init>
}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005000 	.word	0x40005000
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40004800 	.word	0x40004800

08001c58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c78:	d13f      	bne.n	8001cfa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ca8:	230a      	movs	r3, #10
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4815      	ldr	r0, [pc, #84]	; (8001d08 <HAL_PCD_MspInit+0xb0>)
 8001cb4:	f000 fb7e 	bl	80023b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480e      	ldr	r0, [pc, #56]	; (8001d08 <HAL_PCD_MspInit+0xb0>)
 8001cce:	f000 fb71 	bl	80023b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cdc:	6353      	str	r3, [r2, #52]	; 0x34
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_PCD_MspInit+0xac>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler+0x4>

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f944 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <UART5_IRQHandler+0x10>)
 8001d66:	f001 fc63 	bl	8003630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200001f8 	.word	0x200001f8

08001d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_kill>:

int _kill(int pid, int sig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d8e:	f004 fcb7 	bl	8006700 <__errno>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2216      	movs	r2, #22
 8001d96:	601a      	str	r2, [r3, #0]
  return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_exit>:

void _exit (int status)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffe7 	bl	8001d84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db6:	e7fe      	b.n	8001db6 <_exit+0x12>

08001db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00a      	b.n	8001de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dca:	f3af 8000 	nop.w
 8001dce:	4601      	mov	r1, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf0      	blt.n	8001dca <_read+0x12>
  }

  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f004 fc38 	bl	8006700 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20030000 	.word	0x20030000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	200008b8 	.word	0x200008b8
 8001ec4:	20000a10 	.word	0x20000a10

08001ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f24 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ef2:	490e      	ldr	r1, [pc, #56]	; (8001f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f08:	4c0b      	ldr	r4, [pc, #44]	; (8001f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f16:	f7ff ffd7 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f004 fbf7 	bl	800670c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1e:	f7ff fb73 	bl	8001608 <main>
  bx  lr    
 8001f22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f30:	080092a4 	.word	0x080092a4
  ldr r2, =_sbss
 8001f34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f38:	20000a0c 	.word	0x20000a0c

08001f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC_IRQHandler>
	...

08001f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_Init+0x40>)
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_Init+0x40>)
 8001f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_Init+0x40>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 f94f 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff fda2 	bl	8001abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f967 	bl	8002276 <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc0:	f000 f92f 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	20000010 	.word	0x20000010
 8001fe0:	2000000c 	.word	0x2000000c

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000010 	.word	0x20000010
 8002008:	200008bc 	.word	0x200008bc

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200008bc 	.word	0x200008bc

08002024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_Delay+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000010 	.word	0x20000010

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff feb6 	bl	800200c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d008      	beq.n	80022c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e052      	b.n	8002366 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0216 	bic.w	r2, r2, #22
 80022ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <HAL_DMA_Abort+0x62>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0208 	bic.w	r2, r2, #8
 80022fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	e013      	b.n	800233a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002312:	f7ff fe7b 	bl	800200c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b05      	cmp	r3, #5
 800231e:	d90c      	bls.n	800233a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2203      	movs	r2, #3
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e015      	b.n	8002366 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e4      	bne.n	8002312 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	223f      	movs	r2, #63	; 0x3f
 800234e:	409a      	lsls	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d004      	beq.n	800238c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e00c      	b.n	80023a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2205      	movs	r2, #5
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	e177      	b.n	80026c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	f040 8166 	bne.w	80026ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d005      	beq.n	8002406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002402:	2b02      	cmp	r3, #2
 8002404:	d130      	bne.n	8002468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	2203      	movs	r2, #3
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800243c:	2201      	movs	r2, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 0201 	and.w	r2, r3, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b03      	cmp	r3, #3
 8002472:	d017      	beq.n	80024a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d123      	bne.n	80024f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	220f      	movs	r2, #15
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	69b9      	ldr	r1, [r7, #24]
 80024f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0203 	and.w	r2, r3, #3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80c0 	beq.w	80026ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b66      	ldr	r3, [pc, #408]	; (80026d8 <HAL_GPIO_Init+0x324>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a65      	ldr	r2, [pc, #404]	; (80026d8 <HAL_GPIO_Init+0x324>)
 8002544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <HAL_GPIO_Init+0x324>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002556:	4a61      	ldr	r2, [pc, #388]	; (80026dc <HAL_GPIO_Init+0x328>)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_GPIO_Init+0x32c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d037      	beq.n	80025f2 <HAL_GPIO_Init+0x23e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <HAL_GPIO_Init+0x330>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_GPIO_Init+0x23a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_GPIO_Init+0x334>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02b      	beq.n	80025ea <HAL_GPIO_Init+0x236>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a55      	ldr	r2, [pc, #340]	; (80026ec <HAL_GPIO_Init+0x338>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d025      	beq.n	80025e6 <HAL_GPIO_Init+0x232>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a54      	ldr	r2, [pc, #336]	; (80026f0 <HAL_GPIO_Init+0x33c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_GPIO_Init+0x22e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <HAL_GPIO_Init+0x340>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_GPIO_Init+0x22a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_GPIO_Init+0x344>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x226>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_GPIO_Init+0x348>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x222>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_GPIO_Init+0x34c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x21e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4f      	ldr	r2, [pc, #316]	; (8002704 <HAL_GPIO_Init+0x350>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x21a>
 80025ca:	2309      	movs	r3, #9
 80025cc:	e012      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025ce:	230a      	movs	r3, #10
 80025d0:	e010      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025d2:	2308      	movs	r3, #8
 80025d4:	e00e      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025d6:	2307      	movs	r3, #7
 80025d8:	e00c      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025da:	2306      	movs	r3, #6
 80025dc:	e00a      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025de:	2305      	movs	r3, #5
 80025e0:	e008      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025e2:	2304      	movs	r3, #4
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e004      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_GPIO_Init+0x240>
 80025f2:	2300      	movs	r3, #0
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f002 0203 	and.w	r2, r2, #3
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	4093      	lsls	r3, r2
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002604:	4935      	ldr	r1, [pc, #212]	; (80026dc <HAL_GPIO_Init+0x328>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_GPIO_Init+0x354>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002636:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_GPIO_Init+0x354>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800263c:	4b32      	ldr	r3, [pc, #200]	; (8002708 <HAL_GPIO_Init+0x354>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_GPIO_Init+0x354>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_GPIO_Init+0x354>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_GPIO_Init+0x354>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_GPIO_Init+0x354>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_GPIO_Init+0x354>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3301      	adds	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	f67f ae84 	bls.w	80023d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40013800 	.word	0x40013800
 80026e0:	40020000 	.word	0x40020000
 80026e4:	40020400 	.word	0x40020400
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40021400 	.word	0x40021400
 80026f8:	40021800 	.word	0x40021800
 80026fc:	40021c00 	.word	0x40021c00
 8002700:	40022000 	.word	0x40022000
 8002704:	40022400 	.word	0x40022400
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800273e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002740:	b08f      	sub	sp, #60	; 0x3c
 8002742:	af0a      	add	r7, sp, #40	; 0x28
 8002744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e10f      	b.n	8002970 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fa74 	bl	8001c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2203      	movs	r2, #3
 8002774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f001 ff93 	bl	80046ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	687e      	ldr	r6, [r7, #4]
 800279c:	466d      	mov	r5, sp
 800279e:	f106 0410 	add.w	r4, r6, #16
 80027a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b2:	1d33      	adds	r3, r6, #4
 80027b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f001 ff1e 	bl	80045f8 <USB_CoreInit>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0d0      	b.n	8002970 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 ff81 	bl	80046dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e04a      	b.n	8002876 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	333d      	adds	r3, #61	; 0x3d
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	333c      	adds	r3, #60	; 0x3c
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	b298      	uxth	r0, r3
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3344      	adds	r3, #68	; 0x44
 800281c:	4602      	mov	r2, r0
 800281e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3340      	adds	r3, #64	; 0x40
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3348      	adds	r3, #72	; 0x48
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3354      	adds	r3, #84	; 0x54
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	3301      	adds	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3af      	bcc.n	80027e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	e044      	b.n	8002910 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3301      	adds	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d3b5      	bcc.n	8002886 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	687e      	ldr	r6, [r7, #4]
 8002922:	466d      	mov	r5, sp
 8002924:	f106 0410 	add.w	r4, r6, #16
 8002928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002934:	e885 0003 	stmia.w	r5, {r0, r1}
 8002938:	1d33      	adds	r3, r6, #4
 800293a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f001 ff19 	bl	8004774 <USB_DevInit>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e00d      	b.n	8002970 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f002 f8e4 	bl	8004b36 <USB_DevDisconnect>

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e267      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d075      	beq.n	8002a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002996:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00c      	beq.n	80029bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d112      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b82      	ldr	r3, [pc, #520]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d05b      	beq.n	8002a80 <HAL_RCC_OscConfig+0x108>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d157      	bne.n	8002a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e242      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x74>
 80029de:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0xb0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x98>
 80029f6:	4b70      	ldr	r3, [pc, #448]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6f      	ldr	r2, [pc, #444]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6c      	ldr	r2, [pc, #432]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xb0>
 8002a10:	4b69      	ldr	r3, [pc, #420]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a68      	ldr	r2, [pc, #416]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff faec 	bl	800200c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff fae8 	bl	800200c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e207      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0xc0>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fad8 	bl	800200c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff fad4 	bl	800200c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1f3      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0xe8>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d063      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x152>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e1c7      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	e03a      	b.n	8002b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_RCC_OscConfig+0x244>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7ff fa8d 	bl	800200c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af6:	f7ff fa89 	bl	800200c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1a8      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4925      	ldr	r1, [pc, #148]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x244>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7ff fa6c 	bl	800200c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b38:	f7ff fa68 	bl	800200c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e187      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d036      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCC_OscConfig+0x248>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7ff fa4c 	bl	800200c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b78:	f7ff fa48 	bl	800200c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e167      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x200>
 8002b96:	e01b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_OscConfig+0x248>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff fa35 	bl	800200c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	e00e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7ff fa31 	bl	800200c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d907      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e150      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	42470000 	.word	0x42470000
 8002bc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ea      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8097 	beq.w	8002d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b7d      	ldr	r3, [pc, #500]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a7c      	ldr	r2, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b7a      	ldr	r3, [pc, #488]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b77      	ldr	r3, [pc, #476]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b74      	ldr	r3, [pc, #464]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a73      	ldr	r2, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7ff f9f1 	bl	800200c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7ff f9ed 	bl	800200c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e10c      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2ea>
 8002c54:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a63      	ldr	r2, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x324>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x30c>
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x324>
 8002c84:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a57      	ldr	r2, [pc, #348]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a54      	ldr	r2, [pc, #336]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7ff f9b2 	bl	800200c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7ff f9ae 	bl	800200c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0cb      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	4b49      	ldr	r3, [pc, #292]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ee      	beq.n	8002cac <HAL_RCC_OscConfig+0x334>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f99c 	bl	800200c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f998 	bl	800200c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0b5      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a1 	beq.w	8002e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d16:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d05c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d141      	bne.n	8002dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff f96c 	bl	800200c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff f968 	bl	800200c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e087      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	491b      	ldr	r1, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7ff f941 	bl	800200c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7ff f93d 	bl	800200c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e05c      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x416>
 8002dac:	e054      	b.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7ff f92a 	bl	800200c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7ff f926 	bl	800200c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e045      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x444>
 8002dda:	e03d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e038      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
 8002df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x4ec>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d028      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d121      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d11a      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7ff f858 	bl	800200c <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7ff f854 	bl	800200c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe ffb8 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	08008e54 	.word	0x08008e54
 800302c:	20000008 	.word	0x20000008
 8003030:	2000000c 	.word	0x2000000c

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b094      	sub	sp, #80	; 0x50
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
 8003040:	2300      	movs	r3, #0
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003044:	2300      	movs	r3, #0
 8003046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b79      	ldr	r3, [pc, #484]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80e1 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x1ec>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e0db      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_GetSysClockFreq+0x204>)
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800306c:	e0db      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b73      	ldr	r3, [pc, #460]	; (800323c <HAL_RCC_GetSysClockFreq+0x208>)
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003072:	e0d8      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
 8003094:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
 80030a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030a6:	4622      	mov	r2, r4
 80030a8:	462b      	mov	r3, r5
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4621      	mov	r1, r4
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	6139      	str	r1, [r7, #16]
 80030c4:	4629      	mov	r1, r5
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d8:	4659      	mov	r1, fp
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e2:	4651      	mov	r1, sl
 80030e4:	018a      	lsls	r2, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ec:	4659      	mov	r1, fp
 80030ee:	eb63 0901 	sbc.w	r9, r3, r1
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
 800310a:	4623      	mov	r3, r4
 800310c:	eb18 0303 	adds.w	r3, r8, r3
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	462b      	mov	r3, r5
 8003114:	eb49 0303 	adc.w	r3, r9, r3
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003126:	4629      	mov	r1, r5
 8003128:	024b      	lsls	r3, r1, #9
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003130:	4621      	mov	r1, r4
 8003132:	024a      	lsls	r2, r1, #9
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313a:	2200      	movs	r2, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 800313e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003144:	f7fd fdb0 	bl	8000ca8 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003150:	e058      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2200      	movs	r2, #0
 800315a:	4618      	mov	r0, r3
 800315c:	4611      	mov	r1, r2
 800315e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	0159      	lsls	r1, r3, #5
 800317a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317e:	0150      	lsls	r0, r2, #5
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4641      	mov	r1, r8
 8003186:	ebb2 0a01 	subs.w	sl, r2, r1
 800318a:	4649      	mov	r1, r9
 800318c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800319c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031a4:	ebb2 040a 	subs.w	r4, r2, sl
 80031a8:	eb63 050b 	sbc.w	r5, r3, fp
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	00eb      	lsls	r3, r5, #3
 80031b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ba:	00e2      	lsls	r2, r4, #3
 80031bc:	4614      	mov	r4, r2
 80031be:	461d      	mov	r5, r3
 80031c0:	4643      	mov	r3, r8
 80031c2:	18e3      	adds	r3, r4, r3
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	464b      	mov	r3, r9
 80031c8:	eb45 0303 	adc.w	r3, r5, r3
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031da:	4629      	mov	r1, r5
 80031dc:	028b      	lsls	r3, r1, #10
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e4:	4621      	mov	r1, r4
 80031e6:	028a      	lsls	r2, r1, #10
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	61fa      	str	r2, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	f7fd fd56 	bl	8000ca8 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetSysClockFreq+0x204>)
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003228:	4618      	mov	r0, r3
 800322a:	3750      	adds	r7, #80	; 0x50
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a9b      	lsrs	r3, r3, #10
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	08008e64 	.word	0x08008e64

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffdc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08008e64 	.word	0x08008e64

080032a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e04a      	b.n	8003350 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d111      	bne.n	80032ea <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fc9c 	bl	8003c0c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <HAL_UART_Init+0xb0>)
 80032e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2224      	movs	r2, #36	; 0x24
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003300:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 ff04 	bl	8004110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003316:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003326:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003336:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08001b0d 	.word	0x08001b0d

0800335c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	460b      	mov	r3, r1
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e08c      	b.n	800349e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_UART_RegisterCallback+0x36>
 800338e:	2302      	movs	r3, #2
 8003390:	e085      	b.n	800349e <HAL_UART_RegisterCallback+0x142>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d151      	bne.n	800344a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80033a6:	7afb      	ldrb	r3, [r7, #11]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d845      	bhi.n	8003438 <HAL_UART_RegisterCallback+0xdc>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <HAL_UART_RegisterCallback+0x58>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	080033f1 	.word	0x080033f1
 80033bc:	080033f9 	.word	0x080033f9
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003409 	.word	0x08003409
 80033c8:	08003411 	.word	0x08003411
 80033cc:	08003419 	.word	0x08003419
 80033d0:	08003421 	.word	0x08003421
 80033d4:	08003439 	.word	0x08003439
 80033d8:	08003439 	.word	0x08003439
 80033dc:	08003439 	.word	0x08003439
 80033e0:	08003429 	.word	0x08003429
 80033e4:	08003431 	.word	0x08003431
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80033ee:	e051      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80033f6:	e04d      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80033fe:	e049      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003406:	e045      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800340e:	e041      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003416:	e03d      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800341e:	e039      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003426:	e035      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800342e:	e031      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003436:	e02d      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
        break;
 8003448:	e024      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	2b0b      	cmp	r3, #11
 800345a:	d002      	beq.n	8003462 <HAL_UART_RegisterCallback+0x106>
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d004      	beq.n	800346a <HAL_UART_RegisterCallback+0x10e>
 8003460:	e007      	b.n	8003472 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003468:	e014      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003470:	e010      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
        break;
 8003482:	e007      	b.n	8003494 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop

080034ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d17c      	bne.n	80035c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Transmit+0x2c>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e075      	b.n	80035c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Transmit+0x3e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e06e      	b.n	80035c8 <HAL_UART_Transmit+0x11c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	; 0x21
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003500:	f7fe fd84 	bl	800200c <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351a:	d108      	bne.n	800352e <HAL_UART_Transmit+0x82>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	e003      	b.n	8003536 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800353e:	e02a      	b.n	8003596 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fb96 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e036      	b.n	80035c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800356e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	3302      	adds	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e007      	b.n	8003588 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3301      	adds	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1cf      	bne.n	8003540 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2140      	movs	r1, #64	; 0x40
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fb66 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e006      	b.n	80035c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d11d      	bne.n	8003626 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_UART_Receive_IT+0x26>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e016      	b.n	8003628 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_UART_Receive_IT+0x38>
 8003604:	2302      	movs	r3, #2
 8003606:	e00f      	b.n	8003628 <HAL_UART_Receive_IT+0x58>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	461a      	mov	r2, r3
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fb9b 	bl	8003d58 <UART_Start_Receive_IT>
 8003622:	4603      	mov	r3, r0
 8003624:	e000      	b.n	8003628 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0ba      	sub	sp, #232	; 0xe8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800366e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_UART_IRQHandler+0x66>
 8003682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fc81 	bl	8003f96 <UART_Receive_IT>
      return;
 8003694:	e25b      	b.n	8003b4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80e1 	beq.w	8003862 <HAL_UART_IRQHandler+0x232>
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80d4 	beq.w	8003862 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xae>
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_UART_IRQHandler+0xd2>
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_UART_IRQHandler+0xf6>
 800370e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0204 	orr.w	r2, r3, #4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d011      	beq.n	8003756 <HAL_UART_IRQHandler+0x126>
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800373e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f043 0208 	orr.w	r2, r3, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 81f2 	beq.w	8003b44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_UART_IRQHandler+0x14e>
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fc0c 	bl	8003f96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_UART_IRQHandler+0x17a>
 80037a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d051      	beq.n	800384e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb12 	bl	8003dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d142      	bne.n	8003844 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3314      	adds	r3, #20
 80037e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1d9      	bne.n	80037be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	2b00      	cmp	r3, #0
 8003810:	d013      	beq.n	800383a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	4a7f      	ldr	r2, [pc, #508]	; (8003a14 <HAL_UART_IRQHandler+0x3e4>)
 8003818:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fda5 	bl	800236e <HAL_DMA_Abort_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003834:	4610      	mov	r0, r2
 8003836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	e011      	b.n	800385e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003842:	e00c      	b.n	800385e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	e007      	b.n	800385e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800385c:	e172      	b.n	8003b44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385e:	bf00      	nop
    return;
 8003860:	e170      	b.n	8003b44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 814c 	bne.w	8003b04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8145 	beq.w	8003b04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 813e 	beq.w	8003b04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	f040 80b5 	bne.w	8003a18 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8142 	beq.w	8003b48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f080 813b 	bcs.w	8003b48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	f000 8088 	beq.w	80039f8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003914:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003920:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800392c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1d9      	bne.n	80038e8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800395c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003960:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800396a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e1      	bne.n	8003934 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003994:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800399a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e3      	bne.n	8003970 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c8:	f023 0310 	bic.w	r3, r3, #16
 80039cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039da:	65ba      	str	r2, [r7, #88]	; 0x58
 80039dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e3      	bne.n	80039b6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fc4b 	bl	800228e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003a04:	b292      	uxth	r2, r2
 8003a06:	1a8a      	subs	r2, r1, r2
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a10:	e09a      	b.n	8003b48 <HAL_UART_IRQHandler+0x518>
 8003a12:	bf00      	nop
 8003a14:	08003e9b 	.word	0x08003e9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 808c 	beq.w	8003b4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8087 	beq.w	8003b4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a62:	647a      	str	r2, [r7, #68]	; 0x44
 8003a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e3      	bne.n	8003a3e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	623b      	str	r3, [r7, #32]
   return(result);
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e3      	bne.n	8003a76 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0310 	bic.w	r3, r3, #16
 8003ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ae0:	61fa      	str	r2, [r7, #28]
 8003ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	617b      	str	r3, [r7, #20]
   return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e3      	bne.n	8003abc <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003afc:	4611      	mov	r1, r2
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b02:	e023      	b.n	8003b4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_UART_IRQHandler+0x4f4>
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f9d1 	bl	8003ec4 <UART_Transmit_IT>
    return;
 8003b22:	e014      	b.n	8003b4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00e      	beq.n	8003b4e <HAL_UART_IRQHandler+0x51e>
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa11 	bl	8003f64 <UART_EndTransmit_IT>
    return;
 8003b42:	e004      	b.n	8003b4e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b44:	bf00      	nop
 8003b46:	e002      	b.n	8003b4e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b48:	bf00      	nop
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b4c:	bf00      	nop
  }
}
 8003b4e:	37e8      	adds	r7, #232	; 0xe8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <UART_InitCallbacksToDefault+0x4c>)
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0f      	ldr	r2, [pc, #60]	; (8003c5c <UART_InitCallbacksToDefault+0x50>)
 8003c1e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <UART_InitCallbacksToDefault+0x54>)
 8003c24:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <UART_InitCallbacksToDefault+0x58>)
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <UART_InitCallbacksToDefault+0x5c>)
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <UART_InitCallbacksToDefault+0x60>)
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <UART_InitCallbacksToDefault+0x64>)
 8003c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <UART_InitCallbacksToDefault+0x68>)
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <UART_InitCallbacksToDefault+0x6c>)
 8003c48:	669a      	str	r2, [r3, #104]	; 0x68

}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	08003b69 	.word	0x08003b69
 8003c5c:	08003b55 	.word	0x08003b55
 8003c60:	08003b91 	.word	0x08003b91
 8003c64:	08003b7d 	.word	0x08003b7d
 8003c68:	08003ba5 	.word	0x08003ba5
 8003c6c:	08003bb9 	.word	0x08003bb9
 8003c70:	08003bcd 	.word	0x08003bcd
 8003c74:	08003be1 	.word	0x08003be1
 8003c78:	08003bf5 	.word	0x08003bf5

08003c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b090      	sub	sp, #64	; 0x40
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	e050      	b.n	8003d30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c94:	d04c      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <UART_WaitOnFlagUntilTimeout+0x30>
 8003c9c:	f7fe f9b6 	bl	800200c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d241      	bcs.n	8003d30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ccc:	637a      	str	r2, [r7, #52]	; 0x34
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d00:	623a      	str	r2, [r7, #32]
 8003d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	69f9      	ldr	r1, [r7, #28]
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e00f      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d09f      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3740      	adds	r7, #64	; 0x40
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2222      	movs	r2, #34	; 0x22
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0220 	orr.w	r2, r2, #32
 8003dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b095      	sub	sp, #84	; 0x54
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dfc:	643a      	str	r2, [r7, #64]	; 0x40
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d119      	bne.n	8003e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e6c:	61ba      	str	r2, [r7, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e8e:	bf00      	nop
 8003e90:	3754      	adds	r7, #84	; 0x54
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b21      	cmp	r3, #33	; 0x21
 8003ed6:	d13e      	bne.n	8003f56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d114      	bne.n	8003f0c <UART_Transmit_IT+0x48>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d110      	bne.n	8003f0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003efe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]
 8003f0a:	e008      	b.n	8003f1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6211      	str	r1, [r2, #32]
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08c      	sub	sp, #48	; 0x30
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b22      	cmp	r3, #34	; 0x22
 8003fa8:	f040 80ad 	bne.w	8004106 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d117      	bne.n	8003fe6 <UART_Receive_IT+0x50>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe4:	e026      	b.n	8004034 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d007      	beq.n	800400a <UART_Receive_IT+0x74>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <UART_Receive_IT+0x82>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e008      	b.n	800402a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004024:	b2da      	uxtb	r2, r3
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4619      	mov	r1, r3
 8004042:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004044:	2b00      	cmp	r3, #0
 8004046:	d15c      	bne.n	8004102 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0220 	bic.w	r2, r2, #32
 8004056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	d136      	bne.n	80040f6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	613b      	str	r3, [r7, #16]
   return(result);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f023 0310 	bic.w	r3, r3, #16
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	623a      	str	r2, [r7, #32]
 80040b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	69f9      	ldr	r1, [r7, #28]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e5      	bne.n	800408e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d10a      	bne.n	80040e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80040ee:	4611      	mov	r1, r2
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e003      	b.n	80040fe <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e002      	b.n	8004108 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3730      	adds	r7, #48	; 0x30
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	b0c0      	sub	sp, #256	; 0x100
 8004116:	af00      	add	r7, sp, #0
 8004118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	68d9      	ldr	r1, [r3, #12]
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	ea40 0301 	orr.w	r3, r0, r1
 8004138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	431a      	orrs	r2, r3
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	431a      	orrs	r2, r3
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004168:	f021 010c 	bic.w	r1, r1, #12
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004176:	430b      	orrs	r3, r1
 8004178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	6999      	ldr	r1, [r3, #24]
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	ea40 0301 	orr.w	r3, r0, r1
 8004196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b8f      	ldr	r3, [pc, #572]	; (80043dc <UART_SetConfig+0x2cc>)
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d005      	beq.n	80041b0 <UART_SetConfig+0xa0>
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <UART_SetConfig+0x2d0>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d104      	bne.n	80041ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041b0:	f7ff f866 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 80041b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041b8:	e003      	b.n	80041c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ba:	f7ff f84d 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 80041be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041cc:	f040 810c 	bne.w	80043e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	1891      	adds	r1, r2, r2
 80041e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80041ea:	415b      	adcs	r3, r3
 80041ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041f2:	4621      	mov	r1, r4
 80041f4:	eb12 0801 	adds.w	r8, r2, r1
 80041f8:	4629      	mov	r1, r5
 80041fa:	eb43 0901 	adc.w	r9, r3, r1
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800420a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800420e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004212:	4690      	mov	r8, r2
 8004214:	4699      	mov	r9, r3
 8004216:	4623      	mov	r3, r4
 8004218:	eb18 0303 	adds.w	r3, r8, r3
 800421c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004220:	462b      	mov	r3, r5
 8004222:	eb49 0303 	adc.w	r3, r9, r3
 8004226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800423a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800423e:	460b      	mov	r3, r1
 8004240:	18db      	adds	r3, r3, r3
 8004242:	653b      	str	r3, [r7, #80]	; 0x50
 8004244:	4613      	mov	r3, r2
 8004246:	eb42 0303 	adc.w	r3, r2, r3
 800424a:	657b      	str	r3, [r7, #84]	; 0x54
 800424c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004254:	f7fc fd28 	bl	8000ca8 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <UART_SetConfig+0x2d4>)
 800425e:	fba3 2302 	umull	r2, r3, r3, r2
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	011c      	lsls	r4, r3, #4
 8004266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	1891      	adds	r1, r2, r2
 800427e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004280:	415b      	adcs	r3, r3
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004288:	4641      	mov	r1, r8
 800428a:	eb12 0a01 	adds.w	sl, r2, r1
 800428e:	4649      	mov	r1, r9
 8004290:	eb43 0b01 	adc.w	fp, r3, r1
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a8:	4692      	mov	sl, r2
 80042aa:	469b      	mov	fp, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	eb1a 0303 	adds.w	r3, sl, r3
 80042b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042b6:	464b      	mov	r3, r9
 80042b8:	eb4b 0303 	adc.w	r3, fp, r3
 80042bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042d4:	460b      	mov	r3, r1
 80042d6:	18db      	adds	r3, r3, r3
 80042d8:	643b      	str	r3, [r7, #64]	; 0x40
 80042da:	4613      	mov	r3, r2
 80042dc:	eb42 0303 	adc.w	r3, r2, r3
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
 80042e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042ea:	f7fc fcdd 	bl	8000ca8 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <UART_SetConfig+0x2d4>)
 80042f6:	fba3 2301 	umull	r2, r3, r3, r1
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2264      	movs	r2, #100	; 0x64
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	1acb      	subs	r3, r1, r3
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <UART_SetConfig+0x2d4>)
 800430c:	fba3 2302 	umull	r2, r3, r3, r2
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004318:	441c      	add	r4, r3
 800431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	63b9      	str	r1, [r7, #56]	; 0x38
 8004334:	415b      	adcs	r3, r3
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800433c:	4641      	mov	r1, r8
 800433e:	1851      	adds	r1, r2, r1
 8004340:	6339      	str	r1, [r7, #48]	; 0x30
 8004342:	4649      	mov	r1, r9
 8004344:	414b      	adcs	r3, r1
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004354:	4659      	mov	r1, fp
 8004356:	00cb      	lsls	r3, r1, #3
 8004358:	4651      	mov	r1, sl
 800435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800435e:	4651      	mov	r1, sl
 8004360:	00ca      	lsls	r2, r1, #3
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4603      	mov	r3, r0
 8004368:	4642      	mov	r2, r8
 800436a:	189b      	adds	r3, r3, r2
 800436c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004370:	464b      	mov	r3, r9
 8004372:	460a      	mov	r2, r1
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800438c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004390:	460b      	mov	r3, r1
 8004392:	18db      	adds	r3, r3, r3
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	4613      	mov	r3, r2
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043a6:	f7fc fc7f 	bl	8000ca8 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <UART_SetConfig+0x2d4>)
 80043b0:	fba3 1302 	umull	r1, r3, r3, r2
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	2164      	movs	r1, #100	; 0x64
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	3332      	adds	r3, #50	; 0x32
 80043c2:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <UART_SetConfig+0x2d4>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f003 0207 	and.w	r2, r3, #7
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4422      	add	r2, r4
 80043d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043d8:	e106      	b.n	80045e8 <UART_SetConfig+0x4d8>
 80043da:	bf00      	nop
 80043dc:	40011000 	.word	0x40011000
 80043e0:	40011400 	.word	0x40011400
 80043e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043fa:	4642      	mov	r2, r8
 80043fc:	464b      	mov	r3, r9
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	6239      	str	r1, [r7, #32]
 8004402:	415b      	adcs	r3, r3
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800440a:	4641      	mov	r1, r8
 800440c:	1854      	adds	r4, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb43 0501 	adc.w	r5, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	00eb      	lsls	r3, r5, #3
 800441e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004422:	00e2      	lsls	r2, r4, #3
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
 8004428:	4643      	mov	r3, r8
 800442a:	18e3      	adds	r3, r4, r3
 800442c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004430:	464b      	mov	r3, r9
 8004432:	eb45 0303 	adc.w	r3, r5, r3
 8004436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004456:	4629      	mov	r1, r5
 8004458:	008b      	lsls	r3, r1, #2
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004460:	4621      	mov	r1, r4
 8004462:	008a      	lsls	r2, r1, #2
 8004464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004468:	f7fc fc1e 	bl	8000ca8 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4b60      	ldr	r3, [pc, #384]	; (80045f4 <UART_SetConfig+0x4e4>)
 8004472:	fba3 2302 	umull	r2, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	011c      	lsls	r4, r3, #4
 800447a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447e:	2200      	movs	r2, #0
 8004480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800448c:	4642      	mov	r2, r8
 800448e:	464b      	mov	r3, r9
 8004490:	1891      	adds	r1, r2, r2
 8004492:	61b9      	str	r1, [r7, #24]
 8004494:	415b      	adcs	r3, r3
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449c:	4641      	mov	r1, r8
 800449e:	1851      	adds	r1, r2, r1
 80044a0:	6139      	str	r1, [r7, #16]
 80044a2:	4649      	mov	r1, r9
 80044a4:	414b      	adcs	r3, r1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044b4:	4659      	mov	r1, fp
 80044b6:	00cb      	lsls	r3, r1, #3
 80044b8:	4651      	mov	r1, sl
 80044ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044be:	4651      	mov	r1, sl
 80044c0:	00ca      	lsls	r2, r1, #3
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	4642      	mov	r2, r8
 80044ca:	189b      	adds	r3, r3, r2
 80044cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044d0:	464b      	mov	r3, r9
 80044d2:	460a      	mov	r2, r1
 80044d4:	eb42 0303 	adc.w	r3, r2, r3
 80044d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044f4:	4649      	mov	r1, r9
 80044f6:	008b      	lsls	r3, r1, #2
 80044f8:	4641      	mov	r1, r8
 80044fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044fe:	4641      	mov	r1, r8
 8004500:	008a      	lsls	r2, r1, #2
 8004502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004506:	f7fc fbcf 	bl	8000ca8 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4611      	mov	r1, r2
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <UART_SetConfig+0x4e4>)
 8004512:	fba3 2301 	umull	r2, r3, r3, r1
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2264      	movs	r2, #100	; 0x64
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	1acb      	subs	r3, r1, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	3332      	adds	r3, #50	; 0x32
 8004524:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <UART_SetConfig+0x4e4>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	441c      	add	r4, r3
 8004532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004536:	2200      	movs	r2, #0
 8004538:	673b      	str	r3, [r7, #112]	; 0x70
 800453a:	677a      	str	r2, [r7, #116]	; 0x74
 800453c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	415b      	adcs	r3, r3
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004550:	4641      	mov	r1, r8
 8004552:	1851      	adds	r1, r2, r1
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	4649      	mov	r1, r9
 8004558:	414b      	adcs	r3, r1
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004568:	4659      	mov	r1, fp
 800456a:	00cb      	lsls	r3, r1, #3
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004572:	4651      	mov	r1, sl
 8004574:	00ca      	lsls	r2, r1, #3
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	4603      	mov	r3, r0
 800457c:	4642      	mov	r2, r8
 800457e:	189b      	adds	r3, r3, r2
 8004580:	66bb      	str	r3, [r7, #104]	; 0x68
 8004582:	464b      	mov	r3, r9
 8004584:	460a      	mov	r2, r1
 8004586:	eb42 0303 	adc.w	r3, r2, r3
 800458a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	663b      	str	r3, [r7, #96]	; 0x60
 8004596:	667a      	str	r2, [r7, #100]	; 0x64
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045a4:	4649      	mov	r1, r9
 80045a6:	008b      	lsls	r3, r1, #2
 80045a8:	4641      	mov	r1, r8
 80045aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ae:	4641      	mov	r1, r8
 80045b0:	008a      	lsls	r2, r1, #2
 80045b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045b6:	f7fc fb77 	bl	8000ca8 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <UART_SetConfig+0x4e4>)
 80045c0:	fba3 1302 	umull	r1, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	2164      	movs	r1, #100	; 0x64
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	3332      	adds	r3, #50	; 0x32
 80045d2:	4a08      	ldr	r2, [pc, #32]	; (80045f4 <UART_SetConfig+0x4e4>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4422      	add	r2, r4
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045ee:	46bd      	mov	sp, r7
 80045f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f4:	51eb851f 	.word	0x51eb851f

080045f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f8:	b084      	sub	sp, #16
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	f107 001c 	add.w	r0, r7, #28
 8004606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	d122      	bne.n	8004656 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 faa2 	bl	8004b94 <USB_CoreReset>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e01a      	b.n	800468c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa96 	bl	8004b94 <USB_CoreReset>
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
 800467e:	e005      	b.n	800468c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	2b01      	cmp	r3, #1
 8004690:	d10b      	bne.n	80046aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f043 0206 	orr.w	r2, r3, #6
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b6:	b004      	add	sp, #16
 80046b8:	4770      	bx	lr

080046ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d115      	bne.n	800472a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800470a:	2001      	movs	r0, #1
 800470c:	f7fd fc8a 	bl	8002024 <HAL_Delay>
      ms++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa2e 	bl	8004b78 <USB_GetMode>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d01e      	beq.n	8004760 <USB_SetCurrentMode+0x84>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b31      	cmp	r3, #49	; 0x31
 8004726:	d9f0      	bls.n	800470a <USB_SetCurrentMode+0x2e>
 8004728:	e01a      	b.n	8004760 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d115      	bne.n	800475c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800473c:	2001      	movs	r0, #1
 800473e:	f7fd fc71 	bl	8002024 <HAL_Delay>
      ms++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa15 	bl	8004b78 <USB_GetMode>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <USB_SetCurrentMode+0x84>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b31      	cmp	r3, #49	; 0x31
 8004758:	d9f0      	bls.n	800473c <USB_SetCurrentMode+0x60>
 800475a:	e001      	b.n	8004760 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e005      	b.n	800476c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b32      	cmp	r3, #50	; 0x32
 8004764:	d101      	bne.n	800476a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004774:	b084      	sub	sp, #16
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e009      	b.n	80047a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3340      	adds	r3, #64	; 0x40
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3301      	adds	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b0e      	cmp	r3, #14
 80047ac:	d9f2      	bls.n	8004794 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11c      	bne.n	80047ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c2:	f043 0302 	orr.w	r3, r3, #2
 80047c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
 80047ec:	e00b      	b.n	8004806 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	4619      	mov	r1, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	461a      	mov	r2, r3
 8004822:	680b      	ldr	r3, [r1, #0]
 8004824:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004832:	2100      	movs	r1, #0
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f965 	bl	8004b04 <USB_SetDevSpeed>
 800483a:	e008      	b.n	800484e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800483c:	2101      	movs	r1, #1
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f960 	bl	8004b04 <USB_SetDevSpeed>
 8004844:	e003      	b.n	800484e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004846:	2103      	movs	r1, #3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f95b 	bl	8004b04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800484e:	2110      	movs	r1, #16
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8f3 	bl	8004a3c <USB_FlushTxFifo>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f91f 	bl	8004aa4 <USB_FlushRxFifo>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	461a      	mov	r2, r3
 8004878:	2300      	movs	r3, #0
 800487a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	461a      	mov	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	461a      	mov	r2, r3
 8004890:	2300      	movs	r3, #0
 8004892:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e043      	b.n	8004922 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b0:	d118      	bne.n	80048e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	461a      	mov	r2, r3
 80048c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e013      	b.n	80048f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	461a      	mov	r2, r3
 80048dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e008      	b.n	80048f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	461a      	mov	r2, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004902:	461a      	mov	r2, r3
 8004904:	2300      	movs	r3, #0
 8004906:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800491a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3301      	adds	r3, #1
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	d3b7      	bcc.n	800489a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e043      	b.n	80049b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004946:	d118      	bne.n	800497a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e013      	b.n	800498c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004970:	461a      	mov	r2, r3
 8004972:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	e008      	b.n	800498c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3301      	adds	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d3b7      	bcc.n	8004930 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f043 0210 	orr.w	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <USB_DevInit+0x2c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f043 0208 	orr.w	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a34:	b004      	add	sp, #16
 8004a36:	4770      	bx	lr
 8004a38:	803c3800 	.word	0x803c3800

08004a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <USB_FlushTxFifo+0x64>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d901      	bls.n	8004a5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e01b      	b.n	8004a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	daf2      	bge.n	8004a4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	019b      	lsls	r3, r3, #6
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3301      	adds	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <USB_FlushTxFifo+0x64>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e006      	b.n	8004a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d0f0      	beq.n	8004a74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	00030d40 	.word	0x00030d40

08004aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <USB_FlushRxFifo+0x5c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e018      	b.n	8004af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	daf2      	bge.n	8004ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <USB_FlushRxFifo+0x5c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e006      	b.n	8004af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d0f0      	beq.n	8004ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	00030d40 	.word	0x00030d40

08004b04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0301 	and.w	r3, r3, #1
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <USB_CoreReset+0x64>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e01b      	b.n	8004bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	daf2      	bge.n	8004ba0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <USB_CoreReset+0x64>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e006      	b.n	8004bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d0f0      	beq.n	8004bca <USB_CoreReset+0x36>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	00030d40 	.word	0x00030d40

08004bfc <atof>:
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	f000 be13 	b.w	8005828 <strtod>

08004c02 <atoi>:
 8004c02:	220a      	movs	r2, #10
 8004c04:	2100      	movs	r1, #0
 8004c06:	f000 be9d 	b.w	8005944 <strtol>

08004c0a <sulp>:
 8004c0a:	b570      	push	{r4, r5, r6, lr}
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	460d      	mov	r5, r1
 8004c10:	ec45 4b10 	vmov	d0, r4, r5
 8004c14:	4616      	mov	r6, r2
 8004c16:	f003 fc07 	bl	8008428 <__ulp>
 8004c1a:	ec51 0b10 	vmov	r0, r1, d0
 8004c1e:	b17e      	cbz	r6, 8004c40 <sulp+0x36>
 8004c20:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	dd09      	ble.n	8004c40 <sulp+0x36>
 8004c2c:	051b      	lsls	r3, r3, #20
 8004c2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c32:	2400      	movs	r4, #0
 8004c34:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c38:	4622      	mov	r2, r4
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	f7fb fcec 	bl	8000618 <__aeabi_dmul>
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	0000      	movs	r0, r0
 8004c44:	0000      	movs	r0, r0
	...

08004c48 <_strtod_l>:
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	ed2d 8b02 	vpush	{d8}
 8004c50:	b09b      	sub	sp, #108	; 0x6c
 8004c52:	4604      	mov	r4, r0
 8004c54:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c56:	2200      	movs	r2, #0
 8004c58:	9216      	str	r2, [sp, #88]	; 0x58
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	f04f 0800 	mov.w	r8, #0
 8004c60:	f04f 0900 	mov.w	r9, #0
 8004c64:	460a      	mov	r2, r1
 8004c66:	9215      	str	r2, [sp, #84]	; 0x54
 8004c68:	7811      	ldrb	r1, [r2, #0]
 8004c6a:	292b      	cmp	r1, #43	; 0x2b
 8004c6c:	d04c      	beq.n	8004d08 <_strtod_l+0xc0>
 8004c6e:	d83a      	bhi.n	8004ce6 <_strtod_l+0x9e>
 8004c70:	290d      	cmp	r1, #13
 8004c72:	d834      	bhi.n	8004cde <_strtod_l+0x96>
 8004c74:	2908      	cmp	r1, #8
 8004c76:	d834      	bhi.n	8004ce2 <_strtod_l+0x9a>
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d03d      	beq.n	8004cf8 <_strtod_l+0xb0>
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8004c80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004c82:	7832      	ldrb	r2, [r6, #0]
 8004c84:	2a30      	cmp	r2, #48	; 0x30
 8004c86:	f040 80b4 	bne.w	8004df2 <_strtod_l+0x1aa>
 8004c8a:	7872      	ldrb	r2, [r6, #1]
 8004c8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004c90:	2a58      	cmp	r2, #88	; 0x58
 8004c92:	d170      	bne.n	8004d76 <_strtod_l+0x12e>
 8004c94:	9302      	str	r3, [sp, #8]
 8004c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	ab16      	add	r3, sp, #88	; 0x58
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4a8e      	ldr	r2, [pc, #568]	; (8004ed8 <_strtod_l+0x290>)
 8004ca0:	ab17      	add	r3, sp, #92	; 0x5c
 8004ca2:	a915      	add	r1, sp, #84	; 0x54
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f002 fc9d 	bl	80075e4 <__gethex>
 8004caa:	f010 070f 	ands.w	r7, r0, #15
 8004cae:	4605      	mov	r5, r0
 8004cb0:	d005      	beq.n	8004cbe <_strtod_l+0x76>
 8004cb2:	2f06      	cmp	r7, #6
 8004cb4:	d12a      	bne.n	8004d0c <_strtod_l+0xc4>
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9615      	str	r6, [sp, #84]	; 0x54
 8004cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8004cbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f040 857f 	bne.w	80057c4 <_strtod_l+0xb7c>
 8004cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc8:	b1db      	cbz	r3, 8004d02 <_strtod_l+0xba>
 8004cca:	4642      	mov	r2, r8
 8004ccc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cd0:	ec43 2b10 	vmov	d0, r2, r3
 8004cd4:	b01b      	add	sp, #108	; 0x6c
 8004cd6:	ecbd 8b02 	vpop	{d8}
 8004cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cde:	2920      	cmp	r1, #32
 8004ce0:	d1cc      	bne.n	8004c7c <_strtod_l+0x34>
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	e7bf      	b.n	8004c66 <_strtod_l+0x1e>
 8004ce6:	292d      	cmp	r1, #45	; 0x2d
 8004ce8:	d1c8      	bne.n	8004c7c <_strtod_l+0x34>
 8004cea:	2101      	movs	r1, #1
 8004cec:	910a      	str	r1, [sp, #40]	; 0x28
 8004cee:	1c51      	adds	r1, r2, #1
 8004cf0:	9115      	str	r1, [sp, #84]	; 0x54
 8004cf2:	7852      	ldrb	r2, [r2, #1]
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	d1c3      	bne.n	8004c80 <_strtod_l+0x38>
 8004cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cfa:	9515      	str	r5, [sp, #84]	; 0x54
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 855f 	bne.w	80057c0 <_strtod_l+0xb78>
 8004d02:	4642      	mov	r2, r8
 8004d04:	464b      	mov	r3, r9
 8004d06:	e7e3      	b.n	8004cd0 <_strtod_l+0x88>
 8004d08:	2100      	movs	r1, #0
 8004d0a:	e7ef      	b.n	8004cec <_strtod_l+0xa4>
 8004d0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d0e:	b13a      	cbz	r2, 8004d20 <_strtod_l+0xd8>
 8004d10:	2135      	movs	r1, #53	; 0x35
 8004d12:	a818      	add	r0, sp, #96	; 0x60
 8004d14:	f003 fc85 	bl	8008622 <__copybits>
 8004d18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f003 f858 	bl	8007dd0 <_Bfree>
 8004d20:	3f01      	subs	r7, #1
 8004d22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d24:	2f04      	cmp	r7, #4
 8004d26:	d806      	bhi.n	8004d36 <_strtod_l+0xee>
 8004d28:	e8df f007 	tbb	[pc, r7]
 8004d2c:	201d0314 	.word	0x201d0314
 8004d30:	14          	.byte	0x14
 8004d31:	00          	.byte	0x00
 8004d32:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8004d36:	05e9      	lsls	r1, r5, #23
 8004d38:	bf48      	it	mi
 8004d3a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004d3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d42:	0d1b      	lsrs	r3, r3, #20
 8004d44:	051b      	lsls	r3, r3, #20
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1b9      	bne.n	8004cbe <_strtod_l+0x76>
 8004d4a:	f001 fcd9 	bl	8006700 <__errno>
 8004d4e:	2322      	movs	r3, #34	; 0x22
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	e7b4      	b.n	8004cbe <_strtod_l+0x76>
 8004d54:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004d58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004d64:	e7e7      	b.n	8004d36 <_strtod_l+0xee>
 8004d66:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004ee0 <_strtod_l+0x298>
 8004d6a:	e7e4      	b.n	8004d36 <_strtod_l+0xee>
 8004d6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004d70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004d74:	e7df      	b.n	8004d36 <_strtod_l+0xee>
 8004d76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	9215      	str	r2, [sp, #84]	; 0x54
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d0f9      	beq.n	8004d76 <_strtod_l+0x12e>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d09b      	beq.n	8004cbe <_strtod_l+0x76>
 8004d86:	2301      	movs	r3, #1
 8004d88:	f04f 0a00 	mov.w	sl, #0
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d92:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004d96:	46d3      	mov	fp, sl
 8004d98:	220a      	movs	r2, #10
 8004d9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004d9c:	7806      	ldrb	r6, [r0, #0]
 8004d9e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004da2:	b2d9      	uxtb	r1, r3
 8004da4:	2909      	cmp	r1, #9
 8004da6:	d926      	bls.n	8004df6 <_strtod_l+0x1ae>
 8004da8:	494c      	ldr	r1, [pc, #304]	; (8004edc <_strtod_l+0x294>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	f001 fc38 	bl	8006620 <strncmp>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d030      	beq.n	8004e16 <_strtod_l+0x1ce>
 8004db4:	2000      	movs	r0, #0
 8004db6:	4632      	mov	r2, r6
 8004db8:	9005      	str	r0, [sp, #20]
 8004dba:	465e      	mov	r6, fp
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2a65      	cmp	r2, #101	; 0x65
 8004dc0:	d001      	beq.n	8004dc6 <_strtod_l+0x17e>
 8004dc2:	2a45      	cmp	r2, #69	; 0x45
 8004dc4:	d113      	bne.n	8004dee <_strtod_l+0x1a6>
 8004dc6:	b91e      	cbnz	r6, 8004dd0 <_strtod_l+0x188>
 8004dc8:	9a04      	ldr	r2, [sp, #16]
 8004dca:	4302      	orrs	r2, r0
 8004dcc:	d094      	beq.n	8004cf8 <_strtod_l+0xb0>
 8004dce:	2600      	movs	r6, #0
 8004dd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004dd2:	1c6a      	adds	r2, r5, #1
 8004dd4:	9215      	str	r2, [sp, #84]	; 0x54
 8004dd6:	786a      	ldrb	r2, [r5, #1]
 8004dd8:	2a2b      	cmp	r2, #43	; 0x2b
 8004dda:	d074      	beq.n	8004ec6 <_strtod_l+0x27e>
 8004ddc:	2a2d      	cmp	r2, #45	; 0x2d
 8004dde:	d078      	beq.n	8004ed2 <_strtod_l+0x28a>
 8004de0:	f04f 0c00 	mov.w	ip, #0
 8004de4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004de8:	2909      	cmp	r1, #9
 8004dea:	d97f      	bls.n	8004eec <_strtod_l+0x2a4>
 8004dec:	9515      	str	r5, [sp, #84]	; 0x54
 8004dee:	2700      	movs	r7, #0
 8004df0:	e09e      	b.n	8004f30 <_strtod_l+0x2e8>
 8004df2:	2300      	movs	r3, #0
 8004df4:	e7c8      	b.n	8004d88 <_strtod_l+0x140>
 8004df6:	f1bb 0f08 	cmp.w	fp, #8
 8004dfa:	bfd8      	it	le
 8004dfc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004dfe:	f100 0001 	add.w	r0, r0, #1
 8004e02:	bfda      	itte	le
 8004e04:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e08:	9309      	strle	r3, [sp, #36]	; 0x24
 8004e0a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004e0e:	f10b 0b01 	add.w	fp, fp, #1
 8004e12:	9015      	str	r0, [sp, #84]	; 0x54
 8004e14:	e7c1      	b.n	8004d9a <_strtod_l+0x152>
 8004e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	9215      	str	r2, [sp, #84]	; 0x54
 8004e1c:	785a      	ldrb	r2, [r3, #1]
 8004e1e:	f1bb 0f00 	cmp.w	fp, #0
 8004e22:	d037      	beq.n	8004e94 <_strtod_l+0x24c>
 8004e24:	9005      	str	r0, [sp, #20]
 8004e26:	465e      	mov	r6, fp
 8004e28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e2c:	2b09      	cmp	r3, #9
 8004e2e:	d912      	bls.n	8004e56 <_strtod_l+0x20e>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e7c4      	b.n	8004dbe <_strtod_l+0x176>
 8004e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	9215      	str	r2, [sp, #84]	; 0x54
 8004e3a:	785a      	ldrb	r2, [r3, #1]
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	2a30      	cmp	r2, #48	; 0x30
 8004e40:	d0f8      	beq.n	8004e34 <_strtod_l+0x1ec>
 8004e42:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	f200 84c1 	bhi.w	80057ce <_strtod_l+0xb86>
 8004e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e4e:	9005      	str	r0, [sp, #20]
 8004e50:	2000      	movs	r0, #0
 8004e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e54:	4606      	mov	r6, r0
 8004e56:	3a30      	subs	r2, #48	; 0x30
 8004e58:	f100 0301 	add.w	r3, r0, #1
 8004e5c:	d014      	beq.n	8004e88 <_strtod_l+0x240>
 8004e5e:	9905      	ldr	r1, [sp, #20]
 8004e60:	4419      	add	r1, r3
 8004e62:	9105      	str	r1, [sp, #20]
 8004e64:	4633      	mov	r3, r6
 8004e66:	eb00 0c06 	add.w	ip, r0, r6
 8004e6a:	210a      	movs	r1, #10
 8004e6c:	4563      	cmp	r3, ip
 8004e6e:	d113      	bne.n	8004e98 <_strtod_l+0x250>
 8004e70:	1833      	adds	r3, r6, r0
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	f106 0601 	add.w	r6, r6, #1
 8004e78:	4406      	add	r6, r0
 8004e7a:	dc1a      	bgt.n	8004eb2 <_strtod_l+0x26a>
 8004e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e7e:	230a      	movs	r3, #10
 8004e80:	fb03 2301 	mla	r3, r3, r1, r2
 8004e84:	9309      	str	r3, [sp, #36]	; 0x24
 8004e86:	2300      	movs	r3, #0
 8004e88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e8a:	1c51      	adds	r1, r2, #1
 8004e8c:	9115      	str	r1, [sp, #84]	; 0x54
 8004e8e:	7852      	ldrb	r2, [r2, #1]
 8004e90:	4618      	mov	r0, r3
 8004e92:	e7c9      	b.n	8004e28 <_strtod_l+0x1e0>
 8004e94:	4658      	mov	r0, fp
 8004e96:	e7d2      	b.n	8004e3e <_strtod_l+0x1f6>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	f103 0301 	add.w	r3, r3, #1
 8004e9e:	dc03      	bgt.n	8004ea8 <_strtod_l+0x260>
 8004ea0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004ea2:	434f      	muls	r7, r1
 8004ea4:	9709      	str	r7, [sp, #36]	; 0x24
 8004ea6:	e7e1      	b.n	8004e6c <_strtod_l+0x224>
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	bfd8      	it	le
 8004eac:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004eb0:	e7dc      	b.n	8004e6c <_strtod_l+0x224>
 8004eb2:	2e10      	cmp	r6, #16
 8004eb4:	bfdc      	itt	le
 8004eb6:	230a      	movle	r3, #10
 8004eb8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004ebc:	e7e3      	b.n	8004e86 <_strtod_l+0x23e>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e780      	b.n	8004dc8 <_strtod_l+0x180>
 8004ec6:	f04f 0c00 	mov.w	ip, #0
 8004eca:	1caa      	adds	r2, r5, #2
 8004ecc:	9215      	str	r2, [sp, #84]	; 0x54
 8004ece:	78aa      	ldrb	r2, [r5, #2]
 8004ed0:	e788      	b.n	8004de4 <_strtod_l+0x19c>
 8004ed2:	f04f 0c01 	mov.w	ip, #1
 8004ed6:	e7f8      	b.n	8004eca <_strtod_l+0x282>
 8004ed8:	08008e70 	.word	0x08008e70
 8004edc:	08008e6c 	.word	0x08008e6c
 8004ee0:	7ff00000 	.word	0x7ff00000
 8004ee4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ee6:	1c51      	adds	r1, r2, #1
 8004ee8:	9115      	str	r1, [sp, #84]	; 0x54
 8004eea:	7852      	ldrb	r2, [r2, #1]
 8004eec:	2a30      	cmp	r2, #48	; 0x30
 8004eee:	d0f9      	beq.n	8004ee4 <_strtod_l+0x29c>
 8004ef0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ef4:	2908      	cmp	r1, #8
 8004ef6:	f63f af7a 	bhi.w	8004dee <_strtod_l+0x1a6>
 8004efa:	3a30      	subs	r2, #48	; 0x30
 8004efc:	9208      	str	r2, [sp, #32]
 8004efe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f00:	920c      	str	r2, [sp, #48]	; 0x30
 8004f02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f04:	1c57      	adds	r7, r2, #1
 8004f06:	9715      	str	r7, [sp, #84]	; 0x54
 8004f08:	7852      	ldrb	r2, [r2, #1]
 8004f0a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004f0e:	f1be 0f09 	cmp.w	lr, #9
 8004f12:	d938      	bls.n	8004f86 <_strtod_l+0x33e>
 8004f14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f16:	1a7f      	subs	r7, r7, r1
 8004f18:	2f08      	cmp	r7, #8
 8004f1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004f1e:	dc03      	bgt.n	8004f28 <_strtod_l+0x2e0>
 8004f20:	9908      	ldr	r1, [sp, #32]
 8004f22:	428f      	cmp	r7, r1
 8004f24:	bfa8      	it	ge
 8004f26:	460f      	movge	r7, r1
 8004f28:	f1bc 0f00 	cmp.w	ip, #0
 8004f2c:	d000      	beq.n	8004f30 <_strtod_l+0x2e8>
 8004f2e:	427f      	negs	r7, r7
 8004f30:	2e00      	cmp	r6, #0
 8004f32:	d14f      	bne.n	8004fd4 <_strtod_l+0x38c>
 8004f34:	9904      	ldr	r1, [sp, #16]
 8004f36:	4301      	orrs	r1, r0
 8004f38:	f47f aec1 	bne.w	8004cbe <_strtod_l+0x76>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f47f aedb 	bne.w	8004cf8 <_strtod_l+0xb0>
 8004f42:	2a69      	cmp	r2, #105	; 0x69
 8004f44:	d029      	beq.n	8004f9a <_strtod_l+0x352>
 8004f46:	dc26      	bgt.n	8004f96 <_strtod_l+0x34e>
 8004f48:	2a49      	cmp	r2, #73	; 0x49
 8004f4a:	d026      	beq.n	8004f9a <_strtod_l+0x352>
 8004f4c:	2a4e      	cmp	r2, #78	; 0x4e
 8004f4e:	f47f aed3 	bne.w	8004cf8 <_strtod_l+0xb0>
 8004f52:	499b      	ldr	r1, [pc, #620]	; (80051c0 <_strtod_l+0x578>)
 8004f54:	a815      	add	r0, sp, #84	; 0x54
 8004f56:	f002 fd85 	bl	8007a64 <__match>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f43f aecc 	beq.w	8004cf8 <_strtod_l+0xb0>
 8004f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b28      	cmp	r3, #40	; 0x28
 8004f66:	d12f      	bne.n	8004fc8 <_strtod_l+0x380>
 8004f68:	4996      	ldr	r1, [pc, #600]	; (80051c4 <_strtod_l+0x57c>)
 8004f6a:	aa18      	add	r2, sp, #96	; 0x60
 8004f6c:	a815      	add	r0, sp, #84	; 0x54
 8004f6e:	f002 fd8d 	bl	8007a8c <__hexnan>
 8004f72:	2805      	cmp	r0, #5
 8004f74:	d128      	bne.n	8004fc8 <_strtod_l+0x380>
 8004f76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f7c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004f80:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004f84:	e69b      	b.n	8004cbe <_strtod_l+0x76>
 8004f86:	9f08      	ldr	r7, [sp, #32]
 8004f88:	210a      	movs	r1, #10
 8004f8a:	fb01 2107 	mla	r1, r1, r7, r2
 8004f8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004f92:	9208      	str	r2, [sp, #32]
 8004f94:	e7b5      	b.n	8004f02 <_strtod_l+0x2ba>
 8004f96:	2a6e      	cmp	r2, #110	; 0x6e
 8004f98:	e7d9      	b.n	8004f4e <_strtod_l+0x306>
 8004f9a:	498b      	ldr	r1, [pc, #556]	; (80051c8 <_strtod_l+0x580>)
 8004f9c:	a815      	add	r0, sp, #84	; 0x54
 8004f9e:	f002 fd61 	bl	8007a64 <__match>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f43f aea8 	beq.w	8004cf8 <_strtod_l+0xb0>
 8004fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004faa:	4988      	ldr	r1, [pc, #544]	; (80051cc <_strtod_l+0x584>)
 8004fac:	3b01      	subs	r3, #1
 8004fae:	a815      	add	r0, sp, #84	; 0x54
 8004fb0:	9315      	str	r3, [sp, #84]	; 0x54
 8004fb2:	f002 fd57 	bl	8007a64 <__match>
 8004fb6:	b910      	cbnz	r0, 8004fbe <_strtod_l+0x376>
 8004fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fba:	3301      	adds	r3, #1
 8004fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8004fbe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80051dc <_strtod_l+0x594>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	e67a      	b.n	8004cbe <_strtod_l+0x76>
 8004fc8:	4881      	ldr	r0, [pc, #516]	; (80051d0 <_strtod_l+0x588>)
 8004fca:	f001 fbd5 	bl	8006778 <nan>
 8004fce:	ec59 8b10 	vmov	r8, r9, d0
 8004fd2:	e674      	b.n	8004cbe <_strtod_l+0x76>
 8004fd4:	9b05      	ldr	r3, [sp, #20]
 8004fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd8:	1afb      	subs	r3, r7, r3
 8004fda:	f1bb 0f00 	cmp.w	fp, #0
 8004fde:	bf08      	it	eq
 8004fe0:	46b3      	moveq	fp, r6
 8004fe2:	2e10      	cmp	r6, #16
 8004fe4:	9308      	str	r3, [sp, #32]
 8004fe6:	4635      	mov	r5, r6
 8004fe8:	bfa8      	it	ge
 8004fea:	2510      	movge	r5, #16
 8004fec:	f7fb fa9a 	bl	8000524 <__aeabi_ui2d>
 8004ff0:	2e09      	cmp	r6, #9
 8004ff2:	4680      	mov	r8, r0
 8004ff4:	4689      	mov	r9, r1
 8004ff6:	dd13      	ble.n	8005020 <_strtod_l+0x3d8>
 8004ff8:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <_strtod_l+0x58c>)
 8004ffa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ffe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005002:	f7fb fb09 	bl	8000618 <__aeabi_dmul>
 8005006:	4680      	mov	r8, r0
 8005008:	4650      	mov	r0, sl
 800500a:	4689      	mov	r9, r1
 800500c:	f7fb fa8a 	bl	8000524 <__aeabi_ui2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb f948 	bl	80002ac <__adddf3>
 800501c:	4680      	mov	r8, r0
 800501e:	4689      	mov	r9, r1
 8005020:	2e0f      	cmp	r6, #15
 8005022:	dc38      	bgt.n	8005096 <_strtod_l+0x44e>
 8005024:	9b08      	ldr	r3, [sp, #32]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f43f ae49 	beq.w	8004cbe <_strtod_l+0x76>
 800502c:	dd24      	ble.n	8005078 <_strtod_l+0x430>
 800502e:	2b16      	cmp	r3, #22
 8005030:	dc0b      	bgt.n	800504a <_strtod_l+0x402>
 8005032:	4968      	ldr	r1, [pc, #416]	; (80051d4 <_strtod_l+0x58c>)
 8005034:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	f7fb faea 	bl	8000618 <__aeabi_dmul>
 8005044:	4680      	mov	r8, r0
 8005046:	4689      	mov	r9, r1
 8005048:	e639      	b.n	8004cbe <_strtod_l+0x76>
 800504a:	9a08      	ldr	r2, [sp, #32]
 800504c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005050:	4293      	cmp	r3, r2
 8005052:	db20      	blt.n	8005096 <_strtod_l+0x44e>
 8005054:	4c5f      	ldr	r4, [pc, #380]	; (80051d4 <_strtod_l+0x58c>)
 8005056:	f1c6 060f 	rsb	r6, r6, #15
 800505a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800505e:	4642      	mov	r2, r8
 8005060:	464b      	mov	r3, r9
 8005062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005066:	f7fb fad7 	bl	8000618 <__aeabi_dmul>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	1b9e      	subs	r6, r3, r6
 800506e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005072:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005076:	e7e3      	b.n	8005040 <_strtod_l+0x3f8>
 8005078:	9b08      	ldr	r3, [sp, #32]
 800507a:	3316      	adds	r3, #22
 800507c:	db0b      	blt.n	8005096 <_strtod_l+0x44e>
 800507e:	9b05      	ldr	r3, [sp, #20]
 8005080:	1bdf      	subs	r7, r3, r7
 8005082:	4b54      	ldr	r3, [pc, #336]	; (80051d4 <_strtod_l+0x58c>)
 8005084:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	f7fb fbec 	bl	800086c <__aeabi_ddiv>
 8005094:	e7d6      	b.n	8005044 <_strtod_l+0x3fc>
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	1b75      	subs	r5, r6, r5
 800509a:	441d      	add	r5, r3
 800509c:	2d00      	cmp	r5, #0
 800509e:	dd70      	ble.n	8005182 <_strtod_l+0x53a>
 80050a0:	f015 030f 	ands.w	r3, r5, #15
 80050a4:	d00a      	beq.n	80050bc <_strtod_l+0x474>
 80050a6:	494b      	ldr	r1, [pc, #300]	; (80051d4 <_strtod_l+0x58c>)
 80050a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b4:	f7fb fab0 	bl	8000618 <__aeabi_dmul>
 80050b8:	4680      	mov	r8, r0
 80050ba:	4689      	mov	r9, r1
 80050bc:	f035 050f 	bics.w	r5, r5, #15
 80050c0:	d04d      	beq.n	800515e <_strtod_l+0x516>
 80050c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80050c6:	dd22      	ble.n	800510e <_strtod_l+0x4c6>
 80050c8:	2500      	movs	r5, #0
 80050ca:	46ab      	mov	fp, r5
 80050cc:	9509      	str	r5, [sp, #36]	; 0x24
 80050ce:	9505      	str	r5, [sp, #20]
 80050d0:	2322      	movs	r3, #34	; 0x22
 80050d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80051dc <_strtod_l+0x594>
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	f04f 0800 	mov.w	r8, #0
 80050dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f43f aded 	beq.w	8004cbe <_strtod_l+0x76>
 80050e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80050e6:	4620      	mov	r0, r4
 80050e8:	f002 fe72 	bl	8007dd0 <_Bfree>
 80050ec:	9905      	ldr	r1, [sp, #20]
 80050ee:	4620      	mov	r0, r4
 80050f0:	f002 fe6e 	bl	8007dd0 <_Bfree>
 80050f4:	4659      	mov	r1, fp
 80050f6:	4620      	mov	r0, r4
 80050f8:	f002 fe6a 	bl	8007dd0 <_Bfree>
 80050fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050fe:	4620      	mov	r0, r4
 8005100:	f002 fe66 	bl	8007dd0 <_Bfree>
 8005104:	4629      	mov	r1, r5
 8005106:	4620      	mov	r0, r4
 8005108:	f002 fe62 	bl	8007dd0 <_Bfree>
 800510c:	e5d7      	b.n	8004cbe <_strtod_l+0x76>
 800510e:	4b32      	ldr	r3, [pc, #200]	; (80051d8 <_strtod_l+0x590>)
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	2300      	movs	r3, #0
 8005114:	112d      	asrs	r5, r5, #4
 8005116:	4640      	mov	r0, r8
 8005118:	4649      	mov	r1, r9
 800511a:	469a      	mov	sl, r3
 800511c:	2d01      	cmp	r5, #1
 800511e:	dc21      	bgt.n	8005164 <_strtod_l+0x51c>
 8005120:	b10b      	cbz	r3, 8005126 <_strtod_l+0x4de>
 8005122:	4680      	mov	r8, r0
 8005124:	4689      	mov	r9, r1
 8005126:	492c      	ldr	r1, [pc, #176]	; (80051d8 <_strtod_l+0x590>)
 8005128:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800512c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005138:	f7fb fa6e 	bl	8000618 <__aeabi_dmul>
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <_strtod_l+0x594>)
 800513e:	460a      	mov	r2, r1
 8005140:	400b      	ands	r3, r1
 8005142:	4927      	ldr	r1, [pc, #156]	; (80051e0 <_strtod_l+0x598>)
 8005144:	428b      	cmp	r3, r1
 8005146:	4680      	mov	r8, r0
 8005148:	d8be      	bhi.n	80050c8 <_strtod_l+0x480>
 800514a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800514e:	428b      	cmp	r3, r1
 8005150:	bf86      	itte	hi
 8005152:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80051e4 <_strtod_l+0x59c>
 8005156:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800515a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800515e:	2300      	movs	r3, #0
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	e07b      	b.n	800525c <_strtod_l+0x614>
 8005164:	07ea      	lsls	r2, r5, #31
 8005166:	d505      	bpl.n	8005174 <_strtod_l+0x52c>
 8005168:	9b04      	ldr	r3, [sp, #16]
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f7fb fa53 	bl	8000618 <__aeabi_dmul>
 8005172:	2301      	movs	r3, #1
 8005174:	9a04      	ldr	r2, [sp, #16]
 8005176:	3208      	adds	r2, #8
 8005178:	f10a 0a01 	add.w	sl, sl, #1
 800517c:	106d      	asrs	r5, r5, #1
 800517e:	9204      	str	r2, [sp, #16]
 8005180:	e7cc      	b.n	800511c <_strtod_l+0x4d4>
 8005182:	d0ec      	beq.n	800515e <_strtod_l+0x516>
 8005184:	426d      	negs	r5, r5
 8005186:	f015 020f 	ands.w	r2, r5, #15
 800518a:	d00a      	beq.n	80051a2 <_strtod_l+0x55a>
 800518c:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <_strtod_l+0x58c>)
 800518e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f7fb fb67 	bl	800086c <__aeabi_ddiv>
 800519e:	4680      	mov	r8, r0
 80051a0:	4689      	mov	r9, r1
 80051a2:	112d      	asrs	r5, r5, #4
 80051a4:	d0db      	beq.n	800515e <_strtod_l+0x516>
 80051a6:	2d1f      	cmp	r5, #31
 80051a8:	dd1e      	ble.n	80051e8 <_strtod_l+0x5a0>
 80051aa:	2500      	movs	r5, #0
 80051ac:	46ab      	mov	fp, r5
 80051ae:	9509      	str	r5, [sp, #36]	; 0x24
 80051b0:	9505      	str	r5, [sp, #20]
 80051b2:	2322      	movs	r3, #34	; 0x22
 80051b4:	f04f 0800 	mov.w	r8, #0
 80051b8:	f04f 0900 	mov.w	r9, #0
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	e78d      	b.n	80050dc <_strtod_l+0x494>
 80051c0:	08008fce 	.word	0x08008fce
 80051c4:	08008e84 	.word	0x08008e84
 80051c8:	08008fc6 	.word	0x08008fc6
 80051cc:	08009000 	.word	0x08009000
 80051d0:	08009290 	.word	0x08009290
 80051d4:	08009170 	.word	0x08009170
 80051d8:	08009148 	.word	0x08009148
 80051dc:	7ff00000 	.word	0x7ff00000
 80051e0:	7ca00000 	.word	0x7ca00000
 80051e4:	7fefffff 	.word	0x7fefffff
 80051e8:	f015 0310 	ands.w	r3, r5, #16
 80051ec:	bf18      	it	ne
 80051ee:	236a      	movne	r3, #106	; 0x6a
 80051f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8005594 <_strtod_l+0x94c>
 80051f4:	9304      	str	r3, [sp, #16]
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	2300      	movs	r3, #0
 80051fc:	07ea      	lsls	r2, r5, #31
 80051fe:	d504      	bpl.n	800520a <_strtod_l+0x5c2>
 8005200:	e9da 2300 	ldrd	r2, r3, [sl]
 8005204:	f7fb fa08 	bl	8000618 <__aeabi_dmul>
 8005208:	2301      	movs	r3, #1
 800520a:	106d      	asrs	r5, r5, #1
 800520c:	f10a 0a08 	add.w	sl, sl, #8
 8005210:	d1f4      	bne.n	80051fc <_strtod_l+0x5b4>
 8005212:	b10b      	cbz	r3, 8005218 <_strtod_l+0x5d0>
 8005214:	4680      	mov	r8, r0
 8005216:	4689      	mov	r9, r1
 8005218:	9b04      	ldr	r3, [sp, #16]
 800521a:	b1bb      	cbz	r3, 800524c <_strtod_l+0x604>
 800521c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005220:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005224:	2b00      	cmp	r3, #0
 8005226:	4649      	mov	r1, r9
 8005228:	dd10      	ble.n	800524c <_strtod_l+0x604>
 800522a:	2b1f      	cmp	r3, #31
 800522c:	f340 811e 	ble.w	800546c <_strtod_l+0x824>
 8005230:	2b34      	cmp	r3, #52	; 0x34
 8005232:	bfde      	ittt	le
 8005234:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005238:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800523c:	4093      	lslle	r3, r2
 800523e:	f04f 0800 	mov.w	r8, #0
 8005242:	bfcc      	ite	gt
 8005244:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005248:	ea03 0901 	andle.w	r9, r3, r1
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4640      	mov	r0, r8
 8005252:	4649      	mov	r1, r9
 8005254:	f7fb fc48 	bl	8000ae8 <__aeabi_dcmpeq>
 8005258:	2800      	cmp	r0, #0
 800525a:	d1a6      	bne.n	80051aa <_strtod_l+0x562>
 800525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005262:	4633      	mov	r3, r6
 8005264:	465a      	mov	r2, fp
 8005266:	4620      	mov	r0, r4
 8005268:	f002 fe1a 	bl	8007ea0 <__s2b>
 800526c:	9009      	str	r0, [sp, #36]	; 0x24
 800526e:	2800      	cmp	r0, #0
 8005270:	f43f af2a 	beq.w	80050c8 <_strtod_l+0x480>
 8005274:	9a08      	ldr	r2, [sp, #32]
 8005276:	9b05      	ldr	r3, [sp, #20]
 8005278:	2a00      	cmp	r2, #0
 800527a:	eba3 0307 	sub.w	r3, r3, r7
 800527e:	bfa8      	it	ge
 8005280:	2300      	movge	r3, #0
 8005282:	930c      	str	r3, [sp, #48]	; 0x30
 8005284:	2500      	movs	r5, #0
 8005286:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800528a:	9312      	str	r3, [sp, #72]	; 0x48
 800528c:	46ab      	mov	fp, r5
 800528e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005290:	4620      	mov	r0, r4
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	f002 fd5c 	bl	8007d50 <_Balloc>
 8005298:	9005      	str	r0, [sp, #20]
 800529a:	2800      	cmp	r0, #0
 800529c:	f43f af18 	beq.w	80050d0 <_strtod_l+0x488>
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	3202      	adds	r2, #2
 80052a6:	f103 010c 	add.w	r1, r3, #12
 80052aa:	0092      	lsls	r2, r2, #2
 80052ac:	300c      	adds	r0, #12
 80052ae:	f001 fa53 	bl	8006758 <memcpy>
 80052b2:	ec49 8b10 	vmov	d0, r8, r9
 80052b6:	aa18      	add	r2, sp, #96	; 0x60
 80052b8:	a917      	add	r1, sp, #92	; 0x5c
 80052ba:	4620      	mov	r0, r4
 80052bc:	f003 f924 	bl	8008508 <__d2b>
 80052c0:	ec49 8b18 	vmov	d8, r8, r9
 80052c4:	9016      	str	r0, [sp, #88]	; 0x58
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f43f af02 	beq.w	80050d0 <_strtod_l+0x488>
 80052cc:	2101      	movs	r1, #1
 80052ce:	4620      	mov	r0, r4
 80052d0:	f002 fe7e 	bl	8007fd0 <__i2b>
 80052d4:	4683      	mov	fp, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f43f aefa 	beq.w	80050d0 <_strtod_l+0x488>
 80052dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80052de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80052e0:	2e00      	cmp	r6, #0
 80052e2:	bfab      	itete	ge
 80052e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80052e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80052e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80052ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80052ee:	bfac      	ite	ge
 80052f0:	eb06 0a03 	addge.w	sl, r6, r3
 80052f4:	1b9f      	sublt	r7, r3, r6
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	1af6      	subs	r6, r6, r3
 80052fa:	4416      	add	r6, r2
 80052fc:	4ba0      	ldr	r3, [pc, #640]	; (8005580 <_strtod_l+0x938>)
 80052fe:	3e01      	subs	r6, #1
 8005300:	429e      	cmp	r6, r3
 8005302:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005306:	f280 80c4 	bge.w	8005492 <_strtod_l+0x84a>
 800530a:	1b9b      	subs	r3, r3, r6
 800530c:	2b1f      	cmp	r3, #31
 800530e:	eba2 0203 	sub.w	r2, r2, r3
 8005312:	f04f 0101 	mov.w	r1, #1
 8005316:	f300 80b0 	bgt.w	800547a <_strtod_l+0x832>
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	930e      	str	r3, [sp, #56]	; 0x38
 8005320:	2300      	movs	r3, #0
 8005322:	930d      	str	r3, [sp, #52]	; 0x34
 8005324:	eb0a 0602 	add.w	r6, sl, r2
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	45b2      	cmp	sl, r6
 800532c:	4417      	add	r7, r2
 800532e:	441f      	add	r7, r3
 8005330:	4653      	mov	r3, sl
 8005332:	bfa8      	it	ge
 8005334:	4633      	movge	r3, r6
 8005336:	42bb      	cmp	r3, r7
 8005338:	bfa8      	it	ge
 800533a:	463b      	movge	r3, r7
 800533c:	2b00      	cmp	r3, #0
 800533e:	bfc2      	ittt	gt
 8005340:	1af6      	subgt	r6, r6, r3
 8005342:	1aff      	subgt	r7, r7, r3
 8005344:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800534a:	2b00      	cmp	r3, #0
 800534c:	dd17      	ble.n	800537e <_strtod_l+0x736>
 800534e:	4659      	mov	r1, fp
 8005350:	461a      	mov	r2, r3
 8005352:	4620      	mov	r0, r4
 8005354:	f002 fefc 	bl	8008150 <__pow5mult>
 8005358:	4683      	mov	fp, r0
 800535a:	2800      	cmp	r0, #0
 800535c:	f43f aeb8 	beq.w	80050d0 <_strtod_l+0x488>
 8005360:	4601      	mov	r1, r0
 8005362:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005364:	4620      	mov	r0, r4
 8005366:	f002 fe49 	bl	8007ffc <__multiply>
 800536a:	900b      	str	r0, [sp, #44]	; 0x2c
 800536c:	2800      	cmp	r0, #0
 800536e:	f43f aeaf 	beq.w	80050d0 <_strtod_l+0x488>
 8005372:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005374:	4620      	mov	r0, r4
 8005376:	f002 fd2b 	bl	8007dd0 <_Bfree>
 800537a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800537c:	9316      	str	r3, [sp, #88]	; 0x58
 800537e:	2e00      	cmp	r6, #0
 8005380:	f300 808c 	bgt.w	800549c <_strtod_l+0x854>
 8005384:	9b08      	ldr	r3, [sp, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dd08      	ble.n	800539c <_strtod_l+0x754>
 800538a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800538c:	9905      	ldr	r1, [sp, #20]
 800538e:	4620      	mov	r0, r4
 8005390:	f002 fede 	bl	8008150 <__pow5mult>
 8005394:	9005      	str	r0, [sp, #20]
 8005396:	2800      	cmp	r0, #0
 8005398:	f43f ae9a 	beq.w	80050d0 <_strtod_l+0x488>
 800539c:	2f00      	cmp	r7, #0
 800539e:	dd08      	ble.n	80053b2 <_strtod_l+0x76a>
 80053a0:	9905      	ldr	r1, [sp, #20]
 80053a2:	463a      	mov	r2, r7
 80053a4:	4620      	mov	r0, r4
 80053a6:	f002 ff2d 	bl	8008204 <__lshift>
 80053aa:	9005      	str	r0, [sp, #20]
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f43f ae8f 	beq.w	80050d0 <_strtod_l+0x488>
 80053b2:	f1ba 0f00 	cmp.w	sl, #0
 80053b6:	dd08      	ble.n	80053ca <_strtod_l+0x782>
 80053b8:	4659      	mov	r1, fp
 80053ba:	4652      	mov	r2, sl
 80053bc:	4620      	mov	r0, r4
 80053be:	f002 ff21 	bl	8008204 <__lshift>
 80053c2:	4683      	mov	fp, r0
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f43f ae83 	beq.w	80050d0 <_strtod_l+0x488>
 80053ca:	9a05      	ldr	r2, [sp, #20]
 80053cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80053ce:	4620      	mov	r0, r4
 80053d0:	f002 ffa0 	bl	8008314 <__mdiff>
 80053d4:	4605      	mov	r5, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f43f ae7a 	beq.w	80050d0 <_strtod_l+0x488>
 80053dc:	68c3      	ldr	r3, [r0, #12]
 80053de:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e0:	2300      	movs	r3, #0
 80053e2:	60c3      	str	r3, [r0, #12]
 80053e4:	4659      	mov	r1, fp
 80053e6:	f002 ff79 	bl	80082dc <__mcmp>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	da60      	bge.n	80054b0 <_strtod_l+0x868>
 80053ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f0:	ea53 0308 	orrs.w	r3, r3, r8
 80053f4:	f040 8084 	bne.w	8005500 <_strtod_l+0x8b8>
 80053f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d17f      	bne.n	8005500 <_strtod_l+0x8b8>
 8005400:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005404:	0d1b      	lsrs	r3, r3, #20
 8005406:	051b      	lsls	r3, r3, #20
 8005408:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800540c:	d978      	bls.n	8005500 <_strtod_l+0x8b8>
 800540e:	696b      	ldr	r3, [r5, #20]
 8005410:	b913      	cbnz	r3, 8005418 <_strtod_l+0x7d0>
 8005412:	692b      	ldr	r3, [r5, #16]
 8005414:	2b01      	cmp	r3, #1
 8005416:	dd73      	ble.n	8005500 <_strtod_l+0x8b8>
 8005418:	4629      	mov	r1, r5
 800541a:	2201      	movs	r2, #1
 800541c:	4620      	mov	r0, r4
 800541e:	f002 fef1 	bl	8008204 <__lshift>
 8005422:	4659      	mov	r1, fp
 8005424:	4605      	mov	r5, r0
 8005426:	f002 ff59 	bl	80082dc <__mcmp>
 800542a:	2800      	cmp	r0, #0
 800542c:	dd68      	ble.n	8005500 <_strtod_l+0x8b8>
 800542e:	9904      	ldr	r1, [sp, #16]
 8005430:	4a54      	ldr	r2, [pc, #336]	; (8005584 <_strtod_l+0x93c>)
 8005432:	464b      	mov	r3, r9
 8005434:	2900      	cmp	r1, #0
 8005436:	f000 8084 	beq.w	8005542 <_strtod_l+0x8fa>
 800543a:	ea02 0109 	and.w	r1, r2, r9
 800543e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005442:	dc7e      	bgt.n	8005542 <_strtod_l+0x8fa>
 8005444:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005448:	f77f aeb3 	ble.w	80051b2 <_strtod_l+0x56a>
 800544c:	4b4e      	ldr	r3, [pc, #312]	; (8005588 <_strtod_l+0x940>)
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	2200      	movs	r2, #0
 8005454:	f7fb f8e0 	bl	8000618 <__aeabi_dmul>
 8005458:	4b4a      	ldr	r3, [pc, #296]	; (8005584 <_strtod_l+0x93c>)
 800545a:	400b      	ands	r3, r1
 800545c:	4680      	mov	r8, r0
 800545e:	4689      	mov	r9, r1
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f ae3f 	bne.w	80050e4 <_strtod_l+0x49c>
 8005466:	2322      	movs	r3, #34	; 0x22
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	e63b      	b.n	80050e4 <_strtod_l+0x49c>
 800546c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	ea03 0808 	and.w	r8, r3, r8
 8005478:	e6e8      	b.n	800524c <_strtod_l+0x604>
 800547a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800547e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005482:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005486:	36e2      	adds	r6, #226	; 0xe2
 8005488:	fa01 f306 	lsl.w	r3, r1, r6
 800548c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8005490:	e748      	b.n	8005324 <_strtod_l+0x6dc>
 8005492:	2100      	movs	r1, #0
 8005494:	2301      	movs	r3, #1
 8005496:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800549a:	e743      	b.n	8005324 <_strtod_l+0x6dc>
 800549c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800549e:	4632      	mov	r2, r6
 80054a0:	4620      	mov	r0, r4
 80054a2:	f002 feaf 	bl	8008204 <__lshift>
 80054a6:	9016      	str	r0, [sp, #88]	; 0x58
 80054a8:	2800      	cmp	r0, #0
 80054aa:	f47f af6b 	bne.w	8005384 <_strtod_l+0x73c>
 80054ae:	e60f      	b.n	80050d0 <_strtod_l+0x488>
 80054b0:	46ca      	mov	sl, r9
 80054b2:	d171      	bne.n	8005598 <_strtod_l+0x950>
 80054b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054ba:	b352      	cbz	r2, 8005512 <_strtod_l+0x8ca>
 80054bc:	4a33      	ldr	r2, [pc, #204]	; (800558c <_strtod_l+0x944>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d12a      	bne.n	8005518 <_strtod_l+0x8d0>
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	4641      	mov	r1, r8
 80054c6:	b1fb      	cbz	r3, 8005508 <_strtod_l+0x8c0>
 80054c8:	4b2e      	ldr	r3, [pc, #184]	; (8005584 <_strtod_l+0x93c>)
 80054ca:	ea09 0303 	and.w	r3, r9, r3
 80054ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d6:	d81a      	bhi.n	800550e <_strtod_l+0x8c6>
 80054d8:	0d1b      	lsrs	r3, r3, #20
 80054da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	4299      	cmp	r1, r3
 80054e4:	d118      	bne.n	8005518 <_strtod_l+0x8d0>
 80054e6:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <_strtod_l+0x948>)
 80054e8:	459a      	cmp	sl, r3
 80054ea:	d102      	bne.n	80054f2 <_strtod_l+0x8aa>
 80054ec:	3101      	adds	r1, #1
 80054ee:	f43f adef 	beq.w	80050d0 <_strtod_l+0x488>
 80054f2:	4b24      	ldr	r3, [pc, #144]	; (8005584 <_strtod_l+0x93c>)
 80054f4:	ea0a 0303 	and.w	r3, sl, r3
 80054f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80054fc:	f04f 0800 	mov.w	r8, #0
 8005500:	9b04      	ldr	r3, [sp, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1a2      	bne.n	800544c <_strtod_l+0x804>
 8005506:	e5ed      	b.n	80050e4 <_strtod_l+0x49c>
 8005508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800550c:	e7e9      	b.n	80054e2 <_strtod_l+0x89a>
 800550e:	4613      	mov	r3, r2
 8005510:	e7e7      	b.n	80054e2 <_strtod_l+0x89a>
 8005512:	ea53 0308 	orrs.w	r3, r3, r8
 8005516:	d08a      	beq.n	800542e <_strtod_l+0x7e6>
 8005518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800551a:	b1e3      	cbz	r3, 8005556 <_strtod_l+0x90e>
 800551c:	ea13 0f0a 	tst.w	r3, sl
 8005520:	d0ee      	beq.n	8005500 <_strtod_l+0x8b8>
 8005522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005524:	9a04      	ldr	r2, [sp, #16]
 8005526:	4640      	mov	r0, r8
 8005528:	4649      	mov	r1, r9
 800552a:	b1c3      	cbz	r3, 800555e <_strtod_l+0x916>
 800552c:	f7ff fb6d 	bl	8004c0a <sulp>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	ec51 0b18 	vmov	r0, r1, d8
 8005538:	f7fa feb8 	bl	80002ac <__adddf3>
 800553c:	4680      	mov	r8, r0
 800553e:	4689      	mov	r9, r1
 8005540:	e7de      	b.n	8005500 <_strtod_l+0x8b8>
 8005542:	4013      	ands	r3, r2
 8005544:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005548:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800554c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005550:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005554:	e7d4      	b.n	8005500 <_strtod_l+0x8b8>
 8005556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005558:	ea13 0f08 	tst.w	r3, r8
 800555c:	e7e0      	b.n	8005520 <_strtod_l+0x8d8>
 800555e:	f7ff fb54 	bl	8004c0a <sulp>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	ec51 0b18 	vmov	r0, r1, d8
 800556a:	f7fa fe9d 	bl	80002a8 <__aeabi_dsub>
 800556e:	2200      	movs	r2, #0
 8005570:	2300      	movs	r3, #0
 8005572:	4680      	mov	r8, r0
 8005574:	4689      	mov	r9, r1
 8005576:	f7fb fab7 	bl	8000ae8 <__aeabi_dcmpeq>
 800557a:	2800      	cmp	r0, #0
 800557c:	d0c0      	beq.n	8005500 <_strtod_l+0x8b8>
 800557e:	e618      	b.n	80051b2 <_strtod_l+0x56a>
 8005580:	fffffc02 	.word	0xfffffc02
 8005584:	7ff00000 	.word	0x7ff00000
 8005588:	39500000 	.word	0x39500000
 800558c:	000fffff 	.word	0x000fffff
 8005590:	7fefffff 	.word	0x7fefffff
 8005594:	08008e98 	.word	0x08008e98
 8005598:	4659      	mov	r1, fp
 800559a:	4628      	mov	r0, r5
 800559c:	f003 f80e 	bl	80085bc <__ratio>
 80055a0:	ec57 6b10 	vmov	r6, r7, d0
 80055a4:	ee10 0a10 	vmov	r0, s0
 80055a8:	2200      	movs	r2, #0
 80055aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fb faae 	bl	8000b10 <__aeabi_dcmple>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d071      	beq.n	800569c <_strtod_l+0xa54>
 80055b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d17c      	bne.n	80056b8 <_strtod_l+0xa70>
 80055be:	f1b8 0f00 	cmp.w	r8, #0
 80055c2:	d15a      	bne.n	800567a <_strtod_l+0xa32>
 80055c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d15d      	bne.n	8005688 <_strtod_l+0xa40>
 80055cc:	4b90      	ldr	r3, [pc, #576]	; (8005810 <_strtod_l+0xbc8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f7fb fa92 	bl	8000afc <__aeabi_dcmplt>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d15c      	bne.n	8005696 <_strtod_l+0xa4e>
 80055dc:	4630      	mov	r0, r6
 80055de:	4639      	mov	r1, r7
 80055e0:	4b8c      	ldr	r3, [pc, #560]	; (8005814 <_strtod_l+0xbcc>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	f7fb f818 	bl	8000618 <__aeabi_dmul>
 80055e8:	4606      	mov	r6, r0
 80055ea:	460f      	mov	r7, r1
 80055ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80055f0:	9606      	str	r6, [sp, #24]
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80055fc:	4b86      	ldr	r3, [pc, #536]	; (8005818 <_strtod_l+0xbd0>)
 80055fe:	ea0a 0303 	and.w	r3, sl, r3
 8005602:	930d      	str	r3, [sp, #52]	; 0x34
 8005604:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <_strtod_l+0xbd4>)
 8005608:	429a      	cmp	r2, r3
 800560a:	f040 8090 	bne.w	800572e <_strtod_l+0xae6>
 800560e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005612:	ec49 8b10 	vmov	d0, r8, r9
 8005616:	f002 ff07 	bl	8008428 <__ulp>
 800561a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800561e:	ec51 0b10 	vmov	r0, r1, d0
 8005622:	f7fa fff9 	bl	8000618 <__aeabi_dmul>
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	f7fa fe3f 	bl	80002ac <__adddf3>
 800562e:	460b      	mov	r3, r1
 8005630:	4979      	ldr	r1, [pc, #484]	; (8005818 <_strtod_l+0xbd0>)
 8005632:	4a7b      	ldr	r2, [pc, #492]	; (8005820 <_strtod_l+0xbd8>)
 8005634:	4019      	ands	r1, r3
 8005636:	4291      	cmp	r1, r2
 8005638:	4680      	mov	r8, r0
 800563a:	d944      	bls.n	80056c6 <_strtod_l+0xa7e>
 800563c:	ee18 2a90 	vmov	r2, s17
 8005640:	4b78      	ldr	r3, [pc, #480]	; (8005824 <_strtod_l+0xbdc>)
 8005642:	429a      	cmp	r2, r3
 8005644:	d104      	bne.n	8005650 <_strtod_l+0xa08>
 8005646:	ee18 3a10 	vmov	r3, s16
 800564a:	3301      	adds	r3, #1
 800564c:	f43f ad40 	beq.w	80050d0 <_strtod_l+0x488>
 8005650:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005824 <_strtod_l+0xbdc>
 8005654:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005658:	9916      	ldr	r1, [sp, #88]	; 0x58
 800565a:	4620      	mov	r0, r4
 800565c:	f002 fbb8 	bl	8007dd0 <_Bfree>
 8005660:	9905      	ldr	r1, [sp, #20]
 8005662:	4620      	mov	r0, r4
 8005664:	f002 fbb4 	bl	8007dd0 <_Bfree>
 8005668:	4659      	mov	r1, fp
 800566a:	4620      	mov	r0, r4
 800566c:	f002 fbb0 	bl	8007dd0 <_Bfree>
 8005670:	4629      	mov	r1, r5
 8005672:	4620      	mov	r0, r4
 8005674:	f002 fbac 	bl	8007dd0 <_Bfree>
 8005678:	e609      	b.n	800528e <_strtod_l+0x646>
 800567a:	f1b8 0f01 	cmp.w	r8, #1
 800567e:	d103      	bne.n	8005688 <_strtod_l+0xa40>
 8005680:	f1b9 0f00 	cmp.w	r9, #0
 8005684:	f43f ad95 	beq.w	80051b2 <_strtod_l+0x56a>
 8005688:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80057e0 <_strtod_l+0xb98>
 800568c:	4f60      	ldr	r7, [pc, #384]	; (8005810 <_strtod_l+0xbc8>)
 800568e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005692:	2600      	movs	r6, #0
 8005694:	e7ae      	b.n	80055f4 <_strtod_l+0x9ac>
 8005696:	4f5f      	ldr	r7, [pc, #380]	; (8005814 <_strtod_l+0xbcc>)
 8005698:	2600      	movs	r6, #0
 800569a:	e7a7      	b.n	80055ec <_strtod_l+0x9a4>
 800569c:	4b5d      	ldr	r3, [pc, #372]	; (8005814 <_strtod_l+0xbcc>)
 800569e:	4630      	mov	r0, r6
 80056a0:	4639      	mov	r1, r7
 80056a2:	2200      	movs	r2, #0
 80056a4:	f7fa ffb8 	bl	8000618 <__aeabi_dmul>
 80056a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056aa:	4606      	mov	r6, r0
 80056ac:	460f      	mov	r7, r1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d09c      	beq.n	80055ec <_strtod_l+0x9a4>
 80056b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80056b6:	e79d      	b.n	80055f4 <_strtod_l+0x9ac>
 80056b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80057e8 <_strtod_l+0xba0>
 80056bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056c0:	ec57 6b17 	vmov	r6, r7, d7
 80056c4:	e796      	b.n	80055f4 <_strtod_l+0x9ac>
 80056c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	46ca      	mov	sl, r9
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1c2      	bne.n	8005658 <_strtod_l+0xa10>
 80056d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056d8:	0d1b      	lsrs	r3, r3, #20
 80056da:	051b      	lsls	r3, r3, #20
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1bb      	bne.n	8005658 <_strtod_l+0xa10>
 80056e0:	4630      	mov	r0, r6
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7fb faf8 	bl	8000cd8 <__aeabi_d2lz>
 80056e8:	f7fa ff68 	bl	80005bc <__aeabi_l2d>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fa fdd8 	bl	80002a8 <__aeabi_dsub>
 80056f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056fe:	ea43 0308 	orr.w	r3, r3, r8
 8005702:	4313      	orrs	r3, r2
 8005704:	4606      	mov	r6, r0
 8005706:	460f      	mov	r7, r1
 8005708:	d054      	beq.n	80057b4 <_strtod_l+0xb6c>
 800570a:	a339      	add	r3, pc, #228	; (adr r3, 80057f0 <_strtod_l+0xba8>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fb f9f4 	bl	8000afc <__aeabi_dcmplt>
 8005714:	2800      	cmp	r0, #0
 8005716:	f47f ace5 	bne.w	80050e4 <_strtod_l+0x49c>
 800571a:	a337      	add	r3, pc, #220	; (adr r3, 80057f8 <_strtod_l+0xbb0>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fb fa08 	bl	8000b38 <__aeabi_dcmpgt>
 8005728:	2800      	cmp	r0, #0
 800572a:	d095      	beq.n	8005658 <_strtod_l+0xa10>
 800572c:	e4da      	b.n	80050e4 <_strtod_l+0x49c>
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	b333      	cbz	r3, 8005780 <_strtod_l+0xb38>
 8005732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005734:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005738:	d822      	bhi.n	8005780 <_strtod_l+0xb38>
 800573a:	a331      	add	r3, pc, #196	; (adr r3, 8005800 <_strtod_l+0xbb8>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fb f9e4 	bl	8000b10 <__aeabi_dcmple>
 8005748:	b1a0      	cbz	r0, 8005774 <_strtod_l+0xb2c>
 800574a:	4639      	mov	r1, r7
 800574c:	4630      	mov	r0, r6
 800574e:	f7fb fa3b 	bl	8000bc8 <__aeabi_d2uiz>
 8005752:	2801      	cmp	r0, #1
 8005754:	bf38      	it	cc
 8005756:	2001      	movcc	r0, #1
 8005758:	f7fa fee4 	bl	8000524 <__aeabi_ui2d>
 800575c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	bb23      	cbnz	r3, 80057ae <_strtod_l+0xb66>
 8005764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005768:	9010      	str	r0, [sp, #64]	; 0x40
 800576a:	9311      	str	r3, [sp, #68]	; 0x44
 800576c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005770:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005778:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005780:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005784:	eeb0 0a48 	vmov.f32	s0, s16
 8005788:	eef0 0a68 	vmov.f32	s1, s17
 800578c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005790:	f002 fe4a 	bl	8008428 <__ulp>
 8005794:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005798:	ec53 2b10 	vmov	r2, r3, d0
 800579c:	f7fa ff3c 	bl	8000618 <__aeabi_dmul>
 80057a0:	ec53 2b18 	vmov	r2, r3, d8
 80057a4:	f7fa fd82 	bl	80002ac <__adddf3>
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	e78d      	b.n	80056ca <_strtod_l+0xa82>
 80057ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80057b2:	e7db      	b.n	800576c <_strtod_l+0xb24>
 80057b4:	a314      	add	r3, pc, #80	; (adr r3, 8005808 <_strtod_l+0xbc0>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fb f99f 	bl	8000afc <__aeabi_dcmplt>
 80057be:	e7b3      	b.n	8005728 <_strtod_l+0xae0>
 80057c0:	2300      	movs	r3, #0
 80057c2:	930a      	str	r3, [sp, #40]	; 0x28
 80057c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	f7ff ba7c 	b.w	8004cc6 <_strtod_l+0x7e>
 80057ce:	2a65      	cmp	r2, #101	; 0x65
 80057d0:	f43f ab75 	beq.w	8004ebe <_strtod_l+0x276>
 80057d4:	2a45      	cmp	r2, #69	; 0x45
 80057d6:	f43f ab72 	beq.w	8004ebe <_strtod_l+0x276>
 80057da:	2301      	movs	r3, #1
 80057dc:	f7ff bbaa 	b.w	8004f34 <_strtod_l+0x2ec>
 80057e0:	00000000 	.word	0x00000000
 80057e4:	bff00000 	.word	0xbff00000
 80057e8:	00000000 	.word	0x00000000
 80057ec:	3ff00000 	.word	0x3ff00000
 80057f0:	94a03595 	.word	0x94a03595
 80057f4:	3fdfffff 	.word	0x3fdfffff
 80057f8:	35afe535 	.word	0x35afe535
 80057fc:	3fe00000 	.word	0x3fe00000
 8005800:	ffc00000 	.word	0xffc00000
 8005804:	41dfffff 	.word	0x41dfffff
 8005808:	94a03595 	.word	0x94a03595
 800580c:	3fcfffff 	.word	0x3fcfffff
 8005810:	3ff00000 	.word	0x3ff00000
 8005814:	3fe00000 	.word	0x3fe00000
 8005818:	7ff00000 	.word	0x7ff00000
 800581c:	7fe00000 	.word	0x7fe00000
 8005820:	7c9fffff 	.word	0x7c9fffff
 8005824:	7fefffff 	.word	0x7fefffff

08005828 <strtod>:
 8005828:	460a      	mov	r2, r1
 800582a:	4601      	mov	r1, r0
 800582c:	4802      	ldr	r0, [pc, #8]	; (8005838 <strtod+0x10>)
 800582e:	4b03      	ldr	r3, [pc, #12]	; (800583c <strtod+0x14>)
 8005830:	6800      	ldr	r0, [r0, #0]
 8005832:	f7ff ba09 	b.w	8004c48 <_strtod_l>
 8005836:	bf00      	nop
 8005838:	200001d8 	.word	0x200001d8
 800583c:	20000020 	.word	0x20000020

08005840 <_strtol_l.constprop.0>:
 8005840:	2b01      	cmp	r3, #1
 8005842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005846:	d001      	beq.n	800584c <_strtol_l.constprop.0+0xc>
 8005848:	2b24      	cmp	r3, #36	; 0x24
 800584a:	d906      	bls.n	800585a <_strtol_l.constprop.0+0x1a>
 800584c:	f000 ff58 	bl	8006700 <__errno>
 8005850:	2316      	movs	r3, #22
 8005852:	6003      	str	r3, [r0, #0]
 8005854:	2000      	movs	r0, #0
 8005856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005940 <_strtol_l.constprop.0+0x100>
 800585e:	460d      	mov	r5, r1
 8005860:	462e      	mov	r6, r5
 8005862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005866:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800586a:	f017 0708 	ands.w	r7, r7, #8
 800586e:	d1f7      	bne.n	8005860 <_strtol_l.constprop.0+0x20>
 8005870:	2c2d      	cmp	r4, #45	; 0x2d
 8005872:	d132      	bne.n	80058da <_strtol_l.constprop.0+0x9a>
 8005874:	782c      	ldrb	r4, [r5, #0]
 8005876:	2701      	movs	r7, #1
 8005878:	1cb5      	adds	r5, r6, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d05b      	beq.n	8005936 <_strtol_l.constprop.0+0xf6>
 800587e:	2b10      	cmp	r3, #16
 8005880:	d109      	bne.n	8005896 <_strtol_l.constprop.0+0x56>
 8005882:	2c30      	cmp	r4, #48	; 0x30
 8005884:	d107      	bne.n	8005896 <_strtol_l.constprop.0+0x56>
 8005886:	782c      	ldrb	r4, [r5, #0]
 8005888:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800588c:	2c58      	cmp	r4, #88	; 0x58
 800588e:	d14d      	bne.n	800592c <_strtol_l.constprop.0+0xec>
 8005890:	786c      	ldrb	r4, [r5, #1]
 8005892:	2310      	movs	r3, #16
 8005894:	3502      	adds	r5, #2
 8005896:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800589a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800589e:	f04f 0e00 	mov.w	lr, #0
 80058a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80058a6:	4676      	mov	r6, lr
 80058a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80058ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80058b0:	f1bc 0f09 	cmp.w	ip, #9
 80058b4:	d816      	bhi.n	80058e4 <_strtol_l.constprop.0+0xa4>
 80058b6:	4664      	mov	r4, ip
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	dd24      	ble.n	8005906 <_strtol_l.constprop.0+0xc6>
 80058bc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80058c0:	d008      	beq.n	80058d4 <_strtol_l.constprop.0+0x94>
 80058c2:	45b1      	cmp	r9, r6
 80058c4:	d31c      	bcc.n	8005900 <_strtol_l.constprop.0+0xc0>
 80058c6:	d101      	bne.n	80058cc <_strtol_l.constprop.0+0x8c>
 80058c8:	45a2      	cmp	sl, r4
 80058ca:	db19      	blt.n	8005900 <_strtol_l.constprop.0+0xc0>
 80058cc:	fb06 4603 	mla	r6, r6, r3, r4
 80058d0:	f04f 0e01 	mov.w	lr, #1
 80058d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058d8:	e7e8      	b.n	80058ac <_strtol_l.constprop.0+0x6c>
 80058da:	2c2b      	cmp	r4, #43	; 0x2b
 80058dc:	bf04      	itt	eq
 80058de:	782c      	ldrbeq	r4, [r5, #0]
 80058e0:	1cb5      	addeq	r5, r6, #2
 80058e2:	e7ca      	b.n	800587a <_strtol_l.constprop.0+0x3a>
 80058e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80058e8:	f1bc 0f19 	cmp.w	ip, #25
 80058ec:	d801      	bhi.n	80058f2 <_strtol_l.constprop.0+0xb2>
 80058ee:	3c37      	subs	r4, #55	; 0x37
 80058f0:	e7e2      	b.n	80058b8 <_strtol_l.constprop.0+0x78>
 80058f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80058f6:	f1bc 0f19 	cmp.w	ip, #25
 80058fa:	d804      	bhi.n	8005906 <_strtol_l.constprop.0+0xc6>
 80058fc:	3c57      	subs	r4, #87	; 0x57
 80058fe:	e7db      	b.n	80058b8 <_strtol_l.constprop.0+0x78>
 8005900:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8005904:	e7e6      	b.n	80058d4 <_strtol_l.constprop.0+0x94>
 8005906:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800590a:	d105      	bne.n	8005918 <_strtol_l.constprop.0+0xd8>
 800590c:	2322      	movs	r3, #34	; 0x22
 800590e:	6003      	str	r3, [r0, #0]
 8005910:	4646      	mov	r6, r8
 8005912:	b942      	cbnz	r2, 8005926 <_strtol_l.constprop.0+0xe6>
 8005914:	4630      	mov	r0, r6
 8005916:	e79e      	b.n	8005856 <_strtol_l.constprop.0+0x16>
 8005918:	b107      	cbz	r7, 800591c <_strtol_l.constprop.0+0xdc>
 800591a:	4276      	negs	r6, r6
 800591c:	2a00      	cmp	r2, #0
 800591e:	d0f9      	beq.n	8005914 <_strtol_l.constprop.0+0xd4>
 8005920:	f1be 0f00 	cmp.w	lr, #0
 8005924:	d000      	beq.n	8005928 <_strtol_l.constprop.0+0xe8>
 8005926:	1e69      	subs	r1, r5, #1
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	e7f3      	b.n	8005914 <_strtol_l.constprop.0+0xd4>
 800592c:	2430      	movs	r4, #48	; 0x30
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1b1      	bne.n	8005896 <_strtol_l.constprop.0+0x56>
 8005932:	2308      	movs	r3, #8
 8005934:	e7af      	b.n	8005896 <_strtol_l.constprop.0+0x56>
 8005936:	2c30      	cmp	r4, #48	; 0x30
 8005938:	d0a5      	beq.n	8005886 <_strtol_l.constprop.0+0x46>
 800593a:	230a      	movs	r3, #10
 800593c:	e7ab      	b.n	8005896 <_strtol_l.constprop.0+0x56>
 800593e:	bf00      	nop
 8005940:	08008ec1 	.word	0x08008ec1

08005944 <strtol>:
 8005944:	4613      	mov	r3, r2
 8005946:	460a      	mov	r2, r1
 8005948:	4601      	mov	r1, r0
 800594a:	4802      	ldr	r0, [pc, #8]	; (8005954 <strtol+0x10>)
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f7ff bf77 	b.w	8005840 <_strtol_l.constprop.0>
 8005952:	bf00      	nop
 8005954:	200001d8 	.word	0x200001d8

08005958 <__cvt>:
 8005958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	ec55 4b10 	vmov	r4, r5, d0
 8005960:	2d00      	cmp	r5, #0
 8005962:	460e      	mov	r6, r1
 8005964:	4619      	mov	r1, r3
 8005966:	462b      	mov	r3, r5
 8005968:	bfbb      	ittet	lt
 800596a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800596e:	461d      	movlt	r5, r3
 8005970:	2300      	movge	r3, #0
 8005972:	232d      	movlt	r3, #45	; 0x2d
 8005974:	700b      	strb	r3, [r1, #0]
 8005976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005978:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800597c:	4691      	mov	r9, r2
 800597e:	f023 0820 	bic.w	r8, r3, #32
 8005982:	bfbc      	itt	lt
 8005984:	4622      	movlt	r2, r4
 8005986:	4614      	movlt	r4, r2
 8005988:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800598c:	d005      	beq.n	800599a <__cvt+0x42>
 800598e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005992:	d100      	bne.n	8005996 <__cvt+0x3e>
 8005994:	3601      	adds	r6, #1
 8005996:	2102      	movs	r1, #2
 8005998:	e000      	b.n	800599c <__cvt+0x44>
 800599a:	2103      	movs	r1, #3
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	ab02      	add	r3, sp, #8
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	ec45 4b10 	vmov	d0, r4, r5
 80059a8:	4653      	mov	r3, sl
 80059aa:	4632      	mov	r2, r6
 80059ac:	f000 ff74 	bl	8006898 <_dtoa_r>
 80059b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059b4:	4607      	mov	r7, r0
 80059b6:	d102      	bne.n	80059be <__cvt+0x66>
 80059b8:	f019 0f01 	tst.w	r9, #1
 80059bc:	d022      	beq.n	8005a04 <__cvt+0xac>
 80059be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059c2:	eb07 0906 	add.w	r9, r7, r6
 80059c6:	d110      	bne.n	80059ea <__cvt+0x92>
 80059c8:	783b      	ldrb	r3, [r7, #0]
 80059ca:	2b30      	cmp	r3, #48	; 0x30
 80059cc:	d10a      	bne.n	80059e4 <__cvt+0x8c>
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fb f887 	bl	8000ae8 <__aeabi_dcmpeq>
 80059da:	b918      	cbnz	r0, 80059e4 <__cvt+0x8c>
 80059dc:	f1c6 0601 	rsb	r6, r6, #1
 80059e0:	f8ca 6000 	str.w	r6, [sl]
 80059e4:	f8da 3000 	ldr.w	r3, [sl]
 80059e8:	4499      	add	r9, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	2300      	movs	r3, #0
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fb f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80059f6:	b108      	cbz	r0, 80059fc <__cvt+0xa4>
 80059f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80059fc:	2230      	movs	r2, #48	; 0x30
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	454b      	cmp	r3, r9
 8005a02:	d307      	bcc.n	8005a14 <__cvt+0xbc>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a08:	1bdb      	subs	r3, r3, r7
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	b004      	add	sp, #16
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e7f0      	b.n	80059fe <__cvt+0xa6>

08005a1c <__exponent>:
 8005a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	bfb8      	it	lt
 8005a24:	4249      	neglt	r1, r1
 8005a26:	f803 2b02 	strb.w	r2, [r3], #2
 8005a2a:	bfb4      	ite	lt
 8005a2c:	222d      	movlt	r2, #45	; 0x2d
 8005a2e:	222b      	movge	r2, #43	; 0x2b
 8005a30:	2909      	cmp	r1, #9
 8005a32:	7042      	strb	r2, [r0, #1]
 8005a34:	dd2a      	ble.n	8005a8c <__exponent+0x70>
 8005a36:	f10d 0207 	add.w	r2, sp, #7
 8005a3a:	4617      	mov	r7, r2
 8005a3c:	260a      	movs	r6, #10
 8005a3e:	4694      	mov	ip, r2
 8005a40:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a44:	fb06 1415 	mls	r4, r6, r5, r1
 8005a48:	3430      	adds	r4, #48	; 0x30
 8005a4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005a4e:	460c      	mov	r4, r1
 8005a50:	2c63      	cmp	r4, #99	; 0x63
 8005a52:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005a56:	4629      	mov	r1, r5
 8005a58:	dcf1      	bgt.n	8005a3e <__exponent+0x22>
 8005a5a:	3130      	adds	r1, #48	; 0x30
 8005a5c:	f1ac 0402 	sub.w	r4, ip, #2
 8005a60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a64:	1c41      	adds	r1, r0, #1
 8005a66:	4622      	mov	r2, r4
 8005a68:	42ba      	cmp	r2, r7
 8005a6a:	d30a      	bcc.n	8005a82 <__exponent+0x66>
 8005a6c:	f10d 0209 	add.w	r2, sp, #9
 8005a70:	eba2 020c 	sub.w	r2, r2, ip
 8005a74:	42bc      	cmp	r4, r7
 8005a76:	bf88      	it	hi
 8005a78:	2200      	movhi	r2, #0
 8005a7a:	4413      	add	r3, r2
 8005a7c:	1a18      	subs	r0, r3, r0
 8005a7e:	b003      	add	sp, #12
 8005a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a8a:	e7ed      	b.n	8005a68 <__exponent+0x4c>
 8005a8c:	2330      	movs	r3, #48	; 0x30
 8005a8e:	3130      	adds	r1, #48	; 0x30
 8005a90:	7083      	strb	r3, [r0, #2]
 8005a92:	70c1      	strb	r1, [r0, #3]
 8005a94:	1d03      	adds	r3, r0, #4
 8005a96:	e7f1      	b.n	8005a7c <__exponent+0x60>

08005a98 <_printf_float>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ed2d 8b02 	vpush	{d8}
 8005aa0:	b08d      	sub	sp, #52	; 0x34
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	461f      	mov	r7, r3
 8005aac:	4605      	mov	r5, r0
 8005aae:	f000 fddd 	bl	800666c <_localeconv_r>
 8005ab2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	f7fa fbea 	bl	8000290 <strlen>
 8005abc:	2300      	movs	r3, #0
 8005abe:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005acc:	3307      	adds	r3, #7
 8005ace:	f023 0307 	bic.w	r3, r3, #7
 8005ad2:	f103 0208 	add.w	r2, r3, #8
 8005ad6:	f8c8 2000 	str.w	r2, [r8]
 8005ada:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ade:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ae8:	ee08 0a10 	vmov	s16, r0
 8005aec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af4:	4b9e      	ldr	r3, [pc, #632]	; (8005d70 <_printf_float+0x2d8>)
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005afa:	f7fb f827 	bl	8000b4c <__aeabi_dcmpun>
 8005afe:	bb88      	cbnz	r0, 8005b64 <_printf_float+0xcc>
 8005b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b04:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <_printf_float+0x2d8>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0a:	f7fb f801 	bl	8000b10 <__aeabi_dcmple>
 8005b0e:	bb48      	cbnz	r0, 8005b64 <_printf_float+0xcc>
 8005b10:	2200      	movs	r2, #0
 8005b12:	2300      	movs	r3, #0
 8005b14:	4640      	mov	r0, r8
 8005b16:	4649      	mov	r1, r9
 8005b18:	f7fa fff0 	bl	8000afc <__aeabi_dcmplt>
 8005b1c:	b110      	cbz	r0, 8005b24 <_printf_float+0x8c>
 8005b1e:	232d      	movs	r3, #45	; 0x2d
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	4a93      	ldr	r2, [pc, #588]	; (8005d74 <_printf_float+0x2dc>)
 8005b26:	4b94      	ldr	r3, [pc, #592]	; (8005d78 <_printf_float+0x2e0>)
 8005b28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b2c:	bf94      	ite	ls
 8005b2e:	4690      	movls	r8, r2
 8005b30:	4698      	movhi	r8, r3
 8005b32:	2303      	movs	r3, #3
 8005b34:	6123      	str	r3, [r4, #16]
 8005b36:	9b05      	ldr	r3, [sp, #20]
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	f04f 0900 	mov.w	r9, #0
 8005b42:	9700      	str	r7, [sp, #0]
 8005b44:	4633      	mov	r3, r6
 8005b46:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f9da 	bl	8005f04 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	f040 8090 	bne.w	8005c76 <_printf_float+0x1de>
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5a:	b00d      	add	sp, #52	; 0x34
 8005b5c:	ecbd 8b02 	vpop	{d8}
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	f7fa ffee 	bl	8000b4c <__aeabi_dcmpun>
 8005b70:	b140      	cbz	r0, 8005b84 <_printf_float+0xec>
 8005b72:	464b      	mov	r3, r9
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bfbc      	itt	lt
 8005b78:	232d      	movlt	r3, #45	; 0x2d
 8005b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b7e:	4a7f      	ldr	r2, [pc, #508]	; (8005d7c <_printf_float+0x2e4>)
 8005b80:	4b7f      	ldr	r3, [pc, #508]	; (8005d80 <_printf_float+0x2e8>)
 8005b82:	e7d1      	b.n	8005b28 <_printf_float+0x90>
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b8a:	9206      	str	r2, [sp, #24]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	d13f      	bne.n	8005c10 <_printf_float+0x178>
 8005b90:	2306      	movs	r3, #6
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	9b05      	ldr	r3, [sp, #20]
 8005b96:	6861      	ldr	r1, [r4, #4]
 8005b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ba2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ba6:	ab09      	add	r3, sp, #36	; 0x24
 8005ba8:	ec49 8b10 	vmov	d0, r8, r9
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6022      	str	r2, [r4, #0]
 8005bb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f7ff fecf 	bl	8005958 <__cvt>
 8005bba:	9b06      	ldr	r3, [sp, #24]
 8005bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bbe:	2b47      	cmp	r3, #71	; 0x47
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	d108      	bne.n	8005bd6 <_printf_float+0x13e>
 8005bc4:	1cc8      	adds	r0, r1, #3
 8005bc6:	db02      	blt.n	8005bce <_printf_float+0x136>
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	dd41      	ble.n	8005c52 <_printf_float+0x1ba>
 8005bce:	f1ab 0302 	sub.w	r3, fp, #2
 8005bd2:	fa5f fb83 	uxtb.w	fp, r3
 8005bd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bda:	d820      	bhi.n	8005c1e <_printf_float+0x186>
 8005bdc:	3901      	subs	r1, #1
 8005bde:	465a      	mov	r2, fp
 8005be0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005be4:	9109      	str	r1, [sp, #36]	; 0x24
 8005be6:	f7ff ff19 	bl	8005a1c <__exponent>
 8005bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bec:	1813      	adds	r3, r2, r0
 8005bee:	2a01      	cmp	r2, #1
 8005bf0:	4681      	mov	r9, r0
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	dc02      	bgt.n	8005bfc <_printf_float+0x164>
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	07d2      	lsls	r2, r2, #31
 8005bfa:	d501      	bpl.n	8005c00 <_printf_float+0x168>
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d09c      	beq.n	8005b42 <_printf_float+0xaa>
 8005c08:	232d      	movs	r3, #45	; 0x2d
 8005c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0e:	e798      	b.n	8005b42 <_printf_float+0xaa>
 8005c10:	9a06      	ldr	r2, [sp, #24]
 8005c12:	2a47      	cmp	r2, #71	; 0x47
 8005c14:	d1be      	bne.n	8005b94 <_printf_float+0xfc>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1bc      	bne.n	8005b94 <_printf_float+0xfc>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7b9      	b.n	8005b92 <_printf_float+0xfa>
 8005c1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c22:	d118      	bne.n	8005c56 <_printf_float+0x1be>
 8005c24:	2900      	cmp	r1, #0
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	dd0b      	ble.n	8005c42 <_printf_float+0x1aa>
 8005c2a:	6121      	str	r1, [r4, #16]
 8005c2c:	b913      	cbnz	r3, 8005c34 <_printf_float+0x19c>
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	07d0      	lsls	r0, r2, #31
 8005c32:	d502      	bpl.n	8005c3a <_printf_float+0x1a2>
 8005c34:	3301      	adds	r3, #1
 8005c36:	440b      	add	r3, r1
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c3c:	f04f 0900 	mov.w	r9, #0
 8005c40:	e7de      	b.n	8005c00 <_printf_float+0x168>
 8005c42:	b913      	cbnz	r3, 8005c4a <_printf_float+0x1b2>
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	07d2      	lsls	r2, r2, #31
 8005c48:	d501      	bpl.n	8005c4e <_printf_float+0x1b6>
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	e7f4      	b.n	8005c38 <_printf_float+0x1a0>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e7f2      	b.n	8005c38 <_printf_float+0x1a0>
 8005c52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	db05      	blt.n	8005c68 <_printf_float+0x1d0>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	6121      	str	r1, [r4, #16]
 8005c60:	07d8      	lsls	r0, r3, #31
 8005c62:	d5ea      	bpl.n	8005c3a <_printf_float+0x1a2>
 8005c64:	1c4b      	adds	r3, r1, #1
 8005c66:	e7e7      	b.n	8005c38 <_printf_float+0x1a0>
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	bfd4      	ite	le
 8005c6c:	f1c1 0202 	rsble	r2, r1, #2
 8005c70:	2201      	movgt	r2, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	e7e0      	b.n	8005c38 <_printf_float+0x1a0>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	055a      	lsls	r2, r3, #21
 8005c7a:	d407      	bmi.n	8005c8c <_printf_float+0x1f4>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	4642      	mov	r2, r8
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	d12c      	bne.n	8005ce4 <_printf_float+0x24c>
 8005c8a:	e764      	b.n	8005b56 <_printf_float+0xbe>
 8005c8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c90:	f240 80e0 	bls.w	8005e54 <_printf_float+0x3bc>
 8005c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f7fa ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d034      	beq.n	8005d0e <_printf_float+0x276>
 8005ca4:	4a37      	ldr	r2, [pc, #220]	; (8005d84 <_printf_float+0x2ec>)
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f43f af51 	beq.w	8005b56 <_printf_float+0xbe>
 8005cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	db02      	blt.n	8005cc2 <_printf_float+0x22a>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07d8      	lsls	r0, r3, #31
 8005cc0:	d510      	bpl.n	8005ce4 <_printf_float+0x24c>
 8005cc2:	ee18 3a10 	vmov	r3, s16
 8005cc6:	4652      	mov	r2, sl
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	47b8      	blx	r7
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f43f af41 	beq.w	8005b56 <_printf_float+0xbe>
 8005cd4:	f04f 0800 	mov.w	r8, #0
 8005cd8:	f104 091a 	add.w	r9, r4, #26
 8005cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	4543      	cmp	r3, r8
 8005ce2:	dc09      	bgt.n	8005cf8 <_printf_float+0x260>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	079b      	lsls	r3, r3, #30
 8005ce8:	f100 8107 	bmi.w	8005efa <_printf_float+0x462>
 8005cec:	68e0      	ldr	r0, [r4, #12]
 8005cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf0:	4298      	cmp	r0, r3
 8005cf2:	bfb8      	it	lt
 8005cf4:	4618      	movlt	r0, r3
 8005cf6:	e730      	b.n	8005b5a <_printf_float+0xc2>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f af27 	beq.w	8005b56 <_printf_float+0xbe>
 8005d08:	f108 0801 	add.w	r8, r8, #1
 8005d0c:	e7e6      	b.n	8005cdc <_printf_float+0x244>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	dc39      	bgt.n	8005d88 <_printf_float+0x2f0>
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <_printf_float+0x2ec>)
 8005d16:	2301      	movs	r3, #1
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f43f af19 	beq.w	8005b56 <_printf_float+0xbe>
 8005d24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d102      	bne.n	8005d32 <_printf_float+0x29a>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	07d9      	lsls	r1, r3, #31
 8005d30:	d5d8      	bpl.n	8005ce4 <_printf_float+0x24c>
 8005d32:	ee18 3a10 	vmov	r3, s16
 8005d36:	4652      	mov	r2, sl
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f af09 	beq.w	8005b56 <_printf_float+0xbe>
 8005d44:	f04f 0900 	mov.w	r9, #0
 8005d48:	f104 0a1a 	add.w	sl, r4, #26
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	425b      	negs	r3, r3
 8005d50:	454b      	cmp	r3, r9
 8005d52:	dc01      	bgt.n	8005d58 <_printf_float+0x2c0>
 8005d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d56:	e792      	b.n	8005c7e <_printf_float+0x1e6>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4652      	mov	r2, sl
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	f43f aef7 	beq.w	8005b56 <_printf_float+0xbe>
 8005d68:	f109 0901 	add.w	r9, r9, #1
 8005d6c:	e7ee      	b.n	8005d4c <_printf_float+0x2b4>
 8005d6e:	bf00      	nop
 8005d70:	7fefffff 	.word	0x7fefffff
 8005d74:	08008fc1 	.word	0x08008fc1
 8005d78:	08008fc5 	.word	0x08008fc5
 8005d7c:	08008fc9 	.word	0x08008fc9
 8005d80:	08008fcd 	.word	0x08008fcd
 8005d84:	08008fd1 	.word	0x08008fd1
 8005d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	bfa8      	it	ge
 8005d90:	461a      	movge	r2, r3
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	4691      	mov	r9, r2
 8005d96:	dc37      	bgt.n	8005e08 <_printf_float+0x370>
 8005d98:	f04f 0b00 	mov.w	fp, #0
 8005d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005da0:	f104 021a 	add.w	r2, r4, #26
 8005da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da6:	9305      	str	r3, [sp, #20]
 8005da8:	eba3 0309 	sub.w	r3, r3, r9
 8005dac:	455b      	cmp	r3, fp
 8005dae:	dc33      	bgt.n	8005e18 <_printf_float+0x380>
 8005db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db4:	429a      	cmp	r2, r3
 8005db6:	db3b      	blt.n	8005e30 <_printf_float+0x398>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	07da      	lsls	r2, r3, #31
 8005dbc:	d438      	bmi.n	8005e30 <_printf_float+0x398>
 8005dbe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005dc2:	eba2 0903 	sub.w	r9, r2, r3
 8005dc6:	9b05      	ldr	r3, [sp, #20]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	4591      	cmp	r9, r2
 8005dcc:	bfa8      	it	ge
 8005dce:	4691      	movge	r9, r2
 8005dd0:	f1b9 0f00 	cmp.w	r9, #0
 8005dd4:	dc35      	bgt.n	8005e42 <_printf_float+0x3aa>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dde:	f104 0a1a 	add.w	sl, r4, #26
 8005de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	eba3 0309 	sub.w	r3, r3, r9
 8005dec:	4543      	cmp	r3, r8
 8005dee:	f77f af79 	ble.w	8005ce4 <_printf_float+0x24c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f aeaa 	beq.w	8005b56 <_printf_float+0xbe>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	e7ec      	b.n	8005de2 <_printf_float+0x34a>
 8005e08:	4613      	mov	r3, r2
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	d1c0      	bne.n	8005d98 <_printf_float+0x300>
 8005e16:	e69e      	b.n	8005b56 <_printf_float+0xbe>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	9205      	str	r2, [sp, #20]
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f ae97 	beq.w	8005b56 <_printf_float+0xbe>
 8005e28:	9a05      	ldr	r2, [sp, #20]
 8005e2a:	f10b 0b01 	add.w	fp, fp, #1
 8005e2e:	e7b9      	b.n	8005da4 <_printf_float+0x30c>
 8005e30:	ee18 3a10 	vmov	r3, s16
 8005e34:	4652      	mov	r2, sl
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d1be      	bne.n	8005dbe <_printf_float+0x326>
 8005e40:	e689      	b.n	8005b56 <_printf_float+0xbe>
 8005e42:	9a05      	ldr	r2, [sp, #20]
 8005e44:	464b      	mov	r3, r9
 8005e46:	4442      	add	r2, r8
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d1c1      	bne.n	8005dd6 <_printf_float+0x33e>
 8005e52:	e680      	b.n	8005b56 <_printf_float+0xbe>
 8005e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e56:	2a01      	cmp	r2, #1
 8005e58:	dc01      	bgt.n	8005e5e <_printf_float+0x3c6>
 8005e5a:	07db      	lsls	r3, r3, #31
 8005e5c:	d53a      	bpl.n	8005ed4 <_printf_float+0x43c>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4642      	mov	r2, r8
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f ae74 	beq.w	8005b56 <_printf_float+0xbe>
 8005e6e:	ee18 3a10 	vmov	r3, s16
 8005e72:	4652      	mov	r2, sl
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f ae6b 	beq.w	8005b56 <_printf_float+0xbe>
 8005e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e8c:	f7fa fe2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e90:	b9d8      	cbnz	r0, 8005eca <_printf_float+0x432>
 8005e92:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005e96:	f108 0201 	add.w	r2, r8, #1
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d10e      	bne.n	8005ec2 <_printf_float+0x42a>
 8005ea4:	e657      	b.n	8005b56 <_printf_float+0xbe>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f ae50 	beq.w	8005b56 <_printf_float+0xbe>
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4543      	cmp	r3, r8
 8005ec0:	dcf1      	bgt.n	8005ea6 <_printf_float+0x40e>
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ec8:	e6da      	b.n	8005c80 <_printf_float+0x1e8>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	f104 0a1a 	add.w	sl, r4, #26
 8005ed2:	e7f2      	b.n	8005eba <_printf_float+0x422>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	e7df      	b.n	8005e9a <_printf_float+0x402>
 8005eda:	2301      	movs	r3, #1
 8005edc:	464a      	mov	r2, r9
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae36 	beq.w	8005b56 <_printf_float+0xbe>
 8005eea:	f108 0801 	add.w	r8, r8, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	4543      	cmp	r3, r8
 8005ef6:	dcf0      	bgt.n	8005eda <_printf_float+0x442>
 8005ef8:	e6f8      	b.n	8005cec <_printf_float+0x254>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f104 0919 	add.w	r9, r4, #25
 8005f02:	e7f4      	b.n	8005eee <_printf_float+0x456>

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f50:	1e13      	subs	r3, r2, #0
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf02      	ittt	eq
 8005f76:	68e5      	ldreq	r5, [r4, #12]
 8005f78:	6833      	ldreq	r3, [r6, #0]
 8005f7a:	1aed      	subeq	r5, r5, r3
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c0      	blx	r8
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	; 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe8:	2f78      	cmp	r7, #120	; 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	; 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d4 	beq.w	80061aa <_printf_i+0x1ca>
 8006002:	2f58      	cmp	r7, #88	; 0x58
 8006004:	f000 80c0 	beq.w	8006188 <_printf_i+0x1a8>
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	; (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	08006191 	.word	0x08006191
 8006050:	080060b9 	.word	0x080060b9
 8006054:	0800614b 	.word	0x0800614b
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061b3 	.word	0x080061b3
 8006064:	08006009 	.word	0x08006009
 8006068:	080060b9 	.word	0x080060b9
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	08006153 	.word	0x08006153
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e09f      	b.n	80061cc <_printf_i+0x1ec>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	0607      	lsls	r7, r0, #24
 8006092:	f103 0104 	add.w	r1, r3, #4
 8006096:	6029      	str	r1, [r5, #0]
 8006098:	d501      	bpl.n	800609e <_printf_i+0xbe>
 800609a:	681e      	ldr	r6, [r3, #0]
 800609c:	e003      	b.n	80060a6 <_printf_i+0xc6>
 800609e:	0646      	lsls	r6, r0, #25
 80060a0:	d5fb      	bpl.n	800609a <_printf_i+0xba>
 80060a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	da03      	bge.n	80060b2 <_printf_i+0xd2>
 80060aa:	232d      	movs	r3, #45	; 0x2d
 80060ac:	4276      	negs	r6, r6
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	485a      	ldr	r0, [pc, #360]	; (800621c <_printf_i+0x23c>)
 80060b4:	230a      	movs	r3, #10
 80060b6:	e012      	b.n	80060de <_printf_i+0xfe>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	6029      	str	r1, [r5, #0]
 80060c0:	0605      	lsls	r5, r0, #24
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0xe8>
 80060c4:	681e      	ldr	r6, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0xee>
 80060c8:	0641      	lsls	r1, r0, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xe4>
 80060cc:	881e      	ldrh	r6, [r3, #0]
 80060ce:	4853      	ldr	r0, [pc, #332]	; (800621c <_printf_i+0x23c>)
 80060d0:	2f6f      	cmp	r7, #111	; 0x6f
 80060d2:	bf0c      	ite	eq
 80060d4:	2308      	moveq	r3, #8
 80060d6:	230a      	movne	r3, #10
 80060d8:	2100      	movs	r1, #0
 80060da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060de:	6865      	ldr	r5, [r4, #4]
 80060e0:	60a5      	str	r5, [r4, #8]
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	bfa2      	ittt	ge
 80060e6:	6821      	ldrge	r1, [r4, #0]
 80060e8:	f021 0104 	bicge.w	r1, r1, #4
 80060ec:	6021      	strge	r1, [r4, #0]
 80060ee:	b90e      	cbnz	r6, 80060f4 <_printf_i+0x114>
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	d04b      	beq.n	800618c <_printf_i+0x1ac>
 80060f4:	4615      	mov	r5, r2
 80060f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80060fa:	fb03 6711 	mls	r7, r3, r1, r6
 80060fe:	5dc7      	ldrb	r7, [r0, r7]
 8006100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006104:	4637      	mov	r7, r6
 8006106:	42bb      	cmp	r3, r7
 8006108:	460e      	mov	r6, r1
 800610a:	d9f4      	bls.n	80060f6 <_printf_i+0x116>
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10b      	bne.n	8006128 <_printf_i+0x148>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07de      	lsls	r6, r3, #31
 8006114:	d508      	bpl.n	8006128 <_printf_i+0x148>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	6861      	ldr	r1, [r4, #4]
 800611a:	4299      	cmp	r1, r3
 800611c:	bfde      	ittt	le
 800611e:	2330      	movle	r3, #48	; 0x30
 8006120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006124:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006128:	1b52      	subs	r2, r2, r5
 800612a:	6122      	str	r2, [r4, #16]
 800612c:	f8cd a000 	str.w	sl, [sp]
 8006130:	464b      	mov	r3, r9
 8006132:	aa03      	add	r2, sp, #12
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff fee4 	bl	8005f04 <_printf_common>
 800613c:	3001      	adds	r0, #1
 800613e:	d14a      	bne.n	80061d6 <_printf_i+0x1f6>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006144:	b004      	add	sp, #16
 8006146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f043 0320 	orr.w	r3, r3, #32
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	4833      	ldr	r0, [pc, #204]	; (8006220 <_printf_i+0x240>)
 8006154:	2778      	movs	r7, #120	; 0x78
 8006156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	6829      	ldr	r1, [r5, #0]
 800615e:	061f      	lsls	r7, r3, #24
 8006160:	f851 6b04 	ldr.w	r6, [r1], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0x18c>
 8006166:	065f      	lsls	r7, r3, #25
 8006168:	bf48      	it	mi
 800616a:	b2b6      	uxthmi	r6, r6
 800616c:	07df      	lsls	r7, r3, #31
 800616e:	bf48      	it	mi
 8006170:	f043 0320 	orrmi.w	r3, r3, #32
 8006174:	6029      	str	r1, [r5, #0]
 8006176:	bf48      	it	mi
 8006178:	6023      	strmi	r3, [r4, #0]
 800617a:	b91e      	cbnz	r6, 8006184 <_printf_i+0x1a4>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	2310      	movs	r3, #16
 8006186:	e7a7      	b.n	80060d8 <_printf_i+0xf8>
 8006188:	4824      	ldr	r0, [pc, #144]	; (800621c <_printf_i+0x23c>)
 800618a:	e7e4      	b.n	8006156 <_printf_i+0x176>
 800618c:	4615      	mov	r5, r2
 800618e:	e7bd      	b.n	800610c <_printf_i+0x12c>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	6826      	ldr	r6, [r4, #0]
 8006194:	6961      	ldr	r1, [r4, #20]
 8006196:	1d18      	adds	r0, r3, #4
 8006198:	6028      	str	r0, [r5, #0]
 800619a:	0635      	lsls	r5, r6, #24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	d501      	bpl.n	80061a4 <_printf_i+0x1c4>
 80061a0:	6019      	str	r1, [r3, #0]
 80061a2:	e002      	b.n	80061aa <_printf_i+0x1ca>
 80061a4:	0670      	lsls	r0, r6, #25
 80061a6:	d5fb      	bpl.n	80061a0 <_printf_i+0x1c0>
 80061a8:	8019      	strh	r1, [r3, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	4615      	mov	r5, r2
 80061b0:	e7bc      	b.n	800612c <_printf_i+0x14c>
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	602a      	str	r2, [r5, #0]
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	2100      	movs	r1, #0
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fa f816 	bl	80001f0 <memchr>
 80061c4:	b108      	cbz	r0, 80061ca <_printf_i+0x1ea>
 80061c6:	1b40      	subs	r0, r0, r5
 80061c8:	6060      	str	r0, [r4, #4]
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	2300      	movs	r3, #0
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d4:	e7aa      	b.n	800612c <_printf_i+0x14c>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	462a      	mov	r2, r5
 80061da:	4649      	mov	r1, r9
 80061dc:	4640      	mov	r0, r8
 80061de:	47d0      	blx	sl
 80061e0:	3001      	adds	r0, #1
 80061e2:	d0ad      	beq.n	8006140 <_printf_i+0x160>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	079b      	lsls	r3, r3, #30
 80061e8:	d413      	bmi.n	8006212 <_printf_i+0x232>
 80061ea:	68e0      	ldr	r0, [r4, #12]
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	4298      	cmp	r0, r3
 80061f0:	bfb8      	it	lt
 80061f2:	4618      	movlt	r0, r3
 80061f4:	e7a6      	b.n	8006144 <_printf_i+0x164>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4632      	mov	r2, r6
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d09d      	beq.n	8006140 <_printf_i+0x160>
 8006204:	3501      	adds	r5, #1
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	9903      	ldr	r1, [sp, #12]
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	42ab      	cmp	r3, r5
 800620e:	dcf2      	bgt.n	80061f6 <_printf_i+0x216>
 8006210:	e7eb      	b.n	80061ea <_printf_i+0x20a>
 8006212:	2500      	movs	r5, #0
 8006214:	f104 0619 	add.w	r6, r4, #25
 8006218:	e7f5      	b.n	8006206 <_printf_i+0x226>
 800621a:	bf00      	nop
 800621c:	08008fd3 	.word	0x08008fd3
 8006220:	08008fe4 	.word	0x08008fe4

08006224 <std>:
 8006224:	2300      	movs	r3, #0
 8006226:	b510      	push	{r4, lr}
 8006228:	4604      	mov	r4, r0
 800622a:	e9c0 3300 	strd	r3, r3, [r0]
 800622e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006232:	6083      	str	r3, [r0, #8]
 8006234:	8181      	strh	r1, [r0, #12]
 8006236:	6643      	str	r3, [r0, #100]	; 0x64
 8006238:	81c2      	strh	r2, [r0, #14]
 800623a:	6183      	str	r3, [r0, #24]
 800623c:	4619      	mov	r1, r3
 800623e:	2208      	movs	r2, #8
 8006240:	305c      	adds	r0, #92	; 0x5c
 8006242:	f000 f9e5 	bl	8006610 <memset>
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <std+0x38>)
 8006248:	6263      	str	r3, [r4, #36]	; 0x24
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <std+0x3c>)
 800624c:	62a3      	str	r3, [r4, #40]	; 0x28
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <std+0x40>)
 8006250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <std+0x44>)
 8006254:	6224      	str	r4, [r4, #32]
 8006256:	6323      	str	r3, [r4, #48]	; 0x30
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	08006461 	.word	0x08006461
 8006260:	08006483 	.word	0x08006483
 8006264:	080064bb 	.word	0x080064bb
 8006268:	080064df 	.word	0x080064df

0800626c <stdio_exit_handler>:
 800626c:	4a02      	ldr	r2, [pc, #8]	; (8006278 <stdio_exit_handler+0xc>)
 800626e:	4903      	ldr	r1, [pc, #12]	; (800627c <stdio_exit_handler+0x10>)
 8006270:	4803      	ldr	r0, [pc, #12]	; (8006280 <stdio_exit_handler+0x14>)
 8006272:	f000 b869 	b.w	8006348 <_fwalk_sglue>
 8006276:	bf00      	nop
 8006278:	20000014 	.word	0x20000014
 800627c:	08008a59 	.word	0x08008a59
 8006280:	2000018c 	.word	0x2000018c

08006284 <cleanup_stdio>:
 8006284:	6841      	ldr	r1, [r0, #4]
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <cleanup_stdio+0x34>)
 8006288:	4299      	cmp	r1, r3
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	d001      	beq.n	8006294 <cleanup_stdio+0x10>
 8006290:	f002 fbe2 	bl	8008a58 <_fflush_r>
 8006294:	68a1      	ldr	r1, [r4, #8]
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <cleanup_stdio+0x38>)
 8006298:	4299      	cmp	r1, r3
 800629a:	d002      	beq.n	80062a2 <cleanup_stdio+0x1e>
 800629c:	4620      	mov	r0, r4
 800629e:	f002 fbdb 	bl	8008a58 <_fflush_r>
 80062a2:	68e1      	ldr	r1, [r4, #12]
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <cleanup_stdio+0x3c>)
 80062a6:	4299      	cmp	r1, r3
 80062a8:	d004      	beq.n	80062b4 <cleanup_stdio+0x30>
 80062aa:	4620      	mov	r0, r4
 80062ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b0:	f002 bbd2 	b.w	8008a58 <_fflush_r>
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	bf00      	nop
 80062b8:	200008c0 	.word	0x200008c0
 80062bc:	20000928 	.word	0x20000928
 80062c0:	20000990 	.word	0x20000990

080062c4 <global_stdio_init.part.0>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <global_stdio_init.part.0+0x30>)
 80062c8:	4c0b      	ldr	r4, [pc, #44]	; (80062f8 <global_stdio_init.part.0+0x34>)
 80062ca:	4a0c      	ldr	r2, [pc, #48]	; (80062fc <global_stdio_init.part.0+0x38>)
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	4620      	mov	r0, r4
 80062d0:	2200      	movs	r2, #0
 80062d2:	2104      	movs	r1, #4
 80062d4:	f7ff ffa6 	bl	8006224 <std>
 80062d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80062dc:	2201      	movs	r2, #1
 80062de:	2109      	movs	r1, #9
 80062e0:	f7ff ffa0 	bl	8006224 <std>
 80062e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062e8:	2202      	movs	r2, #2
 80062ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ee:	2112      	movs	r1, #18
 80062f0:	f7ff bf98 	b.w	8006224 <std>
 80062f4:	200009f8 	.word	0x200009f8
 80062f8:	200008c0 	.word	0x200008c0
 80062fc:	0800626d 	.word	0x0800626d

08006300 <__sfp_lock_acquire>:
 8006300:	4801      	ldr	r0, [pc, #4]	; (8006308 <__sfp_lock_acquire+0x8>)
 8006302:	f000 ba27 	b.w	8006754 <__retarget_lock_acquire_recursive>
 8006306:	bf00      	nop
 8006308:	20000a01 	.word	0x20000a01

0800630c <__sfp_lock_release>:
 800630c:	4801      	ldr	r0, [pc, #4]	; (8006314 <__sfp_lock_release+0x8>)
 800630e:	f000 ba22 	b.w	8006756 <__retarget_lock_release_recursive>
 8006312:	bf00      	nop
 8006314:	20000a01 	.word	0x20000a01

08006318 <__sinit>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4604      	mov	r4, r0
 800631c:	f7ff fff0 	bl	8006300 <__sfp_lock_acquire>
 8006320:	6a23      	ldr	r3, [r4, #32]
 8006322:	b11b      	cbz	r3, 800632c <__sinit+0x14>
 8006324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006328:	f7ff bff0 	b.w	800630c <__sfp_lock_release>
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <__sinit+0x28>)
 800632e:	6223      	str	r3, [r4, #32]
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <__sinit+0x2c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f5      	bne.n	8006324 <__sinit+0xc>
 8006338:	f7ff ffc4 	bl	80062c4 <global_stdio_init.part.0>
 800633c:	e7f2      	b.n	8006324 <__sinit+0xc>
 800633e:	bf00      	nop
 8006340:	08006285 	.word	0x08006285
 8006344:	200009f8 	.word	0x200009f8

08006348 <_fwalk_sglue>:
 8006348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800634c:	4607      	mov	r7, r0
 800634e:	4688      	mov	r8, r1
 8006350:	4614      	mov	r4, r2
 8006352:	2600      	movs	r6, #0
 8006354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006358:	f1b9 0901 	subs.w	r9, r9, #1
 800635c:	d505      	bpl.n	800636a <_fwalk_sglue+0x22>
 800635e:	6824      	ldr	r4, [r4, #0]
 8006360:	2c00      	cmp	r4, #0
 8006362:	d1f7      	bne.n	8006354 <_fwalk_sglue+0xc>
 8006364:	4630      	mov	r0, r6
 8006366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636a:	89ab      	ldrh	r3, [r5, #12]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d907      	bls.n	8006380 <_fwalk_sglue+0x38>
 8006370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006374:	3301      	adds	r3, #1
 8006376:	d003      	beq.n	8006380 <_fwalk_sglue+0x38>
 8006378:	4629      	mov	r1, r5
 800637a:	4638      	mov	r0, r7
 800637c:	47c0      	blx	r8
 800637e:	4306      	orrs	r6, r0
 8006380:	3568      	adds	r5, #104	; 0x68
 8006382:	e7e9      	b.n	8006358 <_fwalk_sglue+0x10>

08006384 <iprintf>:
 8006384:	b40f      	push	{r0, r1, r2, r3}
 8006386:	b507      	push	{r0, r1, r2, lr}
 8006388:	4906      	ldr	r1, [pc, #24]	; (80063a4 <iprintf+0x20>)
 800638a:	ab04      	add	r3, sp, #16
 800638c:	6808      	ldr	r0, [r1, #0]
 800638e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006392:	6881      	ldr	r1, [r0, #8]
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	f002 f9bf 	bl	8008718 <_vfiprintf_r>
 800639a:	b003      	add	sp, #12
 800639c:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a0:	b004      	add	sp, #16
 80063a2:	4770      	bx	lr
 80063a4:	200001d8 	.word	0x200001d8

080063a8 <_puts_r>:
 80063a8:	6a03      	ldr	r3, [r0, #32]
 80063aa:	b570      	push	{r4, r5, r6, lr}
 80063ac:	6884      	ldr	r4, [r0, #8]
 80063ae:	4605      	mov	r5, r0
 80063b0:	460e      	mov	r6, r1
 80063b2:	b90b      	cbnz	r3, 80063b8 <_puts_r+0x10>
 80063b4:	f7ff ffb0 	bl	8006318 <__sinit>
 80063b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063ba:	07db      	lsls	r3, r3, #31
 80063bc:	d405      	bmi.n	80063ca <_puts_r+0x22>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	0598      	lsls	r0, r3, #22
 80063c2:	d402      	bmi.n	80063ca <_puts_r+0x22>
 80063c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063c6:	f000 f9c5 	bl	8006754 <__retarget_lock_acquire_recursive>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	0719      	lsls	r1, r3, #28
 80063ce:	d513      	bpl.n	80063f8 <_puts_r+0x50>
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	b18b      	cbz	r3, 80063f8 <_puts_r+0x50>
 80063d4:	3e01      	subs	r6, #1
 80063d6:	68a3      	ldr	r3, [r4, #8]
 80063d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063dc:	3b01      	subs	r3, #1
 80063de:	60a3      	str	r3, [r4, #8]
 80063e0:	b9e9      	cbnz	r1, 800641e <_puts_r+0x76>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da2e      	bge.n	8006444 <_puts_r+0x9c>
 80063e6:	4622      	mov	r2, r4
 80063e8:	210a      	movs	r1, #10
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f87b 	bl	80064e6 <__swbuf_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d007      	beq.n	8006404 <_puts_r+0x5c>
 80063f4:	250a      	movs	r5, #10
 80063f6:	e007      	b.n	8006408 <_puts_r+0x60>
 80063f8:	4621      	mov	r1, r4
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 f8b0 	bl	8006560 <__swsetup_r>
 8006400:	2800      	cmp	r0, #0
 8006402:	d0e7      	beq.n	80063d4 <_puts_r+0x2c>
 8006404:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800640a:	07da      	lsls	r2, r3, #31
 800640c:	d405      	bmi.n	800641a <_puts_r+0x72>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	d402      	bmi.n	800641a <_puts_r+0x72>
 8006414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006416:	f000 f99e 	bl	8006756 <__retarget_lock_release_recursive>
 800641a:	4628      	mov	r0, r5
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	2b00      	cmp	r3, #0
 8006420:	da04      	bge.n	800642c <_puts_r+0x84>
 8006422:	69a2      	ldr	r2, [r4, #24]
 8006424:	429a      	cmp	r2, r3
 8006426:	dc06      	bgt.n	8006436 <_puts_r+0x8e>
 8006428:	290a      	cmp	r1, #10
 800642a:	d004      	beq.n	8006436 <_puts_r+0x8e>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	6022      	str	r2, [r4, #0]
 8006432:	7019      	strb	r1, [r3, #0]
 8006434:	e7cf      	b.n	80063d6 <_puts_r+0x2e>
 8006436:	4622      	mov	r2, r4
 8006438:	4628      	mov	r0, r5
 800643a:	f000 f854 	bl	80064e6 <__swbuf_r>
 800643e:	3001      	adds	r0, #1
 8006440:	d1c9      	bne.n	80063d6 <_puts_r+0x2e>
 8006442:	e7df      	b.n	8006404 <_puts_r+0x5c>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	250a      	movs	r5, #10
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	6022      	str	r2, [r4, #0]
 800644c:	701d      	strb	r5, [r3, #0]
 800644e:	e7db      	b.n	8006408 <_puts_r+0x60>

08006450 <puts>:
 8006450:	4b02      	ldr	r3, [pc, #8]	; (800645c <puts+0xc>)
 8006452:	4601      	mov	r1, r0
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	f7ff bfa7 	b.w	80063a8 <_puts_r>
 800645a:	bf00      	nop
 800645c:	200001d8 	.word	0x200001d8

08006460 <__sread>:
 8006460:	b510      	push	{r4, lr}
 8006462:	460c      	mov	r4, r1
 8006464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006468:	f000 f926 	bl	80066b8 <_read_r>
 800646c:	2800      	cmp	r0, #0
 800646e:	bfab      	itete	ge
 8006470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006472:	89a3      	ldrhlt	r3, [r4, #12]
 8006474:	181b      	addge	r3, r3, r0
 8006476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800647a:	bfac      	ite	ge
 800647c:	6563      	strge	r3, [r4, #84]	; 0x54
 800647e:	81a3      	strhlt	r3, [r4, #12]
 8006480:	bd10      	pop	{r4, pc}

08006482 <__swrite>:
 8006482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	461f      	mov	r7, r3
 8006488:	898b      	ldrh	r3, [r1, #12]
 800648a:	05db      	lsls	r3, r3, #23
 800648c:	4605      	mov	r5, r0
 800648e:	460c      	mov	r4, r1
 8006490:	4616      	mov	r6, r2
 8006492:	d505      	bpl.n	80064a0 <__swrite+0x1e>
 8006494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006498:	2302      	movs	r3, #2
 800649a:	2200      	movs	r2, #0
 800649c:	f000 f8fa 	bl	8006694 <_lseek_r>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	4628      	mov	r0, r5
 80064b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064b6:	f000 b911 	b.w	80066dc <_write_r>

080064ba <__sseek>:
 80064ba:	b510      	push	{r4, lr}
 80064bc:	460c      	mov	r4, r1
 80064be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c2:	f000 f8e7 	bl	8006694 <_lseek_r>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	bf15      	itete	ne
 80064cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064d6:	81a3      	strheq	r3, [r4, #12]
 80064d8:	bf18      	it	ne
 80064da:	81a3      	strhne	r3, [r4, #12]
 80064dc:	bd10      	pop	{r4, pc}

080064de <__sclose>:
 80064de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e2:	f000 b8c7 	b.w	8006674 <_close_r>

080064e6 <__swbuf_r>:
 80064e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e8:	460e      	mov	r6, r1
 80064ea:	4614      	mov	r4, r2
 80064ec:	4605      	mov	r5, r0
 80064ee:	b118      	cbz	r0, 80064f8 <__swbuf_r+0x12>
 80064f0:	6a03      	ldr	r3, [r0, #32]
 80064f2:	b90b      	cbnz	r3, 80064f8 <__swbuf_r+0x12>
 80064f4:	f7ff ff10 	bl	8006318 <__sinit>
 80064f8:	69a3      	ldr	r3, [r4, #24]
 80064fa:	60a3      	str	r3, [r4, #8]
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	071a      	lsls	r2, r3, #28
 8006500:	d525      	bpl.n	800654e <__swbuf_r+0x68>
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	b31b      	cbz	r3, 800654e <__swbuf_r+0x68>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	1a98      	subs	r0, r3, r2
 800650c:	6963      	ldr	r3, [r4, #20]
 800650e:	b2f6      	uxtb	r6, r6
 8006510:	4283      	cmp	r3, r0
 8006512:	4637      	mov	r7, r6
 8006514:	dc04      	bgt.n	8006520 <__swbuf_r+0x3a>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f002 fa9d 	bl	8008a58 <_fflush_r>
 800651e:	b9e0      	cbnz	r0, 800655a <__swbuf_r+0x74>
 8006520:	68a3      	ldr	r3, [r4, #8]
 8006522:	3b01      	subs	r3, #1
 8006524:	60a3      	str	r3, [r4, #8]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	6022      	str	r2, [r4, #0]
 800652c:	701e      	strb	r6, [r3, #0]
 800652e:	6962      	ldr	r2, [r4, #20]
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	429a      	cmp	r2, r3
 8006534:	d004      	beq.n	8006540 <__swbuf_r+0x5a>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	07db      	lsls	r3, r3, #31
 800653a:	d506      	bpl.n	800654a <__swbuf_r+0x64>
 800653c:	2e0a      	cmp	r6, #10
 800653e:	d104      	bne.n	800654a <__swbuf_r+0x64>
 8006540:	4621      	mov	r1, r4
 8006542:	4628      	mov	r0, r5
 8006544:	f002 fa88 	bl	8008a58 <_fflush_r>
 8006548:	b938      	cbnz	r0, 800655a <__swbuf_r+0x74>
 800654a:	4638      	mov	r0, r7
 800654c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654e:	4621      	mov	r1, r4
 8006550:	4628      	mov	r0, r5
 8006552:	f000 f805 	bl	8006560 <__swsetup_r>
 8006556:	2800      	cmp	r0, #0
 8006558:	d0d5      	beq.n	8006506 <__swbuf_r+0x20>
 800655a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800655e:	e7f4      	b.n	800654a <__swbuf_r+0x64>

08006560 <__swsetup_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <__swsetup_r+0xac>)
 8006564:	4605      	mov	r5, r0
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	460c      	mov	r4, r1
 800656a:	b118      	cbz	r0, 8006574 <__swsetup_r+0x14>
 800656c:	6a03      	ldr	r3, [r0, #32]
 800656e:	b90b      	cbnz	r3, 8006574 <__swsetup_r+0x14>
 8006570:	f7ff fed2 	bl	8006318 <__sinit>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800657a:	0718      	lsls	r0, r3, #28
 800657c:	d422      	bmi.n	80065c4 <__swsetup_r+0x64>
 800657e:	06d9      	lsls	r1, r3, #27
 8006580:	d407      	bmi.n	8006592 <__swsetup_r+0x32>
 8006582:	2309      	movs	r3, #9
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006590:	e034      	b.n	80065fc <__swsetup_r+0x9c>
 8006592:	0758      	lsls	r0, r3, #29
 8006594:	d512      	bpl.n	80065bc <__swsetup_r+0x5c>
 8006596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006598:	b141      	cbz	r1, 80065ac <__swsetup_r+0x4c>
 800659a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800659e:	4299      	cmp	r1, r3
 80065a0:	d002      	beq.n	80065a8 <__swsetup_r+0x48>
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 ff6a 	bl	800747c <_free_r>
 80065a8:	2300      	movs	r3, #0
 80065aa:	6363      	str	r3, [r4, #52]	; 0x34
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	2300      	movs	r3, #0
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f043 0308 	orr.w	r3, r3, #8
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	b94b      	cbnz	r3, 80065dc <__swsetup_r+0x7c>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d2:	d003      	beq.n	80065dc <__swsetup_r+0x7c>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f002 fa8c 	bl	8008af4 <__smakebuf_r>
 80065dc:	89a0      	ldrh	r0, [r4, #12]
 80065de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e2:	f010 0301 	ands.w	r3, r0, #1
 80065e6:	d00a      	beq.n	80065fe <__swsetup_r+0x9e>
 80065e8:	2300      	movs	r3, #0
 80065ea:	60a3      	str	r3, [r4, #8]
 80065ec:	6963      	ldr	r3, [r4, #20]
 80065ee:	425b      	negs	r3, r3
 80065f0:	61a3      	str	r3, [r4, #24]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	b943      	cbnz	r3, 8006608 <__swsetup_r+0xa8>
 80065f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065fa:	d1c4      	bne.n	8006586 <__swsetup_r+0x26>
 80065fc:	bd38      	pop	{r3, r4, r5, pc}
 80065fe:	0781      	lsls	r1, r0, #30
 8006600:	bf58      	it	pl
 8006602:	6963      	ldrpl	r3, [r4, #20]
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	e7f4      	b.n	80065f2 <__swsetup_r+0x92>
 8006608:	2000      	movs	r0, #0
 800660a:	e7f7      	b.n	80065fc <__swsetup_r+0x9c>
 800660c:	200001d8 	.word	0x200001d8

08006610 <memset>:
 8006610:	4402      	add	r2, r0
 8006612:	4603      	mov	r3, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <strncmp>:
 8006620:	b510      	push	{r4, lr}
 8006622:	b16a      	cbz	r2, 8006640 <strncmp+0x20>
 8006624:	3901      	subs	r1, #1
 8006626:	1884      	adds	r4, r0, r2
 8006628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800662c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006630:	429a      	cmp	r2, r3
 8006632:	d103      	bne.n	800663c <strncmp+0x1c>
 8006634:	42a0      	cmp	r0, r4
 8006636:	d001      	beq.n	800663c <strncmp+0x1c>
 8006638:	2a00      	cmp	r2, #0
 800663a:	d1f5      	bne.n	8006628 <strncmp+0x8>
 800663c:	1ad0      	subs	r0, r2, r3
 800663e:	bd10      	pop	{r4, pc}
 8006640:	4610      	mov	r0, r2
 8006642:	e7fc      	b.n	800663e <strncmp+0x1e>

08006644 <strncpy>:
 8006644:	b510      	push	{r4, lr}
 8006646:	3901      	subs	r1, #1
 8006648:	4603      	mov	r3, r0
 800664a:	b132      	cbz	r2, 800665a <strncpy+0x16>
 800664c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006650:	f803 4b01 	strb.w	r4, [r3], #1
 8006654:	3a01      	subs	r2, #1
 8006656:	2c00      	cmp	r4, #0
 8006658:	d1f7      	bne.n	800664a <strncpy+0x6>
 800665a:	441a      	add	r2, r3
 800665c:	2100      	movs	r1, #0
 800665e:	4293      	cmp	r3, r2
 8006660:	d100      	bne.n	8006664 <strncpy+0x20>
 8006662:	bd10      	pop	{r4, pc}
 8006664:	f803 1b01 	strb.w	r1, [r3], #1
 8006668:	e7f9      	b.n	800665e <strncpy+0x1a>
	...

0800666c <_localeconv_r>:
 800666c:	4800      	ldr	r0, [pc, #0]	; (8006670 <_localeconv_r+0x4>)
 800666e:	4770      	bx	lr
 8006670:	20000110 	.word	0x20000110

08006674 <_close_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d06      	ldr	r5, [pc, #24]	; (8006690 <_close_r+0x1c>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	f7fb fbb7 	bl	8001df2 <_close>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_close_r+0x1a>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_close_r+0x1a>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200009fc 	.word	0x200009fc

08006694 <_lseek_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d07      	ldr	r5, [pc, #28]	; (80066b4 <_lseek_r+0x20>)
 8006698:	4604      	mov	r4, r0
 800669a:	4608      	mov	r0, r1
 800669c:	4611      	mov	r1, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7fb fbcc 	bl	8001e40 <_lseek>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_lseek_r+0x1e>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_lseek_r+0x1e>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200009fc 	.word	0x200009fc

080066b8 <_read_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	; (80066d8 <_read_r+0x20>)
 80066bc:	4604      	mov	r4, r0
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	602a      	str	r2, [r5, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f7fb fb76 	bl	8001db8 <_read>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_read_r+0x1e>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_read_r+0x1e>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200009fc 	.word	0x200009fc

080066dc <_write_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d07      	ldr	r5, [pc, #28]	; (80066fc <_write_r+0x20>)
 80066e0:	4604      	mov	r4, r0
 80066e2:	4608      	mov	r0, r1
 80066e4:	4611      	mov	r1, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	602a      	str	r2, [r5, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f7fa fef6 	bl	80014dc <_write>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_write_r+0x1e>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_write_r+0x1e>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	200009fc 	.word	0x200009fc

08006700 <__errno>:
 8006700:	4b01      	ldr	r3, [pc, #4]	; (8006708 <__errno+0x8>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	200001d8 	.word	0x200001d8

0800670c <__libc_init_array>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4d0d      	ldr	r5, [pc, #52]	; (8006744 <__libc_init_array+0x38>)
 8006710:	4c0d      	ldr	r4, [pc, #52]	; (8006748 <__libc_init_array+0x3c>)
 8006712:	1b64      	subs	r4, r4, r5
 8006714:	10a4      	asrs	r4, r4, #2
 8006716:	2600      	movs	r6, #0
 8006718:	42a6      	cmp	r6, r4
 800671a:	d109      	bne.n	8006730 <__libc_init_array+0x24>
 800671c:	4d0b      	ldr	r5, [pc, #44]	; (800674c <__libc_init_array+0x40>)
 800671e:	4c0c      	ldr	r4, [pc, #48]	; (8006750 <__libc_init_array+0x44>)
 8006720:	f002 fae8 	bl	8008cf4 <_init>
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	2600      	movs	r6, #0
 800672a:	42a6      	cmp	r6, r4
 800672c:	d105      	bne.n	800673a <__libc_init_array+0x2e>
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	f855 3b04 	ldr.w	r3, [r5], #4
 8006734:	4798      	blx	r3
 8006736:	3601      	adds	r6, #1
 8006738:	e7ee      	b.n	8006718 <__libc_init_array+0xc>
 800673a:	f855 3b04 	ldr.w	r3, [r5], #4
 800673e:	4798      	blx	r3
 8006740:	3601      	adds	r6, #1
 8006742:	e7f2      	b.n	800672a <__libc_init_array+0x1e>
 8006744:	0800929c 	.word	0x0800929c
 8006748:	0800929c 	.word	0x0800929c
 800674c:	0800929c 	.word	0x0800929c
 8006750:	080092a0 	.word	0x080092a0

08006754 <__retarget_lock_acquire_recursive>:
 8006754:	4770      	bx	lr

08006756 <__retarget_lock_release_recursive>:
 8006756:	4770      	bx	lr

08006758 <memcpy>:
 8006758:	440a      	add	r2, r1
 800675a:	4291      	cmp	r1, r2
 800675c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006760:	d100      	bne.n	8006764 <memcpy+0xc>
 8006762:	4770      	bx	lr
 8006764:	b510      	push	{r4, lr}
 8006766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800676a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676e:	4291      	cmp	r1, r2
 8006770:	d1f9      	bne.n	8006766 <memcpy+0xe>
 8006772:	bd10      	pop	{r4, pc}
 8006774:	0000      	movs	r0, r0
	...

08006778 <nan>:
 8006778:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006780 <nan+0x8>
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	00000000 	.word	0x00000000
 8006784:	7ff80000 	.word	0x7ff80000

08006788 <quorem>:
 8006788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	6903      	ldr	r3, [r0, #16]
 800678e:	690c      	ldr	r4, [r1, #16]
 8006790:	42a3      	cmp	r3, r4
 8006792:	4607      	mov	r7, r0
 8006794:	db7e      	blt.n	8006894 <quorem+0x10c>
 8006796:	3c01      	subs	r4, #1
 8006798:	f101 0814 	add.w	r8, r1, #20
 800679c:	f100 0514 	add.w	r5, r0, #20
 80067a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ae:	3301      	adds	r3, #1
 80067b0:	429a      	cmp	r2, r3
 80067b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80067be:	d331      	bcc.n	8006824 <quorem+0x9c>
 80067c0:	f04f 0e00 	mov.w	lr, #0
 80067c4:	4640      	mov	r0, r8
 80067c6:	46ac      	mov	ip, r5
 80067c8:	46f2      	mov	sl, lr
 80067ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80067ce:	b293      	uxth	r3, r2
 80067d0:	fb06 e303 	mla	r3, r6, r3, lr
 80067d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067d8:	0c1a      	lsrs	r2, r3, #16
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ebaa 0303 	sub.w	r3, sl, r3
 80067e0:	f8dc a000 	ldr.w	sl, [ip]
 80067e4:	fa13 f38a 	uxtah	r3, r3, sl
 80067e8:	fb06 220e 	mla	r2, r6, lr, r2
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	9b00      	ldr	r3, [sp, #0]
 80067f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067f4:	b292      	uxth	r2, r2
 80067f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8006802:	4581      	cmp	r9, r0
 8006804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006808:	f84c 3b04 	str.w	r3, [ip], #4
 800680c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006810:	d2db      	bcs.n	80067ca <quorem+0x42>
 8006812:	f855 300b 	ldr.w	r3, [r5, fp]
 8006816:	b92b      	cbnz	r3, 8006824 <quorem+0x9c>
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	3b04      	subs	r3, #4
 800681c:	429d      	cmp	r5, r3
 800681e:	461a      	mov	r2, r3
 8006820:	d32c      	bcc.n	800687c <quorem+0xf4>
 8006822:	613c      	str	r4, [r7, #16]
 8006824:	4638      	mov	r0, r7
 8006826:	f001 fd59 	bl	80082dc <__mcmp>
 800682a:	2800      	cmp	r0, #0
 800682c:	db22      	blt.n	8006874 <quorem+0xec>
 800682e:	3601      	adds	r6, #1
 8006830:	4629      	mov	r1, r5
 8006832:	2000      	movs	r0, #0
 8006834:	f858 2b04 	ldr.w	r2, [r8], #4
 8006838:	f8d1 c000 	ldr.w	ip, [r1]
 800683c:	b293      	uxth	r3, r2
 800683e:	1ac3      	subs	r3, r0, r3
 8006840:	0c12      	lsrs	r2, r2, #16
 8006842:	fa13 f38c 	uxtah	r3, r3, ip
 8006846:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800684a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800684e:	b29b      	uxth	r3, r3
 8006850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006854:	45c1      	cmp	r9, r8
 8006856:	f841 3b04 	str.w	r3, [r1], #4
 800685a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800685e:	d2e9      	bcs.n	8006834 <quorem+0xac>
 8006860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006864:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006868:	b922      	cbnz	r2, 8006874 <quorem+0xec>
 800686a:	3b04      	subs	r3, #4
 800686c:	429d      	cmp	r5, r3
 800686e:	461a      	mov	r2, r3
 8006870:	d30a      	bcc.n	8006888 <quorem+0x100>
 8006872:	613c      	str	r4, [r7, #16]
 8006874:	4630      	mov	r0, r6
 8006876:	b003      	add	sp, #12
 8006878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	3b04      	subs	r3, #4
 8006880:	2a00      	cmp	r2, #0
 8006882:	d1ce      	bne.n	8006822 <quorem+0x9a>
 8006884:	3c01      	subs	r4, #1
 8006886:	e7c9      	b.n	800681c <quorem+0x94>
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	3b04      	subs	r3, #4
 800688c:	2a00      	cmp	r2, #0
 800688e:	d1f0      	bne.n	8006872 <quorem+0xea>
 8006890:	3c01      	subs	r4, #1
 8006892:	e7eb      	b.n	800686c <quorem+0xe4>
 8006894:	2000      	movs	r0, #0
 8006896:	e7ee      	b.n	8006876 <quorem+0xee>

08006898 <_dtoa_r>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	ed2d 8b04 	vpush	{d8-d9}
 80068a0:	69c5      	ldr	r5, [r0, #28]
 80068a2:	b093      	sub	sp, #76	; 0x4c
 80068a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80068a8:	ec57 6b10 	vmov	r6, r7, d0
 80068ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068b0:	9107      	str	r1, [sp, #28]
 80068b2:	4604      	mov	r4, r0
 80068b4:	920a      	str	r2, [sp, #40]	; 0x28
 80068b6:	930d      	str	r3, [sp, #52]	; 0x34
 80068b8:	b975      	cbnz	r5, 80068d8 <_dtoa_r+0x40>
 80068ba:	2010      	movs	r0, #16
 80068bc:	f001 f982 	bl	8007bc4 <malloc>
 80068c0:	4602      	mov	r2, r0
 80068c2:	61e0      	str	r0, [r4, #28]
 80068c4:	b920      	cbnz	r0, 80068d0 <_dtoa_r+0x38>
 80068c6:	4bae      	ldr	r3, [pc, #696]	; (8006b80 <_dtoa_r+0x2e8>)
 80068c8:	21ef      	movs	r1, #239	; 0xef
 80068ca:	48ae      	ldr	r0, [pc, #696]	; (8006b84 <_dtoa_r+0x2ec>)
 80068cc:	f002 f980 	bl	8008bd0 <__assert_func>
 80068d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068d4:	6005      	str	r5, [r0, #0]
 80068d6:	60c5      	str	r5, [r0, #12]
 80068d8:	69e3      	ldr	r3, [r4, #28]
 80068da:	6819      	ldr	r1, [r3, #0]
 80068dc:	b151      	cbz	r1, 80068f4 <_dtoa_r+0x5c>
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	604a      	str	r2, [r1, #4]
 80068e2:	2301      	movs	r3, #1
 80068e4:	4093      	lsls	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
 80068e8:	4620      	mov	r0, r4
 80068ea:	f001 fa71 	bl	8007dd0 <_Bfree>
 80068ee:	69e3      	ldr	r3, [r4, #28]
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	1e3b      	subs	r3, r7, #0
 80068f6:	bfbb      	ittet	lt
 80068f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	9303      	strlt	r3, [sp, #12]
 80068fe:	2300      	movge	r3, #0
 8006900:	2201      	movlt	r2, #1
 8006902:	bfac      	ite	ge
 8006904:	f8c8 3000 	strge.w	r3, [r8]
 8006908:	f8c8 2000 	strlt.w	r2, [r8]
 800690c:	4b9e      	ldr	r3, [pc, #632]	; (8006b88 <_dtoa_r+0x2f0>)
 800690e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006912:	ea33 0308 	bics.w	r3, r3, r8
 8006916:	d11b      	bne.n	8006950 <_dtoa_r+0xb8>
 8006918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800691a:	f242 730f 	movw	r3, #9999	; 0x270f
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006924:	4333      	orrs	r3, r6
 8006926:	f000 8593 	beq.w	8007450 <_dtoa_r+0xbb8>
 800692a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800692c:	b963      	cbnz	r3, 8006948 <_dtoa_r+0xb0>
 800692e:	4b97      	ldr	r3, [pc, #604]	; (8006b8c <_dtoa_r+0x2f4>)
 8006930:	e027      	b.n	8006982 <_dtoa_r+0xea>
 8006932:	4b97      	ldr	r3, [pc, #604]	; (8006b90 <_dtoa_r+0x2f8>)
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	9800      	ldr	r0, [sp, #0]
 800693e:	b013      	add	sp, #76	; 0x4c
 8006940:	ecbd 8b04 	vpop	{d8-d9}
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	4b90      	ldr	r3, [pc, #576]	; (8006b8c <_dtoa_r+0x2f4>)
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	3303      	adds	r3, #3
 800694e:	e7f3      	b.n	8006938 <_dtoa_r+0xa0>
 8006950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	ec51 0b17 	vmov	r0, r1, d7
 800695a:	eeb0 8a47 	vmov.f32	s16, s14
 800695e:	eef0 8a67 	vmov.f32	s17, s15
 8006962:	2300      	movs	r3, #0
 8006964:	f7fa f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006968:	4681      	mov	r9, r0
 800696a:	b160      	cbz	r0, 8006986 <_dtoa_r+0xee>
 800696c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800696e:	2301      	movs	r3, #1
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8568 	beq.w	800744a <_dtoa_r+0xbb2>
 800697a:	4b86      	ldr	r3, [pc, #536]	; (8006b94 <_dtoa_r+0x2fc>)
 800697c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	3b01      	subs	r3, #1
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	e7da      	b.n	800693c <_dtoa_r+0xa4>
 8006986:	aa10      	add	r2, sp, #64	; 0x40
 8006988:	a911      	add	r1, sp, #68	; 0x44
 800698a:	4620      	mov	r0, r4
 800698c:	eeb0 0a48 	vmov.f32	s0, s16
 8006990:	eef0 0a68 	vmov.f32	s1, s17
 8006994:	f001 fdb8 	bl	8008508 <__d2b>
 8006998:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800699c:	4682      	mov	sl, r0
 800699e:	2d00      	cmp	r5, #0
 80069a0:	d07f      	beq.n	8006aa2 <_dtoa_r+0x20a>
 80069a2:	ee18 3a90 	vmov	r3, s17
 80069a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80069ae:	ec51 0b18 	vmov	r0, r1, d8
 80069b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80069b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80069be:	4619      	mov	r1, r3
 80069c0:	2200      	movs	r2, #0
 80069c2:	4b75      	ldr	r3, [pc, #468]	; (8006b98 <_dtoa_r+0x300>)
 80069c4:	f7f9 fc70 	bl	80002a8 <__aeabi_dsub>
 80069c8:	a367      	add	r3, pc, #412	; (adr r3, 8006b68 <_dtoa_r+0x2d0>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fe23 	bl	8000618 <__aeabi_dmul>
 80069d2:	a367      	add	r3, pc, #412	; (adr r3, 8006b70 <_dtoa_r+0x2d8>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7f9 fc68 	bl	80002ac <__adddf3>
 80069dc:	4606      	mov	r6, r0
 80069de:	4628      	mov	r0, r5
 80069e0:	460f      	mov	r7, r1
 80069e2:	f7f9 fdaf 	bl	8000544 <__aeabi_i2d>
 80069e6:	a364      	add	r3, pc, #400	; (adr r3, 8006b78 <_dtoa_r+0x2e0>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fe14 	bl	8000618 <__aeabi_dmul>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4630      	mov	r0, r6
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7f9 fc58 	bl	80002ac <__adddf3>
 80069fc:	4606      	mov	r6, r0
 80069fe:	460f      	mov	r7, r1
 8006a00:	f7fa f8ba 	bl	8000b78 <__aeabi_d2iz>
 8006a04:	2200      	movs	r2, #0
 8006a06:	4683      	mov	fp, r0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	f7fa f875 	bl	8000afc <__aeabi_dcmplt>
 8006a12:	b148      	cbz	r0, 8006a28 <_dtoa_r+0x190>
 8006a14:	4658      	mov	r0, fp
 8006a16:	f7f9 fd95 	bl	8000544 <__aeabi_i2d>
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	f7fa f863 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a22:	b908      	cbnz	r0, 8006a28 <_dtoa_r+0x190>
 8006a24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a28:	f1bb 0f16 	cmp.w	fp, #22
 8006a2c:	d857      	bhi.n	8006ade <_dtoa_r+0x246>
 8006a2e:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <_dtoa_r+0x304>)
 8006a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	ec51 0b18 	vmov	r0, r1, d8
 8006a3c:	f7fa f85e 	bl	8000afc <__aeabi_dcmplt>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d04e      	beq.n	8006ae2 <_dtoa_r+0x24a>
 8006a44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a48:	2300      	movs	r3, #0
 8006a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a4e:	1b5b      	subs	r3, r3, r5
 8006a50:	1e5a      	subs	r2, r3, #1
 8006a52:	bf45      	ittet	mi
 8006a54:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a58:	9305      	strmi	r3, [sp, #20]
 8006a5a:	2300      	movpl	r3, #0
 8006a5c:	2300      	movmi	r3, #0
 8006a5e:	9206      	str	r2, [sp, #24]
 8006a60:	bf54      	ite	pl
 8006a62:	9305      	strpl	r3, [sp, #20]
 8006a64:	9306      	strmi	r3, [sp, #24]
 8006a66:	f1bb 0f00 	cmp.w	fp, #0
 8006a6a:	db3c      	blt.n	8006ae6 <_dtoa_r+0x24e>
 8006a6c:	9b06      	ldr	r3, [sp, #24]
 8006a6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006a72:	445b      	add	r3, fp
 8006a74:	9306      	str	r3, [sp, #24]
 8006a76:	2300      	movs	r3, #0
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	9b07      	ldr	r3, [sp, #28]
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	d868      	bhi.n	8006b52 <_dtoa_r+0x2ba>
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	bfc4      	itt	gt
 8006a84:	3b04      	subgt	r3, #4
 8006a86:	9307      	strgt	r3, [sp, #28]
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a8e:	bfcc      	ite	gt
 8006a90:	2500      	movgt	r5, #0
 8006a92:	2501      	movle	r5, #1
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	f200 8085 	bhi.w	8006ba4 <_dtoa_r+0x30c>
 8006a9a:	e8df f003 	tbb	[pc, r3]
 8006a9e:	3b2e      	.short	0x3b2e
 8006aa0:	5839      	.short	0x5839
 8006aa2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006aa6:	441d      	add	r5, r3
 8006aa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	bfc1      	itttt	gt
 8006ab0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ab4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ab8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006abc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006ac0:	bfd6      	itet	le
 8006ac2:	f1c3 0320 	rsble	r3, r3, #32
 8006ac6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006aca:	fa06 f003 	lslle.w	r0, r6, r3
 8006ace:	f7f9 fd29 	bl	8000524 <__aeabi_ui2d>
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006ad8:	3d01      	subs	r5, #1
 8006ada:	920e      	str	r2, [sp, #56]	; 0x38
 8006adc:	e76f      	b.n	80069be <_dtoa_r+0x126>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e7b3      	b.n	8006a4a <_dtoa_r+0x1b2>
 8006ae2:	900c      	str	r0, [sp, #48]	; 0x30
 8006ae4:	e7b2      	b.n	8006a4c <_dtoa_r+0x1b4>
 8006ae6:	9b05      	ldr	r3, [sp, #20]
 8006ae8:	eba3 030b 	sub.w	r3, r3, fp
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	f1cb 0300 	rsb	r3, fp, #0
 8006af2:	9308      	str	r3, [sp, #32]
 8006af4:	2300      	movs	r3, #0
 8006af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af8:	e7bf      	b.n	8006a7a <_dtoa_r+0x1e2>
 8006afa:	2300      	movs	r3, #0
 8006afc:	9309      	str	r3, [sp, #36]	; 0x24
 8006afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc52      	bgt.n	8006baa <_dtoa_r+0x312>
 8006b04:	2301      	movs	r3, #1
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	920a      	str	r2, [sp, #40]	; 0x28
 8006b0e:	e00b      	b.n	8006b28 <_dtoa_r+0x290>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e7f3      	b.n	8006afc <_dtoa_r+0x264>
 8006b14:	2300      	movs	r3, #0
 8006b16:	9309      	str	r3, [sp, #36]	; 0x24
 8006b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1a:	445b      	add	r3, fp
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	bfb8      	it	lt
 8006b26:	2301      	movlt	r3, #1
 8006b28:	69e0      	ldr	r0, [r4, #28]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f102 0614 	add.w	r6, r2, #20
 8006b32:	429e      	cmp	r6, r3
 8006b34:	d93d      	bls.n	8006bb2 <_dtoa_r+0x31a>
 8006b36:	6041      	str	r1, [r0, #4]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f001 f909 	bl	8007d50 <_Balloc>
 8006b3e:	9000      	str	r0, [sp, #0]
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d139      	bne.n	8006bb8 <_dtoa_r+0x320>
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <_dtoa_r+0x308>)
 8006b46:	4602      	mov	r2, r0
 8006b48:	f240 11af 	movw	r1, #431	; 0x1af
 8006b4c:	e6bd      	b.n	80068ca <_dtoa_r+0x32>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e7e1      	b.n	8006b16 <_dtoa_r+0x27e>
 8006b52:	2501      	movs	r5, #1
 8006b54:	2300      	movs	r3, #0
 8006b56:	9307      	str	r3, [sp, #28]
 8006b58:	9509      	str	r5, [sp, #36]	; 0x24
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	2200      	movs	r2, #0
 8006b64:	2312      	movs	r3, #18
 8006b66:	e7d1      	b.n	8006b0c <_dtoa_r+0x274>
 8006b68:	636f4361 	.word	0x636f4361
 8006b6c:	3fd287a7 	.word	0x3fd287a7
 8006b70:	8b60c8b3 	.word	0x8b60c8b3
 8006b74:	3fc68a28 	.word	0x3fc68a28
 8006b78:	509f79fb 	.word	0x509f79fb
 8006b7c:	3fd34413 	.word	0x3fd34413
 8006b80:	0800900a 	.word	0x0800900a
 8006b84:	08009021 	.word	0x08009021
 8006b88:	7ff00000 	.word	0x7ff00000
 8006b8c:	08009006 	.word	0x08009006
 8006b90:	08008ffd 	.word	0x08008ffd
 8006b94:	08008fd2 	.word	0x08008fd2
 8006b98:	3ff80000 	.word	0x3ff80000
 8006b9c:	08009170 	.word	0x08009170
 8006ba0:	08009079 	.word	0x08009079
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba8:	e7d7      	b.n	8006b5a <_dtoa_r+0x2c2>
 8006baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	e7ba      	b.n	8006b28 <_dtoa_r+0x290>
 8006bb2:	3101      	adds	r1, #1
 8006bb4:	0052      	lsls	r2, r2, #1
 8006bb6:	e7ba      	b.n	8006b2e <_dtoa_r+0x296>
 8006bb8:	69e3      	ldr	r3, [r4, #28]
 8006bba:	9a00      	ldr	r2, [sp, #0]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	9b04      	ldr	r3, [sp, #16]
 8006bc0:	2b0e      	cmp	r3, #14
 8006bc2:	f200 80a8 	bhi.w	8006d16 <_dtoa_r+0x47e>
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	f000 80a5 	beq.w	8006d16 <_dtoa_r+0x47e>
 8006bcc:	f1bb 0f00 	cmp.w	fp, #0
 8006bd0:	dd38      	ble.n	8006c44 <_dtoa_r+0x3ac>
 8006bd2:	4bc0      	ldr	r3, [pc, #768]	; (8006ed4 <_dtoa_r+0x63c>)
 8006bd4:	f00b 020f 	and.w	r2, fp, #15
 8006bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006be0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006be4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006be8:	d019      	beq.n	8006c1e <_dtoa_r+0x386>
 8006bea:	4bbb      	ldr	r3, [pc, #748]	; (8006ed8 <_dtoa_r+0x640>)
 8006bec:	ec51 0b18 	vmov	r0, r1, d8
 8006bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bf4:	f7f9 fe3a 	bl	800086c <__aeabi_ddiv>
 8006bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bfc:	f008 080f 	and.w	r8, r8, #15
 8006c00:	2503      	movs	r5, #3
 8006c02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006ed8 <_dtoa_r+0x640>
 8006c06:	f1b8 0f00 	cmp.w	r8, #0
 8006c0a:	d10a      	bne.n	8006c22 <_dtoa_r+0x38a>
 8006c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c10:	4632      	mov	r2, r6
 8006c12:	463b      	mov	r3, r7
 8006c14:	f7f9 fe2a 	bl	800086c <__aeabi_ddiv>
 8006c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1c:	e02b      	b.n	8006c76 <_dtoa_r+0x3de>
 8006c1e:	2502      	movs	r5, #2
 8006c20:	e7ef      	b.n	8006c02 <_dtoa_r+0x36a>
 8006c22:	f018 0f01 	tst.w	r8, #1
 8006c26:	d008      	beq.n	8006c3a <_dtoa_r+0x3a2>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006c30:	f7f9 fcf2 	bl	8000618 <__aeabi_dmul>
 8006c34:	3501      	adds	r5, #1
 8006c36:	4606      	mov	r6, r0
 8006c38:	460f      	mov	r7, r1
 8006c3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c3e:	f109 0908 	add.w	r9, r9, #8
 8006c42:	e7e0      	b.n	8006c06 <_dtoa_r+0x36e>
 8006c44:	f000 809f 	beq.w	8006d86 <_dtoa_r+0x4ee>
 8006c48:	f1cb 0600 	rsb	r6, fp, #0
 8006c4c:	4ba1      	ldr	r3, [pc, #644]	; (8006ed4 <_dtoa_r+0x63c>)
 8006c4e:	4fa2      	ldr	r7, [pc, #648]	; (8006ed8 <_dtoa_r+0x640>)
 8006c50:	f006 020f 	and.w	r2, r6, #15
 8006c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	ec51 0b18 	vmov	r0, r1, d8
 8006c60:	f7f9 fcda 	bl	8000618 <__aeabi_dmul>
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	1136      	asrs	r6, r6, #4
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2502      	movs	r5, #2
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	d17e      	bne.n	8006d70 <_dtoa_r+0x4d8>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1d0      	bne.n	8006c18 <_dtoa_r+0x380>
 8006c76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8084 	beq.w	8006d8a <_dtoa_r+0x4f2>
 8006c82:	4b96      	ldr	r3, [pc, #600]	; (8006edc <_dtoa_r+0x644>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	4640      	mov	r0, r8
 8006c88:	4649      	mov	r1, r9
 8006c8a:	f7f9 ff37 	bl	8000afc <__aeabi_dcmplt>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d07b      	beq.n	8006d8a <_dtoa_r+0x4f2>
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d078      	beq.n	8006d8a <_dtoa_r+0x4f2>
 8006c98:	9b01      	ldr	r3, [sp, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	dd39      	ble.n	8006d12 <_dtoa_r+0x47a>
 8006c9e:	4b90      	ldr	r3, [pc, #576]	; (8006ee0 <_dtoa_r+0x648>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	f7f9 fcb7 	bl	8000618 <__aeabi_dmul>
 8006caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cae:	9e01      	ldr	r6, [sp, #4]
 8006cb0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006cb4:	3501      	adds	r5, #1
 8006cb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7f9 fc42 	bl	8000544 <__aeabi_i2d>
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	f7f9 fca8 	bl	8000618 <__aeabi_dmul>
 8006cc8:	4b86      	ldr	r3, [pc, #536]	; (8006ee4 <_dtoa_r+0x64c>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f7f9 faee 	bl	80002ac <__adddf3>
 8006cd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d158      	bne.n	8006d90 <_dtoa_r+0x4f8>
 8006cde:	4b82      	ldr	r3, [pc, #520]	; (8006ee8 <_dtoa_r+0x650>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	f7f9 fadf 	bl	80002a8 <__aeabi_dsub>
 8006cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	f7f9 ff21 	bl	8000b38 <__aeabi_dcmpgt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8296 	bne.w	8007228 <_dtoa_r+0x990>
 8006cfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d00:	4640      	mov	r0, r8
 8006d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d06:	4649      	mov	r1, r9
 8006d08:	f7f9 fef8 	bl	8000afc <__aeabi_dcmplt>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	f040 8289 	bne.w	8007224 <_dtoa_r+0x98c>
 8006d12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f2c0 814e 	blt.w	8006fba <_dtoa_r+0x722>
 8006d1e:	f1bb 0f0e 	cmp.w	fp, #14
 8006d22:	f300 814a 	bgt.w	8006fba <_dtoa_r+0x722>
 8006d26:	4b6b      	ldr	r3, [pc, #428]	; (8006ed4 <_dtoa_r+0x63c>)
 8006d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f280 80dc 	bge.w	8006ef0 <_dtoa_r+0x658>
 8006d38:	9b04      	ldr	r3, [sp, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f300 80d8 	bgt.w	8006ef0 <_dtoa_r+0x658>
 8006d40:	f040 826f 	bne.w	8007222 <_dtoa_r+0x98a>
 8006d44:	4b68      	ldr	r3, [pc, #416]	; (8006ee8 <_dtoa_r+0x650>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	f7f9 fc64 	bl	8000618 <__aeabi_dmul>
 8006d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d54:	f7f9 fee6 	bl	8000b24 <__aeabi_dcmpge>
 8006d58:	9e04      	ldr	r6, [sp, #16]
 8006d5a:	4637      	mov	r7, r6
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f040 8245 	bne.w	80071ec <_dtoa_r+0x954>
 8006d62:	9d00      	ldr	r5, [sp, #0]
 8006d64:	2331      	movs	r3, #49	; 0x31
 8006d66:	f805 3b01 	strb.w	r3, [r5], #1
 8006d6a:	f10b 0b01 	add.w	fp, fp, #1
 8006d6e:	e241      	b.n	80071f4 <_dtoa_r+0x95c>
 8006d70:	07f2      	lsls	r2, r6, #31
 8006d72:	d505      	bpl.n	8006d80 <_dtoa_r+0x4e8>
 8006d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d78:	f7f9 fc4e 	bl	8000618 <__aeabi_dmul>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	2301      	movs	r3, #1
 8006d80:	1076      	asrs	r6, r6, #1
 8006d82:	3708      	adds	r7, #8
 8006d84:	e773      	b.n	8006c6e <_dtoa_r+0x3d6>
 8006d86:	2502      	movs	r5, #2
 8006d88:	e775      	b.n	8006c76 <_dtoa_r+0x3de>
 8006d8a:	9e04      	ldr	r6, [sp, #16]
 8006d8c:	465f      	mov	r7, fp
 8006d8e:	e792      	b.n	8006cb6 <_dtoa_r+0x41e>
 8006d90:	9900      	ldr	r1, [sp, #0]
 8006d92:	4b50      	ldr	r3, [pc, #320]	; (8006ed4 <_dtoa_r+0x63c>)
 8006d94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d98:	4431      	add	r1, r6
 8006d9a:	9102      	str	r1, [sp, #8]
 8006d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d9e:	eeb0 9a47 	vmov.f32	s18, s14
 8006da2:	eef0 9a67 	vmov.f32	s19, s15
 8006da6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006daa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dae:	2900      	cmp	r1, #0
 8006db0:	d044      	beq.n	8006e3c <_dtoa_r+0x5a4>
 8006db2:	494e      	ldr	r1, [pc, #312]	; (8006eec <_dtoa_r+0x654>)
 8006db4:	2000      	movs	r0, #0
 8006db6:	f7f9 fd59 	bl	800086c <__aeabi_ddiv>
 8006dba:	ec53 2b19 	vmov	r2, r3, d9
 8006dbe:	f7f9 fa73 	bl	80002a8 <__aeabi_dsub>
 8006dc2:	9d00      	ldr	r5, [sp, #0]
 8006dc4:	ec41 0b19 	vmov	d9, r0, r1
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f7f9 fed4 	bl	8000b78 <__aeabi_d2iz>
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	f7f9 fbb7 	bl	8000544 <__aeabi_i2d>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fa63 	bl	80002a8 <__aeabi_dsub>
 8006de2:	3630      	adds	r6, #48	; 0x30
 8006de4:	f805 6b01 	strb.w	r6, [r5], #1
 8006de8:	ec53 2b19 	vmov	r2, r3, d9
 8006dec:	4680      	mov	r8, r0
 8006dee:	4689      	mov	r9, r1
 8006df0:	f7f9 fe84 	bl	8000afc <__aeabi_dcmplt>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d164      	bne.n	8006ec2 <_dtoa_r+0x62a>
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4937      	ldr	r1, [pc, #220]	; (8006edc <_dtoa_r+0x644>)
 8006dfe:	2000      	movs	r0, #0
 8006e00:	f7f9 fa52 	bl	80002a8 <__aeabi_dsub>
 8006e04:	ec53 2b19 	vmov	r2, r3, d9
 8006e08:	f7f9 fe78 	bl	8000afc <__aeabi_dcmplt>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f040 80b6 	bne.w	8006f7e <_dtoa_r+0x6e6>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	429d      	cmp	r5, r3
 8006e16:	f43f af7c 	beq.w	8006d12 <_dtoa_r+0x47a>
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <_dtoa_r+0x648>)
 8006e1c:	ec51 0b19 	vmov	r0, r1, d9
 8006e20:	2200      	movs	r2, #0
 8006e22:	f7f9 fbf9 	bl	8000618 <__aeabi_dmul>
 8006e26:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <_dtoa_r+0x648>)
 8006e28:	ec41 0b19 	vmov	d9, r0, r1
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4640      	mov	r0, r8
 8006e30:	4649      	mov	r1, r9
 8006e32:	f7f9 fbf1 	bl	8000618 <__aeabi_dmul>
 8006e36:	4680      	mov	r8, r0
 8006e38:	4689      	mov	r9, r1
 8006e3a:	e7c5      	b.n	8006dc8 <_dtoa_r+0x530>
 8006e3c:	ec51 0b17 	vmov	r0, r1, d7
 8006e40:	f7f9 fbea 	bl	8000618 <__aeabi_dmul>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	9d00      	ldr	r5, [sp, #0]
 8006e48:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e4a:	ec41 0b19 	vmov	d9, r0, r1
 8006e4e:	4649      	mov	r1, r9
 8006e50:	4640      	mov	r0, r8
 8006e52:	f7f9 fe91 	bl	8000b78 <__aeabi_d2iz>
 8006e56:	4606      	mov	r6, r0
 8006e58:	f7f9 fb74 	bl	8000544 <__aeabi_i2d>
 8006e5c:	3630      	adds	r6, #48	; 0x30
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fa1f 	bl	80002a8 <__aeabi_dsub>
 8006e6a:	f805 6b01 	strb.w	r6, [r5], #1
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	429d      	cmp	r5, r3
 8006e72:	4680      	mov	r8, r0
 8006e74:	4689      	mov	r9, r1
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	d124      	bne.n	8006ec6 <_dtoa_r+0x62e>
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <_dtoa_r+0x654>)
 8006e7e:	ec51 0b19 	vmov	r0, r1, d9
 8006e82:	f7f9 fa13 	bl	80002ac <__adddf3>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fe53 	bl	8000b38 <__aeabi_dcmpgt>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d173      	bne.n	8006f7e <_dtoa_r+0x6e6>
 8006e96:	ec53 2b19 	vmov	r2, r3, d9
 8006e9a:	4914      	ldr	r1, [pc, #80]	; (8006eec <_dtoa_r+0x654>)
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f7f9 fa03 	bl	80002a8 <__aeabi_dsub>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 fe27 	bl	8000afc <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f af2f 	beq.w	8006d12 <_dtoa_r+0x47a>
 8006eb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006eb6:	1e6b      	subs	r3, r5, #1
 8006eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ebe:	2b30      	cmp	r3, #48	; 0x30
 8006ec0:	d0f8      	beq.n	8006eb4 <_dtoa_r+0x61c>
 8006ec2:	46bb      	mov	fp, r7
 8006ec4:	e04a      	b.n	8006f5c <_dtoa_r+0x6c4>
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <_dtoa_r+0x648>)
 8006ec8:	f7f9 fba6 	bl	8000618 <__aeabi_dmul>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	4689      	mov	r9, r1
 8006ed0:	e7bd      	b.n	8006e4e <_dtoa_r+0x5b6>
 8006ed2:	bf00      	nop
 8006ed4:	08009170 	.word	0x08009170
 8006ed8:	08009148 	.word	0x08009148
 8006edc:	3ff00000 	.word	0x3ff00000
 8006ee0:	40240000 	.word	0x40240000
 8006ee4:	401c0000 	.word	0x401c0000
 8006ee8:	40140000 	.word	0x40140000
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ef4:	9d00      	ldr	r5, [sp, #0]
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4630      	mov	r0, r6
 8006efc:	4639      	mov	r1, r7
 8006efe:	f7f9 fcb5 	bl	800086c <__aeabi_ddiv>
 8006f02:	f7f9 fe39 	bl	8000b78 <__aeabi_d2iz>
 8006f06:	9001      	str	r0, [sp, #4]
 8006f08:	f7f9 fb1c 	bl	8000544 <__aeabi_i2d>
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	f7f9 fb82 	bl	8000618 <__aeabi_dmul>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 f9c4 	bl	80002a8 <__aeabi_dsub>
 8006f20:	9e01      	ldr	r6, [sp, #4]
 8006f22:	9f04      	ldr	r7, [sp, #16]
 8006f24:	3630      	adds	r6, #48	; 0x30
 8006f26:	f805 6b01 	strb.w	r6, [r5], #1
 8006f2a:	9e00      	ldr	r6, [sp, #0]
 8006f2c:	1bae      	subs	r6, r5, r6
 8006f2e:	42b7      	cmp	r7, r6
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	d134      	bne.n	8006fa0 <_dtoa_r+0x708>
 8006f36:	f7f9 f9b9 	bl	80002ac <__adddf3>
 8006f3a:	4642      	mov	r2, r8
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	4606      	mov	r6, r0
 8006f40:	460f      	mov	r7, r1
 8006f42:	f7f9 fdf9 	bl	8000b38 <__aeabi_dcmpgt>
 8006f46:	b9c8      	cbnz	r0, 8006f7c <_dtoa_r+0x6e4>
 8006f48:	4642      	mov	r2, r8
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 fdca 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f54:	b110      	cbz	r0, 8006f5c <_dtoa_r+0x6c4>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	07db      	lsls	r3, r3, #31
 8006f5a:	d40f      	bmi.n	8006f7c <_dtoa_r+0x6e4>
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 ff36 	bl	8007dd0 <_Bfree>
 8006f64:	2300      	movs	r3, #0
 8006f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f68:	702b      	strb	r3, [r5, #0]
 8006f6a:	f10b 0301 	add.w	r3, fp, #1
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f43f ace2 	beq.w	800693c <_dtoa_r+0xa4>
 8006f78:	601d      	str	r5, [r3, #0]
 8006f7a:	e4df      	b.n	800693c <_dtoa_r+0xa4>
 8006f7c:	465f      	mov	r7, fp
 8006f7e:	462b      	mov	r3, r5
 8006f80:	461d      	mov	r5, r3
 8006f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f86:	2a39      	cmp	r2, #57	; 0x39
 8006f88:	d106      	bne.n	8006f98 <_dtoa_r+0x700>
 8006f8a:	9a00      	ldr	r2, [sp, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d1f7      	bne.n	8006f80 <_dtoa_r+0x6e8>
 8006f90:	9900      	ldr	r1, [sp, #0]
 8006f92:	2230      	movs	r2, #48	; 0x30
 8006f94:	3701      	adds	r7, #1
 8006f96:	700a      	strb	r2, [r1, #0]
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	e790      	b.n	8006ec2 <_dtoa_r+0x62a>
 8006fa0:	4ba3      	ldr	r3, [pc, #652]	; (8007230 <_dtoa_r+0x998>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f7f9 fb38 	bl	8000618 <__aeabi_dmul>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2300      	movs	r3, #0
 8006fac:	4606      	mov	r6, r0
 8006fae:	460f      	mov	r7, r1
 8006fb0:	f7f9 fd9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d09e      	beq.n	8006ef6 <_dtoa_r+0x65e>
 8006fb8:	e7d0      	b.n	8006f5c <_dtoa_r+0x6c4>
 8006fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fbc:	2a00      	cmp	r2, #0
 8006fbe:	f000 80ca 	beq.w	8007156 <_dtoa_r+0x8be>
 8006fc2:	9a07      	ldr	r2, [sp, #28]
 8006fc4:	2a01      	cmp	r2, #1
 8006fc6:	f300 80ad 	bgt.w	8007124 <_dtoa_r+0x88c>
 8006fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	f000 80a5 	beq.w	800711c <_dtoa_r+0x884>
 8006fd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fd6:	9e08      	ldr	r6, [sp, #32]
 8006fd8:	9d05      	ldr	r5, [sp, #20]
 8006fda:	9a05      	ldr	r2, [sp, #20]
 8006fdc:	441a      	add	r2, r3
 8006fde:	9205      	str	r2, [sp, #20]
 8006fe0:	9a06      	ldr	r2, [sp, #24]
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	441a      	add	r2, r3
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	9206      	str	r2, [sp, #24]
 8006fea:	f000 fff1 	bl	8007fd0 <__i2b>
 8006fee:	4607      	mov	r7, r0
 8006ff0:	b165      	cbz	r5, 800700c <_dtoa_r+0x774>
 8006ff2:	9b06      	ldr	r3, [sp, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd09      	ble.n	800700c <_dtoa_r+0x774>
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	9a05      	ldr	r2, [sp, #20]
 8006ffc:	bfa8      	it	ge
 8006ffe:	462b      	movge	r3, r5
 8007000:	1ad2      	subs	r2, r2, r3
 8007002:	9205      	str	r2, [sp, #20]
 8007004:	9a06      	ldr	r2, [sp, #24]
 8007006:	1aed      	subs	r5, r5, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	9306      	str	r3, [sp, #24]
 800700c:	9b08      	ldr	r3, [sp, #32]
 800700e:	b1f3      	cbz	r3, 800704e <_dtoa_r+0x7b6>
 8007010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80a3 	beq.w	800715e <_dtoa_r+0x8c6>
 8007018:	2e00      	cmp	r6, #0
 800701a:	dd10      	ble.n	800703e <_dtoa_r+0x7a6>
 800701c:	4639      	mov	r1, r7
 800701e:	4632      	mov	r2, r6
 8007020:	4620      	mov	r0, r4
 8007022:	f001 f895 	bl	8008150 <__pow5mult>
 8007026:	4652      	mov	r2, sl
 8007028:	4601      	mov	r1, r0
 800702a:	4607      	mov	r7, r0
 800702c:	4620      	mov	r0, r4
 800702e:	f000 ffe5 	bl	8007ffc <__multiply>
 8007032:	4651      	mov	r1, sl
 8007034:	4680      	mov	r8, r0
 8007036:	4620      	mov	r0, r4
 8007038:	f000 feca 	bl	8007dd0 <_Bfree>
 800703c:	46c2      	mov	sl, r8
 800703e:	9b08      	ldr	r3, [sp, #32]
 8007040:	1b9a      	subs	r2, r3, r6
 8007042:	d004      	beq.n	800704e <_dtoa_r+0x7b6>
 8007044:	4651      	mov	r1, sl
 8007046:	4620      	mov	r0, r4
 8007048:	f001 f882 	bl	8008150 <__pow5mult>
 800704c:	4682      	mov	sl, r0
 800704e:	2101      	movs	r1, #1
 8007050:	4620      	mov	r0, r4
 8007052:	f000 ffbd 	bl	8007fd0 <__i2b>
 8007056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007058:	2b00      	cmp	r3, #0
 800705a:	4606      	mov	r6, r0
 800705c:	f340 8081 	ble.w	8007162 <_dtoa_r+0x8ca>
 8007060:	461a      	mov	r2, r3
 8007062:	4601      	mov	r1, r0
 8007064:	4620      	mov	r0, r4
 8007066:	f001 f873 	bl	8008150 <__pow5mult>
 800706a:	9b07      	ldr	r3, [sp, #28]
 800706c:	2b01      	cmp	r3, #1
 800706e:	4606      	mov	r6, r0
 8007070:	dd7a      	ble.n	8007168 <_dtoa_r+0x8d0>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	6933      	ldr	r3, [r6, #16]
 8007078:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800707c:	6918      	ldr	r0, [r3, #16]
 800707e:	f000 ff59 	bl	8007f34 <__hi0bits>
 8007082:	f1c0 0020 	rsb	r0, r0, #32
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	4418      	add	r0, r3
 800708a:	f010 001f 	ands.w	r0, r0, #31
 800708e:	f000 8094 	beq.w	80071ba <_dtoa_r+0x922>
 8007092:	f1c0 0320 	rsb	r3, r0, #32
 8007096:	2b04      	cmp	r3, #4
 8007098:	f340 8085 	ble.w	80071a6 <_dtoa_r+0x90e>
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	f1c0 001c 	rsb	r0, r0, #28
 80070a2:	4403      	add	r3, r0
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	4403      	add	r3, r0
 80070aa:	4405      	add	r5, r0
 80070ac:	9306      	str	r3, [sp, #24]
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dd05      	ble.n	80070c0 <_dtoa_r+0x828>
 80070b4:	4651      	mov	r1, sl
 80070b6:	461a      	mov	r2, r3
 80070b8:	4620      	mov	r0, r4
 80070ba:	f001 f8a3 	bl	8008204 <__lshift>
 80070be:	4682      	mov	sl, r0
 80070c0:	9b06      	ldr	r3, [sp, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dd05      	ble.n	80070d2 <_dtoa_r+0x83a>
 80070c6:	4631      	mov	r1, r6
 80070c8:	461a      	mov	r2, r3
 80070ca:	4620      	mov	r0, r4
 80070cc:	f001 f89a 	bl	8008204 <__lshift>
 80070d0:	4606      	mov	r6, r0
 80070d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d072      	beq.n	80071be <_dtoa_r+0x926>
 80070d8:	4631      	mov	r1, r6
 80070da:	4650      	mov	r0, sl
 80070dc:	f001 f8fe 	bl	80082dc <__mcmp>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	da6c      	bge.n	80071be <_dtoa_r+0x926>
 80070e4:	2300      	movs	r3, #0
 80070e6:	4651      	mov	r1, sl
 80070e8:	220a      	movs	r2, #10
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fe92 	bl	8007e14 <__multadd>
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80070f6:	4682      	mov	sl, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 81b0 	beq.w	800745e <_dtoa_r+0xbc6>
 80070fe:	2300      	movs	r3, #0
 8007100:	4639      	mov	r1, r7
 8007102:	220a      	movs	r2, #10
 8007104:	4620      	mov	r0, r4
 8007106:	f000 fe85 	bl	8007e14 <__multadd>
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	4607      	mov	r7, r0
 8007110:	f300 8096 	bgt.w	8007240 <_dtoa_r+0x9a8>
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	2b02      	cmp	r3, #2
 8007118:	dc59      	bgt.n	80071ce <_dtoa_r+0x936>
 800711a:	e091      	b.n	8007240 <_dtoa_r+0x9a8>
 800711c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800711e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007122:	e758      	b.n	8006fd6 <_dtoa_r+0x73e>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	1e5e      	subs	r6, r3, #1
 8007128:	9b08      	ldr	r3, [sp, #32]
 800712a:	42b3      	cmp	r3, r6
 800712c:	bfbf      	itttt	lt
 800712e:	9b08      	ldrlt	r3, [sp, #32]
 8007130:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007132:	9608      	strlt	r6, [sp, #32]
 8007134:	1af3      	sublt	r3, r6, r3
 8007136:	bfb4      	ite	lt
 8007138:	18d2      	addlt	r2, r2, r3
 800713a:	1b9e      	subge	r6, r3, r6
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	bfbc      	itt	lt
 8007140:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007142:	2600      	movlt	r6, #0
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfb7      	itett	lt
 8007148:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800714c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007150:	1a9d      	sublt	r5, r3, r2
 8007152:	2300      	movlt	r3, #0
 8007154:	e741      	b.n	8006fda <_dtoa_r+0x742>
 8007156:	9e08      	ldr	r6, [sp, #32]
 8007158:	9d05      	ldr	r5, [sp, #20]
 800715a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800715c:	e748      	b.n	8006ff0 <_dtoa_r+0x758>
 800715e:	9a08      	ldr	r2, [sp, #32]
 8007160:	e770      	b.n	8007044 <_dtoa_r+0x7ac>
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	2b01      	cmp	r3, #1
 8007166:	dc19      	bgt.n	800719c <_dtoa_r+0x904>
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	b9bb      	cbnz	r3, 800719c <_dtoa_r+0x904>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007172:	b99b      	cbnz	r3, 800719c <_dtoa_r+0x904>
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800717a:	0d1b      	lsrs	r3, r3, #20
 800717c:	051b      	lsls	r3, r3, #20
 800717e:	b183      	cbz	r3, 80071a2 <_dtoa_r+0x90a>
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	3301      	adds	r3, #1
 8007184:	9305      	str	r3, [sp, #20]
 8007186:	9b06      	ldr	r3, [sp, #24]
 8007188:	3301      	adds	r3, #1
 800718a:	9306      	str	r3, [sp, #24]
 800718c:	f04f 0801 	mov.w	r8, #1
 8007190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f47f af6f 	bne.w	8007076 <_dtoa_r+0x7de>
 8007198:	2001      	movs	r0, #1
 800719a:	e774      	b.n	8007086 <_dtoa_r+0x7ee>
 800719c:	f04f 0800 	mov.w	r8, #0
 80071a0:	e7f6      	b.n	8007190 <_dtoa_r+0x8f8>
 80071a2:	4698      	mov	r8, r3
 80071a4:	e7f4      	b.n	8007190 <_dtoa_r+0x8f8>
 80071a6:	d082      	beq.n	80070ae <_dtoa_r+0x816>
 80071a8:	9a05      	ldr	r2, [sp, #20]
 80071aa:	331c      	adds	r3, #28
 80071ac:	441a      	add	r2, r3
 80071ae:	9205      	str	r2, [sp, #20]
 80071b0:	9a06      	ldr	r2, [sp, #24]
 80071b2:	441a      	add	r2, r3
 80071b4:	441d      	add	r5, r3
 80071b6:	9206      	str	r2, [sp, #24]
 80071b8:	e779      	b.n	80070ae <_dtoa_r+0x816>
 80071ba:	4603      	mov	r3, r0
 80071bc:	e7f4      	b.n	80071a8 <_dtoa_r+0x910>
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc37      	bgt.n	8007234 <_dtoa_r+0x99c>
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dd34      	ble.n	8007234 <_dtoa_r+0x99c>
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	9301      	str	r3, [sp, #4]
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	b963      	cbnz	r3, 80071ec <_dtoa_r+0x954>
 80071d2:	4631      	mov	r1, r6
 80071d4:	2205      	movs	r2, #5
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fe1c 	bl	8007e14 <__multadd>
 80071dc:	4601      	mov	r1, r0
 80071de:	4606      	mov	r6, r0
 80071e0:	4650      	mov	r0, sl
 80071e2:	f001 f87b 	bl	80082dc <__mcmp>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f73f adbb 	bgt.w	8006d62 <_dtoa_r+0x4ca>
 80071ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ee:	9d00      	ldr	r5, [sp, #0]
 80071f0:	ea6f 0b03 	mvn.w	fp, r3
 80071f4:	f04f 0800 	mov.w	r8, #0
 80071f8:	4631      	mov	r1, r6
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 fde8 	bl	8007dd0 <_Bfree>
 8007200:	2f00      	cmp	r7, #0
 8007202:	f43f aeab 	beq.w	8006f5c <_dtoa_r+0x6c4>
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	d005      	beq.n	8007218 <_dtoa_r+0x980>
 800720c:	45b8      	cmp	r8, r7
 800720e:	d003      	beq.n	8007218 <_dtoa_r+0x980>
 8007210:	4641      	mov	r1, r8
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fddc 	bl	8007dd0 <_Bfree>
 8007218:	4639      	mov	r1, r7
 800721a:	4620      	mov	r0, r4
 800721c:	f000 fdd8 	bl	8007dd0 <_Bfree>
 8007220:	e69c      	b.n	8006f5c <_dtoa_r+0x6c4>
 8007222:	2600      	movs	r6, #0
 8007224:	4637      	mov	r7, r6
 8007226:	e7e1      	b.n	80071ec <_dtoa_r+0x954>
 8007228:	46bb      	mov	fp, r7
 800722a:	4637      	mov	r7, r6
 800722c:	e599      	b.n	8006d62 <_dtoa_r+0x4ca>
 800722e:	bf00      	nop
 8007230:	40240000 	.word	0x40240000
 8007234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80c8 	beq.w	80073cc <_dtoa_r+0xb34>
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	2d00      	cmp	r5, #0
 8007242:	dd05      	ble.n	8007250 <_dtoa_r+0x9b8>
 8007244:	4639      	mov	r1, r7
 8007246:	462a      	mov	r2, r5
 8007248:	4620      	mov	r0, r4
 800724a:	f000 ffdb 	bl	8008204 <__lshift>
 800724e:	4607      	mov	r7, r0
 8007250:	f1b8 0f00 	cmp.w	r8, #0
 8007254:	d05b      	beq.n	800730e <_dtoa_r+0xa76>
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fd79 	bl	8007d50 <_Balloc>
 800725e:	4605      	mov	r5, r0
 8007260:	b928      	cbnz	r0, 800726e <_dtoa_r+0x9d6>
 8007262:	4b83      	ldr	r3, [pc, #524]	; (8007470 <_dtoa_r+0xbd8>)
 8007264:	4602      	mov	r2, r0
 8007266:	f240 21ef 	movw	r1, #751	; 0x2ef
 800726a:	f7ff bb2e 	b.w	80068ca <_dtoa_r+0x32>
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	3202      	adds	r2, #2
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	f107 010c 	add.w	r1, r7, #12
 8007278:	300c      	adds	r0, #12
 800727a:	f7ff fa6d 	bl	8006758 <memcpy>
 800727e:	2201      	movs	r2, #1
 8007280:	4629      	mov	r1, r5
 8007282:	4620      	mov	r0, r4
 8007284:	f000 ffbe 	bl	8008204 <__lshift>
 8007288:	9b00      	ldr	r3, [sp, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007292:	4413      	add	r3, r2
 8007294:	9308      	str	r3, [sp, #32]
 8007296:	9b02      	ldr	r3, [sp, #8]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	46b8      	mov	r8, r7
 800729e:	9306      	str	r3, [sp, #24]
 80072a0:	4607      	mov	r7, r0
 80072a2:	9b04      	ldr	r3, [sp, #16]
 80072a4:	4631      	mov	r1, r6
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4650      	mov	r0, sl
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	f7ff fa6c 	bl	8006788 <quorem>
 80072b0:	4641      	mov	r1, r8
 80072b2:	9002      	str	r0, [sp, #8]
 80072b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072b8:	4650      	mov	r0, sl
 80072ba:	f001 f80f 	bl	80082dc <__mcmp>
 80072be:	463a      	mov	r2, r7
 80072c0:	9005      	str	r0, [sp, #20]
 80072c2:	4631      	mov	r1, r6
 80072c4:	4620      	mov	r0, r4
 80072c6:	f001 f825 	bl	8008314 <__mdiff>
 80072ca:	68c2      	ldr	r2, [r0, #12]
 80072cc:	4605      	mov	r5, r0
 80072ce:	bb02      	cbnz	r2, 8007312 <_dtoa_r+0xa7a>
 80072d0:	4601      	mov	r1, r0
 80072d2:	4650      	mov	r0, sl
 80072d4:	f001 f802 	bl	80082dc <__mcmp>
 80072d8:	4602      	mov	r2, r0
 80072da:	4629      	mov	r1, r5
 80072dc:	4620      	mov	r0, r4
 80072de:	9209      	str	r2, [sp, #36]	; 0x24
 80072e0:	f000 fd76 	bl	8007dd0 <_Bfree>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e8:	9d04      	ldr	r5, [sp, #16]
 80072ea:	ea43 0102 	orr.w	r1, r3, r2
 80072ee:	9b06      	ldr	r3, [sp, #24]
 80072f0:	4319      	orrs	r1, r3
 80072f2:	d110      	bne.n	8007316 <_dtoa_r+0xa7e>
 80072f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072f8:	d029      	beq.n	800734e <_dtoa_r+0xab6>
 80072fa:	9b05      	ldr	r3, [sp, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dd02      	ble.n	8007306 <_dtoa_r+0xa6e>
 8007300:	9b02      	ldr	r3, [sp, #8]
 8007302:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	f883 9000 	strb.w	r9, [r3]
 800730c:	e774      	b.n	80071f8 <_dtoa_r+0x960>
 800730e:	4638      	mov	r0, r7
 8007310:	e7ba      	b.n	8007288 <_dtoa_r+0x9f0>
 8007312:	2201      	movs	r2, #1
 8007314:	e7e1      	b.n	80072da <_dtoa_r+0xa42>
 8007316:	9b05      	ldr	r3, [sp, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	db04      	blt.n	8007326 <_dtoa_r+0xa8e>
 800731c:	9907      	ldr	r1, [sp, #28]
 800731e:	430b      	orrs	r3, r1
 8007320:	9906      	ldr	r1, [sp, #24]
 8007322:	430b      	orrs	r3, r1
 8007324:	d120      	bne.n	8007368 <_dtoa_r+0xad0>
 8007326:	2a00      	cmp	r2, #0
 8007328:	dded      	ble.n	8007306 <_dtoa_r+0xa6e>
 800732a:	4651      	mov	r1, sl
 800732c:	2201      	movs	r2, #1
 800732e:	4620      	mov	r0, r4
 8007330:	f000 ff68 	bl	8008204 <__lshift>
 8007334:	4631      	mov	r1, r6
 8007336:	4682      	mov	sl, r0
 8007338:	f000 ffd0 	bl	80082dc <__mcmp>
 800733c:	2800      	cmp	r0, #0
 800733e:	dc03      	bgt.n	8007348 <_dtoa_r+0xab0>
 8007340:	d1e1      	bne.n	8007306 <_dtoa_r+0xa6e>
 8007342:	f019 0f01 	tst.w	r9, #1
 8007346:	d0de      	beq.n	8007306 <_dtoa_r+0xa6e>
 8007348:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800734c:	d1d8      	bne.n	8007300 <_dtoa_r+0xa68>
 800734e:	9a01      	ldr	r2, [sp, #4]
 8007350:	2339      	movs	r3, #57	; 0x39
 8007352:	7013      	strb	r3, [r2, #0]
 8007354:	462b      	mov	r3, r5
 8007356:	461d      	mov	r5, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800735e:	2a39      	cmp	r2, #57	; 0x39
 8007360:	d06c      	beq.n	800743c <_dtoa_r+0xba4>
 8007362:	3201      	adds	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	e747      	b.n	80071f8 <_dtoa_r+0x960>
 8007368:	2a00      	cmp	r2, #0
 800736a:	dd07      	ble.n	800737c <_dtoa_r+0xae4>
 800736c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007370:	d0ed      	beq.n	800734e <_dtoa_r+0xab6>
 8007372:	9a01      	ldr	r2, [sp, #4]
 8007374:	f109 0301 	add.w	r3, r9, #1
 8007378:	7013      	strb	r3, [r2, #0]
 800737a:	e73d      	b.n	80071f8 <_dtoa_r+0x960>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	9a08      	ldr	r2, [sp, #32]
 8007380:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007384:	4293      	cmp	r3, r2
 8007386:	d043      	beq.n	8007410 <_dtoa_r+0xb78>
 8007388:	4651      	mov	r1, sl
 800738a:	2300      	movs	r3, #0
 800738c:	220a      	movs	r2, #10
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fd40 	bl	8007e14 <__multadd>
 8007394:	45b8      	cmp	r8, r7
 8007396:	4682      	mov	sl, r0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	f04f 020a 	mov.w	r2, #10
 80073a0:	4641      	mov	r1, r8
 80073a2:	4620      	mov	r0, r4
 80073a4:	d107      	bne.n	80073b6 <_dtoa_r+0xb1e>
 80073a6:	f000 fd35 	bl	8007e14 <__multadd>
 80073aa:	4680      	mov	r8, r0
 80073ac:	4607      	mov	r7, r0
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	e775      	b.n	80072a2 <_dtoa_r+0xa0a>
 80073b6:	f000 fd2d 	bl	8007e14 <__multadd>
 80073ba:	4639      	mov	r1, r7
 80073bc:	4680      	mov	r8, r0
 80073be:	2300      	movs	r3, #0
 80073c0:	220a      	movs	r2, #10
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fd26 	bl	8007e14 <__multadd>
 80073c8:	4607      	mov	r7, r0
 80073ca:	e7f0      	b.n	80073ae <_dtoa_r+0xb16>
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	9d00      	ldr	r5, [sp, #0]
 80073d2:	4631      	mov	r1, r6
 80073d4:	4650      	mov	r0, sl
 80073d6:	f7ff f9d7 	bl	8006788 <quorem>
 80073da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	f805 9b01 	strb.w	r9, [r5], #1
 80073e4:	1aea      	subs	r2, r5, r3
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	dd07      	ble.n	80073fc <_dtoa_r+0xb64>
 80073ec:	4651      	mov	r1, sl
 80073ee:	2300      	movs	r3, #0
 80073f0:	220a      	movs	r2, #10
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 fd0e 	bl	8007e14 <__multadd>
 80073f8:	4682      	mov	sl, r0
 80073fa:	e7ea      	b.n	80073d2 <_dtoa_r+0xb3a>
 80073fc:	9b01      	ldr	r3, [sp, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfc8      	it	gt
 8007402:	461d      	movgt	r5, r3
 8007404:	9b00      	ldr	r3, [sp, #0]
 8007406:	bfd8      	it	le
 8007408:	2501      	movle	r5, #1
 800740a:	441d      	add	r5, r3
 800740c:	f04f 0800 	mov.w	r8, #0
 8007410:	4651      	mov	r1, sl
 8007412:	2201      	movs	r2, #1
 8007414:	4620      	mov	r0, r4
 8007416:	f000 fef5 	bl	8008204 <__lshift>
 800741a:	4631      	mov	r1, r6
 800741c:	4682      	mov	sl, r0
 800741e:	f000 ff5d 	bl	80082dc <__mcmp>
 8007422:	2800      	cmp	r0, #0
 8007424:	dc96      	bgt.n	8007354 <_dtoa_r+0xabc>
 8007426:	d102      	bne.n	800742e <_dtoa_r+0xb96>
 8007428:	f019 0f01 	tst.w	r9, #1
 800742c:	d192      	bne.n	8007354 <_dtoa_r+0xabc>
 800742e:	462b      	mov	r3, r5
 8007430:	461d      	mov	r5, r3
 8007432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007436:	2a30      	cmp	r2, #48	; 0x30
 8007438:	d0fa      	beq.n	8007430 <_dtoa_r+0xb98>
 800743a:	e6dd      	b.n	80071f8 <_dtoa_r+0x960>
 800743c:	9a00      	ldr	r2, [sp, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d189      	bne.n	8007356 <_dtoa_r+0xabe>
 8007442:	f10b 0b01 	add.w	fp, fp, #1
 8007446:	2331      	movs	r3, #49	; 0x31
 8007448:	e796      	b.n	8007378 <_dtoa_r+0xae0>
 800744a:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <_dtoa_r+0xbdc>)
 800744c:	f7ff ba99 	b.w	8006982 <_dtoa_r+0xea>
 8007450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007452:	2b00      	cmp	r3, #0
 8007454:	f47f aa6d 	bne.w	8006932 <_dtoa_r+0x9a>
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <_dtoa_r+0xbe0>)
 800745a:	f7ff ba92 	b.w	8006982 <_dtoa_r+0xea>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	dcb5      	bgt.n	80073d0 <_dtoa_r+0xb38>
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	2b02      	cmp	r3, #2
 8007468:	f73f aeb1 	bgt.w	80071ce <_dtoa_r+0x936>
 800746c:	e7b0      	b.n	80073d0 <_dtoa_r+0xb38>
 800746e:	bf00      	nop
 8007470:	08009079 	.word	0x08009079
 8007474:	08008fd1 	.word	0x08008fd1
 8007478:	08008ffd 	.word	0x08008ffd

0800747c <_free_r>:
 800747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800747e:	2900      	cmp	r1, #0
 8007480:	d044      	beq.n	800750c <_free_r+0x90>
 8007482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007486:	9001      	str	r0, [sp, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f1a1 0404 	sub.w	r4, r1, #4
 800748e:	bfb8      	it	lt
 8007490:	18e4      	addlt	r4, r4, r3
 8007492:	f000 fc51 	bl	8007d38 <__malloc_lock>
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <_free_r+0x94>)
 8007498:	9801      	ldr	r0, [sp, #4]
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	b933      	cbnz	r3, 80074ac <_free_r+0x30>
 800749e:	6063      	str	r3, [r4, #4]
 80074a0:	6014      	str	r4, [r2, #0]
 80074a2:	b003      	add	sp, #12
 80074a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074a8:	f000 bc4c 	b.w	8007d44 <__malloc_unlock>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d908      	bls.n	80074c2 <_free_r+0x46>
 80074b0:	6825      	ldr	r5, [r4, #0]
 80074b2:	1961      	adds	r1, r4, r5
 80074b4:	428b      	cmp	r3, r1
 80074b6:	bf01      	itttt	eq
 80074b8:	6819      	ldreq	r1, [r3, #0]
 80074ba:	685b      	ldreq	r3, [r3, #4]
 80074bc:	1949      	addeq	r1, r1, r5
 80074be:	6021      	streq	r1, [r4, #0]
 80074c0:	e7ed      	b.n	800749e <_free_r+0x22>
 80074c2:	461a      	mov	r2, r3
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	b10b      	cbz	r3, 80074cc <_free_r+0x50>
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d9fa      	bls.n	80074c2 <_free_r+0x46>
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	1855      	adds	r5, r2, r1
 80074d0:	42a5      	cmp	r5, r4
 80074d2:	d10b      	bne.n	80074ec <_free_r+0x70>
 80074d4:	6824      	ldr	r4, [r4, #0]
 80074d6:	4421      	add	r1, r4
 80074d8:	1854      	adds	r4, r2, r1
 80074da:	42a3      	cmp	r3, r4
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	d1e0      	bne.n	80074a2 <_free_r+0x26>
 80074e0:	681c      	ldr	r4, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	6053      	str	r3, [r2, #4]
 80074e6:	440c      	add	r4, r1
 80074e8:	6014      	str	r4, [r2, #0]
 80074ea:	e7da      	b.n	80074a2 <_free_r+0x26>
 80074ec:	d902      	bls.n	80074f4 <_free_r+0x78>
 80074ee:	230c      	movs	r3, #12
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	e7d6      	b.n	80074a2 <_free_r+0x26>
 80074f4:	6825      	ldr	r5, [r4, #0]
 80074f6:	1961      	adds	r1, r4, r5
 80074f8:	428b      	cmp	r3, r1
 80074fa:	bf04      	itt	eq
 80074fc:	6819      	ldreq	r1, [r3, #0]
 80074fe:	685b      	ldreq	r3, [r3, #4]
 8007500:	6063      	str	r3, [r4, #4]
 8007502:	bf04      	itt	eq
 8007504:	1949      	addeq	r1, r1, r5
 8007506:	6021      	streq	r1, [r4, #0]
 8007508:	6054      	str	r4, [r2, #4]
 800750a:	e7ca      	b.n	80074a2 <_free_r+0x26>
 800750c:	b003      	add	sp, #12
 800750e:	bd30      	pop	{r4, r5, pc}
 8007510:	20000a04 	.word	0x20000a04

08007514 <rshift>:
 8007514:	6903      	ldr	r3, [r0, #16]
 8007516:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800751a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800751e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007522:	f100 0414 	add.w	r4, r0, #20
 8007526:	dd45      	ble.n	80075b4 <rshift+0xa0>
 8007528:	f011 011f 	ands.w	r1, r1, #31
 800752c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007530:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007534:	d10c      	bne.n	8007550 <rshift+0x3c>
 8007536:	f100 0710 	add.w	r7, r0, #16
 800753a:	4629      	mov	r1, r5
 800753c:	42b1      	cmp	r1, r6
 800753e:	d334      	bcc.n	80075aa <rshift+0x96>
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	1eea      	subs	r2, r5, #3
 8007546:	4296      	cmp	r6, r2
 8007548:	bf38      	it	cc
 800754a:	2300      	movcc	r3, #0
 800754c:	4423      	add	r3, r4
 800754e:	e015      	b.n	800757c <rshift+0x68>
 8007550:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007554:	f1c1 0820 	rsb	r8, r1, #32
 8007558:	40cf      	lsrs	r7, r1
 800755a:	f105 0e04 	add.w	lr, r5, #4
 800755e:	46a1      	mov	r9, r4
 8007560:	4576      	cmp	r6, lr
 8007562:	46f4      	mov	ip, lr
 8007564:	d815      	bhi.n	8007592 <rshift+0x7e>
 8007566:	1a9a      	subs	r2, r3, r2
 8007568:	0092      	lsls	r2, r2, #2
 800756a:	3a04      	subs	r2, #4
 800756c:	3501      	adds	r5, #1
 800756e:	42ae      	cmp	r6, r5
 8007570:	bf38      	it	cc
 8007572:	2200      	movcc	r2, #0
 8007574:	18a3      	adds	r3, r4, r2
 8007576:	50a7      	str	r7, [r4, r2]
 8007578:	b107      	cbz	r7, 800757c <rshift+0x68>
 800757a:	3304      	adds	r3, #4
 800757c:	1b1a      	subs	r2, r3, r4
 800757e:	42a3      	cmp	r3, r4
 8007580:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007584:	bf08      	it	eq
 8007586:	2300      	moveq	r3, #0
 8007588:	6102      	str	r2, [r0, #16]
 800758a:	bf08      	it	eq
 800758c:	6143      	streq	r3, [r0, #20]
 800758e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007592:	f8dc c000 	ldr.w	ip, [ip]
 8007596:	fa0c fc08 	lsl.w	ip, ip, r8
 800759a:	ea4c 0707 	orr.w	r7, ip, r7
 800759e:	f849 7b04 	str.w	r7, [r9], #4
 80075a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075a6:	40cf      	lsrs	r7, r1
 80075a8:	e7da      	b.n	8007560 <rshift+0x4c>
 80075aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80075ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80075b2:	e7c3      	b.n	800753c <rshift+0x28>
 80075b4:	4623      	mov	r3, r4
 80075b6:	e7e1      	b.n	800757c <rshift+0x68>

080075b8 <__hexdig_fun>:
 80075b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d802      	bhi.n	80075c6 <__hexdig_fun+0xe>
 80075c0:	3820      	subs	r0, #32
 80075c2:	b2c0      	uxtb	r0, r0
 80075c4:	4770      	bx	lr
 80075c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d801      	bhi.n	80075d2 <__hexdig_fun+0x1a>
 80075ce:	3847      	subs	r0, #71	; 0x47
 80075d0:	e7f7      	b.n	80075c2 <__hexdig_fun+0xa>
 80075d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d801      	bhi.n	80075de <__hexdig_fun+0x26>
 80075da:	3827      	subs	r0, #39	; 0x27
 80075dc:	e7f1      	b.n	80075c2 <__hexdig_fun+0xa>
 80075de:	2000      	movs	r0, #0
 80075e0:	4770      	bx	lr
	...

080075e4 <__gethex>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	4617      	mov	r7, r2
 80075ea:	680a      	ldr	r2, [r1, #0]
 80075ec:	b085      	sub	sp, #20
 80075ee:	f102 0b02 	add.w	fp, r2, #2
 80075f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075fa:	4681      	mov	r9, r0
 80075fc:	468a      	mov	sl, r1
 80075fe:	9302      	str	r3, [sp, #8]
 8007600:	32fe      	adds	r2, #254	; 0xfe
 8007602:	eb02 030b 	add.w	r3, r2, fp
 8007606:	46d8      	mov	r8, fp
 8007608:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	2830      	cmp	r0, #48	; 0x30
 8007610:	d0f7      	beq.n	8007602 <__gethex+0x1e>
 8007612:	f7ff ffd1 	bl	80075b8 <__hexdig_fun>
 8007616:	4604      	mov	r4, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	d138      	bne.n	800768e <__gethex+0xaa>
 800761c:	49a7      	ldr	r1, [pc, #668]	; (80078bc <__gethex+0x2d8>)
 800761e:	2201      	movs	r2, #1
 8007620:	4640      	mov	r0, r8
 8007622:	f7fe fffd 	bl	8006620 <strncmp>
 8007626:	4606      	mov	r6, r0
 8007628:	2800      	cmp	r0, #0
 800762a:	d169      	bne.n	8007700 <__gethex+0x11c>
 800762c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007630:	465d      	mov	r5, fp
 8007632:	f7ff ffc1 	bl	80075b8 <__hexdig_fun>
 8007636:	2800      	cmp	r0, #0
 8007638:	d064      	beq.n	8007704 <__gethex+0x120>
 800763a:	465a      	mov	r2, fp
 800763c:	7810      	ldrb	r0, [r2, #0]
 800763e:	2830      	cmp	r0, #48	; 0x30
 8007640:	4690      	mov	r8, r2
 8007642:	f102 0201 	add.w	r2, r2, #1
 8007646:	d0f9      	beq.n	800763c <__gethex+0x58>
 8007648:	f7ff ffb6 	bl	80075b8 <__hexdig_fun>
 800764c:	2301      	movs	r3, #1
 800764e:	fab0 f480 	clz	r4, r0
 8007652:	0964      	lsrs	r4, r4, #5
 8007654:	465e      	mov	r6, fp
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	4642      	mov	r2, r8
 800765a:	4615      	mov	r5, r2
 800765c:	3201      	adds	r2, #1
 800765e:	7828      	ldrb	r0, [r5, #0]
 8007660:	f7ff ffaa 	bl	80075b8 <__hexdig_fun>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1f8      	bne.n	800765a <__gethex+0x76>
 8007668:	4994      	ldr	r1, [pc, #592]	; (80078bc <__gethex+0x2d8>)
 800766a:	2201      	movs	r2, #1
 800766c:	4628      	mov	r0, r5
 800766e:	f7fe ffd7 	bl	8006620 <strncmp>
 8007672:	b978      	cbnz	r0, 8007694 <__gethex+0xb0>
 8007674:	b946      	cbnz	r6, 8007688 <__gethex+0xa4>
 8007676:	1c6e      	adds	r6, r5, #1
 8007678:	4632      	mov	r2, r6
 800767a:	4615      	mov	r5, r2
 800767c:	3201      	adds	r2, #1
 800767e:	7828      	ldrb	r0, [r5, #0]
 8007680:	f7ff ff9a 	bl	80075b8 <__hexdig_fun>
 8007684:	2800      	cmp	r0, #0
 8007686:	d1f8      	bne.n	800767a <__gethex+0x96>
 8007688:	1b73      	subs	r3, r6, r5
 800768a:	009e      	lsls	r6, r3, #2
 800768c:	e004      	b.n	8007698 <__gethex+0xb4>
 800768e:	2400      	movs	r4, #0
 8007690:	4626      	mov	r6, r4
 8007692:	e7e1      	b.n	8007658 <__gethex+0x74>
 8007694:	2e00      	cmp	r6, #0
 8007696:	d1f7      	bne.n	8007688 <__gethex+0xa4>
 8007698:	782b      	ldrb	r3, [r5, #0]
 800769a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800769e:	2b50      	cmp	r3, #80	; 0x50
 80076a0:	d13d      	bne.n	800771e <__gethex+0x13a>
 80076a2:	786b      	ldrb	r3, [r5, #1]
 80076a4:	2b2b      	cmp	r3, #43	; 0x2b
 80076a6:	d02f      	beq.n	8007708 <__gethex+0x124>
 80076a8:	2b2d      	cmp	r3, #45	; 0x2d
 80076aa:	d031      	beq.n	8007710 <__gethex+0x12c>
 80076ac:	1c69      	adds	r1, r5, #1
 80076ae:	f04f 0b00 	mov.w	fp, #0
 80076b2:	7808      	ldrb	r0, [r1, #0]
 80076b4:	f7ff ff80 	bl	80075b8 <__hexdig_fun>
 80076b8:	1e42      	subs	r2, r0, #1
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	2a18      	cmp	r2, #24
 80076be:	d82e      	bhi.n	800771e <__gethex+0x13a>
 80076c0:	f1a0 0210 	sub.w	r2, r0, #16
 80076c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076c8:	f7ff ff76 	bl	80075b8 <__hexdig_fun>
 80076cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80076d0:	fa5f fc8c 	uxtb.w	ip, ip
 80076d4:	f1bc 0f18 	cmp.w	ip, #24
 80076d8:	d91d      	bls.n	8007716 <__gethex+0x132>
 80076da:	f1bb 0f00 	cmp.w	fp, #0
 80076de:	d000      	beq.n	80076e2 <__gethex+0xfe>
 80076e0:	4252      	negs	r2, r2
 80076e2:	4416      	add	r6, r2
 80076e4:	f8ca 1000 	str.w	r1, [sl]
 80076e8:	b1dc      	cbz	r4, 8007722 <__gethex+0x13e>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bf14      	ite	ne
 80076f0:	f04f 0800 	movne.w	r8, #0
 80076f4:	f04f 0806 	moveq.w	r8, #6
 80076f8:	4640      	mov	r0, r8
 80076fa:	b005      	add	sp, #20
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	4645      	mov	r5, r8
 8007702:	4626      	mov	r6, r4
 8007704:	2401      	movs	r4, #1
 8007706:	e7c7      	b.n	8007698 <__gethex+0xb4>
 8007708:	f04f 0b00 	mov.w	fp, #0
 800770c:	1ca9      	adds	r1, r5, #2
 800770e:	e7d0      	b.n	80076b2 <__gethex+0xce>
 8007710:	f04f 0b01 	mov.w	fp, #1
 8007714:	e7fa      	b.n	800770c <__gethex+0x128>
 8007716:	230a      	movs	r3, #10
 8007718:	fb03 0002 	mla	r0, r3, r2, r0
 800771c:	e7d0      	b.n	80076c0 <__gethex+0xdc>
 800771e:	4629      	mov	r1, r5
 8007720:	e7e0      	b.n	80076e4 <__gethex+0x100>
 8007722:	eba5 0308 	sub.w	r3, r5, r8
 8007726:	3b01      	subs	r3, #1
 8007728:	4621      	mov	r1, r4
 800772a:	2b07      	cmp	r3, #7
 800772c:	dc0a      	bgt.n	8007744 <__gethex+0x160>
 800772e:	4648      	mov	r0, r9
 8007730:	f000 fb0e 	bl	8007d50 <_Balloc>
 8007734:	4604      	mov	r4, r0
 8007736:	b940      	cbnz	r0, 800774a <__gethex+0x166>
 8007738:	4b61      	ldr	r3, [pc, #388]	; (80078c0 <__gethex+0x2dc>)
 800773a:	4602      	mov	r2, r0
 800773c:	21e4      	movs	r1, #228	; 0xe4
 800773e:	4861      	ldr	r0, [pc, #388]	; (80078c4 <__gethex+0x2e0>)
 8007740:	f001 fa46 	bl	8008bd0 <__assert_func>
 8007744:	3101      	adds	r1, #1
 8007746:	105b      	asrs	r3, r3, #1
 8007748:	e7ef      	b.n	800772a <__gethex+0x146>
 800774a:	f100 0a14 	add.w	sl, r0, #20
 800774e:	2300      	movs	r3, #0
 8007750:	495a      	ldr	r1, [pc, #360]	; (80078bc <__gethex+0x2d8>)
 8007752:	f8cd a004 	str.w	sl, [sp, #4]
 8007756:	469b      	mov	fp, r3
 8007758:	45a8      	cmp	r8, r5
 800775a:	d342      	bcc.n	80077e2 <__gethex+0x1fe>
 800775c:	9801      	ldr	r0, [sp, #4]
 800775e:	f840 bb04 	str.w	fp, [r0], #4
 8007762:	eba0 000a 	sub.w	r0, r0, sl
 8007766:	1080      	asrs	r0, r0, #2
 8007768:	6120      	str	r0, [r4, #16]
 800776a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800776e:	4658      	mov	r0, fp
 8007770:	f000 fbe0 	bl	8007f34 <__hi0bits>
 8007774:	683d      	ldr	r5, [r7, #0]
 8007776:	eba8 0000 	sub.w	r0, r8, r0
 800777a:	42a8      	cmp	r0, r5
 800777c:	dd59      	ble.n	8007832 <__gethex+0x24e>
 800777e:	eba0 0805 	sub.w	r8, r0, r5
 8007782:	4641      	mov	r1, r8
 8007784:	4620      	mov	r0, r4
 8007786:	f000 ff6f 	bl	8008668 <__any_on>
 800778a:	4683      	mov	fp, r0
 800778c:	b1b8      	cbz	r0, 80077be <__gethex+0x1da>
 800778e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8007792:	1159      	asrs	r1, r3, #5
 8007794:	f003 021f 	and.w	r2, r3, #31
 8007798:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800779c:	f04f 0b01 	mov.w	fp, #1
 80077a0:	fa0b f202 	lsl.w	r2, fp, r2
 80077a4:	420a      	tst	r2, r1
 80077a6:	d00a      	beq.n	80077be <__gethex+0x1da>
 80077a8:	455b      	cmp	r3, fp
 80077aa:	dd06      	ble.n	80077ba <__gethex+0x1d6>
 80077ac:	f1a8 0102 	sub.w	r1, r8, #2
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 ff59 	bl	8008668 <__any_on>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d138      	bne.n	800782c <__gethex+0x248>
 80077ba:	f04f 0b02 	mov.w	fp, #2
 80077be:	4641      	mov	r1, r8
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff fea7 	bl	8007514 <rshift>
 80077c6:	4446      	add	r6, r8
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	42b3      	cmp	r3, r6
 80077cc:	da41      	bge.n	8007852 <__gethex+0x26e>
 80077ce:	4621      	mov	r1, r4
 80077d0:	4648      	mov	r0, r9
 80077d2:	f000 fafd 	bl	8007dd0 <_Bfree>
 80077d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d8:	2300      	movs	r3, #0
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80077e0:	e78a      	b.n	80076f8 <__gethex+0x114>
 80077e2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80077e6:	2a2e      	cmp	r2, #46	; 0x2e
 80077e8:	d014      	beq.n	8007814 <__gethex+0x230>
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d106      	bne.n	80077fc <__gethex+0x218>
 80077ee:	9b01      	ldr	r3, [sp, #4]
 80077f0:	f843 bb04 	str.w	fp, [r3], #4
 80077f4:	f04f 0b00 	mov.w	fp, #0
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	465b      	mov	r3, fp
 80077fc:	7828      	ldrb	r0, [r5, #0]
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	f7ff feda 	bl	80075b8 <__hexdig_fun>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	f000 000f 	and.w	r0, r0, #15
 800780a:	4098      	lsls	r0, r3
 800780c:	ea4b 0b00 	orr.w	fp, fp, r0
 8007810:	3304      	adds	r3, #4
 8007812:	e7a1      	b.n	8007758 <__gethex+0x174>
 8007814:	45a8      	cmp	r8, r5
 8007816:	d8e8      	bhi.n	80077ea <__gethex+0x206>
 8007818:	2201      	movs	r2, #1
 800781a:	4628      	mov	r0, r5
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	f7fe feff 	bl	8006620 <strncmp>
 8007822:	4926      	ldr	r1, [pc, #152]	; (80078bc <__gethex+0x2d8>)
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	2800      	cmp	r0, #0
 8007828:	d1df      	bne.n	80077ea <__gethex+0x206>
 800782a:	e795      	b.n	8007758 <__gethex+0x174>
 800782c:	f04f 0b03 	mov.w	fp, #3
 8007830:	e7c5      	b.n	80077be <__gethex+0x1da>
 8007832:	da0b      	bge.n	800784c <__gethex+0x268>
 8007834:	eba5 0800 	sub.w	r8, r5, r0
 8007838:	4621      	mov	r1, r4
 800783a:	4642      	mov	r2, r8
 800783c:	4648      	mov	r0, r9
 800783e:	f000 fce1 	bl	8008204 <__lshift>
 8007842:	eba6 0608 	sub.w	r6, r6, r8
 8007846:	4604      	mov	r4, r0
 8007848:	f100 0a14 	add.w	sl, r0, #20
 800784c:	f04f 0b00 	mov.w	fp, #0
 8007850:	e7ba      	b.n	80077c8 <__gethex+0x1e4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	42b3      	cmp	r3, r6
 8007856:	dd73      	ble.n	8007940 <__gethex+0x35c>
 8007858:	1b9e      	subs	r6, r3, r6
 800785a:	42b5      	cmp	r5, r6
 800785c:	dc34      	bgt.n	80078c8 <__gethex+0x2e4>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d023      	beq.n	80078ac <__gethex+0x2c8>
 8007864:	2b03      	cmp	r3, #3
 8007866:	d025      	beq.n	80078b4 <__gethex+0x2d0>
 8007868:	2b01      	cmp	r3, #1
 800786a:	d115      	bne.n	8007898 <__gethex+0x2b4>
 800786c:	42b5      	cmp	r5, r6
 800786e:	d113      	bne.n	8007898 <__gethex+0x2b4>
 8007870:	2d01      	cmp	r5, #1
 8007872:	d10b      	bne.n	800788c <__gethex+0x2a8>
 8007874:	9a02      	ldr	r2, [sp, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	2301      	movs	r3, #1
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	f8ca 3000 	str.w	r3, [sl]
 8007882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007884:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007888:	601c      	str	r4, [r3, #0]
 800788a:	e735      	b.n	80076f8 <__gethex+0x114>
 800788c:	1e69      	subs	r1, r5, #1
 800788e:	4620      	mov	r0, r4
 8007890:	f000 feea 	bl	8008668 <__any_on>
 8007894:	2800      	cmp	r0, #0
 8007896:	d1ed      	bne.n	8007874 <__gethex+0x290>
 8007898:	4621      	mov	r1, r4
 800789a:	4648      	mov	r0, r9
 800789c:	f000 fa98 	bl	8007dd0 <_Bfree>
 80078a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078a2:	2300      	movs	r3, #0
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80078aa:	e725      	b.n	80076f8 <__gethex+0x114>
 80078ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f2      	bne.n	8007898 <__gethex+0x2b4>
 80078b2:	e7df      	b.n	8007874 <__gethex+0x290>
 80078b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1dc      	bne.n	8007874 <__gethex+0x290>
 80078ba:	e7ed      	b.n	8007898 <__gethex+0x2b4>
 80078bc:	08008e6c 	.word	0x08008e6c
 80078c0:	08009079 	.word	0x08009079
 80078c4:	0800908a 	.word	0x0800908a
 80078c8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80078cc:	f1bb 0f00 	cmp.w	fp, #0
 80078d0:	d133      	bne.n	800793a <__gethex+0x356>
 80078d2:	f1b8 0f00 	cmp.w	r8, #0
 80078d6:	d004      	beq.n	80078e2 <__gethex+0x2fe>
 80078d8:	4641      	mov	r1, r8
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fec4 	bl	8008668 <__any_on>
 80078e0:	4683      	mov	fp, r0
 80078e2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80078e6:	2301      	movs	r3, #1
 80078e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80078ec:	f008 081f 	and.w	r8, r8, #31
 80078f0:	fa03 f308 	lsl.w	r3, r3, r8
 80078f4:	4213      	tst	r3, r2
 80078f6:	4631      	mov	r1, r6
 80078f8:	4620      	mov	r0, r4
 80078fa:	bf18      	it	ne
 80078fc:	f04b 0b02 	orrne.w	fp, fp, #2
 8007900:	1bad      	subs	r5, r5, r6
 8007902:	f7ff fe07 	bl	8007514 <rshift>
 8007906:	687e      	ldr	r6, [r7, #4]
 8007908:	f04f 0802 	mov.w	r8, #2
 800790c:	f1bb 0f00 	cmp.w	fp, #0
 8007910:	d04a      	beq.n	80079a8 <__gethex+0x3c4>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d016      	beq.n	8007946 <__gethex+0x362>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d018      	beq.n	800794e <__gethex+0x36a>
 800791c:	2b01      	cmp	r3, #1
 800791e:	d109      	bne.n	8007934 <__gethex+0x350>
 8007920:	f01b 0f02 	tst.w	fp, #2
 8007924:	d006      	beq.n	8007934 <__gethex+0x350>
 8007926:	f8da 3000 	ldr.w	r3, [sl]
 800792a:	ea4b 0b03 	orr.w	fp, fp, r3
 800792e:	f01b 0f01 	tst.w	fp, #1
 8007932:	d10f      	bne.n	8007954 <__gethex+0x370>
 8007934:	f048 0810 	orr.w	r8, r8, #16
 8007938:	e036      	b.n	80079a8 <__gethex+0x3c4>
 800793a:	f04f 0b01 	mov.w	fp, #1
 800793e:	e7d0      	b.n	80078e2 <__gethex+0x2fe>
 8007940:	f04f 0801 	mov.w	r8, #1
 8007944:	e7e2      	b.n	800790c <__gethex+0x328>
 8007946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007948:	f1c3 0301 	rsb	r3, r3, #1
 800794c:	930f      	str	r3, [sp, #60]	; 0x3c
 800794e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ef      	beq.n	8007934 <__gethex+0x350>
 8007954:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007958:	f104 0214 	add.w	r2, r4, #20
 800795c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007966:	2300      	movs	r3, #0
 8007968:	4694      	mov	ip, r2
 800796a:	f852 1b04 	ldr.w	r1, [r2], #4
 800796e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007972:	d01e      	beq.n	80079b2 <__gethex+0x3ce>
 8007974:	3101      	adds	r1, #1
 8007976:	f8cc 1000 	str.w	r1, [ip]
 800797a:	f1b8 0f02 	cmp.w	r8, #2
 800797e:	f104 0214 	add.w	r2, r4, #20
 8007982:	d13d      	bne.n	8007a00 <__gethex+0x41c>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	3b01      	subs	r3, #1
 8007988:	42ab      	cmp	r3, r5
 800798a:	d10b      	bne.n	80079a4 <__gethex+0x3c0>
 800798c:	1169      	asrs	r1, r5, #5
 800798e:	2301      	movs	r3, #1
 8007990:	f005 051f 	and.w	r5, r5, #31
 8007994:	fa03 f505 	lsl.w	r5, r3, r5
 8007998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800799c:	421d      	tst	r5, r3
 800799e:	bf18      	it	ne
 80079a0:	f04f 0801 	movne.w	r8, #1
 80079a4:	f048 0820 	orr.w	r8, r8, #32
 80079a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079aa:	601c      	str	r4, [r3, #0]
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	601e      	str	r6, [r3, #0]
 80079b0:	e6a2      	b.n	80076f8 <__gethex+0x114>
 80079b2:	4290      	cmp	r0, r2
 80079b4:	f842 3c04 	str.w	r3, [r2, #-4]
 80079b8:	d8d6      	bhi.n	8007968 <__gethex+0x384>
 80079ba:	68a2      	ldr	r2, [r4, #8]
 80079bc:	4593      	cmp	fp, r2
 80079be:	db17      	blt.n	80079f0 <__gethex+0x40c>
 80079c0:	6861      	ldr	r1, [r4, #4]
 80079c2:	4648      	mov	r0, r9
 80079c4:	3101      	adds	r1, #1
 80079c6:	f000 f9c3 	bl	8007d50 <_Balloc>
 80079ca:	4682      	mov	sl, r0
 80079cc:	b918      	cbnz	r0, 80079d6 <__gethex+0x3f2>
 80079ce:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <__gethex+0x458>)
 80079d0:	4602      	mov	r2, r0
 80079d2:	2184      	movs	r1, #132	; 0x84
 80079d4:	e6b3      	b.n	800773e <__gethex+0x15a>
 80079d6:	6922      	ldr	r2, [r4, #16]
 80079d8:	3202      	adds	r2, #2
 80079da:	f104 010c 	add.w	r1, r4, #12
 80079de:	0092      	lsls	r2, r2, #2
 80079e0:	300c      	adds	r0, #12
 80079e2:	f7fe feb9 	bl	8006758 <memcpy>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4648      	mov	r0, r9
 80079ea:	f000 f9f1 	bl	8007dd0 <_Bfree>
 80079ee:	4654      	mov	r4, sl
 80079f0:	6922      	ldr	r2, [r4, #16]
 80079f2:	1c51      	adds	r1, r2, #1
 80079f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80079f8:	6121      	str	r1, [r4, #16]
 80079fa:	2101      	movs	r1, #1
 80079fc:	6151      	str	r1, [r2, #20]
 80079fe:	e7bc      	b.n	800797a <__gethex+0x396>
 8007a00:	6921      	ldr	r1, [r4, #16]
 8007a02:	4559      	cmp	r1, fp
 8007a04:	dd0b      	ble.n	8007a1e <__gethex+0x43a>
 8007a06:	2101      	movs	r1, #1
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7ff fd83 	bl	8007514 <rshift>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3601      	adds	r6, #1
 8007a12:	42b3      	cmp	r3, r6
 8007a14:	f6ff aedb 	blt.w	80077ce <__gethex+0x1ea>
 8007a18:	f04f 0801 	mov.w	r8, #1
 8007a1c:	e7c2      	b.n	80079a4 <__gethex+0x3c0>
 8007a1e:	f015 051f 	ands.w	r5, r5, #31
 8007a22:	d0f9      	beq.n	8007a18 <__gethex+0x434>
 8007a24:	9b01      	ldr	r3, [sp, #4]
 8007a26:	441a      	add	r2, r3
 8007a28:	f1c5 0520 	rsb	r5, r5, #32
 8007a2c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007a30:	f000 fa80 	bl	8007f34 <__hi0bits>
 8007a34:	42a8      	cmp	r0, r5
 8007a36:	dbe6      	blt.n	8007a06 <__gethex+0x422>
 8007a38:	e7ee      	b.n	8007a18 <__gethex+0x434>
 8007a3a:	bf00      	nop
 8007a3c:	08009079 	.word	0x08009079

08007a40 <L_shift>:
 8007a40:	f1c2 0208 	rsb	r2, r2, #8
 8007a44:	0092      	lsls	r2, r2, #2
 8007a46:	b570      	push	{r4, r5, r6, lr}
 8007a48:	f1c2 0620 	rsb	r6, r2, #32
 8007a4c:	6843      	ldr	r3, [r0, #4]
 8007a4e:	6804      	ldr	r4, [r0, #0]
 8007a50:	fa03 f506 	lsl.w	r5, r3, r6
 8007a54:	432c      	orrs	r4, r5
 8007a56:	40d3      	lsrs	r3, r2
 8007a58:	6004      	str	r4, [r0, #0]
 8007a5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a5e:	4288      	cmp	r0, r1
 8007a60:	d3f4      	bcc.n	8007a4c <L_shift+0xc>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}

08007a64 <__match>:
 8007a64:	b530      	push	{r4, r5, lr}
 8007a66:	6803      	ldr	r3, [r0, #0]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6e:	b914      	cbnz	r4, 8007a76 <__match+0x12>
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	2001      	movs	r0, #1
 8007a74:	bd30      	pop	{r4, r5, pc}
 8007a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a7e:	2d19      	cmp	r5, #25
 8007a80:	bf98      	it	ls
 8007a82:	3220      	addls	r2, #32
 8007a84:	42a2      	cmp	r2, r4
 8007a86:	d0f0      	beq.n	8007a6a <__match+0x6>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7f3      	b.n	8007a74 <__match+0x10>

08007a8c <__hexnan>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	680b      	ldr	r3, [r1, #0]
 8007a92:	6801      	ldr	r1, [r0, #0]
 8007a94:	115e      	asrs	r6, r3, #5
 8007a96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a9a:	f013 031f 	ands.w	r3, r3, #31
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	bf18      	it	ne
 8007aa2:	3604      	addne	r6, #4
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	1f37      	subs	r7, r6, #4
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	4690      	mov	r8, r2
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ab2:	46b9      	mov	r9, r7
 8007ab4:	463c      	mov	r4, r7
 8007ab6:	9502      	str	r5, [sp, #8]
 8007ab8:	46ab      	mov	fp, r5
 8007aba:	784a      	ldrb	r2, [r1, #1]
 8007abc:	1c4b      	adds	r3, r1, #1
 8007abe:	9303      	str	r3, [sp, #12]
 8007ac0:	b342      	cbz	r2, 8007b14 <__hexnan+0x88>
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	9105      	str	r1, [sp, #20]
 8007ac6:	9204      	str	r2, [sp, #16]
 8007ac8:	f7ff fd76 	bl	80075b8 <__hexdig_fun>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d14f      	bne.n	8007b70 <__hexnan+0xe4>
 8007ad0:	9a04      	ldr	r2, [sp, #16]
 8007ad2:	9905      	ldr	r1, [sp, #20]
 8007ad4:	2a20      	cmp	r2, #32
 8007ad6:	d818      	bhi.n	8007b0a <__hexnan+0x7e>
 8007ad8:	9b02      	ldr	r3, [sp, #8]
 8007ada:	459b      	cmp	fp, r3
 8007adc:	dd13      	ble.n	8007b06 <__hexnan+0x7a>
 8007ade:	454c      	cmp	r4, r9
 8007ae0:	d206      	bcs.n	8007af0 <__hexnan+0x64>
 8007ae2:	2d07      	cmp	r5, #7
 8007ae4:	dc04      	bgt.n	8007af0 <__hexnan+0x64>
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	4649      	mov	r1, r9
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff ffa8 	bl	8007a40 <L_shift>
 8007af0:	4544      	cmp	r4, r8
 8007af2:	d950      	bls.n	8007b96 <__hexnan+0x10a>
 8007af4:	2300      	movs	r3, #0
 8007af6:	f1a4 0904 	sub.w	r9, r4, #4
 8007afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8007afe:	f8cd b008 	str.w	fp, [sp, #8]
 8007b02:	464c      	mov	r4, r9
 8007b04:	461d      	mov	r5, r3
 8007b06:	9903      	ldr	r1, [sp, #12]
 8007b08:	e7d7      	b.n	8007aba <__hexnan+0x2e>
 8007b0a:	2a29      	cmp	r2, #41	; 0x29
 8007b0c:	d155      	bne.n	8007bba <__hexnan+0x12e>
 8007b0e:	3102      	adds	r1, #2
 8007b10:	f8ca 1000 	str.w	r1, [sl]
 8007b14:	f1bb 0f00 	cmp.w	fp, #0
 8007b18:	d04f      	beq.n	8007bba <__hexnan+0x12e>
 8007b1a:	454c      	cmp	r4, r9
 8007b1c:	d206      	bcs.n	8007b2c <__hexnan+0xa0>
 8007b1e:	2d07      	cmp	r5, #7
 8007b20:	dc04      	bgt.n	8007b2c <__hexnan+0xa0>
 8007b22:	462a      	mov	r2, r5
 8007b24:	4649      	mov	r1, r9
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff ff8a 	bl	8007a40 <L_shift>
 8007b2c:	4544      	cmp	r4, r8
 8007b2e:	d934      	bls.n	8007b9a <__hexnan+0x10e>
 8007b30:	f1a8 0204 	sub.w	r2, r8, #4
 8007b34:	4623      	mov	r3, r4
 8007b36:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b3e:	429f      	cmp	r7, r3
 8007b40:	d2f9      	bcs.n	8007b36 <__hexnan+0xaa>
 8007b42:	1b3b      	subs	r3, r7, r4
 8007b44:	f023 0303 	bic.w	r3, r3, #3
 8007b48:	3304      	adds	r3, #4
 8007b4a:	3e03      	subs	r6, #3
 8007b4c:	3401      	adds	r4, #1
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	bf38      	it	cc
 8007b52:	2304      	movcc	r3, #4
 8007b54:	4443      	add	r3, r8
 8007b56:	2200      	movs	r2, #0
 8007b58:	f843 2b04 	str.w	r2, [r3], #4
 8007b5c:	429f      	cmp	r7, r3
 8007b5e:	d2fb      	bcs.n	8007b58 <__hexnan+0xcc>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	b91b      	cbnz	r3, 8007b6c <__hexnan+0xe0>
 8007b64:	4547      	cmp	r7, r8
 8007b66:	d126      	bne.n	8007bb6 <__hexnan+0x12a>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	2005      	movs	r0, #5
 8007b6e:	e025      	b.n	8007bbc <__hexnan+0x130>
 8007b70:	3501      	adds	r5, #1
 8007b72:	2d08      	cmp	r5, #8
 8007b74:	f10b 0b01 	add.w	fp, fp, #1
 8007b78:	dd06      	ble.n	8007b88 <__hexnan+0xfc>
 8007b7a:	4544      	cmp	r4, r8
 8007b7c:	d9c3      	bls.n	8007b06 <__hexnan+0x7a>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b84:	2501      	movs	r5, #1
 8007b86:	3c04      	subs	r4, #4
 8007b88:	6822      	ldr	r2, [r4, #0]
 8007b8a:	f000 000f 	and.w	r0, r0, #15
 8007b8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b92:	6020      	str	r0, [r4, #0]
 8007b94:	e7b7      	b.n	8007b06 <__hexnan+0x7a>
 8007b96:	2508      	movs	r5, #8
 8007b98:	e7b5      	b.n	8007b06 <__hexnan+0x7a>
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0df      	beq.n	8007b60 <__hexnan+0xd4>
 8007ba0:	f1c3 0320 	rsb	r3, r3, #32
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ba8:	40da      	lsrs	r2, r3
 8007baa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	f846 3c04 	str.w	r3, [r6, #-4]
 8007bb4:	e7d4      	b.n	8007b60 <__hexnan+0xd4>
 8007bb6:	3f04      	subs	r7, #4
 8007bb8:	e7d2      	b.n	8007b60 <__hexnan+0xd4>
 8007bba:	2004      	movs	r0, #4
 8007bbc:	b007      	add	sp, #28
 8007bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007bc4 <malloc>:
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <malloc+0xc>)
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f000 b823 	b.w	8007c14 <_malloc_r>
 8007bce:	bf00      	nop
 8007bd0:	200001d8 	.word	0x200001d8

08007bd4 <sbrk_aligned>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	4e0e      	ldr	r6, [pc, #56]	; (8007c10 <sbrk_aligned+0x3c>)
 8007bd8:	460c      	mov	r4, r1
 8007bda:	6831      	ldr	r1, [r6, #0]
 8007bdc:	4605      	mov	r5, r0
 8007bde:	b911      	cbnz	r1, 8007be6 <sbrk_aligned+0x12>
 8007be0:	f000 ffe6 	bl	8008bb0 <_sbrk_r>
 8007be4:	6030      	str	r0, [r6, #0]
 8007be6:	4621      	mov	r1, r4
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 ffe1 	bl	8008bb0 <_sbrk_r>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	d00a      	beq.n	8007c08 <sbrk_aligned+0x34>
 8007bf2:	1cc4      	adds	r4, r0, #3
 8007bf4:	f024 0403 	bic.w	r4, r4, #3
 8007bf8:	42a0      	cmp	r0, r4
 8007bfa:	d007      	beq.n	8007c0c <sbrk_aligned+0x38>
 8007bfc:	1a21      	subs	r1, r4, r0
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 ffd6 	bl	8008bb0 <_sbrk_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d101      	bne.n	8007c0c <sbrk_aligned+0x38>
 8007c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	20000a08 	.word	0x20000a08

08007c14 <_malloc_r>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	1ccd      	adds	r5, r1, #3
 8007c1a:	f025 0503 	bic.w	r5, r5, #3
 8007c1e:	3508      	adds	r5, #8
 8007c20:	2d0c      	cmp	r5, #12
 8007c22:	bf38      	it	cc
 8007c24:	250c      	movcc	r5, #12
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	4607      	mov	r7, r0
 8007c2a:	db01      	blt.n	8007c30 <_malloc_r+0x1c>
 8007c2c:	42a9      	cmp	r1, r5
 8007c2e:	d905      	bls.n	8007c3c <_malloc_r+0x28>
 8007c30:	230c      	movs	r3, #12
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	2600      	movs	r6, #0
 8007c36:	4630      	mov	r0, r6
 8007c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d10 <_malloc_r+0xfc>
 8007c40:	f000 f87a 	bl	8007d38 <__malloc_lock>
 8007c44:	f8d8 3000 	ldr.w	r3, [r8]
 8007c48:	461c      	mov	r4, r3
 8007c4a:	bb5c      	cbnz	r4, 8007ca4 <_malloc_r+0x90>
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f7ff ffc0 	bl	8007bd4 <sbrk_aligned>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	4604      	mov	r4, r0
 8007c58:	d155      	bne.n	8007d06 <_malloc_r+0xf2>
 8007c5a:	f8d8 4000 	ldr.w	r4, [r8]
 8007c5e:	4626      	mov	r6, r4
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	d145      	bne.n	8007cf0 <_malloc_r+0xdc>
 8007c64:	2c00      	cmp	r4, #0
 8007c66:	d048      	beq.n	8007cfa <_malloc_r+0xe6>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	eb04 0903 	add.w	r9, r4, r3
 8007c72:	f000 ff9d 	bl	8008bb0 <_sbrk_r>
 8007c76:	4581      	cmp	r9, r0
 8007c78:	d13f      	bne.n	8007cfa <_malloc_r+0xe6>
 8007c7a:	6821      	ldr	r1, [r4, #0]
 8007c7c:	1a6d      	subs	r5, r5, r1
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff ffa7 	bl	8007bd4 <sbrk_aligned>
 8007c86:	3001      	adds	r0, #1
 8007c88:	d037      	beq.n	8007cfa <_malloc_r+0xe6>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	442b      	add	r3, r5
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	f8d8 3000 	ldr.w	r3, [r8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d038      	beq.n	8007d0a <_malloc_r+0xf6>
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	42a2      	cmp	r2, r4
 8007c9c:	d12b      	bne.n	8007cf6 <_malloc_r+0xe2>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	e00f      	b.n	8007cc4 <_malloc_r+0xb0>
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	1b52      	subs	r2, r2, r5
 8007ca8:	d41f      	bmi.n	8007cea <_malloc_r+0xd6>
 8007caa:	2a0b      	cmp	r2, #11
 8007cac:	d917      	bls.n	8007cde <_malloc_r+0xca>
 8007cae:	1961      	adds	r1, r4, r5
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	6025      	str	r5, [r4, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	6059      	strne	r1, [r3, #4]
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	bf08      	it	eq
 8007cbc:	f8c8 1000 	streq.w	r1, [r8]
 8007cc0:	5162      	str	r2, [r4, r5]
 8007cc2:	604b      	str	r3, [r1, #4]
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f104 060b 	add.w	r6, r4, #11
 8007cca:	f000 f83b 	bl	8007d44 <__malloc_unlock>
 8007cce:	f026 0607 	bic.w	r6, r6, #7
 8007cd2:	1d23      	adds	r3, r4, #4
 8007cd4:	1af2      	subs	r2, r6, r3
 8007cd6:	d0ae      	beq.n	8007c36 <_malloc_r+0x22>
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	50a3      	str	r3, [r4, r2]
 8007cdc:	e7ab      	b.n	8007c36 <_malloc_r+0x22>
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	6862      	ldr	r2, [r4, #4]
 8007ce2:	d1dd      	bne.n	8007ca0 <_malloc_r+0x8c>
 8007ce4:	f8c8 2000 	str.w	r2, [r8]
 8007ce8:	e7ec      	b.n	8007cc4 <_malloc_r+0xb0>
 8007cea:	4623      	mov	r3, r4
 8007cec:	6864      	ldr	r4, [r4, #4]
 8007cee:	e7ac      	b.n	8007c4a <_malloc_r+0x36>
 8007cf0:	4634      	mov	r4, r6
 8007cf2:	6876      	ldr	r6, [r6, #4]
 8007cf4:	e7b4      	b.n	8007c60 <_malloc_r+0x4c>
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	e7cc      	b.n	8007c94 <_malloc_r+0x80>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f000 f820 	bl	8007d44 <__malloc_unlock>
 8007d04:	e797      	b.n	8007c36 <_malloc_r+0x22>
 8007d06:	6025      	str	r5, [r4, #0]
 8007d08:	e7dc      	b.n	8007cc4 <_malloc_r+0xb0>
 8007d0a:	605b      	str	r3, [r3, #4]
 8007d0c:	deff      	udf	#255	; 0xff
 8007d0e:	bf00      	nop
 8007d10:	20000a04 	.word	0x20000a04

08007d14 <__ascii_mbtowc>:
 8007d14:	b082      	sub	sp, #8
 8007d16:	b901      	cbnz	r1, 8007d1a <__ascii_mbtowc+0x6>
 8007d18:	a901      	add	r1, sp, #4
 8007d1a:	b142      	cbz	r2, 8007d2e <__ascii_mbtowc+0x1a>
 8007d1c:	b14b      	cbz	r3, 8007d32 <__ascii_mbtowc+0x1e>
 8007d1e:	7813      	ldrb	r3, [r2, #0]
 8007d20:	600b      	str	r3, [r1, #0]
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	1e10      	subs	r0, r2, #0
 8007d26:	bf18      	it	ne
 8007d28:	2001      	movne	r0, #1
 8007d2a:	b002      	add	sp, #8
 8007d2c:	4770      	bx	lr
 8007d2e:	4610      	mov	r0, r2
 8007d30:	e7fb      	b.n	8007d2a <__ascii_mbtowc+0x16>
 8007d32:	f06f 0001 	mvn.w	r0, #1
 8007d36:	e7f8      	b.n	8007d2a <__ascii_mbtowc+0x16>

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f7fe bd0b 	b.w	8006754 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20000a00 	.word	0x20000a00

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f7fe bd06 	b.w	8006756 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20000a00 	.word	0x20000a00

08007d50 <_Balloc>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	69c6      	ldr	r6, [r0, #28]
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	b976      	cbnz	r6, 8007d78 <_Balloc+0x28>
 8007d5a:	2010      	movs	r0, #16
 8007d5c:	f7ff ff32 	bl	8007bc4 <malloc>
 8007d60:	4602      	mov	r2, r0
 8007d62:	61e0      	str	r0, [r4, #28]
 8007d64:	b920      	cbnz	r0, 8007d70 <_Balloc+0x20>
 8007d66:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <_Balloc+0x78>)
 8007d68:	4818      	ldr	r0, [pc, #96]	; (8007dcc <_Balloc+0x7c>)
 8007d6a:	216b      	movs	r1, #107	; 0x6b
 8007d6c:	f000 ff30 	bl	8008bd0 <__assert_func>
 8007d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d74:	6006      	str	r6, [r0, #0]
 8007d76:	60c6      	str	r6, [r0, #12]
 8007d78:	69e6      	ldr	r6, [r4, #28]
 8007d7a:	68f3      	ldr	r3, [r6, #12]
 8007d7c:	b183      	cbz	r3, 8007da0 <_Balloc+0x50>
 8007d7e:	69e3      	ldr	r3, [r4, #28]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d86:	b9b8      	cbnz	r0, 8007db8 <_Balloc+0x68>
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d8e:	1d72      	adds	r2, r6, #5
 8007d90:	0092      	lsls	r2, r2, #2
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 ff3a 	bl	8008c0c <_calloc_r>
 8007d98:	b160      	cbz	r0, 8007db4 <_Balloc+0x64>
 8007d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d9e:	e00e      	b.n	8007dbe <_Balloc+0x6e>
 8007da0:	2221      	movs	r2, #33	; 0x21
 8007da2:	2104      	movs	r1, #4
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 ff31 	bl	8008c0c <_calloc_r>
 8007daa:	69e3      	ldr	r3, [r4, #28]
 8007dac:	60f0      	str	r0, [r6, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e4      	bne.n	8007d7e <_Balloc+0x2e>
 8007db4:	2000      	movs	r0, #0
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	6802      	ldr	r2, [r0, #0]
 8007dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dc4:	e7f7      	b.n	8007db6 <_Balloc+0x66>
 8007dc6:	bf00      	nop
 8007dc8:	0800900a 	.word	0x0800900a
 8007dcc:	080090ea 	.word	0x080090ea

08007dd0 <_Bfree>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	69c6      	ldr	r6, [r0, #28]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	b976      	cbnz	r6, 8007df8 <_Bfree+0x28>
 8007dda:	2010      	movs	r0, #16
 8007ddc:	f7ff fef2 	bl	8007bc4 <malloc>
 8007de0:	4602      	mov	r2, r0
 8007de2:	61e8      	str	r0, [r5, #28]
 8007de4:	b920      	cbnz	r0, 8007df0 <_Bfree+0x20>
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <_Bfree+0x3c>)
 8007de8:	4809      	ldr	r0, [pc, #36]	; (8007e10 <_Bfree+0x40>)
 8007dea:	218f      	movs	r1, #143	; 0x8f
 8007dec:	f000 fef0 	bl	8008bd0 <__assert_func>
 8007df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df4:	6006      	str	r6, [r0, #0]
 8007df6:	60c6      	str	r6, [r0, #12]
 8007df8:	b13c      	cbz	r4, 8007e0a <_Bfree+0x3a>
 8007dfa:	69eb      	ldr	r3, [r5, #28]
 8007dfc:	6862      	ldr	r2, [r4, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e04:	6021      	str	r1, [r4, #0]
 8007e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	0800900a 	.word	0x0800900a
 8007e10:	080090ea 	.word	0x080090ea

08007e14 <__multadd>:
 8007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e18:	690d      	ldr	r5, [r1, #16]
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	461e      	mov	r6, r3
 8007e20:	f101 0c14 	add.w	ip, r1, #20
 8007e24:	2000      	movs	r0, #0
 8007e26:	f8dc 3000 	ldr.w	r3, [ip]
 8007e2a:	b299      	uxth	r1, r3
 8007e2c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e30:	0c1e      	lsrs	r6, r3, #16
 8007e32:	0c0b      	lsrs	r3, r1, #16
 8007e34:	fb02 3306 	mla	r3, r2, r6, r3
 8007e38:	b289      	uxth	r1, r1
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e40:	4285      	cmp	r5, r0
 8007e42:	f84c 1b04 	str.w	r1, [ip], #4
 8007e46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e4a:	dcec      	bgt.n	8007e26 <__multadd+0x12>
 8007e4c:	b30e      	cbz	r6, 8007e92 <__multadd+0x7e>
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dc19      	bgt.n	8007e88 <__multadd+0x74>
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	4638      	mov	r0, r7
 8007e58:	3101      	adds	r1, #1
 8007e5a:	f7ff ff79 	bl	8007d50 <_Balloc>
 8007e5e:	4680      	mov	r8, r0
 8007e60:	b928      	cbnz	r0, 8007e6e <__multadd+0x5a>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <__multadd+0x84>)
 8007e66:	480d      	ldr	r0, [pc, #52]	; (8007e9c <__multadd+0x88>)
 8007e68:	21ba      	movs	r1, #186	; 0xba
 8007e6a:	f000 feb1 	bl	8008bd0 <__assert_func>
 8007e6e:	6922      	ldr	r2, [r4, #16]
 8007e70:	3202      	adds	r2, #2
 8007e72:	f104 010c 	add.w	r1, r4, #12
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	300c      	adds	r0, #12
 8007e7a:	f7fe fc6d 	bl	8006758 <memcpy>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff ffa5 	bl	8007dd0 <_Bfree>
 8007e86:	4644      	mov	r4, r8
 8007e88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	615e      	str	r6, [r3, #20]
 8007e90:	6125      	str	r5, [r4, #16]
 8007e92:	4620      	mov	r0, r4
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	08009079 	.word	0x08009079
 8007e9c:	080090ea 	.word	0x080090ea

08007ea0 <__s2b>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	4615      	mov	r5, r2
 8007ea8:	461f      	mov	r7, r3
 8007eaa:	2209      	movs	r2, #9
 8007eac:	3308      	adds	r3, #8
 8007eae:	4606      	mov	r6, r0
 8007eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	db09      	blt.n	8007ed0 <__s2b+0x30>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff ff47 	bl	8007d50 <_Balloc>
 8007ec2:	b940      	cbnz	r0, 8007ed6 <__s2b+0x36>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4b19      	ldr	r3, [pc, #100]	; (8007f2c <__s2b+0x8c>)
 8007ec8:	4819      	ldr	r0, [pc, #100]	; (8007f30 <__s2b+0x90>)
 8007eca:	21d3      	movs	r1, #211	; 0xd3
 8007ecc:	f000 fe80 	bl	8008bd0 <__assert_func>
 8007ed0:	0052      	lsls	r2, r2, #1
 8007ed2:	3101      	adds	r1, #1
 8007ed4:	e7f0      	b.n	8007eb8 <__s2b+0x18>
 8007ed6:	9b08      	ldr	r3, [sp, #32]
 8007ed8:	6143      	str	r3, [r0, #20]
 8007eda:	2d09      	cmp	r5, #9
 8007edc:	f04f 0301 	mov.w	r3, #1
 8007ee0:	6103      	str	r3, [r0, #16]
 8007ee2:	dd16      	ble.n	8007f12 <__s2b+0x72>
 8007ee4:	f104 0909 	add.w	r9, r4, #9
 8007ee8:	46c8      	mov	r8, r9
 8007eea:	442c      	add	r4, r5
 8007eec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	3b30      	subs	r3, #48	; 0x30
 8007ef4:	220a      	movs	r2, #10
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7ff ff8c 	bl	8007e14 <__multadd>
 8007efc:	45a0      	cmp	r8, r4
 8007efe:	d1f5      	bne.n	8007eec <__s2b+0x4c>
 8007f00:	f1a5 0408 	sub.w	r4, r5, #8
 8007f04:	444c      	add	r4, r9
 8007f06:	1b2d      	subs	r5, r5, r4
 8007f08:	1963      	adds	r3, r4, r5
 8007f0a:	42bb      	cmp	r3, r7
 8007f0c:	db04      	blt.n	8007f18 <__s2b+0x78>
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	340a      	adds	r4, #10
 8007f14:	2509      	movs	r5, #9
 8007f16:	e7f6      	b.n	8007f06 <__s2b+0x66>
 8007f18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	3b30      	subs	r3, #48	; 0x30
 8007f20:	220a      	movs	r2, #10
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7ff ff76 	bl	8007e14 <__multadd>
 8007f28:	e7ee      	b.n	8007f08 <__s2b+0x68>
 8007f2a:	bf00      	nop
 8007f2c:	08009079 	.word	0x08009079
 8007f30:	080090ea 	.word	0x080090ea

08007f34 <__hi0bits>:
 8007f34:	0c03      	lsrs	r3, r0, #16
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	b9d3      	cbnz	r3, 8007f70 <__hi0bits+0x3c>
 8007f3a:	0400      	lsls	r0, r0, #16
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f42:	bf04      	itt	eq
 8007f44:	0200      	lsleq	r0, r0, #8
 8007f46:	3308      	addeq	r3, #8
 8007f48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f4c:	bf04      	itt	eq
 8007f4e:	0100      	lsleq	r0, r0, #4
 8007f50:	3304      	addeq	r3, #4
 8007f52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f56:	bf04      	itt	eq
 8007f58:	0080      	lsleq	r0, r0, #2
 8007f5a:	3302      	addeq	r3, #2
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	db05      	blt.n	8007f6c <__hi0bits+0x38>
 8007f60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f64:	f103 0301 	add.w	r3, r3, #1
 8007f68:	bf08      	it	eq
 8007f6a:	2320      	moveq	r3, #32
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	4770      	bx	lr
 8007f70:	2300      	movs	r3, #0
 8007f72:	e7e4      	b.n	8007f3e <__hi0bits+0xa>

08007f74 <__lo0bits>:
 8007f74:	6803      	ldr	r3, [r0, #0]
 8007f76:	f013 0207 	ands.w	r2, r3, #7
 8007f7a:	d00c      	beq.n	8007f96 <__lo0bits+0x22>
 8007f7c:	07d9      	lsls	r1, r3, #31
 8007f7e:	d422      	bmi.n	8007fc6 <__lo0bits+0x52>
 8007f80:	079a      	lsls	r2, r3, #30
 8007f82:	bf49      	itett	mi
 8007f84:	085b      	lsrmi	r3, r3, #1
 8007f86:	089b      	lsrpl	r3, r3, #2
 8007f88:	6003      	strmi	r3, [r0, #0]
 8007f8a:	2201      	movmi	r2, #1
 8007f8c:	bf5c      	itt	pl
 8007f8e:	6003      	strpl	r3, [r0, #0]
 8007f90:	2202      	movpl	r2, #2
 8007f92:	4610      	mov	r0, r2
 8007f94:	4770      	bx	lr
 8007f96:	b299      	uxth	r1, r3
 8007f98:	b909      	cbnz	r1, 8007f9e <__lo0bits+0x2a>
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	2210      	movs	r2, #16
 8007f9e:	b2d9      	uxtb	r1, r3
 8007fa0:	b909      	cbnz	r1, 8007fa6 <__lo0bits+0x32>
 8007fa2:	3208      	adds	r2, #8
 8007fa4:	0a1b      	lsrs	r3, r3, #8
 8007fa6:	0719      	lsls	r1, r3, #28
 8007fa8:	bf04      	itt	eq
 8007faa:	091b      	lsreq	r3, r3, #4
 8007fac:	3204      	addeq	r2, #4
 8007fae:	0799      	lsls	r1, r3, #30
 8007fb0:	bf04      	itt	eq
 8007fb2:	089b      	lsreq	r3, r3, #2
 8007fb4:	3202      	addeq	r2, #2
 8007fb6:	07d9      	lsls	r1, r3, #31
 8007fb8:	d403      	bmi.n	8007fc2 <__lo0bits+0x4e>
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	f102 0201 	add.w	r2, r2, #1
 8007fc0:	d003      	beq.n	8007fca <__lo0bits+0x56>
 8007fc2:	6003      	str	r3, [r0, #0]
 8007fc4:	e7e5      	b.n	8007f92 <__lo0bits+0x1e>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	e7e3      	b.n	8007f92 <__lo0bits+0x1e>
 8007fca:	2220      	movs	r2, #32
 8007fcc:	e7e1      	b.n	8007f92 <__lo0bits+0x1e>
	...

08007fd0 <__i2b>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	f7ff febb 	bl	8007d50 <_Balloc>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	b928      	cbnz	r0, 8007fea <__i2b+0x1a>
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <__i2b+0x24>)
 8007fe0:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <__i2b+0x28>)
 8007fe2:	f240 1145 	movw	r1, #325	; 0x145
 8007fe6:	f000 fdf3 	bl	8008bd0 <__assert_func>
 8007fea:	2301      	movs	r3, #1
 8007fec:	6144      	str	r4, [r0, #20]
 8007fee:	6103      	str	r3, [r0, #16]
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08009079 	.word	0x08009079
 8007ff8:	080090ea 	.word	0x080090ea

08007ffc <__multiply>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	4691      	mov	r9, r2
 8008002:	690a      	ldr	r2, [r1, #16]
 8008004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	bfb8      	it	lt
 800800c:	460b      	movlt	r3, r1
 800800e:	460c      	mov	r4, r1
 8008010:	bfbc      	itt	lt
 8008012:	464c      	movlt	r4, r9
 8008014:	4699      	movlt	r9, r3
 8008016:	6927      	ldr	r7, [r4, #16]
 8008018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800801c:	68a3      	ldr	r3, [r4, #8]
 800801e:	6861      	ldr	r1, [r4, #4]
 8008020:	eb07 060a 	add.w	r6, r7, sl
 8008024:	42b3      	cmp	r3, r6
 8008026:	b085      	sub	sp, #20
 8008028:	bfb8      	it	lt
 800802a:	3101      	addlt	r1, #1
 800802c:	f7ff fe90 	bl	8007d50 <_Balloc>
 8008030:	b930      	cbnz	r0, 8008040 <__multiply+0x44>
 8008032:	4602      	mov	r2, r0
 8008034:	4b44      	ldr	r3, [pc, #272]	; (8008148 <__multiply+0x14c>)
 8008036:	4845      	ldr	r0, [pc, #276]	; (800814c <__multiply+0x150>)
 8008038:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800803c:	f000 fdc8 	bl	8008bd0 <__assert_func>
 8008040:	f100 0514 	add.w	r5, r0, #20
 8008044:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008048:	462b      	mov	r3, r5
 800804a:	2200      	movs	r2, #0
 800804c:	4543      	cmp	r3, r8
 800804e:	d321      	bcc.n	8008094 <__multiply+0x98>
 8008050:	f104 0314 	add.w	r3, r4, #20
 8008054:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008058:	f109 0314 	add.w	r3, r9, #20
 800805c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008060:	9202      	str	r2, [sp, #8]
 8008062:	1b3a      	subs	r2, r7, r4
 8008064:	3a15      	subs	r2, #21
 8008066:	f022 0203 	bic.w	r2, r2, #3
 800806a:	3204      	adds	r2, #4
 800806c:	f104 0115 	add.w	r1, r4, #21
 8008070:	428f      	cmp	r7, r1
 8008072:	bf38      	it	cc
 8008074:	2204      	movcc	r2, #4
 8008076:	9201      	str	r2, [sp, #4]
 8008078:	9a02      	ldr	r2, [sp, #8]
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	429a      	cmp	r2, r3
 800807e:	d80c      	bhi.n	800809a <__multiply+0x9e>
 8008080:	2e00      	cmp	r6, #0
 8008082:	dd03      	ble.n	800808c <__multiply+0x90>
 8008084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008088:	2b00      	cmp	r3, #0
 800808a:	d05b      	beq.n	8008144 <__multiply+0x148>
 800808c:	6106      	str	r6, [r0, #16]
 800808e:	b005      	add	sp, #20
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	f843 2b04 	str.w	r2, [r3], #4
 8008098:	e7d8      	b.n	800804c <__multiply+0x50>
 800809a:	f8b3 a000 	ldrh.w	sl, [r3]
 800809e:	f1ba 0f00 	cmp.w	sl, #0
 80080a2:	d024      	beq.n	80080ee <__multiply+0xf2>
 80080a4:	f104 0e14 	add.w	lr, r4, #20
 80080a8:	46a9      	mov	r9, r5
 80080aa:	f04f 0c00 	mov.w	ip, #0
 80080ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080b2:	f8d9 1000 	ldr.w	r1, [r9]
 80080b6:	fa1f fb82 	uxth.w	fp, r2
 80080ba:	b289      	uxth	r1, r1
 80080bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80080c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080c4:	f8d9 2000 	ldr.w	r2, [r9]
 80080c8:	4461      	add	r1, ip
 80080ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80080d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080d6:	b289      	uxth	r1, r1
 80080d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080dc:	4577      	cmp	r7, lr
 80080de:	f849 1b04 	str.w	r1, [r9], #4
 80080e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080e6:	d8e2      	bhi.n	80080ae <__multiply+0xb2>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	f845 c002 	str.w	ip, [r5, r2]
 80080ee:	9a03      	ldr	r2, [sp, #12]
 80080f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080f4:	3304      	adds	r3, #4
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	d021      	beq.n	8008140 <__multiply+0x144>
 80080fc:	6829      	ldr	r1, [r5, #0]
 80080fe:	f104 0c14 	add.w	ip, r4, #20
 8008102:	46ae      	mov	lr, r5
 8008104:	f04f 0a00 	mov.w	sl, #0
 8008108:	f8bc b000 	ldrh.w	fp, [ip]
 800810c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008110:	fb09 220b 	mla	r2, r9, fp, r2
 8008114:	4452      	add	r2, sl
 8008116:	b289      	uxth	r1, r1
 8008118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800811c:	f84e 1b04 	str.w	r1, [lr], #4
 8008120:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008128:	f8be 1000 	ldrh.w	r1, [lr]
 800812c:	fb09 110a 	mla	r1, r9, sl, r1
 8008130:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008134:	4567      	cmp	r7, ip
 8008136:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800813a:	d8e5      	bhi.n	8008108 <__multiply+0x10c>
 800813c:	9a01      	ldr	r2, [sp, #4]
 800813e:	50a9      	str	r1, [r5, r2]
 8008140:	3504      	adds	r5, #4
 8008142:	e799      	b.n	8008078 <__multiply+0x7c>
 8008144:	3e01      	subs	r6, #1
 8008146:	e79b      	b.n	8008080 <__multiply+0x84>
 8008148:	08009079 	.word	0x08009079
 800814c:	080090ea 	.word	0x080090ea

08008150 <__pow5mult>:
 8008150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008154:	4615      	mov	r5, r2
 8008156:	f012 0203 	ands.w	r2, r2, #3
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	d007      	beq.n	8008170 <__pow5mult+0x20>
 8008160:	4c25      	ldr	r4, [pc, #148]	; (80081f8 <__pow5mult+0xa8>)
 8008162:	3a01      	subs	r2, #1
 8008164:	2300      	movs	r3, #0
 8008166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800816a:	f7ff fe53 	bl	8007e14 <__multadd>
 800816e:	4607      	mov	r7, r0
 8008170:	10ad      	asrs	r5, r5, #2
 8008172:	d03d      	beq.n	80081f0 <__pow5mult+0xa0>
 8008174:	69f4      	ldr	r4, [r6, #28]
 8008176:	b97c      	cbnz	r4, 8008198 <__pow5mult+0x48>
 8008178:	2010      	movs	r0, #16
 800817a:	f7ff fd23 	bl	8007bc4 <malloc>
 800817e:	4602      	mov	r2, r0
 8008180:	61f0      	str	r0, [r6, #28]
 8008182:	b928      	cbnz	r0, 8008190 <__pow5mult+0x40>
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <__pow5mult+0xac>)
 8008186:	481e      	ldr	r0, [pc, #120]	; (8008200 <__pow5mult+0xb0>)
 8008188:	f240 11b3 	movw	r1, #435	; 0x1b3
 800818c:	f000 fd20 	bl	8008bd0 <__assert_func>
 8008190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008194:	6004      	str	r4, [r0, #0]
 8008196:	60c4      	str	r4, [r0, #12]
 8008198:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800819c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081a0:	b94c      	cbnz	r4, 80081b6 <__pow5mult+0x66>
 80081a2:	f240 2171 	movw	r1, #625	; 0x271
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff12 	bl	8007fd0 <__i2b>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b2:	4604      	mov	r4, r0
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	f04f 0900 	mov.w	r9, #0
 80081ba:	07eb      	lsls	r3, r5, #31
 80081bc:	d50a      	bpl.n	80081d4 <__pow5mult+0x84>
 80081be:	4639      	mov	r1, r7
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff1a 	bl	8007ffc <__multiply>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4680      	mov	r8, r0
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fdff 	bl	8007dd0 <_Bfree>
 80081d2:	4647      	mov	r7, r8
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	d00b      	beq.n	80081f0 <__pow5mult+0xa0>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	b938      	cbnz	r0, 80081ec <__pow5mult+0x9c>
 80081dc:	4622      	mov	r2, r4
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ff0b 	bl	8007ffc <__multiply>
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	f8c0 9000 	str.w	r9, [r0]
 80081ec:	4604      	mov	r4, r0
 80081ee:	e7e4      	b.n	80081ba <__pow5mult+0x6a>
 80081f0:	4638      	mov	r0, r7
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	bf00      	nop
 80081f8:	08009238 	.word	0x08009238
 80081fc:	0800900a 	.word	0x0800900a
 8008200:	080090ea 	.word	0x080090ea

08008204 <__lshift>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	6849      	ldr	r1, [r1, #4]
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	4607      	mov	r7, r0
 8008216:	4691      	mov	r9, r2
 8008218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800821c:	f108 0601 	add.w	r6, r8, #1
 8008220:	42b3      	cmp	r3, r6
 8008222:	db0b      	blt.n	800823c <__lshift+0x38>
 8008224:	4638      	mov	r0, r7
 8008226:	f7ff fd93 	bl	8007d50 <_Balloc>
 800822a:	4605      	mov	r5, r0
 800822c:	b948      	cbnz	r0, 8008242 <__lshift+0x3e>
 800822e:	4602      	mov	r2, r0
 8008230:	4b28      	ldr	r3, [pc, #160]	; (80082d4 <__lshift+0xd0>)
 8008232:	4829      	ldr	r0, [pc, #164]	; (80082d8 <__lshift+0xd4>)
 8008234:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008238:	f000 fcca 	bl	8008bd0 <__assert_func>
 800823c:	3101      	adds	r1, #1
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	e7ee      	b.n	8008220 <__lshift+0x1c>
 8008242:	2300      	movs	r3, #0
 8008244:	f100 0114 	add.w	r1, r0, #20
 8008248:	f100 0210 	add.w	r2, r0, #16
 800824c:	4618      	mov	r0, r3
 800824e:	4553      	cmp	r3, sl
 8008250:	db33      	blt.n	80082ba <__lshift+0xb6>
 8008252:	6920      	ldr	r0, [r4, #16]
 8008254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008258:	f104 0314 	add.w	r3, r4, #20
 800825c:	f019 091f 	ands.w	r9, r9, #31
 8008260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008264:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008268:	d02b      	beq.n	80082c2 <__lshift+0xbe>
 800826a:	f1c9 0e20 	rsb	lr, r9, #32
 800826e:	468a      	mov	sl, r1
 8008270:	2200      	movs	r2, #0
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	fa00 f009 	lsl.w	r0, r0, r9
 8008278:	4310      	orrs	r0, r2
 800827a:	f84a 0b04 	str.w	r0, [sl], #4
 800827e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008282:	459c      	cmp	ip, r3
 8008284:	fa22 f20e 	lsr.w	r2, r2, lr
 8008288:	d8f3      	bhi.n	8008272 <__lshift+0x6e>
 800828a:	ebac 0304 	sub.w	r3, ip, r4
 800828e:	3b15      	subs	r3, #21
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	3304      	adds	r3, #4
 8008296:	f104 0015 	add.w	r0, r4, #21
 800829a:	4584      	cmp	ip, r0
 800829c:	bf38      	it	cc
 800829e:	2304      	movcc	r3, #4
 80082a0:	50ca      	str	r2, [r1, r3]
 80082a2:	b10a      	cbz	r2, 80082a8 <__lshift+0xa4>
 80082a4:	f108 0602 	add.w	r6, r8, #2
 80082a8:	3e01      	subs	r6, #1
 80082aa:	4638      	mov	r0, r7
 80082ac:	612e      	str	r6, [r5, #16]
 80082ae:	4621      	mov	r1, r4
 80082b0:	f7ff fd8e 	bl	8007dd0 <_Bfree>
 80082b4:	4628      	mov	r0, r5
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80082be:	3301      	adds	r3, #1
 80082c0:	e7c5      	b.n	800824e <__lshift+0x4a>
 80082c2:	3904      	subs	r1, #4
 80082c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80082cc:	459c      	cmp	ip, r3
 80082ce:	d8f9      	bhi.n	80082c4 <__lshift+0xc0>
 80082d0:	e7ea      	b.n	80082a8 <__lshift+0xa4>
 80082d2:	bf00      	nop
 80082d4:	08009079 	.word	0x08009079
 80082d8:	080090ea 	.word	0x080090ea

080082dc <__mcmp>:
 80082dc:	b530      	push	{r4, r5, lr}
 80082de:	6902      	ldr	r2, [r0, #16]
 80082e0:	690c      	ldr	r4, [r1, #16]
 80082e2:	1b12      	subs	r2, r2, r4
 80082e4:	d10e      	bne.n	8008304 <__mcmp+0x28>
 80082e6:	f100 0314 	add.w	r3, r0, #20
 80082ea:	3114      	adds	r1, #20
 80082ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082fc:	42a5      	cmp	r5, r4
 80082fe:	d003      	beq.n	8008308 <__mcmp+0x2c>
 8008300:	d305      	bcc.n	800830e <__mcmp+0x32>
 8008302:	2201      	movs	r2, #1
 8008304:	4610      	mov	r0, r2
 8008306:	bd30      	pop	{r4, r5, pc}
 8008308:	4283      	cmp	r3, r0
 800830a:	d3f3      	bcc.n	80082f4 <__mcmp+0x18>
 800830c:	e7fa      	b.n	8008304 <__mcmp+0x28>
 800830e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008312:	e7f7      	b.n	8008304 <__mcmp+0x28>

08008314 <__mdiff>:
 8008314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	460c      	mov	r4, r1
 800831a:	4606      	mov	r6, r0
 800831c:	4611      	mov	r1, r2
 800831e:	4620      	mov	r0, r4
 8008320:	4690      	mov	r8, r2
 8008322:	f7ff ffdb 	bl	80082dc <__mcmp>
 8008326:	1e05      	subs	r5, r0, #0
 8008328:	d110      	bne.n	800834c <__mdiff+0x38>
 800832a:	4629      	mov	r1, r5
 800832c:	4630      	mov	r0, r6
 800832e:	f7ff fd0f 	bl	8007d50 <_Balloc>
 8008332:	b930      	cbnz	r0, 8008342 <__mdiff+0x2e>
 8008334:	4b3a      	ldr	r3, [pc, #232]	; (8008420 <__mdiff+0x10c>)
 8008336:	4602      	mov	r2, r0
 8008338:	f240 2137 	movw	r1, #567	; 0x237
 800833c:	4839      	ldr	r0, [pc, #228]	; (8008424 <__mdiff+0x110>)
 800833e:	f000 fc47 	bl	8008bd0 <__assert_func>
 8008342:	2301      	movs	r3, #1
 8008344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834c:	bfa4      	itt	ge
 800834e:	4643      	movge	r3, r8
 8008350:	46a0      	movge	r8, r4
 8008352:	4630      	mov	r0, r6
 8008354:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008358:	bfa6      	itte	ge
 800835a:	461c      	movge	r4, r3
 800835c:	2500      	movge	r5, #0
 800835e:	2501      	movlt	r5, #1
 8008360:	f7ff fcf6 	bl	8007d50 <_Balloc>
 8008364:	b920      	cbnz	r0, 8008370 <__mdiff+0x5c>
 8008366:	4b2e      	ldr	r3, [pc, #184]	; (8008420 <__mdiff+0x10c>)
 8008368:	4602      	mov	r2, r0
 800836a:	f240 2145 	movw	r1, #581	; 0x245
 800836e:	e7e5      	b.n	800833c <__mdiff+0x28>
 8008370:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008374:	6926      	ldr	r6, [r4, #16]
 8008376:	60c5      	str	r5, [r0, #12]
 8008378:	f104 0914 	add.w	r9, r4, #20
 800837c:	f108 0514 	add.w	r5, r8, #20
 8008380:	f100 0e14 	add.w	lr, r0, #20
 8008384:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800838c:	f108 0210 	add.w	r2, r8, #16
 8008390:	46f2      	mov	sl, lr
 8008392:	2100      	movs	r1, #0
 8008394:	f859 3b04 	ldr.w	r3, [r9], #4
 8008398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800839c:	fa11 f88b 	uxtah	r8, r1, fp
 80083a0:	b299      	uxth	r1, r3
 80083a2:	0c1b      	lsrs	r3, r3, #16
 80083a4:	eba8 0801 	sub.w	r8, r8, r1
 80083a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083b0:	fa1f f888 	uxth.w	r8, r8
 80083b4:	1419      	asrs	r1, r3, #16
 80083b6:	454e      	cmp	r6, r9
 80083b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083bc:	f84a 3b04 	str.w	r3, [sl], #4
 80083c0:	d8e8      	bhi.n	8008394 <__mdiff+0x80>
 80083c2:	1b33      	subs	r3, r6, r4
 80083c4:	3b15      	subs	r3, #21
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	3304      	adds	r3, #4
 80083cc:	3415      	adds	r4, #21
 80083ce:	42a6      	cmp	r6, r4
 80083d0:	bf38      	it	cc
 80083d2:	2304      	movcc	r3, #4
 80083d4:	441d      	add	r5, r3
 80083d6:	4473      	add	r3, lr
 80083d8:	469e      	mov	lr, r3
 80083da:	462e      	mov	r6, r5
 80083dc:	4566      	cmp	r6, ip
 80083de:	d30e      	bcc.n	80083fe <__mdiff+0xea>
 80083e0:	f10c 0203 	add.w	r2, ip, #3
 80083e4:	1b52      	subs	r2, r2, r5
 80083e6:	f022 0203 	bic.w	r2, r2, #3
 80083ea:	3d03      	subs	r5, #3
 80083ec:	45ac      	cmp	ip, r5
 80083ee:	bf38      	it	cc
 80083f0:	2200      	movcc	r2, #0
 80083f2:	4413      	add	r3, r2
 80083f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80083f8:	b17a      	cbz	r2, 800841a <__mdiff+0x106>
 80083fa:	6107      	str	r7, [r0, #16]
 80083fc:	e7a4      	b.n	8008348 <__mdiff+0x34>
 80083fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8008402:	fa11 f288 	uxtah	r2, r1, r8
 8008406:	1414      	asrs	r4, r2, #16
 8008408:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800840c:	b292      	uxth	r2, r2
 800840e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008412:	f84e 2b04 	str.w	r2, [lr], #4
 8008416:	1421      	asrs	r1, r4, #16
 8008418:	e7e0      	b.n	80083dc <__mdiff+0xc8>
 800841a:	3f01      	subs	r7, #1
 800841c:	e7ea      	b.n	80083f4 <__mdiff+0xe0>
 800841e:	bf00      	nop
 8008420:	08009079 	.word	0x08009079
 8008424:	080090ea 	.word	0x080090ea

08008428 <__ulp>:
 8008428:	b082      	sub	sp, #8
 800842a:	ed8d 0b00 	vstr	d0, [sp]
 800842e:	9a01      	ldr	r2, [sp, #4]
 8008430:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <__ulp+0x48>)
 8008432:	4013      	ands	r3, r2
 8008434:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc08      	bgt.n	800844e <__ulp+0x26>
 800843c:	425b      	negs	r3, r3
 800843e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008442:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008446:	da04      	bge.n	8008452 <__ulp+0x2a>
 8008448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800844c:	4113      	asrs	r3, r2
 800844e:	2200      	movs	r2, #0
 8008450:	e008      	b.n	8008464 <__ulp+0x3c>
 8008452:	f1a2 0314 	sub.w	r3, r2, #20
 8008456:	2b1e      	cmp	r3, #30
 8008458:	bfda      	itte	le
 800845a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800845e:	40da      	lsrle	r2, r3
 8008460:	2201      	movgt	r2, #1
 8008462:	2300      	movs	r3, #0
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	ec41 0b10 	vmov	d0, r0, r1
 800846c:	b002      	add	sp, #8
 800846e:	4770      	bx	lr
 8008470:	7ff00000 	.word	0x7ff00000

08008474 <__b2d>:
 8008474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008478:	6906      	ldr	r6, [r0, #16]
 800847a:	f100 0814 	add.w	r8, r0, #20
 800847e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008482:	1f37      	subs	r7, r6, #4
 8008484:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008488:	4610      	mov	r0, r2
 800848a:	f7ff fd53 	bl	8007f34 <__hi0bits>
 800848e:	f1c0 0320 	rsb	r3, r0, #32
 8008492:	280a      	cmp	r0, #10
 8008494:	600b      	str	r3, [r1, #0]
 8008496:	491b      	ldr	r1, [pc, #108]	; (8008504 <__b2d+0x90>)
 8008498:	dc15      	bgt.n	80084c6 <__b2d+0x52>
 800849a:	f1c0 0c0b 	rsb	ip, r0, #11
 800849e:	fa22 f30c 	lsr.w	r3, r2, ip
 80084a2:	45b8      	cmp	r8, r7
 80084a4:	ea43 0501 	orr.w	r5, r3, r1
 80084a8:	bf34      	ite	cc
 80084aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80084ae:	2300      	movcs	r3, #0
 80084b0:	3015      	adds	r0, #21
 80084b2:	fa02 f000 	lsl.w	r0, r2, r0
 80084b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80084ba:	4303      	orrs	r3, r0
 80084bc:	461c      	mov	r4, r3
 80084be:	ec45 4b10 	vmov	d0, r4, r5
 80084c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c6:	45b8      	cmp	r8, r7
 80084c8:	bf3a      	itte	cc
 80084ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80084ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80084d2:	2300      	movcs	r3, #0
 80084d4:	380b      	subs	r0, #11
 80084d6:	d012      	beq.n	80084fe <__b2d+0x8a>
 80084d8:	f1c0 0120 	rsb	r1, r0, #32
 80084dc:	fa23 f401 	lsr.w	r4, r3, r1
 80084e0:	4082      	lsls	r2, r0
 80084e2:	4322      	orrs	r2, r4
 80084e4:	4547      	cmp	r7, r8
 80084e6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80084ea:	bf8c      	ite	hi
 80084ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80084f0:	2200      	movls	r2, #0
 80084f2:	4083      	lsls	r3, r0
 80084f4:	40ca      	lsrs	r2, r1
 80084f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80084fa:	4313      	orrs	r3, r2
 80084fc:	e7de      	b.n	80084bc <__b2d+0x48>
 80084fe:	ea42 0501 	orr.w	r5, r2, r1
 8008502:	e7db      	b.n	80084bc <__b2d+0x48>
 8008504:	3ff00000 	.word	0x3ff00000

08008508 <__d2b>:
 8008508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800850c:	460f      	mov	r7, r1
 800850e:	2101      	movs	r1, #1
 8008510:	ec59 8b10 	vmov	r8, r9, d0
 8008514:	4616      	mov	r6, r2
 8008516:	f7ff fc1b 	bl	8007d50 <_Balloc>
 800851a:	4604      	mov	r4, r0
 800851c:	b930      	cbnz	r0, 800852c <__d2b+0x24>
 800851e:	4602      	mov	r2, r0
 8008520:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <__d2b+0xac>)
 8008522:	4825      	ldr	r0, [pc, #148]	; (80085b8 <__d2b+0xb0>)
 8008524:	f240 310f 	movw	r1, #783	; 0x30f
 8008528:	f000 fb52 	bl	8008bd0 <__assert_func>
 800852c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008534:	bb2d      	cbnz	r5, 8008582 <__d2b+0x7a>
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	f1b8 0300 	subs.w	r3, r8, #0
 800853c:	d026      	beq.n	800858c <__d2b+0x84>
 800853e:	4668      	mov	r0, sp
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	f7ff fd17 	bl	8007f74 <__lo0bits>
 8008546:	e9dd 1200 	ldrd	r1, r2, [sp]
 800854a:	b1e8      	cbz	r0, 8008588 <__d2b+0x80>
 800854c:	f1c0 0320 	rsb	r3, r0, #32
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	430b      	orrs	r3, r1
 8008556:	40c2      	lsrs	r2, r0
 8008558:	6163      	str	r3, [r4, #20]
 800855a:	9201      	str	r2, [sp, #4]
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	61a3      	str	r3, [r4, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	bf14      	ite	ne
 8008564:	2202      	movne	r2, #2
 8008566:	2201      	moveq	r2, #1
 8008568:	6122      	str	r2, [r4, #16]
 800856a:	b1bd      	cbz	r5, 800859c <__d2b+0x94>
 800856c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008570:	4405      	add	r5, r0
 8008572:	603d      	str	r5, [r7, #0]
 8008574:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008578:	6030      	str	r0, [r6, #0]
 800857a:	4620      	mov	r0, r4
 800857c:	b003      	add	sp, #12
 800857e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008586:	e7d6      	b.n	8008536 <__d2b+0x2e>
 8008588:	6161      	str	r1, [r4, #20]
 800858a:	e7e7      	b.n	800855c <__d2b+0x54>
 800858c:	a801      	add	r0, sp, #4
 800858e:	f7ff fcf1 	bl	8007f74 <__lo0bits>
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	6163      	str	r3, [r4, #20]
 8008596:	3020      	adds	r0, #32
 8008598:	2201      	movs	r2, #1
 800859a:	e7e5      	b.n	8008568 <__d2b+0x60>
 800859c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085a4:	6038      	str	r0, [r7, #0]
 80085a6:	6918      	ldr	r0, [r3, #16]
 80085a8:	f7ff fcc4 	bl	8007f34 <__hi0bits>
 80085ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085b0:	e7e2      	b.n	8008578 <__d2b+0x70>
 80085b2:	bf00      	nop
 80085b4:	08009079 	.word	0x08009079
 80085b8:	080090ea 	.word	0x080090ea

080085bc <__ratio>:
 80085bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	4688      	mov	r8, r1
 80085c2:	4669      	mov	r1, sp
 80085c4:	4681      	mov	r9, r0
 80085c6:	f7ff ff55 	bl	8008474 <__b2d>
 80085ca:	a901      	add	r1, sp, #4
 80085cc:	4640      	mov	r0, r8
 80085ce:	ec55 4b10 	vmov	r4, r5, d0
 80085d2:	f7ff ff4f 	bl	8008474 <__b2d>
 80085d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80085de:	eba3 0c02 	sub.w	ip, r3, r2
 80085e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80085ec:	ec51 0b10 	vmov	r0, r1, d0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bfd6      	itet	le
 80085f4:	460a      	movle	r2, r1
 80085f6:	462a      	movgt	r2, r5
 80085f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80085fc:	468b      	mov	fp, r1
 80085fe:	462f      	mov	r7, r5
 8008600:	bfd4      	ite	le
 8008602:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008606:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800860a:	4620      	mov	r0, r4
 800860c:	ee10 2a10 	vmov	r2, s0
 8008610:	465b      	mov	r3, fp
 8008612:	4639      	mov	r1, r7
 8008614:	f7f8 f92a 	bl	800086c <__aeabi_ddiv>
 8008618:	ec41 0b10 	vmov	d0, r0, r1
 800861c:	b003      	add	sp, #12
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008622 <__copybits>:
 8008622:	3901      	subs	r1, #1
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	1149      	asrs	r1, r1, #5
 8008628:	6914      	ldr	r4, [r2, #16]
 800862a:	3101      	adds	r1, #1
 800862c:	f102 0314 	add.w	r3, r2, #20
 8008630:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008634:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008638:	1f05      	subs	r5, r0, #4
 800863a:	42a3      	cmp	r3, r4
 800863c:	d30c      	bcc.n	8008658 <__copybits+0x36>
 800863e:	1aa3      	subs	r3, r4, r2
 8008640:	3b11      	subs	r3, #17
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	3211      	adds	r2, #17
 8008648:	42a2      	cmp	r2, r4
 800864a:	bf88      	it	hi
 800864c:	2300      	movhi	r3, #0
 800864e:	4418      	add	r0, r3
 8008650:	2300      	movs	r3, #0
 8008652:	4288      	cmp	r0, r1
 8008654:	d305      	bcc.n	8008662 <__copybits+0x40>
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	f853 6b04 	ldr.w	r6, [r3], #4
 800865c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008660:	e7eb      	b.n	800863a <__copybits+0x18>
 8008662:	f840 3b04 	str.w	r3, [r0], #4
 8008666:	e7f4      	b.n	8008652 <__copybits+0x30>

08008668 <__any_on>:
 8008668:	f100 0214 	add.w	r2, r0, #20
 800866c:	6900      	ldr	r0, [r0, #16]
 800866e:	114b      	asrs	r3, r1, #5
 8008670:	4298      	cmp	r0, r3
 8008672:	b510      	push	{r4, lr}
 8008674:	db11      	blt.n	800869a <__any_on+0x32>
 8008676:	dd0a      	ble.n	800868e <__any_on+0x26>
 8008678:	f011 011f 	ands.w	r1, r1, #31
 800867c:	d007      	beq.n	800868e <__any_on+0x26>
 800867e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008682:	fa24 f001 	lsr.w	r0, r4, r1
 8008686:	fa00 f101 	lsl.w	r1, r0, r1
 800868a:	428c      	cmp	r4, r1
 800868c:	d10b      	bne.n	80086a6 <__any_on+0x3e>
 800868e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008692:	4293      	cmp	r3, r2
 8008694:	d803      	bhi.n	800869e <__any_on+0x36>
 8008696:	2000      	movs	r0, #0
 8008698:	bd10      	pop	{r4, pc}
 800869a:	4603      	mov	r3, r0
 800869c:	e7f7      	b.n	800868e <__any_on+0x26>
 800869e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d0f5      	beq.n	8008692 <__any_on+0x2a>
 80086a6:	2001      	movs	r0, #1
 80086a8:	e7f6      	b.n	8008698 <__any_on+0x30>

080086aa <__ascii_wctomb>:
 80086aa:	b149      	cbz	r1, 80086c0 <__ascii_wctomb+0x16>
 80086ac:	2aff      	cmp	r2, #255	; 0xff
 80086ae:	bf85      	ittet	hi
 80086b0:	238a      	movhi	r3, #138	; 0x8a
 80086b2:	6003      	strhi	r3, [r0, #0]
 80086b4:	700a      	strbls	r2, [r1, #0]
 80086b6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80086ba:	bf98      	it	ls
 80086bc:	2001      	movls	r0, #1
 80086be:	4770      	bx	lr
 80086c0:	4608      	mov	r0, r1
 80086c2:	4770      	bx	lr

080086c4 <__sfputc_r>:
 80086c4:	6893      	ldr	r3, [r2, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	b410      	push	{r4}
 80086cc:	6093      	str	r3, [r2, #8]
 80086ce:	da08      	bge.n	80086e2 <__sfputc_r+0x1e>
 80086d0:	6994      	ldr	r4, [r2, #24]
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	db01      	blt.n	80086da <__sfputc_r+0x16>
 80086d6:	290a      	cmp	r1, #10
 80086d8:	d103      	bne.n	80086e2 <__sfputc_r+0x1e>
 80086da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086de:	f7fd bf02 	b.w	80064e6 <__swbuf_r>
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	1c58      	adds	r0, r3, #1
 80086e6:	6010      	str	r0, [r2, #0]
 80086e8:	7019      	strb	r1, [r3, #0]
 80086ea:	4608      	mov	r0, r1
 80086ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <__sfputs_r>:
 80086f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	4614      	mov	r4, r2
 80086fa:	18d5      	adds	r5, r2, r3
 80086fc:	42ac      	cmp	r4, r5
 80086fe:	d101      	bne.n	8008704 <__sfputs_r+0x12>
 8008700:	2000      	movs	r0, #0
 8008702:	e007      	b.n	8008714 <__sfputs_r+0x22>
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	463a      	mov	r2, r7
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ffda 	bl	80086c4 <__sfputc_r>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d1f3      	bne.n	80086fc <__sfputs_r+0xa>
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008718 <_vfiprintf_r>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	460d      	mov	r5, r1
 800871e:	b09d      	sub	sp, #116	; 0x74
 8008720:	4614      	mov	r4, r2
 8008722:	4698      	mov	r8, r3
 8008724:	4606      	mov	r6, r0
 8008726:	b118      	cbz	r0, 8008730 <_vfiprintf_r+0x18>
 8008728:	6a03      	ldr	r3, [r0, #32]
 800872a:	b90b      	cbnz	r3, 8008730 <_vfiprintf_r+0x18>
 800872c:	f7fd fdf4 	bl	8006318 <__sinit>
 8008730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d405      	bmi.n	8008742 <_vfiprintf_r+0x2a>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	059a      	lsls	r2, r3, #22
 800873a:	d402      	bmi.n	8008742 <_vfiprintf_r+0x2a>
 800873c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873e:	f7fe f809 	bl	8006754 <__retarget_lock_acquire_recursive>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	071b      	lsls	r3, r3, #28
 8008746:	d501      	bpl.n	800874c <_vfiprintf_r+0x34>
 8008748:	692b      	ldr	r3, [r5, #16]
 800874a:	b99b      	cbnz	r3, 8008774 <_vfiprintf_r+0x5c>
 800874c:	4629      	mov	r1, r5
 800874e:	4630      	mov	r0, r6
 8008750:	f7fd ff06 	bl	8006560 <__swsetup_r>
 8008754:	b170      	cbz	r0, 8008774 <_vfiprintf_r+0x5c>
 8008756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008758:	07dc      	lsls	r4, r3, #31
 800875a:	d504      	bpl.n	8008766 <_vfiprintf_r+0x4e>
 800875c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008760:	b01d      	add	sp, #116	; 0x74
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	0598      	lsls	r0, r3, #22
 800876a:	d4f7      	bmi.n	800875c <_vfiprintf_r+0x44>
 800876c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800876e:	f7fd fff2 	bl	8006756 <__retarget_lock_release_recursive>
 8008772:	e7f3      	b.n	800875c <_vfiprintf_r+0x44>
 8008774:	2300      	movs	r3, #0
 8008776:	9309      	str	r3, [sp, #36]	; 0x24
 8008778:	2320      	movs	r3, #32
 800877a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800877e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008782:	2330      	movs	r3, #48	; 0x30
 8008784:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008938 <_vfiprintf_r+0x220>
 8008788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800878c:	f04f 0901 	mov.w	r9, #1
 8008790:	4623      	mov	r3, r4
 8008792:	469a      	mov	sl, r3
 8008794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008798:	b10a      	cbz	r2, 800879e <_vfiprintf_r+0x86>
 800879a:	2a25      	cmp	r2, #37	; 0x25
 800879c:	d1f9      	bne.n	8008792 <_vfiprintf_r+0x7a>
 800879e:	ebba 0b04 	subs.w	fp, sl, r4
 80087a2:	d00b      	beq.n	80087bc <_vfiprintf_r+0xa4>
 80087a4:	465b      	mov	r3, fp
 80087a6:	4622      	mov	r2, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ffa1 	bl	80086f2 <__sfputs_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	f000 80a9 	beq.w	8008908 <_vfiprintf_r+0x1f0>
 80087b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087b8:	445a      	add	r2, fp
 80087ba:	9209      	str	r2, [sp, #36]	; 0x24
 80087bc:	f89a 3000 	ldrb.w	r3, [sl]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80a1 	beq.w	8008908 <_vfiprintf_r+0x1f0>
 80087c6:	2300      	movs	r3, #0
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d0:	f10a 0a01 	add.w	sl, sl, #1
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	9307      	str	r3, [sp, #28]
 80087d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087dc:	931a      	str	r3, [sp, #104]	; 0x68
 80087de:	4654      	mov	r4, sl
 80087e0:	2205      	movs	r2, #5
 80087e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e6:	4854      	ldr	r0, [pc, #336]	; (8008938 <_vfiprintf_r+0x220>)
 80087e8:	f7f7 fd02 	bl	80001f0 <memchr>
 80087ec:	9a04      	ldr	r2, [sp, #16]
 80087ee:	b9d8      	cbnz	r0, 8008828 <_vfiprintf_r+0x110>
 80087f0:	06d1      	lsls	r1, r2, #27
 80087f2:	bf44      	itt	mi
 80087f4:	2320      	movmi	r3, #32
 80087f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fa:	0713      	lsls	r3, r2, #28
 80087fc:	bf44      	itt	mi
 80087fe:	232b      	movmi	r3, #43	; 0x2b
 8008800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008804:	f89a 3000 	ldrb.w	r3, [sl]
 8008808:	2b2a      	cmp	r3, #42	; 0x2a
 800880a:	d015      	beq.n	8008838 <_vfiprintf_r+0x120>
 800880c:	9a07      	ldr	r2, [sp, #28]
 800880e:	4654      	mov	r4, sl
 8008810:	2000      	movs	r0, #0
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4621      	mov	r1, r4
 8008818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881c:	3b30      	subs	r3, #48	; 0x30
 800881e:	2b09      	cmp	r3, #9
 8008820:	d94d      	bls.n	80088be <_vfiprintf_r+0x1a6>
 8008822:	b1b0      	cbz	r0, 8008852 <_vfiprintf_r+0x13a>
 8008824:	9207      	str	r2, [sp, #28]
 8008826:	e014      	b.n	8008852 <_vfiprintf_r+0x13a>
 8008828:	eba0 0308 	sub.w	r3, r0, r8
 800882c:	fa09 f303 	lsl.w	r3, r9, r3
 8008830:	4313      	orrs	r3, r2
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	46a2      	mov	sl, r4
 8008836:	e7d2      	b.n	80087de <_vfiprintf_r+0xc6>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	1d19      	adds	r1, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	9103      	str	r1, [sp, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	bfbb      	ittet	lt
 8008844:	425b      	neglt	r3, r3
 8008846:	f042 0202 	orrlt.w	r2, r2, #2
 800884a:	9307      	strge	r3, [sp, #28]
 800884c:	9307      	strlt	r3, [sp, #28]
 800884e:	bfb8      	it	lt
 8008850:	9204      	strlt	r2, [sp, #16]
 8008852:	7823      	ldrb	r3, [r4, #0]
 8008854:	2b2e      	cmp	r3, #46	; 0x2e
 8008856:	d10c      	bne.n	8008872 <_vfiprintf_r+0x15a>
 8008858:	7863      	ldrb	r3, [r4, #1]
 800885a:	2b2a      	cmp	r3, #42	; 0x2a
 800885c:	d134      	bne.n	80088c8 <_vfiprintf_r+0x1b0>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	1d1a      	adds	r2, r3, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	9203      	str	r2, [sp, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bfb8      	it	lt
 800886a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800886e:	3402      	adds	r4, #2
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008948 <_vfiprintf_r+0x230>
 8008876:	7821      	ldrb	r1, [r4, #0]
 8008878:	2203      	movs	r2, #3
 800887a:	4650      	mov	r0, sl
 800887c:	f7f7 fcb8 	bl	80001f0 <memchr>
 8008880:	b138      	cbz	r0, 8008892 <_vfiprintf_r+0x17a>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	eba0 000a 	sub.w	r0, r0, sl
 8008888:	2240      	movs	r2, #64	; 0x40
 800888a:	4082      	lsls	r2, r0
 800888c:	4313      	orrs	r3, r2
 800888e:	3401      	adds	r4, #1
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	4829      	ldr	r0, [pc, #164]	; (800893c <_vfiprintf_r+0x224>)
 8008898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800889c:	2206      	movs	r2, #6
 800889e:	f7f7 fca7 	bl	80001f0 <memchr>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d03f      	beq.n	8008926 <_vfiprintf_r+0x20e>
 80088a6:	4b26      	ldr	r3, [pc, #152]	; (8008940 <_vfiprintf_r+0x228>)
 80088a8:	bb1b      	cbnz	r3, 80088f2 <_vfiprintf_r+0x1da>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	3307      	adds	r3, #7
 80088ae:	f023 0307 	bic.w	r3, r3, #7
 80088b2:	3308      	adds	r3, #8
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	443b      	add	r3, r7
 80088ba:	9309      	str	r3, [sp, #36]	; 0x24
 80088bc:	e768      	b.n	8008790 <_vfiprintf_r+0x78>
 80088be:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c2:	460c      	mov	r4, r1
 80088c4:	2001      	movs	r0, #1
 80088c6:	e7a6      	b.n	8008816 <_vfiprintf_r+0xfe>
 80088c8:	2300      	movs	r3, #0
 80088ca:	3401      	adds	r4, #1
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	4619      	mov	r1, r3
 80088d0:	f04f 0c0a 	mov.w	ip, #10
 80088d4:	4620      	mov	r0, r4
 80088d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088da:	3a30      	subs	r2, #48	; 0x30
 80088dc:	2a09      	cmp	r2, #9
 80088de:	d903      	bls.n	80088e8 <_vfiprintf_r+0x1d0>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0c6      	beq.n	8008872 <_vfiprintf_r+0x15a>
 80088e4:	9105      	str	r1, [sp, #20]
 80088e6:	e7c4      	b.n	8008872 <_vfiprintf_r+0x15a>
 80088e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ec:	4604      	mov	r4, r0
 80088ee:	2301      	movs	r3, #1
 80088f0:	e7f0      	b.n	80088d4 <_vfiprintf_r+0x1bc>
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	462a      	mov	r2, r5
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <_vfiprintf_r+0x22c>)
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7fd f8cb 	bl	8005a98 <_printf_float>
 8008902:	4607      	mov	r7, r0
 8008904:	1c78      	adds	r0, r7, #1
 8008906:	d1d6      	bne.n	80088b6 <_vfiprintf_r+0x19e>
 8008908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	d405      	bmi.n	800891a <_vfiprintf_r+0x202>
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d402      	bmi.n	800891a <_vfiprintf_r+0x202>
 8008914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008916:	f7fd ff1e 	bl	8006756 <__retarget_lock_release_recursive>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	065b      	lsls	r3, r3, #25
 800891e:	f53f af1d 	bmi.w	800875c <_vfiprintf_r+0x44>
 8008922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008924:	e71c      	b.n	8008760 <_vfiprintf_r+0x48>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <_vfiprintf_r+0x22c>)
 800892e:	a904      	add	r1, sp, #16
 8008930:	4630      	mov	r0, r6
 8008932:	f7fd fb55 	bl	8005fe0 <_printf_i>
 8008936:	e7e4      	b.n	8008902 <_vfiprintf_r+0x1ea>
 8008938:	08009244 	.word	0x08009244
 800893c:	0800924e 	.word	0x0800924e
 8008940:	08005a99 	.word	0x08005a99
 8008944:	080086f3 	.word	0x080086f3
 8008948:	0800924a 	.word	0x0800924a

0800894c <__sflush_r>:
 800894c:	898a      	ldrh	r2, [r1, #12]
 800894e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008952:	4605      	mov	r5, r0
 8008954:	0710      	lsls	r0, r2, #28
 8008956:	460c      	mov	r4, r1
 8008958:	d458      	bmi.n	8008a0c <__sflush_r+0xc0>
 800895a:	684b      	ldr	r3, [r1, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	dc05      	bgt.n	800896c <__sflush_r+0x20>
 8008960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	dc02      	bgt.n	800896c <__sflush_r+0x20>
 8008966:	2000      	movs	r0, #0
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896e:	2e00      	cmp	r6, #0
 8008970:	d0f9      	beq.n	8008966 <__sflush_r+0x1a>
 8008972:	2300      	movs	r3, #0
 8008974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008978:	682f      	ldr	r7, [r5, #0]
 800897a:	6a21      	ldr	r1, [r4, #32]
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	d032      	beq.n	80089e6 <__sflush_r+0x9a>
 8008980:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	075a      	lsls	r2, r3, #29
 8008986:	d505      	bpl.n	8008994 <__sflush_r+0x48>
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	1ac0      	subs	r0, r0, r3
 800898c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800898e:	b10b      	cbz	r3, 8008994 <__sflush_r+0x48>
 8008990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008992:	1ac0      	subs	r0, r0, r3
 8008994:	2300      	movs	r3, #0
 8008996:	4602      	mov	r2, r0
 8008998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899a:	6a21      	ldr	r1, [r4, #32]
 800899c:	4628      	mov	r0, r5
 800899e:	47b0      	blx	r6
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	d106      	bne.n	80089b4 <__sflush_r+0x68>
 80089a6:	6829      	ldr	r1, [r5, #0]
 80089a8:	291d      	cmp	r1, #29
 80089aa:	d82b      	bhi.n	8008a04 <__sflush_r+0xb8>
 80089ac:	4a29      	ldr	r2, [pc, #164]	; (8008a54 <__sflush_r+0x108>)
 80089ae:	410a      	asrs	r2, r1
 80089b0:	07d6      	lsls	r6, r2, #31
 80089b2:	d427      	bmi.n	8008a04 <__sflush_r+0xb8>
 80089b4:	2200      	movs	r2, #0
 80089b6:	6062      	str	r2, [r4, #4]
 80089b8:	04d9      	lsls	r1, r3, #19
 80089ba:	6922      	ldr	r2, [r4, #16]
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	d504      	bpl.n	80089ca <__sflush_r+0x7e>
 80089c0:	1c42      	adds	r2, r0, #1
 80089c2:	d101      	bne.n	80089c8 <__sflush_r+0x7c>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b903      	cbnz	r3, 80089ca <__sflush_r+0x7e>
 80089c8:	6560      	str	r0, [r4, #84]	; 0x54
 80089ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089cc:	602f      	str	r7, [r5, #0]
 80089ce:	2900      	cmp	r1, #0
 80089d0:	d0c9      	beq.n	8008966 <__sflush_r+0x1a>
 80089d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089d6:	4299      	cmp	r1, r3
 80089d8:	d002      	beq.n	80089e0 <__sflush_r+0x94>
 80089da:	4628      	mov	r0, r5
 80089dc:	f7fe fd4e 	bl	800747c <_free_r>
 80089e0:	2000      	movs	r0, #0
 80089e2:	6360      	str	r0, [r4, #52]	; 0x34
 80089e4:	e7c0      	b.n	8008968 <__sflush_r+0x1c>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b0      	blx	r6
 80089ec:	1c41      	adds	r1, r0, #1
 80089ee:	d1c8      	bne.n	8008982 <__sflush_r+0x36>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c5      	beq.n	8008982 <__sflush_r+0x36>
 80089f6:	2b1d      	cmp	r3, #29
 80089f8:	d001      	beq.n	80089fe <__sflush_r+0xb2>
 80089fa:	2b16      	cmp	r3, #22
 80089fc:	d101      	bne.n	8008a02 <__sflush_r+0xb6>
 80089fe:	602f      	str	r7, [r5, #0]
 8008a00:	e7b1      	b.n	8008966 <__sflush_r+0x1a>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e7ad      	b.n	8008968 <__sflush_r+0x1c>
 8008a0c:	690f      	ldr	r7, [r1, #16]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	d0a9      	beq.n	8008966 <__sflush_r+0x1a>
 8008a12:	0793      	lsls	r3, r2, #30
 8008a14:	680e      	ldr	r6, [r1, #0]
 8008a16:	bf08      	it	eq
 8008a18:	694b      	ldreq	r3, [r1, #20]
 8008a1a:	600f      	str	r7, [r1, #0]
 8008a1c:	bf18      	it	ne
 8008a1e:	2300      	movne	r3, #0
 8008a20:	eba6 0807 	sub.w	r8, r6, r7
 8008a24:	608b      	str	r3, [r1, #8]
 8008a26:	f1b8 0f00 	cmp.w	r8, #0
 8008a2a:	dd9c      	ble.n	8008966 <__sflush_r+0x1a>
 8008a2c:	6a21      	ldr	r1, [r4, #32]
 8008a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a30:	4643      	mov	r3, r8
 8008a32:	463a      	mov	r2, r7
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b0      	blx	r6
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dc06      	bgt.n	8008a4a <__sflush_r+0xfe>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a48:	e78e      	b.n	8008968 <__sflush_r+0x1c>
 8008a4a:	4407      	add	r7, r0
 8008a4c:	eba8 0800 	sub.w	r8, r8, r0
 8008a50:	e7e9      	b.n	8008a26 <__sflush_r+0xda>
 8008a52:	bf00      	nop
 8008a54:	dfbffffe 	.word	0xdfbffffe

08008a58 <_fflush_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	690b      	ldr	r3, [r1, #16]
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	b913      	cbnz	r3, 8008a68 <_fflush_r+0x10>
 8008a62:	2500      	movs	r5, #0
 8008a64:	4628      	mov	r0, r5
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	b118      	cbz	r0, 8008a72 <_fflush_r+0x1a>
 8008a6a:	6a03      	ldr	r3, [r0, #32]
 8008a6c:	b90b      	cbnz	r3, 8008a72 <_fflush_r+0x1a>
 8008a6e:	f7fd fc53 	bl	8006318 <__sinit>
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0f3      	beq.n	8008a62 <_fflush_r+0xa>
 8008a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a7c:	07d0      	lsls	r0, r2, #31
 8008a7e:	d404      	bmi.n	8008a8a <_fflush_r+0x32>
 8008a80:	0599      	lsls	r1, r3, #22
 8008a82:	d402      	bmi.n	8008a8a <_fflush_r+0x32>
 8008a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a86:	f7fd fe65 	bl	8006754 <__retarget_lock_acquire_recursive>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	f7ff ff5d 	bl	800894c <__sflush_r>
 8008a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a94:	07da      	lsls	r2, r3, #31
 8008a96:	4605      	mov	r5, r0
 8008a98:	d4e4      	bmi.n	8008a64 <_fflush_r+0xc>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	059b      	lsls	r3, r3, #22
 8008a9e:	d4e1      	bmi.n	8008a64 <_fflush_r+0xc>
 8008aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa2:	f7fd fe58 	bl	8006756 <__retarget_lock_release_recursive>
 8008aa6:	e7dd      	b.n	8008a64 <_fflush_r+0xc>

08008aa8 <__swhatbuf_r>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	460c      	mov	r4, r1
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	b096      	sub	sp, #88	; 0x58
 8008ab4:	4615      	mov	r5, r2
 8008ab6:	461e      	mov	r6, r3
 8008ab8:	da0d      	bge.n	8008ad6 <__swhatbuf_r+0x2e>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ac0:	f04f 0100 	mov.w	r1, #0
 8008ac4:	bf0c      	ite	eq
 8008ac6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008aca:	2340      	movne	r3, #64	; 0x40
 8008acc:	2000      	movs	r0, #0
 8008ace:	6031      	str	r1, [r6, #0]
 8008ad0:	602b      	str	r3, [r5, #0]
 8008ad2:	b016      	add	sp, #88	; 0x58
 8008ad4:	bd70      	pop	{r4, r5, r6, pc}
 8008ad6:	466a      	mov	r2, sp
 8008ad8:	f000 f848 	bl	8008b6c <_fstat_r>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	dbec      	blt.n	8008aba <__swhatbuf_r+0x12>
 8008ae0:	9901      	ldr	r1, [sp, #4]
 8008ae2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ae6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008aea:	4259      	negs	r1, r3
 8008aec:	4159      	adcs	r1, r3
 8008aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008af2:	e7eb      	b.n	8008acc <__swhatbuf_r+0x24>

08008af4 <__smakebuf_r>:
 8008af4:	898b      	ldrh	r3, [r1, #12]
 8008af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008af8:	079d      	lsls	r5, r3, #30
 8008afa:	4606      	mov	r6, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	d507      	bpl.n	8008b10 <__smakebuf_r+0x1c>
 8008b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	6163      	str	r3, [r4, #20]
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	ab01      	add	r3, sp, #4
 8008b12:	466a      	mov	r2, sp
 8008b14:	f7ff ffc8 	bl	8008aa8 <__swhatbuf_r>
 8008b18:	9900      	ldr	r1, [sp, #0]
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff f879 	bl	8007c14 <_malloc_r>
 8008b22:	b948      	cbnz	r0, 8008b38 <__smakebuf_r+0x44>
 8008b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d4ef      	bmi.n	8008b0c <__smakebuf_r+0x18>
 8008b2c:	f023 0303 	bic.w	r3, r3, #3
 8008b30:	f043 0302 	orr.w	r3, r3, #2
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	e7e3      	b.n	8008b00 <__smakebuf_r+0xc>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	6020      	str	r0, [r4, #0]
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	6163      	str	r3, [r4, #20]
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	6120      	str	r0, [r4, #16]
 8008b4a:	b15b      	cbz	r3, 8008b64 <__smakebuf_r+0x70>
 8008b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f81d 	bl	8008b90 <_isatty_r>
 8008b56:	b128      	cbz	r0, 8008b64 <__smakebuf_r+0x70>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	431d      	orrs	r5, r3
 8008b68:	81a5      	strh	r5, [r4, #12]
 8008b6a:	e7cf      	b.n	8008b0c <__smakebuf_r+0x18>

08008b6c <_fstat_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	; (8008b8c <_fstat_r+0x20>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	4611      	mov	r1, r2
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f7f9 f946 	bl	8001e0a <_fstat>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d102      	bne.n	8008b88 <_fstat_r+0x1c>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b103      	cbz	r3, 8008b88 <_fstat_r+0x1c>
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200009fc 	.word	0x200009fc

08008b90 <_isatty_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_isatty_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f9 f945 	bl	8001e2a <_isatty>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_isatty_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_isatty_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	200009fc 	.word	0x200009fc

08008bb0 <_sbrk_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d06      	ldr	r5, [pc, #24]	; (8008bcc <_sbrk_r+0x1c>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f9 f94e 	bl	8001e5c <_sbrk>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_sbrk_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_sbrk_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	200009fc 	.word	0x200009fc

08008bd0 <__assert_func>:
 8008bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <__assert_func+0x2c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4605      	mov	r5, r0
 8008bdc:	68d8      	ldr	r0, [r3, #12]
 8008bde:	b14c      	cbz	r4, 8008bf4 <__assert_func+0x24>
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <__assert_func+0x30>)
 8008be2:	9100      	str	r1, [sp, #0]
 8008be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008be8:	4906      	ldr	r1, [pc, #24]	; (8008c04 <__assert_func+0x34>)
 8008bea:	462b      	mov	r3, r5
 8008bec:	f000 f824 	bl	8008c38 <fiprintf>
 8008bf0:	f000 f834 	bl	8008c5c <abort>
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <__assert_func+0x38>)
 8008bf6:	461c      	mov	r4, r3
 8008bf8:	e7f3      	b.n	8008be2 <__assert_func+0x12>
 8008bfa:	bf00      	nop
 8008bfc:	200001d8 	.word	0x200001d8
 8008c00:	08009255 	.word	0x08009255
 8008c04:	08009262 	.word	0x08009262
 8008c08:	08009290 	.word	0x08009290

08008c0c <_calloc_r>:
 8008c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c0e:	fba1 2402 	umull	r2, r4, r1, r2
 8008c12:	b94c      	cbnz	r4, 8008c28 <_calloc_r+0x1c>
 8008c14:	4611      	mov	r1, r2
 8008c16:	9201      	str	r2, [sp, #4]
 8008c18:	f7fe fffc 	bl	8007c14 <_malloc_r>
 8008c1c:	9a01      	ldr	r2, [sp, #4]
 8008c1e:	4605      	mov	r5, r0
 8008c20:	b930      	cbnz	r0, 8008c30 <_calloc_r+0x24>
 8008c22:	4628      	mov	r0, r5
 8008c24:	b003      	add	sp, #12
 8008c26:	bd30      	pop	{r4, r5, pc}
 8008c28:	220c      	movs	r2, #12
 8008c2a:	6002      	str	r2, [r0, #0]
 8008c2c:	2500      	movs	r5, #0
 8008c2e:	e7f8      	b.n	8008c22 <_calloc_r+0x16>
 8008c30:	4621      	mov	r1, r4
 8008c32:	f7fd fced 	bl	8006610 <memset>
 8008c36:	e7f4      	b.n	8008c22 <_calloc_r+0x16>

08008c38 <fiprintf>:
 8008c38:	b40e      	push	{r1, r2, r3}
 8008c3a:	b503      	push	{r0, r1, lr}
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	ab03      	add	r3, sp, #12
 8008c40:	4805      	ldr	r0, [pc, #20]	; (8008c58 <fiprintf+0x20>)
 8008c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c46:	6800      	ldr	r0, [r0, #0]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	f7ff fd65 	bl	8008718 <_vfiprintf_r>
 8008c4e:	b002      	add	sp, #8
 8008c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c54:	b003      	add	sp, #12
 8008c56:	4770      	bx	lr
 8008c58:	200001d8 	.word	0x200001d8

08008c5c <abort>:
 8008c5c:	b508      	push	{r3, lr}
 8008c5e:	2006      	movs	r0, #6
 8008c60:	f000 f82c 	bl	8008cbc <raise>
 8008c64:	2001      	movs	r0, #1
 8008c66:	f7f9 f89d 	bl	8001da4 <_exit>

08008c6a <_raise_r>:
 8008c6a:	291f      	cmp	r1, #31
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	d904      	bls.n	8008c7e <_raise_r+0x14>
 8008c74:	2316      	movs	r3, #22
 8008c76:	6003      	str	r3, [r0, #0]
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
 8008c7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008c80:	b112      	cbz	r2, 8008c88 <_raise_r+0x1e>
 8008c82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c86:	b94b      	cbnz	r3, 8008c9c <_raise_r+0x32>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 f831 	bl	8008cf0 <_getpid_r>
 8008c8e:	462a      	mov	r2, r5
 8008c90:	4601      	mov	r1, r0
 8008c92:	4620      	mov	r0, r4
 8008c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c98:	f000 b818 	b.w	8008ccc <_kill_r>
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d00a      	beq.n	8008cb6 <_raise_r+0x4c>
 8008ca0:	1c59      	adds	r1, r3, #1
 8008ca2:	d103      	bne.n	8008cac <_raise_r+0x42>
 8008ca4:	2316      	movs	r3, #22
 8008ca6:	6003      	str	r3, [r0, #0]
 8008ca8:	2001      	movs	r0, #1
 8008caa:	e7e7      	b.n	8008c7c <_raise_r+0x12>
 8008cac:	2400      	movs	r4, #0
 8008cae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	4798      	blx	r3
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e7e0      	b.n	8008c7c <_raise_r+0x12>
	...

08008cbc <raise>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <raise+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7ff bfd2 	b.w	8008c6a <_raise_r>
 8008cc6:	bf00      	nop
 8008cc8:	200001d8 	.word	0x200001d8

08008ccc <_kill_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <_kill_r+0x20>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7f9 f853 	bl	8001d84 <_kill>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_kill_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_kill_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	200009fc 	.word	0x200009fc

08008cf0 <_getpid_r>:
 8008cf0:	f7f9 b840 	b.w	8001d74 <_getpid>

08008cf4 <_init>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr

08008d00 <_fini>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr
