
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004afc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d30  08004d30  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d38  08004d38  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000770  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007d8  200007d8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d46e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021d8  00000000  00000000  0002d549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b90  00000000  00000000  0002f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008dc  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025476  00000000  00000000  00030b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dabc  00000000  00000000  0005600a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2207  00000000  00000000  00063ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000376c  00000000  00000000  00145cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0014943c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c94 	.word	0x08004c94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08004c94 	.word	0x08004c94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to uart debug
int _write(int file, char *ptr, int len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&UART_HANDLE, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_write+0x28>)
 80005a4:	f002 fddb 	bl	800315e <HAL_UART_Transmit>
    return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000012c 	.word	0x2000012c

080005b8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	new_value = 1;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000680 	.word	0x20000680

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fcc8 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f836 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f976 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 f954 	bl	8000894 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f8fa 	bl	80007e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f922 	bl	8000838 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 80005f4:	f000 f896 	bl	8000724 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) read_value_buffer, 2);
 80005f8:	2202      	movs	r2, #2
 80005fa:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0x64>)
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <main+0x68>)
 80005fe:	f000 fd91 	bl	8001124 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (new_value){
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0x6c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d013      	beq.n	8000632 <main+0x5a>
    	printf("Read value0: 0x%.3x\r\n", read_value_buffer[0]);
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <main+0x64>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0x70>)
 8000612:	f003 fccb 	bl	8003fac <iprintf>
    	printf("Read value1: 0x%.3x\r\n", read_value_buffer[1]);
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0x64>)
 8000618:	885b      	ldrh	r3, [r3, #2]
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <main+0x74>)
 800061e:	f003 fcc5 	bl	8003fac <iprintf>
    	new_value = 0;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <main+0x6c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
    	HAL_ADC_Start_DMA(&hadc3, read_value_buffer, 2);
 8000628:	2202      	movs	r2, #2
 800062a:	4904      	ldr	r1, [pc, #16]	; (800063c <main+0x64>)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x68>)
 800062e:	f000 fd79 	bl	8001124 <HAL_ADC_Start_DMA>
    }
	HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 fd0d 	bl	8001054 <HAL_Delay>
    if (new_value){
 800063a:	e7e2      	b.n	8000602 <main+0x2a>
 800063c:	2000067c 	.word	0x2000067c
 8000640:	20000084 	.word	0x20000084
 8000644:	20000680 	.word	0x20000680
 8000648:	08004cac 	.word	0x08004cac
 800064c:	08004cc4 	.word	0x08004cc4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fcf9 	bl	8004056 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f85d 	bl	8002794 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9ea 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fabe 	bl	8002c84 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9d3 	bl	8000ab8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000738:	4a28      	ldr	r2, [pc, #160]	; (80007dc <MX_ADC3_Init+0xb8>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_ADC3_Init+0xb4>)
 800073e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000742:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_ADC3_Init+0xb4>)
 800074c:	2201      	movs	r2, #1
 800074e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_ADC3_Init+0xbc>)
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_ADC3_Init+0xb4>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000772:	2202      	movs	r2, #2
 8000774:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_ADC3_Init+0xb4>)
 8000786:	f000 fc89 	bl	800109c <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f992 	bl	8000ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000794:	2303      	movs	r3, #3
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ADC3_Init+0xb4>)
 80007a6:	f000 fde1 	bl	800136c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f982 	bl	8000ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007b4:	230a      	movs	r3, #10
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_ADC3_Init+0xb4>)
 80007c2:	f000 fdd3 	bl	800136c <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80007cc:	f000 f974 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40012200 	.word	0x40012200
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART3_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 800081c:	f002 fc52 	bl	80030c4 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f947 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000012c 	.word	0x2000012c
 8000834:	40004800 	.word	0x40004800

08000838 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000842:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2204      	movs	r2, #4
 8000848:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2202      	movs	r2, #2
 800084e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2202      	movs	r2, #2
 800085a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2201      	movs	r2, #1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	f001 fe6d 	bl	800255a <HAL_PCD_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f917 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000170 	.word	0x20000170

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <MX_DMA_Init+0x3c>)
 80008a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DMA_Init+0x3c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2038      	movs	r0, #56	; 0x38
 80008bc:	f001 f8e1 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008c0:	2038      	movs	r0, #56	; 0x38
 80008c2:	f001 f8fa 	bl	8001aba <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b6d      	ldr	r3, [pc, #436]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a6c      	ldr	r2, [pc, #432]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b6a      	ldr	r3, [pc, #424]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b66      	ldr	r3, [pc, #408]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a65      	ldr	r2, [pc, #404]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b63      	ldr	r3, [pc, #396]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b5f      	ldr	r3, [pc, #380]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5e      	ldr	r2, [pc, #376]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b5c      	ldr	r3, [pc, #368]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a57      	ldr	r2, [pc, #348]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a50      	ldr	r2, [pc, #320]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a49      	ldr	r2, [pc, #292]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <MX_GPIO_Init+0x1d0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f244 0181 	movw	r1, #16513	; 0x4081
 8000998:	4843      	ldr	r0, [pc, #268]	; (8000aa8 <MX_GPIO_Init+0x1d4>)
 800099a:	f001 fdc5 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4842      	ldr	r0, [pc, #264]	; (8000aac <MX_GPIO_Init+0x1d8>)
 80009a4:	f001 fdc0 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	483c      	ldr	r0, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x1dc>)
 80009c0:	f001 fc06 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009c4:	2332      	movs	r3, #50	; 0x32
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d4:	230b      	movs	r3, #11
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4834      	ldr	r0, [pc, #208]	; (8000ab0 <MX_GPIO_Init+0x1dc>)
 80009e0:	f001 fbf6 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009e4:	2386      	movs	r3, #134	; 0x86
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f4:	230b      	movs	r3, #11
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000a00:	f001 fbe6 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a04:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0x1d4>)
 8000a1e:	f001 fbd7 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a34:	230b      	movs	r3, #11
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481a      	ldr	r0, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0x1d4>)
 8000a40:	f001 fbc6 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_GPIO_Init+0x1d8>)
 8000a5c:	f001 fbb8 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x1d8>)
 8000a74:	f001 fbac 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0x1d8>)
 8000a96:	f001 fb9b 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	; 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <HAL_ADC_MspInit+0x110>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d171      	bne.n	8000c1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a3a      	ldr	r2, [pc, #232]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a33      	ldr	r2, [pc, #204]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2c      	ldr	r2, [pc, #176]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <HAL_ADC_MspInit+0x114>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN10
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4823      	ldr	r0, [pc, #140]	; (8000c2c <HAL_ADC_MspInit+0x118>)
 8000b9e:	f001 fb17 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <HAL_ADC_MspInit+0x11c>)
 8000bb6:	f001 fb0b 	bl	80021d0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <HAL_ADC_MspInit+0x124>)
 8000bbe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bc6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000c00:	f000 ff76 	bl	8001af0 <HAL_DMA_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000c0a:	f7ff ff55 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_ADC_MspInit+0x120>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40012200 	.word	0x40012200
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	200000cc 	.word	0x200000cc
 8000c38:	40026410 	.word	0x40026410

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_UART_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12c      	bne.n	8000cb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_UART_MspInit+0x8c>)
 8000cb4:	f001 fa8c 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020c00 	.word	0x40020c00

08000ccc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cec:	d13f      	bne.n	8000d6e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4815      	ldr	r0, [pc, #84]	; (8000d7c <HAL_PCD_MspInit+0xb0>)
 8000d28:	f001 fa52 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480e      	ldr	r0, [pc, #56]	; (8000d7c <HAL_PCD_MspInit+0xb0>)
 8000d42:	f001 fa45 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6353      	str	r3, [r2, #52]	; 0x34
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_PCD_MspInit+0xac>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f922 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA2_Stream0_IRQHandler+0x10>)
 8000dda:	f000 ff8f 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000cc 	.word	0x200000cc

08000de8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
  }

  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f003 f91a 	bl	80040f4 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20030000 	.word	0x20030000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000684 	.word	0x20000684
 8000ef4:	200007d8 	.word	0x200007d8

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f003 f8d9 	bl	8004100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fb43 	bl	80005d8 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f60:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 8000f64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f68:	200007d8 	.word	0x200007d8

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 fd67 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fd8e 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fd7f 	bl	8001ad6 <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	f000 fd47 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	20000688 	.word	0x20000688

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000688 	.word	0x20000688

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffde 	bl	800103c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008

0800109c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e033      	b.n	800111a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fd2a 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d118      	bne.n	800110c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e2:	f023 0302 	bic.w	r3, r3, #2
 80010e6:	f043 0202 	orr.w	r2, r3, #2
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fa6e 	bl	80015d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f023 0303 	bic.w	r3, r3, #3
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
 800110a:	e001      	b.n	8001110 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_ADC_Start_DMA+0x1e>
 800113e:	2302      	movs	r3, #2
 8001140:	e0e9      	b.n	8001316 <HAL_ADC_Start_DMA+0x1f2>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d018      	beq.n	800118a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <HAL_ADC_Start_DMA+0x1fc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6d      	ldr	r2, [pc, #436]	; (8001324 <HAL_ADC_Start_DMA+0x200>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9a      	lsrs	r2, r3, #18
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800117c:	e002      	b.n	8001184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3b01      	subs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f9      	bne.n	800117e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001198:	d107      	bne.n	80011aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 80a1 	bne.w	80012fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f8:	d106      	bne.n	8001208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f023 0206 	bic.w	r2, r3, #6
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
 8001206:	e002      	b.n	800120e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_ADC_Start_DMA+0x204>)
 8001218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	4a43      	ldr	r2, [pc, #268]	; (800132c <HAL_ADC_Start_DMA+0x208>)
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	4a42      	ldr	r2, [pc, #264]	; (8001330 <HAL_ADC_Start_DMA+0x20c>)
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	4a41      	ldr	r2, [pc, #260]	; (8001334 <HAL_ADC_Start_DMA+0x210>)
 8001230:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800123a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800124a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800125a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	334c      	adds	r3, #76	; 0x4c
 8001266:	4619      	mov	r1, r3
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f000 fcee 	bl	8001c4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2b00      	cmp	r3, #0
 800127a:	d12a      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <HAL_ADC_Start_DMA+0x214>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d015      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x18e>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2c      	ldr	r2, [pc, #176]	; (800133c <HAL_ADC_Start_DMA+0x218>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d105      	bne.n	800129c <HAL_ADC_Start_DMA+0x178>
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_ADC_Start_DMA+0x204>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00a      	beq.n	80012b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_ADC_Start_DMA+0x21c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d136      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_ADC_Start_DMA+0x204>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d130      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d129      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e020      	b.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_ADC_Start_DMA+0x214>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d11b      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d114      	bne.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e00b      	b.n	8001314 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83
 8001328:	40012300 	.word	0x40012300
 800132c:	080017c9 	.word	0x080017c9
 8001330:	08001883 	.word	0x08001883
 8001334:	0800189f 	.word	0x0800189f
 8001338:	40012000 	.word	0x40012000
 800133c:	40012100 	.word	0x40012100
 8001340:	40012200 	.word	0x40012200

08001344 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1c>
 8001384:	2302      	movs	r3, #2
 8001386:	e113      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x244>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b09      	cmp	r3, #9
 8001396:	d925      	bls.n	80013e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	3b1e      	subs	r3, #30
 80013ae:	2207      	movs	r2, #7
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43da      	mvns	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	400a      	ands	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68d9      	ldr	r1, [r3, #12]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	4603      	mov	r3, r0
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4403      	add	r3, r0
 80013d6:	3b1e      	subs	r3, #30
 80013d8:	409a      	lsls	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	e022      	b.n	800142a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	2207      	movs	r2, #7
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6919      	ldr	r1, [r3, #16]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	4603      	mov	r3, r0
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4403      	add	r3, r0
 8001420:	409a      	lsls	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d824      	bhi.n	800147c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b05      	subs	r3, #5
 8001444:	221f      	movs	r2, #31
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	400a      	ands	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	3b05      	subs	r3, #5
 800146e:	fa00 f203 	lsl.w	r2, r0, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
 800147a:	e04c      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d824      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b23      	subs	r3, #35	; 0x23
 8001496:	221f      	movs	r2, #31
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43da      	mvns	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	400a      	ands	r2, r1
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b23      	subs	r3, #35	; 0x23
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
 80014cc:	e023      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b41      	subs	r3, #65	; 0x41
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b41      	subs	r3, #65	; 0x41
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_ADC_ConfigChannel+0x250>)
 8001518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_ADC_ConfigChannel+0x254>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d10f      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d8>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b12      	cmp	r3, #18
 800152a:	d10b      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_ADC_ConfigChannel+0x254>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12b      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x23a>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_ADC_ConfigChannel+0x258>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d003      	beq.n	8001560 <HAL_ADC_ConfigChannel+0x1f4>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b11      	cmp	r3, #17
 800155e:	d122      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_ADC_ConfigChannel+0x258>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d111      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_ADC_ConfigChannel+0x260>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	0c9a      	lsrs	r2, r3, #18
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40012300 	.word	0x40012300
 80015c0:	40012000 	.word	0x40012000
 80015c4:	10000012 	.word	0x10000012
 80015c8:	20000000 	.word	0x20000000
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d8:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <ADC_Init+0x1f0>)
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	021a      	lsls	r2, r3, #8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <ADC_Init+0x1f4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e00f      	b.n	80016ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0202 	bic.w	r2, r2, #2
 80016dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	005a      	lsls	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01b      	beq.n	8001734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800170a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800171a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	3b01      	subs	r3, #1
 8001728:	035a      	lsls	r2, r3, #13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	e007      	b.n	8001744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	3b01      	subs	r3, #1
 8001760:	051a      	lsls	r2, r3, #20
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001786:	025a      	lsls	r2, r3, #9
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	029a      	lsls	r2, r3, #10
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40012300 	.word	0x40012300
 80017c4:	0f000001 	.word	0x0f000001

080017c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d13c      	bne.n	800185c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d12b      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001800:	2b00      	cmp	r3, #0
 8001802:	d127      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800181c:	2b00      	cmp	r3, #0
 800181e:	d119      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0220 	bic.w	r2, r2, #32
 800182e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7fe feaf 	bl	80005b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800185a:	e00e      	b.n	800187a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff fd75 	bl	8001358 <HAL_ADC_ErrorCallback>
}
 800186e:	e004      	b.n	800187a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fd57 	bl	8001344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f043 0204 	orr.w	r2, r3, #4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fd4a 	bl	8001358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff3e 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff31 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fa9e 	bl	800103c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e099      	b.n	8001c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2c:	e00f      	b.n	8001b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2e:	f7ff fa85 	bl	800103c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d908      	bls.n	8001b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2203      	movs	r2, #3
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e078      	b.n	8001c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e8      	bne.n	8001b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <HAL_DMA_Init+0x158>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d107      	bne.n	8001bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f023 0307 	bic.w	r3, r3, #7
 8001bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d117      	bne.n	8001c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fa6f 	bl	80020d8 <DMA_CheckFifoParam>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e016      	b.n	8001c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fa26 	bl	800206c <DMA_CalcBaseAndBitshift>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	223f      	movs	r2, #63	; 0x3f
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	f010803f 	.word	0xf010803f

08001c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Start_IT+0x26>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e040      	b.n	8001cf4 <HAL_DMA_Start_IT+0xa8>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d12f      	bne.n	8001ce6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f9b8 	bl	8002010 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	223f      	movs	r2, #63	; 0x3f
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0216 	orr.w	r2, r2, #22
 8001cba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0208 	orr.w	r2, r2, #8
 8001cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e005      	b.n	8001cf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d08:	4b8e      	ldr	r3, [pc, #568]	; (8001f44 <HAL_DMA_IRQHandler+0x248>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a8e      	ldr	r2, [pc, #568]	; (8001f48 <HAL_DMA_IRQHandler+0x24c>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2208      	movs	r2, #8
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0204 	bic.w	r2, r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2208      	movs	r2, #8
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2204      	movs	r2, #4
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2210      	movs	r2, #16
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03c      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2210      	movs	r2, #16
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d024      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e01f      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e016      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2220      	movs	r2, #32
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 808f 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8087 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2220      	movs	r2, #32
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d136      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0216 	bic.w	r2, r2, #22
 8001eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x1da>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0208 	bic.w	r2, r2, #8
 8001ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	223f      	movs	r2, #63	; 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07e      	beq.n	8002008 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
        }
        return;
 8001f12:	e079      	b.n	8002008 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e02c      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e01e      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0210 	bic.w	r2, r2, #16
 8001f7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d032      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d307      	bcc.n	8001fe4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f2      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x2cc>
 8001fe2:	e000      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e000      	b.n	800200a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002008:	bf00      	nop
    }
  }
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800202c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d108      	bne.n	8002050 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800204e:	e007      	b.n	8002060 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3b10      	subs	r3, #16
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <DMA_CalcBaseAndBitshift+0x64>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d909      	bls.n	80020ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	1d1a      	adds	r2, r3, #4
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58
 80020ac:	e007      	b.n	80020be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	aaaaaaab 	.word	0xaaaaaaab
 80020d4:	08004cf4 	.word	0x08004cf4

080020d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d11f      	bne.n	8002132 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d856      	bhi.n	80021a6 <DMA_CheckFifoParam+0xce>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <DMA_CheckFifoParam+0x28>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002111 	.word	0x08002111
 8002104:	08002123 	.word	0x08002123
 8002108:	08002111 	.word	0x08002111
 800210c:	080021a7 	.word	0x080021a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d046      	beq.n	80021aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002120:	e043      	b.n	80021aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800212a:	d140      	bne.n	80021ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002130:	e03d      	b.n	80021ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	d121      	bne.n	8002180 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d837      	bhi.n	80021b2 <DMA_CheckFifoParam+0xda>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <DMA_CheckFifoParam+0x70>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	08002159 	.word	0x08002159
 800214c:	0800215f 	.word	0x0800215f
 8002150:	08002159 	.word	0x08002159
 8002154:	08002171 	.word	0x08002171
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      break;
 800215c:	e030      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d025      	beq.n	80021b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216e:	e022      	b.n	80021b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800217e:	e01c      	b.n	80021ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d903      	bls.n	800218e <DMA_CheckFifoParam+0xb6>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d003      	beq.n	8002194 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800218c:	e018      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      break;
 8002192:	e015      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      break;
 80021a4:	e00b      	b.n	80021be <DMA_CheckFifoParam+0xe6>
      break;
 80021a6:	bf00      	nop
 80021a8:	e00a      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e008      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
 80021b0:	e006      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021b2:	bf00      	nop
 80021b4:	e004      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
 80021b8:	e002      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
    }
  } 
  
  return status; 
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e177      	b.n	80024dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 8166 	bne.w	80024d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80c0 	beq.w	80024d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_GPIO_Init+0x324>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <HAL_GPIO_Init+0x328>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_GPIO_Init+0x32c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d037      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d031      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_GPIO_Init+0x334>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a55      	ldr	r2, [pc, #340]	; (8002508 <HAL_GPIO_Init+0x338>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a54      	ldr	r2, [pc, #336]	; (800250c <HAL_GPIO_Init+0x33c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a53      	ldr	r2, [pc, #332]	; (8002510 <HAL_GPIO_Init+0x340>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x344>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a51      	ldr	r2, [pc, #324]	; (8002518 <HAL_GPIO_Init+0x348>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_GPIO_Init+0x34c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x350>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x21a>
 80023e6:	2309      	movs	r3, #9
 80023e8:	e012      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ea:	230a      	movs	r3, #10
 80023ec:	e010      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x240>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x240>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x240>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <HAL_GPIO_Init+0x328>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HAL_GPIO_Init+0x354>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800247c:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_GPIO_Init+0x354>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_GPIO_Init+0x354>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_GPIO_Init+0x354>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae84 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021000 	.word	0x40021000
 8002510:	40021400 	.word	0x40021400
 8002514:	40021800 	.word	0x40021800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40022000 	.word	0x40022000
 8002520:	40022400 	.word	0x40022400
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800255a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255c:	b08f      	sub	sp, #60	; 0x3c
 800255e:	af0a      	add	r7, sp, #40	; 0x28
 8002560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e10f      	b.n	800278c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fba0 	bl	8000ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f9ad 	bl	800390a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	687e      	ldr	r6, [r7, #4]
 80025b8:	466d      	mov	r5, sp
 80025ba:	f106 0410 	add.w	r4, r6, #16
 80025be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ce:	1d33      	adds	r3, r6, #4
 80025d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d2:	6838      	ldr	r0, [r7, #0]
 80025d4:	f001 f938 	bl	8003848 <USB_CoreInit>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0d0      	b.n	800278c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f99b 	bl	800392c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e04a      	b.n	8002692 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	333d      	adds	r3, #61	; 0x3d
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	333c      	adds	r3, #60	; 0x3c
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	b298      	uxth	r0, r3
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3344      	adds	r3, #68	; 0x44
 8002638:	4602      	mov	r2, r0
 800263a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3340      	adds	r3, #64	; 0x40
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3348      	adds	r3, #72	; 0x48
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334c      	adds	r3, #76	; 0x4c
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3354      	adds	r3, #84	; 0x54
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3301      	adds	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3af      	bcc.n	80025fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e044      	b.n	800272c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	3301      	adds	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d3b5      	bcc.n	80026a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	687e      	ldr	r6, [r7, #4]
 800273e:	466d      	mov	r5, sp
 8002740:	f106 0410 	add.w	r4, r6, #16
 8002744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002750:	e885 0003 	stmia.w	r5, {r0, r1}
 8002754:	1d33      	adds	r3, r6, #4
 8002756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002758:	6838      	ldr	r0, [r7, #0]
 800275a:	f001 f933 	bl	80039c4 <USB_DevInit>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e00d      	b.n	800278c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fafe 	bl	8003d86 <USB_DevDisconnect>

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e267      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d00c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d112      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b7e      	ldr	r3, [pc, #504]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e242      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a75      	ldr	r2, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6f      	ldr	r2, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6c      	ldr	r2, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b69      	ldr	r3, [pc, #420]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fbf6 	bl	800103c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fbf2 	bl	800103c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e207      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fbe2 	bl	800103c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fbde 	bl	800103c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1f3      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1c7      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4937      	ldr	r1, [pc, #220]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x244>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe fb97 	bl	800103c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002912:	f7fe fb93 	bl	800103c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e1a8      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4925      	ldr	r1, [pc, #148]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RCC_OscConfig+0x244>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fb76 	bl	800103c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7fe fb72 	bl	800103c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e187      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d036      	beq.n	80029ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_RCC_OscConfig+0x248>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fb56 	bl	800103c <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fb52 	bl	800103c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e167      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
 80029b2:	e01b      	b.n	80029ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_OscConfig+0x248>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fb3f 	bl	800103c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	e00e      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe fb3b 	bl	800103c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d907      	bls.n	80029e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e150      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	42470000 	.word	0x42470000
 80029dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ea      	bne.n	80029c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8097 	beq.w	8002b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a7c      	ldr	r2, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b77      	ldr	r3, [pc, #476]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4b74      	ldr	r3, [pc, #464]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a73      	ldr	r2, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe fafb 	bl	800103c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe faf7 	bl	800103c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e10c      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2ea>
 8002a70:	4b64      	ldr	r3, [pc, #400]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a63      	ldr	r2, [pc, #396]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x324>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x30c>
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x324>
 8002aa0:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a57      	ldr	r2, [pc, #348]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a54      	ldr	r2, [pc, #336]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fabc 	bl	800103c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fab8 	bl	800103c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0cb      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ee      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x334>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7fe faa6 	bl	800103c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe faa2 	bl	800103c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0b5      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ee      	bne.n	8002af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a38      	ldr	r2, [pc, #224]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a1 	beq.w	8002c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d05c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d141      	bne.n	8002bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fa76 	bl	800103c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fa72 	bl	800103c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e087      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	491b      	ldr	r1, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fa4b 	bl	800103c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe fa47 	bl	800103c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e05c      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x416>
 8002bc8:	e054      	b.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fa34 	bl	800103c <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fa30 	bl	800103c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e045      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x444>
 8002bf6:	e03d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e038      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x4ec>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d028      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d121      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0cc      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d90c      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e067      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4934      	ldr	r1, [pc, #208]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fe f962 	bl	800103c <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe f95e 	bl	800103c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d20c      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe f8c2 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08004cdc 	.word	0x08004cdc
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b094      	sub	sp, #80	; 0x50
 8002e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e60:	2300      	movs	r3, #0
 8002e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e68:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d00d      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x40>
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	f200 80e1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e82:	e0db      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b73      	ldr	r3, [pc, #460]	; (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e88:	e0db      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e90:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eba:	2300      	movs	r3, #0
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4621      	mov	r1, r4
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	6139      	str	r1, [r7, #16]
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4651      	mov	r1, sl
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4651      	mov	r1, sl
 8002f04:	ebb2 0801 	subs.w	r8, r2, r1
 8002f08:	4659      	mov	r1, fp
 8002f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f22:	4690      	mov	r8, r2
 8002f24:	4699      	mov	r9, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	eb18 0303 	adds.w	r3, r8, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	462b      	mov	r3, r5
 8002f30:	eb49 0303 	adc.w	r3, r9, r3
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f42:	4629      	mov	r1, r5
 8002f44:	024b      	lsls	r3, r1, #9
 8002f46:	4621      	mov	r1, r4
 8002f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	024a      	lsls	r2, r1, #9
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f56:	2200      	movs	r2, #0
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f60:	f7fd f996 	bl	8000290 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	e058      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	4611      	mov	r1, r2
 8002f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f88:	4642      	mov	r2, r8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	00eb      	lsls	r3, r5, #3
 8002fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	18e3      	adds	r3, r4, r3
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	61fa      	str	r2, [r7, #28]
 8003010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003014:	f7fd f93c 	bl	8000290 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003044:	4618      	mov	r0, r3
 8003046:	3750      	adds	r7, #80	; 0x50
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08004cec 	.word	0x08004cec

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffdc 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0b5b      	lsrs	r3, r3, #13
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08004cec 	.word	0x08004cec

080030c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e03f      	b.n	8003156 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fda6 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f929 	bl	8003360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800313c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b08a      	sub	sp, #40	; 0x28
 8003162:	af02      	add	r7, sp, #8
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d17c      	bne.n	8003278 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_Transmit+0x2c>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e075      	b.n	800327a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_UART_Transmit+0x3e>
 8003198:	2302      	movs	r3, #2
 800319a:	e06e      	b.n	800327a <HAL_UART_Transmit+0x11c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2221      	movs	r2, #33	; 0x21
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b2:	f7fd ff43 	bl	800103c <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x82>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031f0:	e02a      	b.n	8003248 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f840 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e036      	b.n	800327a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3302      	adds	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e007      	b.n	800323a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3301      	adds	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1cf      	bne.n	80031f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f810 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e006      	b.n	800327a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b090      	sub	sp, #64	; 0x40
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003292:	e050      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800329a:	d04c      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800329c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a2:	f7fd fecb 	bl	800103c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d241      	bcs.n	8003336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d2:	637a      	str	r2, [r7, #52]	; 0x34
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e5      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	613b      	str	r3, [r7, #16]
   return(result);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003306:	623a      	str	r2, [r7, #32]
 8003308:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	69f9      	ldr	r1, [r7, #28]
 800330c:	6a3a      	ldr	r2, [r7, #32]
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	61bb      	str	r3, [r7, #24]
   return(result);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e00f      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	429a      	cmp	r2, r3
 8003352:	d09f      	beq.n	8003294 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3740      	adds	r7, #64	; 0x40
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b0c0      	sub	sp, #256	; 0x100
 8003366:	af00      	add	r7, sp, #0
 8003368:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	68d9      	ldr	r1, [r3, #12]
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	ea40 0301 	orr.w	r3, r0, r1
 8003388:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	431a      	orrs	r2, r3
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	431a      	orrs	r2, r3
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033b8:	f021 010c 	bic.w	r1, r1, #12
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033c6:	430b      	orrs	r3, r1
 80033c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	6999      	ldr	r1, [r3, #24]
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	ea40 0301 	orr.w	r3, r0, r1
 80033e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b8f      	ldr	r3, [pc, #572]	; (800362c <UART_SetConfig+0x2cc>)
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d005      	beq.n	8003400 <UART_SetConfig+0xa0>
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b8d      	ldr	r3, [pc, #564]	; (8003630 <UART_SetConfig+0x2d0>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d104      	bne.n	800340a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003400:	f7ff fe4c 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8003404:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003408:	e003      	b.n	8003412 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800340a:	f7ff fe33 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 800340e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341c:	f040 810c 	bne.w	8003638 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800342a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800342e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	1891      	adds	r1, r2, r2
 8003438:	65b9      	str	r1, [r7, #88]	; 0x58
 800343a:	415b      	adcs	r3, r3
 800343c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003442:	4621      	mov	r1, r4
 8003444:	eb12 0801 	adds.w	r8, r2, r1
 8003448:	4629      	mov	r1, r5
 800344a:	eb43 0901 	adc.w	r9, r3, r1
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800345e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003462:	4690      	mov	r8, r2
 8003464:	4699      	mov	r9, r3
 8003466:	4623      	mov	r3, r4
 8003468:	eb18 0303 	adds.w	r3, r8, r3
 800346c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003470:	462b      	mov	r3, r5
 8003472:	eb49 0303 	adc.w	r3, r9, r3
 8003476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003486:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800348a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800348e:	460b      	mov	r3, r1
 8003490:	18db      	adds	r3, r3, r3
 8003492:	653b      	str	r3, [r7, #80]	; 0x50
 8003494:	4613      	mov	r3, r2
 8003496:	eb42 0303 	adc.w	r3, r2, r3
 800349a:	657b      	str	r3, [r7, #84]	; 0x54
 800349c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034a4:	f7fc fef4 	bl	8000290 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4b61      	ldr	r3, [pc, #388]	; (8003634 <UART_SetConfig+0x2d4>)
 80034ae:	fba3 2302 	umull	r2, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	011c      	lsls	r4, r3, #4
 80034b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034c8:	4642      	mov	r2, r8
 80034ca:	464b      	mov	r3, r9
 80034cc:	1891      	adds	r1, r2, r2
 80034ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80034d0:	415b      	adcs	r3, r3
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034d8:	4641      	mov	r1, r8
 80034da:	eb12 0a01 	adds.w	sl, r2, r1
 80034de:	4649      	mov	r1, r9
 80034e0:	eb43 0b01 	adc.w	fp, r3, r1
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f8:	4692      	mov	sl, r2
 80034fa:	469b      	mov	fp, r3
 80034fc:	4643      	mov	r3, r8
 80034fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003506:	464b      	mov	r3, r9
 8003508:	eb4b 0303 	adc.w	r3, fp, r3
 800350c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800351c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003520:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003524:	460b      	mov	r3, r1
 8003526:	18db      	adds	r3, r3, r3
 8003528:	643b      	str	r3, [r7, #64]	; 0x40
 800352a:	4613      	mov	r3, r2
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
 8003532:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003536:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800353a:	f7fc fea9 	bl	8000290 <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4611      	mov	r1, r2
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <UART_SetConfig+0x2d4>)
 8003546:	fba3 2301 	umull	r2, r3, r3, r1
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2264      	movs	r2, #100	; 0x64
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	1acb      	subs	r3, r1, r3
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <UART_SetConfig+0x2d4>)
 800355c:	fba3 2302 	umull	r2, r3, r3, r2
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003568:	441c      	add	r4, r3
 800356a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003574:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003578:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	1891      	adds	r1, r2, r2
 8003582:	63b9      	str	r1, [r7, #56]	; 0x38
 8003584:	415b      	adcs	r3, r3
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800358c:	4641      	mov	r1, r8
 800358e:	1851      	adds	r1, r2, r1
 8003590:	6339      	str	r1, [r7, #48]	; 0x30
 8003592:	4649      	mov	r1, r9
 8003594:	414b      	adcs	r3, r1
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035a4:	4659      	mov	r1, fp
 80035a6:	00cb      	lsls	r3, r1, #3
 80035a8:	4651      	mov	r1, sl
 80035aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ae:	4651      	mov	r1, sl
 80035b0:	00ca      	lsls	r2, r1, #3
 80035b2:	4610      	mov	r0, r2
 80035b4:	4619      	mov	r1, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	4642      	mov	r2, r8
 80035ba:	189b      	adds	r3, r3, r2
 80035bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035c0:	464b      	mov	r3, r9
 80035c2:	460a      	mov	r2, r1
 80035c4:	eb42 0303 	adc.w	r3, r2, r3
 80035c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035e0:	460b      	mov	r3, r1
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e6:	4613      	mov	r3, r2
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035f6:	f7fc fe4b 	bl	8000290 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <UART_SetConfig+0x2d4>)
 8003600:	fba3 1302 	umull	r1, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	2164      	movs	r1, #100	; 0x64
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3332      	adds	r3, #50	; 0x32
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <UART_SetConfig+0x2d4>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	f003 0207 	and.w	r2, r3, #7
 800361e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4422      	add	r2, r4
 8003626:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003628:	e106      	b.n	8003838 <UART_SetConfig+0x4d8>
 800362a:	bf00      	nop
 800362c:	40011000 	.word	0x40011000
 8003630:	40011400 	.word	0x40011400
 8003634:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363c:	2200      	movs	r2, #0
 800363e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003642:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003646:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800364a:	4642      	mov	r2, r8
 800364c:	464b      	mov	r3, r9
 800364e:	1891      	adds	r1, r2, r2
 8003650:	6239      	str	r1, [r7, #32]
 8003652:	415b      	adcs	r3, r3
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
 8003656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800365a:	4641      	mov	r1, r8
 800365c:	1854      	adds	r4, r2, r1
 800365e:	4649      	mov	r1, r9
 8003660:	eb43 0501 	adc.w	r5, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	00eb      	lsls	r3, r5, #3
 800366e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003672:	00e2      	lsls	r2, r4, #3
 8003674:	4614      	mov	r4, r2
 8003676:	461d      	mov	r5, r3
 8003678:	4643      	mov	r3, r8
 800367a:	18e3      	adds	r3, r4, r3
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003680:	464b      	mov	r3, r9
 8003682:	eb45 0303 	adc.w	r3, r5, r3
 8003686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036a6:	4629      	mov	r1, r5
 80036a8:	008b      	lsls	r3, r1, #2
 80036aa:	4621      	mov	r1, r4
 80036ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b0:	4621      	mov	r1, r4
 80036b2:	008a      	lsls	r2, r1, #2
 80036b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036b8:	f7fc fdea 	bl	8000290 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4b60      	ldr	r3, [pc, #384]	; (8003844 <UART_SetConfig+0x4e4>)
 80036c2:	fba3 2302 	umull	r2, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	011c      	lsls	r4, r3, #4
 80036ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	61b9      	str	r1, [r7, #24]
 80036e4:	415b      	adcs	r3, r3
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ec:	4641      	mov	r1, r8
 80036ee:	1851      	adds	r1, r2, r1
 80036f0:	6139      	str	r1, [r7, #16]
 80036f2:	4649      	mov	r1, r9
 80036f4:	414b      	adcs	r3, r1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003704:	4659      	mov	r1, fp
 8003706:	00cb      	lsls	r3, r1, #3
 8003708:	4651      	mov	r1, sl
 800370a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370e:	4651      	mov	r1, sl
 8003710:	00ca      	lsls	r2, r1, #3
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4603      	mov	r3, r0
 8003718:	4642      	mov	r2, r8
 800371a:	189b      	adds	r3, r3, r2
 800371c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003720:	464b      	mov	r3, r9
 8003722:	460a      	mov	r2, r1
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	67bb      	str	r3, [r7, #120]	; 0x78
 8003736:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003744:	4649      	mov	r1, r9
 8003746:	008b      	lsls	r3, r1, #2
 8003748:	4641      	mov	r1, r8
 800374a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800374e:	4641      	mov	r1, r8
 8003750:	008a      	lsls	r2, r1, #2
 8003752:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003756:	f7fc fd9b 	bl	8000290 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4611      	mov	r1, r2
 8003760:	4b38      	ldr	r3, [pc, #224]	; (8003844 <UART_SetConfig+0x4e4>)
 8003762:	fba3 2301 	umull	r2, r3, r3, r1
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2264      	movs	r2, #100	; 0x64
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	1acb      	subs	r3, r1, r3
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	; 0x32
 8003774:	4a33      	ldr	r2, [pc, #204]	; (8003844 <UART_SetConfig+0x4e4>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003780:	441c      	add	r4, r3
 8003782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003786:	2200      	movs	r2, #0
 8003788:	673b      	str	r3, [r7, #112]	; 0x70
 800378a:	677a      	str	r2, [r7, #116]	; 0x74
 800378c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	1891      	adds	r1, r2, r2
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	415b      	adcs	r3, r3
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a0:	4641      	mov	r1, r8
 80037a2:	1851      	adds	r1, r2, r1
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	4649      	mov	r1, r9
 80037a8:	414b      	adcs	r3, r1
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037b8:	4659      	mov	r1, fp
 80037ba:	00cb      	lsls	r3, r1, #3
 80037bc:	4651      	mov	r1, sl
 80037be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c2:	4651      	mov	r1, sl
 80037c4:	00ca      	lsls	r2, r1, #3
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	4642      	mov	r2, r8
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d2:	464b      	mov	r3, r9
 80037d4:	460a      	mov	r2, r1
 80037d6:	eb42 0303 	adc.w	r3, r2, r3
 80037da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
 80037e6:	667a      	str	r2, [r7, #100]	; 0x64
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037f4:	4649      	mov	r1, r9
 80037f6:	008b      	lsls	r3, r1, #2
 80037f8:	4641      	mov	r1, r8
 80037fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fe:	4641      	mov	r1, r8
 8003800:	008a      	lsls	r2, r1, #2
 8003802:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003806:	f7fc fd43 	bl	8000290 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <UART_SetConfig+0x4e4>)
 8003810:	fba3 1302 	umull	r1, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	2164      	movs	r1, #100	; 0x64
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	3332      	adds	r3, #50	; 0x32
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <UART_SetConfig+0x4e4>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4422      	add	r2, r4
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800383e:	46bd      	mov	sp, r7
 8003840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003844:	51eb851f 	.word	0x51eb851f

08003848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003848:	b084      	sub	sp, #16
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	f107 001c 	add.w	r0, r7, #28
 8003856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d122      	bne.n	80038a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 faa2 	bl	8003de4 <USB_CoreReset>
 80038a0:	4603      	mov	r3, r0
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e01a      	b.n	80038dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa96 	bl	8003de4 <USB_CoreReset>
 80038b8:	4603      	mov	r3, r0
 80038ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
 80038ce:	e005      	b.n	80038dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10b      	bne.n	80038fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f043 0206 	orr.w	r2, r3, #6
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003906:	b004      	add	sp, #16
 8003908:	4770      	bx	lr

0800390a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0201 	bic.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d115      	bne.n	800397a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800395a:	2001      	movs	r0, #1
 800395c:	f7fd fb7a 	bl	8001054 <HAL_Delay>
      ms++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa2e 	bl	8003dc8 <USB_GetMode>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d01e      	beq.n	80039b0 <USB_SetCurrentMode+0x84>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b31      	cmp	r3, #49	; 0x31
 8003976:	d9f0      	bls.n	800395a <USB_SetCurrentMode+0x2e>
 8003978:	e01a      	b.n	80039b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d115      	bne.n	80039ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800398c:	2001      	movs	r0, #1
 800398e:	f7fd fb61 	bl	8001054 <HAL_Delay>
      ms++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fa15 	bl	8003dc8 <USB_GetMode>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <USB_SetCurrentMode+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b31      	cmp	r3, #49	; 0x31
 80039a8:	d9f0      	bls.n	800398c <USB_SetCurrentMode+0x60>
 80039aa:	e001      	b.n	80039b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e005      	b.n	80039bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b32      	cmp	r3, #50	; 0x32
 80039b4:	d101      	bne.n	80039ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c4:	b084      	sub	sp, #16
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e009      	b.n	80039f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3340      	adds	r3, #64	; 0x40
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3301      	adds	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b0e      	cmp	r3, #14
 80039fc:	d9f2      	bls.n	80039e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11c      	bne.n	8003a3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a12:	f043 0302 	orr.w	r3, r3, #2
 8003a16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a3c:	e00b      	b.n	8003a56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a68:	4619      	mov	r1, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a70:	461a      	mov	r2, r3
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10c      	bne.n	8003a96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a82:	2100      	movs	r1, #0
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f965 	bl	8003d54 <USB_SetDevSpeed>
 8003a8a:	e008      	b.n	8003a9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f960 	bl	8003d54 <USB_SetDevSpeed>
 8003a94:	e003      	b.n	8003a9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a96:	2103      	movs	r1, #3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f95b 	bl	8003d54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a9e:	2110      	movs	r1, #16
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8f3 	bl	8003c8c <USB_FlushTxFifo>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f91f 	bl	8003cf4 <USB_FlushRxFifo>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e043      	b.n	8003b72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b00:	d118      	bne.n	8003b34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b14:	461a      	mov	r2, r3
 8003b16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e013      	b.n	8003b46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e008      	b.n	8003b46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	461a      	mov	r2, r3
 8003b42:	2300      	movs	r3, #0
 8003b44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	2300      	movs	r3, #0
 8003b56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d3b7      	bcc.n	8003aea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e043      	b.n	8003c08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b96:	d118      	bne.n	8003bca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	461a      	mov	r2, r3
 8003bac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e013      	b.n	8003bdc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e008      	b.n	8003bdc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	3301      	adds	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d3b7      	bcc.n	8003b80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f043 0210 	orr.w	r2, r3, #16
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <USB_DevInit+0x2c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d107      	bne.n	8003c78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c84:	b004      	add	sp, #16
 8003c86:	4770      	bx	lr
 8003c88:	803c3800 	.word	0x803c3800

08003c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <USB_FlushTxFifo+0x64>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e01b      	b.n	8003ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	daf2      	bge.n	8003c9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	019b      	lsls	r3, r3, #6
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <USB_FlushTxFifo+0x64>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e006      	b.n	8003ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d0f0      	beq.n	8003cc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	00030d40 	.word	0x00030d40

08003cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <USB_FlushRxFifo+0x5c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e018      	b.n	8003d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	daf2      	bge.n	8003d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2210      	movs	r2, #16
 8003d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3301      	adds	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <USB_FlushRxFifo+0x5c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e006      	b.n	8003d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d0f0      	beq.n	8003d24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	00030d40 	.word	0x00030d40

08003d54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <USB_CoreReset+0x64>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e01b      	b.n	8003e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	daf2      	bge.n	8003df0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <USB_CoreReset+0x64>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e006      	b.n	8003e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d0f0      	beq.n	8003e1a <USB_CoreReset+0x36>

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	00030d40 	.word	0x00030d40

08003e4c <std>:
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	4604      	mov	r4, r0
 8003e52:	e9c0 3300 	strd	r3, r3, [r0]
 8003e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e5a:	6083      	str	r3, [r0, #8]
 8003e5c:	8181      	strh	r1, [r0, #12]
 8003e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8003e60:	81c2      	strh	r2, [r0, #14]
 8003e62:	6183      	str	r3, [r0, #24]
 8003e64:	4619      	mov	r1, r3
 8003e66:	2208      	movs	r2, #8
 8003e68:	305c      	adds	r0, #92	; 0x5c
 8003e6a:	f000 f8f4 	bl	8004056 <memset>
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <std+0x38>)
 8003e70:	6263      	str	r3, [r4, #36]	; 0x24
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <std+0x3c>)
 8003e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <std+0x40>)
 8003e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <std+0x44>)
 8003e7c:	6224      	str	r4, [r4, #32]
 8003e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	bf00      	nop
 8003e84:	08003fd1 	.word	0x08003fd1
 8003e88:	08003ff3 	.word	0x08003ff3
 8003e8c:	0800402b 	.word	0x0800402b
 8003e90:	0800404f 	.word	0x0800404f

08003e94 <stdio_exit_handler>:
 8003e94:	4a02      	ldr	r2, [pc, #8]	; (8003ea0 <stdio_exit_handler+0xc>)
 8003e96:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <stdio_exit_handler+0x10>)
 8003e98:	4803      	ldr	r0, [pc, #12]	; (8003ea8 <stdio_exit_handler+0x14>)
 8003e9a:	f000 b869 	b.w	8003f70 <_fwalk_sglue>
 8003e9e:	bf00      	nop
 8003ea0:	2000000c 	.word	0x2000000c
 8003ea4:	080049f1 	.word	0x080049f1
 8003ea8:	20000018 	.word	0x20000018

08003eac <cleanup_stdio>:
 8003eac:	6841      	ldr	r1, [r0, #4]
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <cleanup_stdio+0x34>)
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	d001      	beq.n	8003ebc <cleanup_stdio+0x10>
 8003eb8:	f000 fd9a 	bl	80049f0 <_fflush_r>
 8003ebc:	68a1      	ldr	r1, [r4, #8]
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <cleanup_stdio+0x38>)
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d002      	beq.n	8003eca <cleanup_stdio+0x1e>
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f000 fd93 	bl	80049f0 <_fflush_r>
 8003eca:	68e1      	ldr	r1, [r4, #12]
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <cleanup_stdio+0x3c>)
 8003ece:	4299      	cmp	r1, r3
 8003ed0:	d004      	beq.n	8003edc <cleanup_stdio+0x30>
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed8:	f000 bd8a 	b.w	80049f0 <_fflush_r>
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000068c 	.word	0x2000068c
 8003ee4:	200006f4 	.word	0x200006f4
 8003ee8:	2000075c 	.word	0x2000075c

08003eec <global_stdio_init.part.0>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <global_stdio_init.part.0+0x30>)
 8003ef0:	4c0b      	ldr	r4, [pc, #44]	; (8003f20 <global_stdio_init.part.0+0x34>)
 8003ef2:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <global_stdio_init.part.0+0x38>)
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2104      	movs	r1, #4
 8003efc:	f7ff ffa6 	bl	8003e4c <std>
 8003f00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f04:	2201      	movs	r2, #1
 8003f06:	2109      	movs	r1, #9
 8003f08:	f7ff ffa0 	bl	8003e4c <std>
 8003f0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f10:	2202      	movs	r2, #2
 8003f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f16:	2112      	movs	r1, #18
 8003f18:	f7ff bf98 	b.w	8003e4c <std>
 8003f1c:	200007c4 	.word	0x200007c4
 8003f20:	2000068c 	.word	0x2000068c
 8003f24:	08003e95 	.word	0x08003e95

08003f28 <__sfp_lock_acquire>:
 8003f28:	4801      	ldr	r0, [pc, #4]	; (8003f30 <__sfp_lock_acquire+0x8>)
 8003f2a:	f000 b90d 	b.w	8004148 <__retarget_lock_acquire_recursive>
 8003f2e:	bf00      	nop
 8003f30:	200007cd 	.word	0x200007cd

08003f34 <__sfp_lock_release>:
 8003f34:	4801      	ldr	r0, [pc, #4]	; (8003f3c <__sfp_lock_release+0x8>)
 8003f36:	f000 b908 	b.w	800414a <__retarget_lock_release_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	200007cd 	.word	0x200007cd

08003f40 <__sinit>:
 8003f40:	b510      	push	{r4, lr}
 8003f42:	4604      	mov	r4, r0
 8003f44:	f7ff fff0 	bl	8003f28 <__sfp_lock_acquire>
 8003f48:	6a23      	ldr	r3, [r4, #32]
 8003f4a:	b11b      	cbz	r3, 8003f54 <__sinit+0x14>
 8003f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f50:	f7ff bff0 	b.w	8003f34 <__sfp_lock_release>
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <__sinit+0x28>)
 8003f56:	6223      	str	r3, [r4, #32]
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <__sinit+0x2c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f5      	bne.n	8003f4c <__sinit+0xc>
 8003f60:	f7ff ffc4 	bl	8003eec <global_stdio_init.part.0>
 8003f64:	e7f2      	b.n	8003f4c <__sinit+0xc>
 8003f66:	bf00      	nop
 8003f68:	08003ead 	.word	0x08003ead
 8003f6c:	200007c4 	.word	0x200007c4

08003f70 <_fwalk_sglue>:
 8003f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f74:	4607      	mov	r7, r0
 8003f76:	4688      	mov	r8, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f80:	f1b9 0901 	subs.w	r9, r9, #1
 8003f84:	d505      	bpl.n	8003f92 <_fwalk_sglue+0x22>
 8003f86:	6824      	ldr	r4, [r4, #0]
 8003f88:	2c00      	cmp	r4, #0
 8003f8a:	d1f7      	bne.n	8003f7c <_fwalk_sglue+0xc>
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d907      	bls.n	8003fa8 <_fwalk_sglue+0x38>
 8003f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	d003      	beq.n	8003fa8 <_fwalk_sglue+0x38>
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	47c0      	blx	r8
 8003fa6:	4306      	orrs	r6, r0
 8003fa8:	3568      	adds	r5, #104	; 0x68
 8003faa:	e7e9      	b.n	8003f80 <_fwalk_sglue+0x10>

08003fac <iprintf>:
 8003fac:	b40f      	push	{r0, r1, r2, r3}
 8003fae:	b507      	push	{r0, r1, r2, lr}
 8003fb0:	4906      	ldr	r1, [pc, #24]	; (8003fcc <iprintf+0x20>)
 8003fb2:	ab04      	add	r3, sp, #16
 8003fb4:	6808      	ldr	r0, [r1, #0]
 8003fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fba:	6881      	ldr	r1, [r0, #8]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	f000 f9e7 	bl	8004390 <_vfiprintf_r>
 8003fc2:	b003      	add	sp, #12
 8003fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fc8:	b004      	add	sp, #16
 8003fca:	4770      	bx	lr
 8003fcc:	20000064 	.word	0x20000064

08003fd0 <__sread>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd8:	f000 f868 	bl	80040ac <_read_r>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	bfab      	itete	ge
 8003fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8003fe4:	181b      	addge	r3, r3, r0
 8003fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fea:	bfac      	ite	ge
 8003fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fee:	81a3      	strhlt	r3, [r4, #12]
 8003ff0:	bd10      	pop	{r4, pc}

08003ff2 <__swrite>:
 8003ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	461f      	mov	r7, r3
 8003ff8:	898b      	ldrh	r3, [r1, #12]
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	4605      	mov	r5, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	4616      	mov	r6, r2
 8004002:	d505      	bpl.n	8004010 <__swrite+0x1e>
 8004004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004008:	2302      	movs	r3, #2
 800400a:	2200      	movs	r2, #0
 800400c:	f000 f83c 	bl	8004088 <_lseek_r>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	4628      	mov	r0, r5
 8004022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004026:	f000 b853 	b.w	80040d0 <_write_r>

0800402a <__sseek>:
 800402a:	b510      	push	{r4, lr}
 800402c:	460c      	mov	r4, r1
 800402e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004032:	f000 f829 	bl	8004088 <_lseek_r>
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	bf15      	itete	ne
 800403c:	6560      	strne	r0, [r4, #84]	; 0x54
 800403e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004046:	81a3      	strheq	r3, [r4, #12]
 8004048:	bf18      	it	ne
 800404a:	81a3      	strhne	r3, [r4, #12]
 800404c:	bd10      	pop	{r4, pc}

0800404e <__sclose>:
 800404e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004052:	f000 b809 	b.w	8004068 <_close_r>

08004056 <memset>:
 8004056:	4402      	add	r2, r0
 8004058:	4603      	mov	r3, r0
 800405a:	4293      	cmp	r3, r2
 800405c:	d100      	bne.n	8004060 <memset+0xa>
 800405e:	4770      	bx	lr
 8004060:	f803 1b01 	strb.w	r1, [r3], #1
 8004064:	e7f9      	b.n	800405a <memset+0x4>
	...

08004068 <_close_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d06      	ldr	r5, [pc, #24]	; (8004084 <_close_r+0x1c>)
 800406c:	2300      	movs	r3, #0
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc fed5 	bl	8000e22 <_close>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_close_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_close_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200007c8 	.word	0x200007c8

08004088 <_lseek_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	4d07      	ldr	r5, [pc, #28]	; (80040a8 <_lseek_r+0x20>)
 800408c:	4604      	mov	r4, r0
 800408e:	4608      	mov	r0, r1
 8004090:	4611      	mov	r1, r2
 8004092:	2200      	movs	r2, #0
 8004094:	602a      	str	r2, [r5, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	f7fc feea 	bl	8000e70 <_lseek>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_lseek_r+0x1e>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_lseek_r+0x1e>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	200007c8 	.word	0x200007c8

080040ac <_read_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4d07      	ldr	r5, [pc, #28]	; (80040cc <_read_r+0x20>)
 80040b0:	4604      	mov	r4, r0
 80040b2:	4608      	mov	r0, r1
 80040b4:	4611      	mov	r1, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	602a      	str	r2, [r5, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7fc fe94 	bl	8000de8 <_read>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_read_r+0x1e>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_read_r+0x1e>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	200007c8 	.word	0x200007c8

080040d0 <_write_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d07      	ldr	r5, [pc, #28]	; (80040f0 <_write_r+0x20>)
 80040d4:	4604      	mov	r4, r0
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	602a      	str	r2, [r5, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7fc fa54 	bl	800058c <_write>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_write_r+0x1e>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_write_r+0x1e>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	200007c8 	.word	0x200007c8

080040f4 <__errno>:
 80040f4:	4b01      	ldr	r3, [pc, #4]	; (80040fc <__errno+0x8>)
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000064 	.word	0x20000064

08004100 <__libc_init_array>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4d0d      	ldr	r5, [pc, #52]	; (8004138 <__libc_init_array+0x38>)
 8004104:	4c0d      	ldr	r4, [pc, #52]	; (800413c <__libc_init_array+0x3c>)
 8004106:	1b64      	subs	r4, r4, r5
 8004108:	10a4      	asrs	r4, r4, #2
 800410a:	2600      	movs	r6, #0
 800410c:	42a6      	cmp	r6, r4
 800410e:	d109      	bne.n	8004124 <__libc_init_array+0x24>
 8004110:	4d0b      	ldr	r5, [pc, #44]	; (8004140 <__libc_init_array+0x40>)
 8004112:	4c0c      	ldr	r4, [pc, #48]	; (8004144 <__libc_init_array+0x44>)
 8004114:	f000 fdbe 	bl	8004c94 <_init>
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	2600      	movs	r6, #0
 800411e:	42a6      	cmp	r6, r4
 8004120:	d105      	bne.n	800412e <__libc_init_array+0x2e>
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	f855 3b04 	ldr.w	r3, [r5], #4
 8004128:	4798      	blx	r3
 800412a:	3601      	adds	r6, #1
 800412c:	e7ee      	b.n	800410c <__libc_init_array+0xc>
 800412e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004132:	4798      	blx	r3
 8004134:	3601      	adds	r6, #1
 8004136:	e7f2      	b.n	800411e <__libc_init_array+0x1e>
 8004138:	08004d38 	.word	0x08004d38
 800413c:	08004d38 	.word	0x08004d38
 8004140:	08004d38 	.word	0x08004d38
 8004144:	08004d3c 	.word	0x08004d3c

08004148 <__retarget_lock_acquire_recursive>:
 8004148:	4770      	bx	lr

0800414a <__retarget_lock_release_recursive>:
 800414a:	4770      	bx	lr

0800414c <_free_r>:
 800414c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800414e:	2900      	cmp	r1, #0
 8004150:	d044      	beq.n	80041dc <_free_r+0x90>
 8004152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004156:	9001      	str	r0, [sp, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f1a1 0404 	sub.w	r4, r1, #4
 800415e:	bfb8      	it	lt
 8004160:	18e4      	addlt	r4, r4, r3
 8004162:	f000 f8df 	bl	8004324 <__malloc_lock>
 8004166:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <_free_r+0x94>)
 8004168:	9801      	ldr	r0, [sp, #4]
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	b933      	cbnz	r3, 800417c <_free_r+0x30>
 800416e:	6063      	str	r3, [r4, #4]
 8004170:	6014      	str	r4, [r2, #0]
 8004172:	b003      	add	sp, #12
 8004174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004178:	f000 b8da 	b.w	8004330 <__malloc_unlock>
 800417c:	42a3      	cmp	r3, r4
 800417e:	d908      	bls.n	8004192 <_free_r+0x46>
 8004180:	6825      	ldr	r5, [r4, #0]
 8004182:	1961      	adds	r1, r4, r5
 8004184:	428b      	cmp	r3, r1
 8004186:	bf01      	itttt	eq
 8004188:	6819      	ldreq	r1, [r3, #0]
 800418a:	685b      	ldreq	r3, [r3, #4]
 800418c:	1949      	addeq	r1, r1, r5
 800418e:	6021      	streq	r1, [r4, #0]
 8004190:	e7ed      	b.n	800416e <_free_r+0x22>
 8004192:	461a      	mov	r2, r3
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	b10b      	cbz	r3, 800419c <_free_r+0x50>
 8004198:	42a3      	cmp	r3, r4
 800419a:	d9fa      	bls.n	8004192 <_free_r+0x46>
 800419c:	6811      	ldr	r1, [r2, #0]
 800419e:	1855      	adds	r5, r2, r1
 80041a0:	42a5      	cmp	r5, r4
 80041a2:	d10b      	bne.n	80041bc <_free_r+0x70>
 80041a4:	6824      	ldr	r4, [r4, #0]
 80041a6:	4421      	add	r1, r4
 80041a8:	1854      	adds	r4, r2, r1
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	6011      	str	r1, [r2, #0]
 80041ae:	d1e0      	bne.n	8004172 <_free_r+0x26>
 80041b0:	681c      	ldr	r4, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	6053      	str	r3, [r2, #4]
 80041b6:	440c      	add	r4, r1
 80041b8:	6014      	str	r4, [r2, #0]
 80041ba:	e7da      	b.n	8004172 <_free_r+0x26>
 80041bc:	d902      	bls.n	80041c4 <_free_r+0x78>
 80041be:	230c      	movs	r3, #12
 80041c0:	6003      	str	r3, [r0, #0]
 80041c2:	e7d6      	b.n	8004172 <_free_r+0x26>
 80041c4:	6825      	ldr	r5, [r4, #0]
 80041c6:	1961      	adds	r1, r4, r5
 80041c8:	428b      	cmp	r3, r1
 80041ca:	bf04      	itt	eq
 80041cc:	6819      	ldreq	r1, [r3, #0]
 80041ce:	685b      	ldreq	r3, [r3, #4]
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	bf04      	itt	eq
 80041d4:	1949      	addeq	r1, r1, r5
 80041d6:	6021      	streq	r1, [r4, #0]
 80041d8:	6054      	str	r4, [r2, #4]
 80041da:	e7ca      	b.n	8004172 <_free_r+0x26>
 80041dc:	b003      	add	sp, #12
 80041de:	bd30      	pop	{r4, r5, pc}
 80041e0:	200007d0 	.word	0x200007d0

080041e4 <sbrk_aligned>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4e0e      	ldr	r6, [pc, #56]	; (8004220 <sbrk_aligned+0x3c>)
 80041e8:	460c      	mov	r4, r1
 80041ea:	6831      	ldr	r1, [r6, #0]
 80041ec:	4605      	mov	r5, r0
 80041ee:	b911      	cbnz	r1, 80041f6 <sbrk_aligned+0x12>
 80041f0:	f000 fcbc 	bl	8004b6c <_sbrk_r>
 80041f4:	6030      	str	r0, [r6, #0]
 80041f6:	4621      	mov	r1, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 fcb7 	bl	8004b6c <_sbrk_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d00a      	beq.n	8004218 <sbrk_aligned+0x34>
 8004202:	1cc4      	adds	r4, r0, #3
 8004204:	f024 0403 	bic.w	r4, r4, #3
 8004208:	42a0      	cmp	r0, r4
 800420a:	d007      	beq.n	800421c <sbrk_aligned+0x38>
 800420c:	1a21      	subs	r1, r4, r0
 800420e:	4628      	mov	r0, r5
 8004210:	f000 fcac 	bl	8004b6c <_sbrk_r>
 8004214:	3001      	adds	r0, #1
 8004216:	d101      	bne.n	800421c <sbrk_aligned+0x38>
 8004218:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800421c:	4620      	mov	r0, r4
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	200007d4 	.word	0x200007d4

08004224 <_malloc_r>:
 8004224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004228:	1ccd      	adds	r5, r1, #3
 800422a:	f025 0503 	bic.w	r5, r5, #3
 800422e:	3508      	adds	r5, #8
 8004230:	2d0c      	cmp	r5, #12
 8004232:	bf38      	it	cc
 8004234:	250c      	movcc	r5, #12
 8004236:	2d00      	cmp	r5, #0
 8004238:	4607      	mov	r7, r0
 800423a:	db01      	blt.n	8004240 <_malloc_r+0x1c>
 800423c:	42a9      	cmp	r1, r5
 800423e:	d905      	bls.n	800424c <_malloc_r+0x28>
 8004240:	230c      	movs	r3, #12
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	2600      	movs	r6, #0
 8004246:	4630      	mov	r0, r6
 8004248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800424c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004320 <_malloc_r+0xfc>
 8004250:	f000 f868 	bl	8004324 <__malloc_lock>
 8004254:	f8d8 3000 	ldr.w	r3, [r8]
 8004258:	461c      	mov	r4, r3
 800425a:	bb5c      	cbnz	r4, 80042b4 <_malloc_r+0x90>
 800425c:	4629      	mov	r1, r5
 800425e:	4638      	mov	r0, r7
 8004260:	f7ff ffc0 	bl	80041e4 <sbrk_aligned>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	4604      	mov	r4, r0
 8004268:	d155      	bne.n	8004316 <_malloc_r+0xf2>
 800426a:	f8d8 4000 	ldr.w	r4, [r8]
 800426e:	4626      	mov	r6, r4
 8004270:	2e00      	cmp	r6, #0
 8004272:	d145      	bne.n	8004300 <_malloc_r+0xdc>
 8004274:	2c00      	cmp	r4, #0
 8004276:	d048      	beq.n	800430a <_malloc_r+0xe6>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	4631      	mov	r1, r6
 800427c:	4638      	mov	r0, r7
 800427e:	eb04 0903 	add.w	r9, r4, r3
 8004282:	f000 fc73 	bl	8004b6c <_sbrk_r>
 8004286:	4581      	cmp	r9, r0
 8004288:	d13f      	bne.n	800430a <_malloc_r+0xe6>
 800428a:	6821      	ldr	r1, [r4, #0]
 800428c:	1a6d      	subs	r5, r5, r1
 800428e:	4629      	mov	r1, r5
 8004290:	4638      	mov	r0, r7
 8004292:	f7ff ffa7 	bl	80041e4 <sbrk_aligned>
 8004296:	3001      	adds	r0, #1
 8004298:	d037      	beq.n	800430a <_malloc_r+0xe6>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	442b      	add	r3, r5
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	f8d8 3000 	ldr.w	r3, [r8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d038      	beq.n	800431a <_malloc_r+0xf6>
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	42a2      	cmp	r2, r4
 80042ac:	d12b      	bne.n	8004306 <_malloc_r+0xe2>
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	e00f      	b.n	80042d4 <_malloc_r+0xb0>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	1b52      	subs	r2, r2, r5
 80042b8:	d41f      	bmi.n	80042fa <_malloc_r+0xd6>
 80042ba:	2a0b      	cmp	r2, #11
 80042bc:	d917      	bls.n	80042ee <_malloc_r+0xca>
 80042be:	1961      	adds	r1, r4, r5
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	6025      	str	r5, [r4, #0]
 80042c4:	bf18      	it	ne
 80042c6:	6059      	strne	r1, [r3, #4]
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	bf08      	it	eq
 80042cc:	f8c8 1000 	streq.w	r1, [r8]
 80042d0:	5162      	str	r2, [r4, r5]
 80042d2:	604b      	str	r3, [r1, #4]
 80042d4:	4638      	mov	r0, r7
 80042d6:	f104 060b 	add.w	r6, r4, #11
 80042da:	f000 f829 	bl	8004330 <__malloc_unlock>
 80042de:	f026 0607 	bic.w	r6, r6, #7
 80042e2:	1d23      	adds	r3, r4, #4
 80042e4:	1af2      	subs	r2, r6, r3
 80042e6:	d0ae      	beq.n	8004246 <_malloc_r+0x22>
 80042e8:	1b9b      	subs	r3, r3, r6
 80042ea:	50a3      	str	r3, [r4, r2]
 80042ec:	e7ab      	b.n	8004246 <_malloc_r+0x22>
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	6862      	ldr	r2, [r4, #4]
 80042f2:	d1dd      	bne.n	80042b0 <_malloc_r+0x8c>
 80042f4:	f8c8 2000 	str.w	r2, [r8]
 80042f8:	e7ec      	b.n	80042d4 <_malloc_r+0xb0>
 80042fa:	4623      	mov	r3, r4
 80042fc:	6864      	ldr	r4, [r4, #4]
 80042fe:	e7ac      	b.n	800425a <_malloc_r+0x36>
 8004300:	4634      	mov	r4, r6
 8004302:	6876      	ldr	r6, [r6, #4]
 8004304:	e7b4      	b.n	8004270 <_malloc_r+0x4c>
 8004306:	4613      	mov	r3, r2
 8004308:	e7cc      	b.n	80042a4 <_malloc_r+0x80>
 800430a:	230c      	movs	r3, #12
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4638      	mov	r0, r7
 8004310:	f000 f80e 	bl	8004330 <__malloc_unlock>
 8004314:	e797      	b.n	8004246 <_malloc_r+0x22>
 8004316:	6025      	str	r5, [r4, #0]
 8004318:	e7dc      	b.n	80042d4 <_malloc_r+0xb0>
 800431a:	605b      	str	r3, [r3, #4]
 800431c:	deff      	udf	#255	; 0xff
 800431e:	bf00      	nop
 8004320:	200007d0 	.word	0x200007d0

08004324 <__malloc_lock>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__malloc_lock+0x8>)
 8004326:	f7ff bf0f 	b.w	8004148 <__retarget_lock_acquire_recursive>
 800432a:	bf00      	nop
 800432c:	200007cc 	.word	0x200007cc

08004330 <__malloc_unlock>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__malloc_unlock+0x8>)
 8004332:	f7ff bf0a 	b.w	800414a <__retarget_lock_release_recursive>
 8004336:	bf00      	nop
 8004338:	200007cc 	.word	0x200007cc

0800433c <__sfputc_r>:
 800433c:	6893      	ldr	r3, [r2, #8]
 800433e:	3b01      	subs	r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	b410      	push	{r4}
 8004344:	6093      	str	r3, [r2, #8]
 8004346:	da08      	bge.n	800435a <__sfputc_r+0x1e>
 8004348:	6994      	ldr	r4, [r2, #24]
 800434a:	42a3      	cmp	r3, r4
 800434c:	db01      	blt.n	8004352 <__sfputc_r+0x16>
 800434e:	290a      	cmp	r1, #10
 8004350:	d103      	bne.n	800435a <__sfputc_r+0x1e>
 8004352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004356:	f000 bb73 	b.w	8004a40 <__swbuf_r>
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	1c58      	adds	r0, r3, #1
 800435e:	6010      	str	r0, [r2, #0]
 8004360:	7019      	strb	r1, [r3, #0]
 8004362:	4608      	mov	r0, r1
 8004364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004368:	4770      	bx	lr

0800436a <__sfputs_r>:
 800436a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436c:	4606      	mov	r6, r0
 800436e:	460f      	mov	r7, r1
 8004370:	4614      	mov	r4, r2
 8004372:	18d5      	adds	r5, r2, r3
 8004374:	42ac      	cmp	r4, r5
 8004376:	d101      	bne.n	800437c <__sfputs_r+0x12>
 8004378:	2000      	movs	r0, #0
 800437a:	e007      	b.n	800438c <__sfputs_r+0x22>
 800437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004380:	463a      	mov	r2, r7
 8004382:	4630      	mov	r0, r6
 8004384:	f7ff ffda 	bl	800433c <__sfputc_r>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d1f3      	bne.n	8004374 <__sfputs_r+0xa>
 800438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004390 <_vfiprintf_r>:
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	460d      	mov	r5, r1
 8004396:	b09d      	sub	sp, #116	; 0x74
 8004398:	4614      	mov	r4, r2
 800439a:	4698      	mov	r8, r3
 800439c:	4606      	mov	r6, r0
 800439e:	b118      	cbz	r0, 80043a8 <_vfiprintf_r+0x18>
 80043a0:	6a03      	ldr	r3, [r0, #32]
 80043a2:	b90b      	cbnz	r3, 80043a8 <_vfiprintf_r+0x18>
 80043a4:	f7ff fdcc 	bl	8003f40 <__sinit>
 80043a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043aa:	07d9      	lsls	r1, r3, #31
 80043ac:	d405      	bmi.n	80043ba <_vfiprintf_r+0x2a>
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	059a      	lsls	r2, r3, #22
 80043b2:	d402      	bmi.n	80043ba <_vfiprintf_r+0x2a>
 80043b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043b6:	f7ff fec7 	bl	8004148 <__retarget_lock_acquire_recursive>
 80043ba:	89ab      	ldrh	r3, [r5, #12]
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	d501      	bpl.n	80043c4 <_vfiprintf_r+0x34>
 80043c0:	692b      	ldr	r3, [r5, #16]
 80043c2:	b99b      	cbnz	r3, 80043ec <_vfiprintf_r+0x5c>
 80043c4:	4629      	mov	r1, r5
 80043c6:	4630      	mov	r0, r6
 80043c8:	f000 fb78 	bl	8004abc <__swsetup_r>
 80043cc:	b170      	cbz	r0, 80043ec <_vfiprintf_r+0x5c>
 80043ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043d0:	07dc      	lsls	r4, r3, #31
 80043d2:	d504      	bpl.n	80043de <_vfiprintf_r+0x4e>
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d8:	b01d      	add	sp, #116	; 0x74
 80043da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	0598      	lsls	r0, r3, #22
 80043e2:	d4f7      	bmi.n	80043d4 <_vfiprintf_r+0x44>
 80043e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043e6:	f7ff feb0 	bl	800414a <__retarget_lock_release_recursive>
 80043ea:	e7f3      	b.n	80043d4 <_vfiprintf_r+0x44>
 80043ec:	2300      	movs	r3, #0
 80043ee:	9309      	str	r3, [sp, #36]	; 0x24
 80043f0:	2320      	movs	r3, #32
 80043f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80043fa:	2330      	movs	r3, #48	; 0x30
 80043fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80045b0 <_vfiprintf_r+0x220>
 8004400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004404:	f04f 0901 	mov.w	r9, #1
 8004408:	4623      	mov	r3, r4
 800440a:	469a      	mov	sl, r3
 800440c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004410:	b10a      	cbz	r2, 8004416 <_vfiprintf_r+0x86>
 8004412:	2a25      	cmp	r2, #37	; 0x25
 8004414:	d1f9      	bne.n	800440a <_vfiprintf_r+0x7a>
 8004416:	ebba 0b04 	subs.w	fp, sl, r4
 800441a:	d00b      	beq.n	8004434 <_vfiprintf_r+0xa4>
 800441c:	465b      	mov	r3, fp
 800441e:	4622      	mov	r2, r4
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ffa1 	bl	800436a <__sfputs_r>
 8004428:	3001      	adds	r0, #1
 800442a:	f000 80a9 	beq.w	8004580 <_vfiprintf_r+0x1f0>
 800442e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004430:	445a      	add	r2, fp
 8004432:	9209      	str	r2, [sp, #36]	; 0x24
 8004434:	f89a 3000 	ldrb.w	r3, [sl]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80a1 	beq.w	8004580 <_vfiprintf_r+0x1f0>
 800443e:	2300      	movs	r3, #0
 8004440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004448:	f10a 0a01 	add.w	sl, sl, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	9307      	str	r3, [sp, #28]
 8004450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004454:	931a      	str	r3, [sp, #104]	; 0x68
 8004456:	4654      	mov	r4, sl
 8004458:	2205      	movs	r2, #5
 800445a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800445e:	4854      	ldr	r0, [pc, #336]	; (80045b0 <_vfiprintf_r+0x220>)
 8004460:	f7fb fec6 	bl	80001f0 <memchr>
 8004464:	9a04      	ldr	r2, [sp, #16]
 8004466:	b9d8      	cbnz	r0, 80044a0 <_vfiprintf_r+0x110>
 8004468:	06d1      	lsls	r1, r2, #27
 800446a:	bf44      	itt	mi
 800446c:	2320      	movmi	r3, #32
 800446e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004472:	0713      	lsls	r3, r2, #28
 8004474:	bf44      	itt	mi
 8004476:	232b      	movmi	r3, #43	; 0x2b
 8004478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800447c:	f89a 3000 	ldrb.w	r3, [sl]
 8004480:	2b2a      	cmp	r3, #42	; 0x2a
 8004482:	d015      	beq.n	80044b0 <_vfiprintf_r+0x120>
 8004484:	9a07      	ldr	r2, [sp, #28]
 8004486:	4654      	mov	r4, sl
 8004488:	2000      	movs	r0, #0
 800448a:	f04f 0c0a 	mov.w	ip, #10
 800448e:	4621      	mov	r1, r4
 8004490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004494:	3b30      	subs	r3, #48	; 0x30
 8004496:	2b09      	cmp	r3, #9
 8004498:	d94d      	bls.n	8004536 <_vfiprintf_r+0x1a6>
 800449a:	b1b0      	cbz	r0, 80044ca <_vfiprintf_r+0x13a>
 800449c:	9207      	str	r2, [sp, #28]
 800449e:	e014      	b.n	80044ca <_vfiprintf_r+0x13a>
 80044a0:	eba0 0308 	sub.w	r3, r0, r8
 80044a4:	fa09 f303 	lsl.w	r3, r9, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	46a2      	mov	sl, r4
 80044ae:	e7d2      	b.n	8004456 <_vfiprintf_r+0xc6>
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	1d19      	adds	r1, r3, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	9103      	str	r1, [sp, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bfbb      	ittet	lt
 80044bc:	425b      	neglt	r3, r3
 80044be:	f042 0202 	orrlt.w	r2, r2, #2
 80044c2:	9307      	strge	r3, [sp, #28]
 80044c4:	9307      	strlt	r3, [sp, #28]
 80044c6:	bfb8      	it	lt
 80044c8:	9204      	strlt	r2, [sp, #16]
 80044ca:	7823      	ldrb	r3, [r4, #0]
 80044cc:	2b2e      	cmp	r3, #46	; 0x2e
 80044ce:	d10c      	bne.n	80044ea <_vfiprintf_r+0x15a>
 80044d0:	7863      	ldrb	r3, [r4, #1]
 80044d2:	2b2a      	cmp	r3, #42	; 0x2a
 80044d4:	d134      	bne.n	8004540 <_vfiprintf_r+0x1b0>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	1d1a      	adds	r2, r3, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	9203      	str	r2, [sp, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bfb8      	it	lt
 80044e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044e6:	3402      	adds	r4, #2
 80044e8:	9305      	str	r3, [sp, #20]
 80044ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80045c0 <_vfiprintf_r+0x230>
 80044ee:	7821      	ldrb	r1, [r4, #0]
 80044f0:	2203      	movs	r2, #3
 80044f2:	4650      	mov	r0, sl
 80044f4:	f7fb fe7c 	bl	80001f0 <memchr>
 80044f8:	b138      	cbz	r0, 800450a <_vfiprintf_r+0x17a>
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	eba0 000a 	sub.w	r0, r0, sl
 8004500:	2240      	movs	r2, #64	; 0x40
 8004502:	4082      	lsls	r2, r0
 8004504:	4313      	orrs	r3, r2
 8004506:	3401      	adds	r4, #1
 8004508:	9304      	str	r3, [sp, #16]
 800450a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450e:	4829      	ldr	r0, [pc, #164]	; (80045b4 <_vfiprintf_r+0x224>)
 8004510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004514:	2206      	movs	r2, #6
 8004516:	f7fb fe6b 	bl	80001f0 <memchr>
 800451a:	2800      	cmp	r0, #0
 800451c:	d03f      	beq.n	800459e <_vfiprintf_r+0x20e>
 800451e:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <_vfiprintf_r+0x228>)
 8004520:	bb1b      	cbnz	r3, 800456a <_vfiprintf_r+0x1da>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	3307      	adds	r3, #7
 8004526:	f023 0307 	bic.w	r3, r3, #7
 800452a:	3308      	adds	r3, #8
 800452c:	9303      	str	r3, [sp, #12]
 800452e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004530:	443b      	add	r3, r7
 8004532:	9309      	str	r3, [sp, #36]	; 0x24
 8004534:	e768      	b.n	8004408 <_vfiprintf_r+0x78>
 8004536:	fb0c 3202 	mla	r2, ip, r2, r3
 800453a:	460c      	mov	r4, r1
 800453c:	2001      	movs	r0, #1
 800453e:	e7a6      	b.n	800448e <_vfiprintf_r+0xfe>
 8004540:	2300      	movs	r3, #0
 8004542:	3401      	adds	r4, #1
 8004544:	9305      	str	r3, [sp, #20]
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0c0a 	mov.w	ip, #10
 800454c:	4620      	mov	r0, r4
 800454e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004552:	3a30      	subs	r2, #48	; 0x30
 8004554:	2a09      	cmp	r2, #9
 8004556:	d903      	bls.n	8004560 <_vfiprintf_r+0x1d0>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0c6      	beq.n	80044ea <_vfiprintf_r+0x15a>
 800455c:	9105      	str	r1, [sp, #20]
 800455e:	e7c4      	b.n	80044ea <_vfiprintf_r+0x15a>
 8004560:	fb0c 2101 	mla	r1, ip, r1, r2
 8004564:	4604      	mov	r4, r0
 8004566:	2301      	movs	r3, #1
 8004568:	e7f0      	b.n	800454c <_vfiprintf_r+0x1bc>
 800456a:	ab03      	add	r3, sp, #12
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	462a      	mov	r2, r5
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <_vfiprintf_r+0x22c>)
 8004572:	a904      	add	r1, sp, #16
 8004574:	4630      	mov	r0, r6
 8004576:	f3af 8000 	nop.w
 800457a:	4607      	mov	r7, r0
 800457c:	1c78      	adds	r0, r7, #1
 800457e:	d1d6      	bne.n	800452e <_vfiprintf_r+0x19e>
 8004580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004582:	07d9      	lsls	r1, r3, #31
 8004584:	d405      	bmi.n	8004592 <_vfiprintf_r+0x202>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	059a      	lsls	r2, r3, #22
 800458a:	d402      	bmi.n	8004592 <_vfiprintf_r+0x202>
 800458c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800458e:	f7ff fddc 	bl	800414a <__retarget_lock_release_recursive>
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	065b      	lsls	r3, r3, #25
 8004596:	f53f af1d 	bmi.w	80043d4 <_vfiprintf_r+0x44>
 800459a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800459c:	e71c      	b.n	80043d8 <_vfiprintf_r+0x48>
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <_vfiprintf_r+0x22c>)
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 f879 	bl	80046a0 <_printf_i>
 80045ae:	e7e4      	b.n	800457a <_vfiprintf_r+0x1ea>
 80045b0:	08004cfc 	.word	0x08004cfc
 80045b4:	08004d06 	.word	0x08004d06
 80045b8:	00000000 	.word	0x00000000
 80045bc:	0800436b 	.word	0x0800436b
 80045c0:	08004d02 	.word	0x08004d02

080045c4 <_printf_common>:
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	4616      	mov	r6, r2
 80045ca:	4699      	mov	r9, r3
 80045cc:	688a      	ldr	r2, [r1, #8]
 80045ce:	690b      	ldr	r3, [r1, #16]
 80045d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045d4:	4293      	cmp	r3, r2
 80045d6:	bfb8      	it	lt
 80045d8:	4613      	movlt	r3, r2
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045e0:	4607      	mov	r7, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	b10a      	cbz	r2, 80045ea <_printf_common+0x26>
 80045e6:	3301      	adds	r3, #1
 80045e8:	6033      	str	r3, [r6, #0]
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	0699      	lsls	r1, r3, #26
 80045ee:	bf42      	ittt	mi
 80045f0:	6833      	ldrmi	r3, [r6, #0]
 80045f2:	3302      	addmi	r3, #2
 80045f4:	6033      	strmi	r3, [r6, #0]
 80045f6:	6825      	ldr	r5, [r4, #0]
 80045f8:	f015 0506 	ands.w	r5, r5, #6
 80045fc:	d106      	bne.n	800460c <_printf_common+0x48>
 80045fe:	f104 0a19 	add.w	sl, r4, #25
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	6832      	ldr	r2, [r6, #0]
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	42ab      	cmp	r3, r5
 800460a:	dc26      	bgt.n	800465a <_printf_common+0x96>
 800460c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004610:	1e13      	subs	r3, r2, #0
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	bf18      	it	ne
 8004616:	2301      	movne	r3, #1
 8004618:	0692      	lsls	r2, r2, #26
 800461a:	d42b      	bmi.n	8004674 <_printf_common+0xb0>
 800461c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004620:	4649      	mov	r1, r9
 8004622:	4638      	mov	r0, r7
 8004624:	47c0      	blx	r8
 8004626:	3001      	adds	r0, #1
 8004628:	d01e      	beq.n	8004668 <_printf_common+0xa4>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	6922      	ldr	r2, [r4, #16]
 800462e:	f003 0306 	and.w	r3, r3, #6
 8004632:	2b04      	cmp	r3, #4
 8004634:	bf02      	ittt	eq
 8004636:	68e5      	ldreq	r5, [r4, #12]
 8004638:	6833      	ldreq	r3, [r6, #0]
 800463a:	1aed      	subeq	r5, r5, r3
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	bf0c      	ite	eq
 8004640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004644:	2500      	movne	r5, #0
 8004646:	4293      	cmp	r3, r2
 8004648:	bfc4      	itt	gt
 800464a:	1a9b      	subgt	r3, r3, r2
 800464c:	18ed      	addgt	r5, r5, r3
 800464e:	2600      	movs	r6, #0
 8004650:	341a      	adds	r4, #26
 8004652:	42b5      	cmp	r5, r6
 8004654:	d11a      	bne.n	800468c <_printf_common+0xc8>
 8004656:	2000      	movs	r0, #0
 8004658:	e008      	b.n	800466c <_printf_common+0xa8>
 800465a:	2301      	movs	r3, #1
 800465c:	4652      	mov	r2, sl
 800465e:	4649      	mov	r1, r9
 8004660:	4638      	mov	r0, r7
 8004662:	47c0      	blx	r8
 8004664:	3001      	adds	r0, #1
 8004666:	d103      	bne.n	8004670 <_printf_common+0xac>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	3501      	adds	r5, #1
 8004672:	e7c6      	b.n	8004602 <_printf_common+0x3e>
 8004674:	18e1      	adds	r1, r4, r3
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	2030      	movs	r0, #48	; 0x30
 800467a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800467e:	4422      	add	r2, r4
 8004680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004688:	3302      	adds	r3, #2
 800468a:	e7c7      	b.n	800461c <_printf_common+0x58>
 800468c:	2301      	movs	r3, #1
 800468e:	4622      	mov	r2, r4
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d0e6      	beq.n	8004668 <_printf_common+0xa4>
 800469a:	3601      	adds	r6, #1
 800469c:	e7d9      	b.n	8004652 <_printf_common+0x8e>
	...

080046a0 <_printf_i>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	7e0f      	ldrb	r7, [r1, #24]
 80046a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046a8:	2f78      	cmp	r7, #120	; 0x78
 80046aa:	4691      	mov	r9, r2
 80046ac:	4680      	mov	r8, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	469a      	mov	sl, r3
 80046b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046b6:	d807      	bhi.n	80046c8 <_printf_i+0x28>
 80046b8:	2f62      	cmp	r7, #98	; 0x62
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x32>
 80046bc:	2f00      	cmp	r7, #0
 80046be:	f000 80d4 	beq.w	800486a <_printf_i+0x1ca>
 80046c2:	2f58      	cmp	r7, #88	; 0x58
 80046c4:	f000 80c0 	beq.w	8004848 <_printf_i+0x1a8>
 80046c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046d0:	e03a      	b.n	8004748 <_printf_i+0xa8>
 80046d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d8f6      	bhi.n	80046c8 <_printf_i+0x28>
 80046da:	a101      	add	r1, pc, #4	; (adr r1, 80046e0 <_printf_i+0x40>)
 80046dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080046c9 	.word	0x080046c9
 80046ec:	080046c9 	.word	0x080046c9
 80046f0:	080046c9 	.word	0x080046c9
 80046f4:	080046c9 	.word	0x080046c9
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080046c9 	.word	0x080046c9
 8004700:	080046c9 	.word	0x080046c9
 8004704:	080046c9 	.word	0x080046c9
 8004708:	080046c9 	.word	0x080046c9
 800470c:	08004851 	.word	0x08004851
 8004710:	08004779 	.word	0x08004779
 8004714:	0800480b 	.word	0x0800480b
 8004718:	080046c9 	.word	0x080046c9
 800471c:	080046c9 	.word	0x080046c9
 8004720:	08004873 	.word	0x08004873
 8004724:	080046c9 	.word	0x080046c9
 8004728:	08004779 	.word	0x08004779
 800472c:	080046c9 	.word	0x080046c9
 8004730:	080046c9 	.word	0x080046c9
 8004734:	08004813 	.word	0x08004813
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	602a      	str	r2, [r5, #0]
 8004740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004748:	2301      	movs	r3, #1
 800474a:	e09f      	b.n	800488c <_printf_i+0x1ec>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	0607      	lsls	r7, r0, #24
 8004752:	f103 0104 	add.w	r1, r3, #4
 8004756:	6029      	str	r1, [r5, #0]
 8004758:	d501      	bpl.n	800475e <_printf_i+0xbe>
 800475a:	681e      	ldr	r6, [r3, #0]
 800475c:	e003      	b.n	8004766 <_printf_i+0xc6>
 800475e:	0646      	lsls	r6, r0, #25
 8004760:	d5fb      	bpl.n	800475a <_printf_i+0xba>
 8004762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004766:	2e00      	cmp	r6, #0
 8004768:	da03      	bge.n	8004772 <_printf_i+0xd2>
 800476a:	232d      	movs	r3, #45	; 0x2d
 800476c:	4276      	negs	r6, r6
 800476e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004772:	485a      	ldr	r0, [pc, #360]	; (80048dc <_printf_i+0x23c>)
 8004774:	230a      	movs	r3, #10
 8004776:	e012      	b.n	800479e <_printf_i+0xfe>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	6820      	ldr	r0, [r4, #0]
 800477c:	1d19      	adds	r1, r3, #4
 800477e:	6029      	str	r1, [r5, #0]
 8004780:	0605      	lsls	r5, r0, #24
 8004782:	d501      	bpl.n	8004788 <_printf_i+0xe8>
 8004784:	681e      	ldr	r6, [r3, #0]
 8004786:	e002      	b.n	800478e <_printf_i+0xee>
 8004788:	0641      	lsls	r1, r0, #25
 800478a:	d5fb      	bpl.n	8004784 <_printf_i+0xe4>
 800478c:	881e      	ldrh	r6, [r3, #0]
 800478e:	4853      	ldr	r0, [pc, #332]	; (80048dc <_printf_i+0x23c>)
 8004790:	2f6f      	cmp	r7, #111	; 0x6f
 8004792:	bf0c      	ite	eq
 8004794:	2308      	moveq	r3, #8
 8004796:	230a      	movne	r3, #10
 8004798:	2100      	movs	r1, #0
 800479a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800479e:	6865      	ldr	r5, [r4, #4]
 80047a0:	60a5      	str	r5, [r4, #8]
 80047a2:	2d00      	cmp	r5, #0
 80047a4:	bfa2      	ittt	ge
 80047a6:	6821      	ldrge	r1, [r4, #0]
 80047a8:	f021 0104 	bicge.w	r1, r1, #4
 80047ac:	6021      	strge	r1, [r4, #0]
 80047ae:	b90e      	cbnz	r6, 80047b4 <_printf_i+0x114>
 80047b0:	2d00      	cmp	r5, #0
 80047b2:	d04b      	beq.n	800484c <_printf_i+0x1ac>
 80047b4:	4615      	mov	r5, r2
 80047b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80047ba:	fb03 6711 	mls	r7, r3, r1, r6
 80047be:	5dc7      	ldrb	r7, [r0, r7]
 80047c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047c4:	4637      	mov	r7, r6
 80047c6:	42bb      	cmp	r3, r7
 80047c8:	460e      	mov	r6, r1
 80047ca:	d9f4      	bls.n	80047b6 <_printf_i+0x116>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d10b      	bne.n	80047e8 <_printf_i+0x148>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	07de      	lsls	r6, r3, #31
 80047d4:	d508      	bpl.n	80047e8 <_printf_i+0x148>
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6861      	ldr	r1, [r4, #4]
 80047da:	4299      	cmp	r1, r3
 80047dc:	bfde      	ittt	le
 80047de:	2330      	movle	r3, #48	; 0x30
 80047e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047e8:	1b52      	subs	r2, r2, r5
 80047ea:	6122      	str	r2, [r4, #16]
 80047ec:	f8cd a000 	str.w	sl, [sp]
 80047f0:	464b      	mov	r3, r9
 80047f2:	aa03      	add	r2, sp, #12
 80047f4:	4621      	mov	r1, r4
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff fee4 	bl	80045c4 <_printf_common>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d14a      	bne.n	8004896 <_printf_i+0x1f6>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004804:	b004      	add	sp, #16
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	4833      	ldr	r0, [pc, #204]	; (80048e0 <_printf_i+0x240>)
 8004814:	2778      	movs	r7, #120	; 0x78
 8004816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	6829      	ldr	r1, [r5, #0]
 800481e:	061f      	lsls	r7, r3, #24
 8004820:	f851 6b04 	ldr.w	r6, [r1], #4
 8004824:	d402      	bmi.n	800482c <_printf_i+0x18c>
 8004826:	065f      	lsls	r7, r3, #25
 8004828:	bf48      	it	mi
 800482a:	b2b6      	uxthmi	r6, r6
 800482c:	07df      	lsls	r7, r3, #31
 800482e:	bf48      	it	mi
 8004830:	f043 0320 	orrmi.w	r3, r3, #32
 8004834:	6029      	str	r1, [r5, #0]
 8004836:	bf48      	it	mi
 8004838:	6023      	strmi	r3, [r4, #0]
 800483a:	b91e      	cbnz	r6, 8004844 <_printf_i+0x1a4>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f023 0320 	bic.w	r3, r3, #32
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	2310      	movs	r3, #16
 8004846:	e7a7      	b.n	8004798 <_printf_i+0xf8>
 8004848:	4824      	ldr	r0, [pc, #144]	; (80048dc <_printf_i+0x23c>)
 800484a:	e7e4      	b.n	8004816 <_printf_i+0x176>
 800484c:	4615      	mov	r5, r2
 800484e:	e7bd      	b.n	80047cc <_printf_i+0x12c>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	6826      	ldr	r6, [r4, #0]
 8004854:	6961      	ldr	r1, [r4, #20]
 8004856:	1d18      	adds	r0, r3, #4
 8004858:	6028      	str	r0, [r5, #0]
 800485a:	0635      	lsls	r5, r6, #24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	d501      	bpl.n	8004864 <_printf_i+0x1c4>
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	e002      	b.n	800486a <_printf_i+0x1ca>
 8004864:	0670      	lsls	r0, r6, #25
 8004866:	d5fb      	bpl.n	8004860 <_printf_i+0x1c0>
 8004868:	8019      	strh	r1, [r3, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	4615      	mov	r5, r2
 8004870:	e7bc      	b.n	80047ec <_printf_i+0x14c>
 8004872:	682b      	ldr	r3, [r5, #0]
 8004874:	1d1a      	adds	r2, r3, #4
 8004876:	602a      	str	r2, [r5, #0]
 8004878:	681d      	ldr	r5, [r3, #0]
 800487a:	6862      	ldr	r2, [r4, #4]
 800487c:	2100      	movs	r1, #0
 800487e:	4628      	mov	r0, r5
 8004880:	f7fb fcb6 	bl	80001f0 <memchr>
 8004884:	b108      	cbz	r0, 800488a <_printf_i+0x1ea>
 8004886:	1b40      	subs	r0, r0, r5
 8004888:	6060      	str	r0, [r4, #4]
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	2300      	movs	r3, #0
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004894:	e7aa      	b.n	80047ec <_printf_i+0x14c>
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	462a      	mov	r2, r5
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	47d0      	blx	sl
 80048a0:	3001      	adds	r0, #1
 80048a2:	d0ad      	beq.n	8004800 <_printf_i+0x160>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	079b      	lsls	r3, r3, #30
 80048a8:	d413      	bmi.n	80048d2 <_printf_i+0x232>
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	4298      	cmp	r0, r3
 80048b0:	bfb8      	it	lt
 80048b2:	4618      	movlt	r0, r3
 80048b4:	e7a6      	b.n	8004804 <_printf_i+0x164>
 80048b6:	2301      	movs	r3, #1
 80048b8:	4632      	mov	r2, r6
 80048ba:	4649      	mov	r1, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	47d0      	blx	sl
 80048c0:	3001      	adds	r0, #1
 80048c2:	d09d      	beq.n	8004800 <_printf_i+0x160>
 80048c4:	3501      	adds	r5, #1
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	9903      	ldr	r1, [sp, #12]
 80048ca:	1a5b      	subs	r3, r3, r1
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	dcf2      	bgt.n	80048b6 <_printf_i+0x216>
 80048d0:	e7eb      	b.n	80048aa <_printf_i+0x20a>
 80048d2:	2500      	movs	r5, #0
 80048d4:	f104 0619 	add.w	r6, r4, #25
 80048d8:	e7f5      	b.n	80048c6 <_printf_i+0x226>
 80048da:	bf00      	nop
 80048dc:	08004d0d 	.word	0x08004d0d
 80048e0:	08004d1e 	.word	0x08004d1e

080048e4 <__sflush_r>:
 80048e4:	898a      	ldrh	r2, [r1, #12]
 80048e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ea:	4605      	mov	r5, r0
 80048ec:	0710      	lsls	r0, r2, #28
 80048ee:	460c      	mov	r4, r1
 80048f0:	d458      	bmi.n	80049a4 <__sflush_r+0xc0>
 80048f2:	684b      	ldr	r3, [r1, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dc05      	bgt.n	8004904 <__sflush_r+0x20>
 80048f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	dc02      	bgt.n	8004904 <__sflush_r+0x20>
 80048fe:	2000      	movs	r0, #0
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004906:	2e00      	cmp	r6, #0
 8004908:	d0f9      	beq.n	80048fe <__sflush_r+0x1a>
 800490a:	2300      	movs	r3, #0
 800490c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004910:	682f      	ldr	r7, [r5, #0]
 8004912:	6a21      	ldr	r1, [r4, #32]
 8004914:	602b      	str	r3, [r5, #0]
 8004916:	d032      	beq.n	800497e <__sflush_r+0x9a>
 8004918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	075a      	lsls	r2, r3, #29
 800491e:	d505      	bpl.n	800492c <__sflush_r+0x48>
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	1ac0      	subs	r0, r0, r3
 8004924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004926:	b10b      	cbz	r3, 800492c <__sflush_r+0x48>
 8004928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800492a:	1ac0      	subs	r0, r0, r3
 800492c:	2300      	movs	r3, #0
 800492e:	4602      	mov	r2, r0
 8004930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004932:	6a21      	ldr	r1, [r4, #32]
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	d106      	bne.n	800494c <__sflush_r+0x68>
 800493e:	6829      	ldr	r1, [r5, #0]
 8004940:	291d      	cmp	r1, #29
 8004942:	d82b      	bhi.n	800499c <__sflush_r+0xb8>
 8004944:	4a29      	ldr	r2, [pc, #164]	; (80049ec <__sflush_r+0x108>)
 8004946:	410a      	asrs	r2, r1
 8004948:	07d6      	lsls	r6, r2, #31
 800494a:	d427      	bmi.n	800499c <__sflush_r+0xb8>
 800494c:	2200      	movs	r2, #0
 800494e:	6062      	str	r2, [r4, #4]
 8004950:	04d9      	lsls	r1, r3, #19
 8004952:	6922      	ldr	r2, [r4, #16]
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	d504      	bpl.n	8004962 <__sflush_r+0x7e>
 8004958:	1c42      	adds	r2, r0, #1
 800495a:	d101      	bne.n	8004960 <__sflush_r+0x7c>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b903      	cbnz	r3, 8004962 <__sflush_r+0x7e>
 8004960:	6560      	str	r0, [r4, #84]	; 0x54
 8004962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004964:	602f      	str	r7, [r5, #0]
 8004966:	2900      	cmp	r1, #0
 8004968:	d0c9      	beq.n	80048fe <__sflush_r+0x1a>
 800496a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800496e:	4299      	cmp	r1, r3
 8004970:	d002      	beq.n	8004978 <__sflush_r+0x94>
 8004972:	4628      	mov	r0, r5
 8004974:	f7ff fbea 	bl	800414c <_free_r>
 8004978:	2000      	movs	r0, #0
 800497a:	6360      	str	r0, [r4, #52]	; 0x34
 800497c:	e7c0      	b.n	8004900 <__sflush_r+0x1c>
 800497e:	2301      	movs	r3, #1
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	1c41      	adds	r1, r0, #1
 8004986:	d1c8      	bne.n	800491a <__sflush_r+0x36>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0c5      	beq.n	800491a <__sflush_r+0x36>
 800498e:	2b1d      	cmp	r3, #29
 8004990:	d001      	beq.n	8004996 <__sflush_r+0xb2>
 8004992:	2b16      	cmp	r3, #22
 8004994:	d101      	bne.n	800499a <__sflush_r+0xb6>
 8004996:	602f      	str	r7, [r5, #0]
 8004998:	e7b1      	b.n	80048fe <__sflush_r+0x1a>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	e7ad      	b.n	8004900 <__sflush_r+0x1c>
 80049a4:	690f      	ldr	r7, [r1, #16]
 80049a6:	2f00      	cmp	r7, #0
 80049a8:	d0a9      	beq.n	80048fe <__sflush_r+0x1a>
 80049aa:	0793      	lsls	r3, r2, #30
 80049ac:	680e      	ldr	r6, [r1, #0]
 80049ae:	bf08      	it	eq
 80049b0:	694b      	ldreq	r3, [r1, #20]
 80049b2:	600f      	str	r7, [r1, #0]
 80049b4:	bf18      	it	ne
 80049b6:	2300      	movne	r3, #0
 80049b8:	eba6 0807 	sub.w	r8, r6, r7
 80049bc:	608b      	str	r3, [r1, #8]
 80049be:	f1b8 0f00 	cmp.w	r8, #0
 80049c2:	dd9c      	ble.n	80048fe <__sflush_r+0x1a>
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049c8:	4643      	mov	r3, r8
 80049ca:	463a      	mov	r2, r7
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b0      	blx	r6
 80049d0:	2800      	cmp	r0, #0
 80049d2:	dc06      	bgt.n	80049e2 <__sflush_r+0xfe>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049da:	81a3      	strh	r3, [r4, #12]
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e0:	e78e      	b.n	8004900 <__sflush_r+0x1c>
 80049e2:	4407      	add	r7, r0
 80049e4:	eba8 0800 	sub.w	r8, r8, r0
 80049e8:	e7e9      	b.n	80049be <__sflush_r+0xda>
 80049ea:	bf00      	nop
 80049ec:	dfbffffe 	.word	0xdfbffffe

080049f0 <_fflush_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	690b      	ldr	r3, [r1, #16]
 80049f4:	4605      	mov	r5, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	b913      	cbnz	r3, 8004a00 <_fflush_r+0x10>
 80049fa:	2500      	movs	r5, #0
 80049fc:	4628      	mov	r0, r5
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	b118      	cbz	r0, 8004a0a <_fflush_r+0x1a>
 8004a02:	6a03      	ldr	r3, [r0, #32]
 8004a04:	b90b      	cbnz	r3, 8004a0a <_fflush_r+0x1a>
 8004a06:	f7ff fa9b 	bl	8003f40 <__sinit>
 8004a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f3      	beq.n	80049fa <_fflush_r+0xa>
 8004a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a14:	07d0      	lsls	r0, r2, #31
 8004a16:	d404      	bmi.n	8004a22 <_fflush_r+0x32>
 8004a18:	0599      	lsls	r1, r3, #22
 8004a1a:	d402      	bmi.n	8004a22 <_fflush_r+0x32>
 8004a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1e:	f7ff fb93 	bl	8004148 <__retarget_lock_acquire_recursive>
 8004a22:	4628      	mov	r0, r5
 8004a24:	4621      	mov	r1, r4
 8004a26:	f7ff ff5d 	bl	80048e4 <__sflush_r>
 8004a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a2c:	07da      	lsls	r2, r3, #31
 8004a2e:	4605      	mov	r5, r0
 8004a30:	d4e4      	bmi.n	80049fc <_fflush_r+0xc>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	059b      	lsls	r3, r3, #22
 8004a36:	d4e1      	bmi.n	80049fc <_fflush_r+0xc>
 8004a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a3a:	f7ff fb86 	bl	800414a <__retarget_lock_release_recursive>
 8004a3e:	e7dd      	b.n	80049fc <_fflush_r+0xc>

08004a40 <__swbuf_r>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	460e      	mov	r6, r1
 8004a44:	4614      	mov	r4, r2
 8004a46:	4605      	mov	r5, r0
 8004a48:	b118      	cbz	r0, 8004a52 <__swbuf_r+0x12>
 8004a4a:	6a03      	ldr	r3, [r0, #32]
 8004a4c:	b90b      	cbnz	r3, 8004a52 <__swbuf_r+0x12>
 8004a4e:	f7ff fa77 	bl	8003f40 <__sinit>
 8004a52:	69a3      	ldr	r3, [r4, #24]
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	071a      	lsls	r2, r3, #28
 8004a5a:	d525      	bpl.n	8004aa8 <__swbuf_r+0x68>
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	b31b      	cbz	r3, 8004aa8 <__swbuf_r+0x68>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	6922      	ldr	r2, [r4, #16]
 8004a64:	1a98      	subs	r0, r3, r2
 8004a66:	6963      	ldr	r3, [r4, #20]
 8004a68:	b2f6      	uxtb	r6, r6
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	4637      	mov	r7, r6
 8004a6e:	dc04      	bgt.n	8004a7a <__swbuf_r+0x3a>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7ff ffbc 	bl	80049f0 <_fflush_r>
 8004a78:	b9e0      	cbnz	r0, 8004ab4 <__swbuf_r+0x74>
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60a3      	str	r3, [r4, #8]
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	6022      	str	r2, [r4, #0]
 8004a86:	701e      	strb	r6, [r3, #0]
 8004a88:	6962      	ldr	r2, [r4, #20]
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d004      	beq.n	8004a9a <__swbuf_r+0x5a>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	07db      	lsls	r3, r3, #31
 8004a94:	d506      	bpl.n	8004aa4 <__swbuf_r+0x64>
 8004a96:	2e0a      	cmp	r6, #10
 8004a98:	d104      	bne.n	8004aa4 <__swbuf_r+0x64>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7ff ffa7 	bl	80049f0 <_fflush_r>
 8004aa2:	b938      	cbnz	r0, 8004ab4 <__swbuf_r+0x74>
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f806 	bl	8004abc <__swsetup_r>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d0d5      	beq.n	8004a60 <__swbuf_r+0x20>
 8004ab4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ab8:	e7f4      	b.n	8004aa4 <__swbuf_r+0x64>
	...

08004abc <__swsetup_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <__swsetup_r+0xac>)
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	b118      	cbz	r0, 8004ad0 <__swsetup_r+0x14>
 8004ac8:	6a03      	ldr	r3, [r0, #32]
 8004aca:	b90b      	cbnz	r3, 8004ad0 <__swsetup_r+0x14>
 8004acc:	f7ff fa38 	bl	8003f40 <__sinit>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ad6:	0718      	lsls	r0, r3, #28
 8004ad8:	d422      	bmi.n	8004b20 <__swsetup_r+0x64>
 8004ada:	06d9      	lsls	r1, r3, #27
 8004adc:	d407      	bmi.n	8004aee <__swsetup_r+0x32>
 8004ade:	2309      	movs	r3, #9
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aec:	e034      	b.n	8004b58 <__swsetup_r+0x9c>
 8004aee:	0758      	lsls	r0, r3, #29
 8004af0:	d512      	bpl.n	8004b18 <__swsetup_r+0x5c>
 8004af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af4:	b141      	cbz	r1, 8004b08 <__swsetup_r+0x4c>
 8004af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004afa:	4299      	cmp	r1, r3
 8004afc:	d002      	beq.n	8004b04 <__swsetup_r+0x48>
 8004afe:	4628      	mov	r0, r5
 8004b00:	f7ff fb24 	bl	800414c <_free_r>
 8004b04:	2300      	movs	r3, #0
 8004b06:	6363      	str	r3, [r4, #52]	; 0x34
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	2300      	movs	r3, #0
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f043 0308 	orr.w	r3, r3, #8
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	b94b      	cbnz	r3, 8004b38 <__swsetup_r+0x7c>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d003      	beq.n	8004b38 <__swsetup_r+0x7c>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f850 	bl	8004bd8 <__smakebuf_r>
 8004b38:	89a0      	ldrh	r0, [r4, #12]
 8004b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3e:	f010 0301 	ands.w	r3, r0, #1
 8004b42:	d00a      	beq.n	8004b5a <__swsetup_r+0x9e>
 8004b44:	2300      	movs	r3, #0
 8004b46:	60a3      	str	r3, [r4, #8]
 8004b48:	6963      	ldr	r3, [r4, #20]
 8004b4a:	425b      	negs	r3, r3
 8004b4c:	61a3      	str	r3, [r4, #24]
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	b943      	cbnz	r3, 8004b64 <__swsetup_r+0xa8>
 8004b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b56:	d1c4      	bne.n	8004ae2 <__swsetup_r+0x26>
 8004b58:	bd38      	pop	{r3, r4, r5, pc}
 8004b5a:	0781      	lsls	r1, r0, #30
 8004b5c:	bf58      	it	pl
 8004b5e:	6963      	ldrpl	r3, [r4, #20]
 8004b60:	60a3      	str	r3, [r4, #8]
 8004b62:	e7f4      	b.n	8004b4e <__swsetup_r+0x92>
 8004b64:	2000      	movs	r0, #0
 8004b66:	e7f7      	b.n	8004b58 <__swsetup_r+0x9c>
 8004b68:	20000064 	.word	0x20000064

08004b6c <_sbrk_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d06      	ldr	r5, [pc, #24]	; (8004b88 <_sbrk_r+0x1c>)
 8004b70:	2300      	movs	r3, #0
 8004b72:	4604      	mov	r4, r0
 8004b74:	4608      	mov	r0, r1
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	f7fc f988 	bl	8000e8c <_sbrk>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_sbrk_r+0x1a>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_sbrk_r+0x1a>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	200007c8 	.word	0x200007c8

08004b8c <__swhatbuf_r>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	460c      	mov	r4, r1
 8004b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b94:	2900      	cmp	r1, #0
 8004b96:	b096      	sub	sp, #88	; 0x58
 8004b98:	4615      	mov	r5, r2
 8004b9a:	461e      	mov	r6, r3
 8004b9c:	da0d      	bge.n	8004bba <__swhatbuf_r+0x2e>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	bf0c      	ite	eq
 8004baa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004bae:	2340      	movne	r3, #64	; 0x40
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	6031      	str	r1, [r6, #0]
 8004bb4:	602b      	str	r3, [r5, #0]
 8004bb6:	b016      	add	sp, #88	; 0x58
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	466a      	mov	r2, sp
 8004bbc:	f000 f848 	bl	8004c50 <_fstat_r>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	dbec      	blt.n	8004b9e <__swhatbuf_r+0x12>
 8004bc4:	9901      	ldr	r1, [sp, #4]
 8004bc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004bca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004bce:	4259      	negs	r1, r3
 8004bd0:	4159      	adcs	r1, r3
 8004bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd6:	e7eb      	b.n	8004bb0 <__swhatbuf_r+0x24>

08004bd8 <__smakebuf_r>:
 8004bd8:	898b      	ldrh	r3, [r1, #12]
 8004bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bdc:	079d      	lsls	r5, r3, #30
 8004bde:	4606      	mov	r6, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	d507      	bpl.n	8004bf4 <__smakebuf_r+0x1c>
 8004be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	6123      	str	r3, [r4, #16]
 8004bec:	2301      	movs	r3, #1
 8004bee:	6163      	str	r3, [r4, #20]
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	ab01      	add	r3, sp, #4
 8004bf6:	466a      	mov	r2, sp
 8004bf8:	f7ff ffc8 	bl	8004b8c <__swhatbuf_r>
 8004bfc:	9900      	ldr	r1, [sp, #0]
 8004bfe:	4605      	mov	r5, r0
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff fb0f 	bl	8004224 <_malloc_r>
 8004c06:	b948      	cbnz	r0, 8004c1c <__smakebuf_r+0x44>
 8004c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c0c:	059a      	lsls	r2, r3, #22
 8004c0e:	d4ef      	bmi.n	8004bf0 <__smakebuf_r+0x18>
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	e7e3      	b.n	8004be4 <__smakebuf_r+0xc>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	6020      	str	r0, [r4, #0]
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	9b00      	ldr	r3, [sp, #0]
 8004c28:	6163      	str	r3, [r4, #20]
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	6120      	str	r0, [r4, #16]
 8004c2e:	b15b      	cbz	r3, 8004c48 <__smakebuf_r+0x70>
 8004c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c34:	4630      	mov	r0, r6
 8004c36:	f000 f81d 	bl	8004c74 <_isatty_r>
 8004c3a:	b128      	cbz	r0, 8004c48 <__smakebuf_r+0x70>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	431d      	orrs	r5, r3
 8004c4c:	81a5      	strh	r5, [r4, #12]
 8004c4e:	e7cf      	b.n	8004bf0 <__smakebuf_r+0x18>

08004c50 <_fstat_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d07      	ldr	r5, [pc, #28]	; (8004c70 <_fstat_r+0x20>)
 8004c54:	2300      	movs	r3, #0
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	f7fc f8ec 	bl	8000e3a <_fstat>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d102      	bne.n	8004c6c <_fstat_r+0x1c>
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	b103      	cbz	r3, 8004c6c <_fstat_r+0x1c>
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	bd38      	pop	{r3, r4, r5, pc}
 8004c6e:	bf00      	nop
 8004c70:	200007c8 	.word	0x200007c8

08004c74 <_isatty_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	; (8004c90 <_isatty_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fc f8eb 	bl	8000e5a <_isatty>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_isatty_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_isatty_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200007c8 	.word	0x200007c8

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
