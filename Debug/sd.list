
sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800ac80  0800ac80  0001ac80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b204  0800b204  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b20c  0800b20c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b20c  0800b20c  0001b20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000009c0  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bac  20000bac  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012990  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ea6  00000000  00000000  00032bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001050  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c7f  00000000  00000000  00036ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002657b  00000000  00000000  00037767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001564a  00000000  00000000  0005dce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d977c  00000000  00000000  0007332c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000560c  00000000  00000000  0014caa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001520b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac68 	.word	0x0800ac68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800ac68 	.word	0x0800ac68

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to uart debug
int _write(int file, char *ptr, int len) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&UART_HANDLE, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <_write+0x28>)
 8000edc:	f002 fbde 	bl	800369c <HAL_UART_Transmit>
    return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000260 	.word	0x20000260

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fd78 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f828 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 f91e 	bl	800113c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f00:	f000 f8c4 	bl	800108c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f04:	f000 f8ec 	bl	80010e0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8000f08:	f000 f88a 	bl	8001020 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000f0c:	f003 ff00 	bl	8004d10 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  mount_filesystem(&fs);
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <main+0x48>)
 8000f12:	f000 fa41 	bl	8001398 <mount_filesystem>
  list_root_files();
 8000f16:	f000 fa57 	bl	80013c8 <list_root_files>
  log_event("registro.txt", "2024-05-15 12:34:56", "New event bro");
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <main+0x4c>)
 8000f1c:	4908      	ldr	r1, [pc, #32]	; (8000f40 <main+0x50>)
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x54>)
 8000f20:	f000 fabc 	bl	800149c <log_event>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <main+0x58>)
 8000f28:	f001 f95d 	bl	80021e6 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f30:	f000 fdcc 	bl	8001acc <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f34:	e7f6      	b.n	8000f24 <main+0x34>
 8000f36:	bf00      	nop
 8000f38:	200007e0 	.word	0x200007e0
 8000f3c:	0800ac80 	.word	0x0800ac80
 8000f40:	0800ac90 	.word	0x0800ac90
 8000f44:	0800aca4 	.word	0x0800aca4
 8000f48:	40020400 	.word	0x40020400

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f007 fe20 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc0:	23a8      	movs	r3, #168	; 0xa8
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fa3f 	bl	8002454 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 f9d6 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fca0 	bl	8002944 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100a:	f000 f9bf 	bl	800138c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_SPI4_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <MX_SPI4_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SPI4_Init+0x64>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_SPI4_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_SPI4_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_SPI4_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SPI4_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_SPI4_Init+0x64>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SPI4_Init+0x64>)
 8001054:	2238      	movs	r2, #56	; 0x38
 8001056:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_SPI4_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SPI4_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_SPI4_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_SPI4_Init+0x64>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_SPI4_Init+0x64>)
 8001072:	f001 fe87 	bl	8002d84 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 f986 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000208 	.word	0x20000208
 8001088:	40013400 	.word	0x40013400

0800108c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_USART3_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010c4:	f002 fa90 	bl	80035e8 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f95d 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000260 	.word	0x20000260
 80010dc:	40004800 	.word	0x40004800

080010e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001100:	2202      	movs	r2, #2
 8001102:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001106:	2201      	movs	r2, #1
 8001108:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001118:	2201      	movs	r2, #1
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	f001 f879 	bl	800221a <HAL_PCD_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 f92d 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200002d4 	.word	0x200002d4

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b86      	ldr	r3, [pc, #536]	; (8001370 <MX_GPIO_Init+0x234>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a85      	ldr	r2, [pc, #532]	; (8001370 <MX_GPIO_Init+0x234>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b83      	ldr	r3, [pc, #524]	; (8001370 <MX_GPIO_Init+0x234>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <MX_GPIO_Init+0x234>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a7e      	ldr	r2, [pc, #504]	; (8001370 <MX_GPIO_Init+0x234>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <MX_GPIO_Init+0x234>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b78      	ldr	r3, [pc, #480]	; (8001370 <MX_GPIO_Init+0x234>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a77      	ldr	r2, [pc, #476]	; (8001370 <MX_GPIO_Init+0x234>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b75      	ldr	r3, [pc, #468]	; (8001370 <MX_GPIO_Init+0x234>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <MX_GPIO_Init+0x234>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a70      	ldr	r2, [pc, #448]	; (8001370 <MX_GPIO_Init+0x234>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <MX_GPIO_Init+0x234>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <MX_GPIO_Init+0x234>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a69      	ldr	r2, [pc, #420]	; (8001370 <MX_GPIO_Init+0x234>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <MX_GPIO_Init+0x234>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <MX_GPIO_Init+0x234>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a62      	ldr	r2, [pc, #392]	; (8001370 <MX_GPIO_Init+0x234>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b60      	ldr	r3, [pc, #384]	; (8001370 <MX_GPIO_Init+0x234>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <MX_GPIO_Init+0x234>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <MX_GPIO_Init+0x234>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <MX_GPIO_Init+0x234>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f244 0181 	movw	r1, #16513	; 0x4081
 800121c:	4855      	ldr	r0, [pc, #340]	; (8001374 <MX_GPIO_Init+0x238>)
 800121e:	f000 ffc9 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001228:	4853      	ldr	r0, [pc, #332]	; (8001378 <MX_GPIO_Init+0x23c>)
 800122a:	f000 ffc3 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2140      	movs	r1, #64	; 0x40
 8001232:	4852      	ldr	r0, [pc, #328]	; (800137c <MX_GPIO_Init+0x240>)
 8001234:	f000 ffbe 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	484c      	ldr	r0, [pc, #304]	; (8001380 <MX_GPIO_Init+0x244>)
 8001250:	f000 fe04 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001254:	2332      	movs	r3, #50	; 0x32
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001264:	230b      	movs	r3, #11
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4844      	ldr	r0, [pc, #272]	; (8001380 <MX_GPIO_Init+0x244>)
 8001270:	f000 fdf4 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001274:	2386      	movs	r3, #134	; 0x86
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001284:	230b      	movs	r3, #11
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	483d      	ldr	r0, [pc, #244]	; (8001384 <MX_GPIO_Init+0x248>)
 8001290:	f000 fde4 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001294:	f244 0381 	movw	r3, #16513	; 0x4081
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4831      	ldr	r0, [pc, #196]	; (8001374 <MX_GPIO_Init+0x238>)
 80012ae:	f000 fdd5 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 80012b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	482b      	ldr	r0, [pc, #172]	; (8001378 <MX_GPIO_Init+0x23c>)
 80012cc:	f000 fdc6 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e2:	230b      	movs	r3, #11
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4821      	ldr	r0, [pc, #132]	; (8001374 <MX_GPIO_Init+0x238>)
 80012ee:	f000 fdb5 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_GPIO_Init+0x240>)
 800130a:	f000 fda7 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4816      	ldr	r0, [pc, #88]	; (800137c <MX_GPIO_Init+0x240>)
 8001322:	f000 fd9b 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001326:	2340      	movs	r3, #64	; 0x40
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001336:	2307      	movs	r3, #7
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_GPIO_Init+0x24c>)
 8001342:	f000 fd8b 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001346:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001358:	230b      	movs	r3, #11
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_GPIO_Init+0x240>)
 8001364:	f000 fd7a 	bl	8001e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400
 8001378:	40021000 	.word	0x40021000
 800137c:	40021800 	.word	0x40021800
 8001380:	40020800 	.word	0x40020800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020c00 	.word	0x40020c00

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <mount_filesystem>:
 */
#include <string.h>
#include <stdio.h>
#include "ff.h"

void mount_filesystem(FATFS *fs) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (f_mount(fs, "", 0) != FR_OK) {
 80013a0:	2200      	movs	r2, #0
 80013a2:	4907      	ldr	r1, [pc, #28]	; (80013c0 <mount_filesystem+0x28>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f005 fff7 	bl	8007398 <f_mount>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <mount_filesystem+0x1e>
	  printf("Failed to mount filesystem\n");
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <mount_filesystem+0x2c>)
 80013b2:	f007 fac1 	bl	8008938 <puts>
	}
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	0800acb4 	.word	0x0800acb4
 80013c4:	0800acb8 	.word	0x0800acb8

080013c8 <list_root_files>:
void list_root_files(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0d4      	sub	sp, #336	; 0x150
 80013cc:	af00      	add	r7, sp, #0
    FRESULT res;
    FILINFO fno;
    DIR dir;
    char *path = ""; // Root directory
 80013ce:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <list_root_files+0xc0>)
 80013d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    char buffer[256];

    // Open the root directory
    res = f_opendir(&dir, path);
 80013d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013d8:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80013dc:	4618      	mov	r0, r3
 80013de:	f006 fbfc 	bl	8007bda <f_opendir>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
    if (res == FR_OK) {
 80013e8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d13f      	bne.n	8001470 <list_root_files+0xa8>
        while (1) {
            // Read a directory item
            res = f_readdir(&dir, &fno);
 80013f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80013f4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f006 fc86 	bl	8007d0c <f_readdir>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
            // Break on error or end of directory
            if (res != FR_OK || fno.fname[0] == 0) break;
 8001406:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800140a:	2b00      	cmp	r3, #0
 800140c:	d12a      	bne.n	8001464 <list_root_files+0x9c>
 800140e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8001412:	2b00      	cmp	r3, #0
 8001414:	d026      	beq.n	8001464 <list_root_files+0x9c>
            // Skip hidden files
            if (fno.fattrib & AM_HID) continue;
 8001416:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d11e      	bne.n	8001460 <list_root_files+0x98>

            // Check if it is a directory or file
            if (fno.fattrib & AM_DIR) {
 8001422:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <list_root_files+0x7a>
                sprintf(buffer, "DIR:  %s\r\n", fno.fname);
 800142e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001432:	f103 0209 	add.w	r2, r3, #9
 8001436:	463b      	mov	r3, r7
 8001438:	4914      	ldr	r1, [pc, #80]	; (800148c <list_root_files+0xc4>)
 800143a:	4618      	mov	r0, r3
 800143c:	f007 fab8 	bl	80089b0 <siprintf>
 8001440:	e008      	b.n	8001454 <list_root_files+0x8c>
            } else {
                sprintf(buffer, "FILE: %s\r\n", fno.fname);
 8001442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001446:	f103 0209 	add.w	r2, r3, #9
 800144a:	463b      	mov	r3, r7
 800144c:	4910      	ldr	r1, [pc, #64]	; (8001490 <list_root_files+0xc8>)
 800144e:	4618      	mov	r0, r3
 8001450:	f007 faae 	bl	80089b0 <siprintf>
            }
            // Print the file or directory name
            printf("%s", buffer);
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	480e      	ldr	r0, [pc, #56]	; (8001494 <list_root_files+0xcc>)
 800145a:	f007 fa07 	bl	800886c <iprintf>
 800145e:	e7c7      	b.n	80013f0 <list_root_files+0x28>
            if (fno.fattrib & AM_HID) continue;
 8001460:	bf00      	nop
            res = f_readdir(&dir, &fno);
 8001462:	e7c5      	b.n	80013f0 <list_root_files+0x28>
        }
        f_closedir(&dir);
 8001464:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fc29 	bl	8007cc0 <f_closedir>
    } else {
        printf("Failed to open directory, error code: %d\r\n", res);
    }
}
 800146e:	e005      	b.n	800147c <list_root_files+0xb4>
        printf("Failed to open directory, error code: %d\r\n", res);
 8001470:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001474:	4619      	mov	r1, r3
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <list_root_files+0xd0>)
 8001478:	f007 f9f8 	bl	800886c <iprintf>
}
 800147c:	bf00      	nop
 800147e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	0800acb4 	.word	0x0800acb4
 800148c:	0800acd4 	.word	0x0800acd4
 8001490:	0800ace0 	.word	0x0800ace0
 8001494:	0800acec 	.word	0x0800acec
 8001498:	0800acf0 	.word	0x0800acf0

0800149c <log_event>:

void log_event(const char *filename, const char *time, const char *event) {
 800149c:	b580      	push	{r7, lr}
 800149e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014a8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80014ac:	6018      	str	r0, [r3, #0]
 80014ae:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014b2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80014b6:	6019      	str	r1, [r3, #0]
 80014b8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014bc:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80014c0:	601a      	str	r2, [r3, #0]
    FIL file;      // File object
    FRESULT res;   // FatFS result
    char buffer[128];
    res = f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND);
 80014c2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014c6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80014ca:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80014ce:	2232      	movs	r2, #50	; 0x32
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	f005 ffa7 	bl	8007424 <f_open>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    if (res == FR_OK) {
 80014dc:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d13b      	bne.n	800155c <log_event+0xc0>
        // Create log entry with a timestamp

        snprintf(buffer, sizeof(buffer), "%s: %s\n", time, event);
 80014e4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80014e8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80014ec:	f107 0014 	add.w	r0, r7, #20
 80014f0:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 80014f4:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	9200      	str	r2, [sp, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <log_event+0xd0>)
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	f007 fa21 	bl	8008948 <sniprintf>

        unsigned int bytes_written;
        if (f_write(&file, buffer, strlen(buffer), &bytes_written) == FR_OK ){
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fec0 	bl	8000290 <strlen>
 8001510:	4602      	mov	r2, r0
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	f107 0114 	add.w	r1, r7, #20
 800151a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800151e:	f006 f93f 	bl	80077a0 <f_write>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <log_event+0xa2>
        	printf("%s wrote in file: %s", buffer, filename);
 8001528:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800152c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001530:	f107 0114 	add.w	r1, r7, #20
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <log_event+0xd4>)
 8001538:	f007 f998 	bl	800886c <iprintf>
 800153c:	e002      	b.n	8001544 <log_event+0xa8>
        } else {
        	printf("Error writing the file in the SD CARD\n");
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <log_event+0xd8>)
 8001540:	f007 f9fa 	bl	8008938 <puts>
        }
        if (f_close(&file) != FR_OK){
 8001544:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fb1c 	bl	8007b86 <f_close>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <log_event+0xc6>
        	printf("Error closing the file in the SD CARD\n");
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <log_event+0xdc>)
 8001556:	f007 f9ef 	bl	8008938 <puts>
        }
    }else{
    	printf("Error opening the file in the SD CARD\n");
    }
}
 800155a:	e002      	b.n	8001562 <log_event+0xc6>
    	printf("Error opening the file in the SD CARD\n");
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <log_event+0xe0>)
 800155e:	f007 f9eb 	bl	8008938 <puts>
}
 8001562:	bf00      	nop
 8001564:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	0800ad1c 	.word	0x0800ad1c
 8001570:	0800ad24 	.word	0x0800ad24
 8001574:	0800ad3c 	.word	0x0800ad3c
 8001578:	0800ad64 	.word	0x0800ad64
 800157c:	0800ad8c 	.word	0x0800ad8c

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_SPI_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12c      	bne.n	800164c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_SPI_MspInit+0x88>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_SPI_MspInit+0x88>)
 80015fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_SPI_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800162a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800163c:	2305      	movs	r3, #5
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_SPI_MspInit+0x8c>)
 8001648:	f000 fc08 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40013400 	.word	0x40013400
 8001658:	40023800 	.word	0x40023800
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_UART_MspInit+0x94>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d134      	bne.n	80016ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_UART_MspInit+0x98>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_UART_MspInit+0x98>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_UART_MspInit+0x98>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x98>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_UART_MspInit+0x98>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_UART_MspInit+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016cc:	2307      	movs	r3, #7
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <HAL_UART_MspInit+0x9c>)
 80016d8:	f000 fbc0 	bl	8001e5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2027      	movs	r0, #39	; 0x27
 80016e2:	f000 faf2 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016e6:	2027      	movs	r0, #39	; 0x27
 80016e8:	f000 fb0b 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020c00 	.word	0x40020c00

08001700 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001720:	d13f      	bne.n	80017a2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_PCD_MspInit+0xac>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a20      	ldr	r2, [pc, #128]	; (80017ac <HAL_PCD_MspInit+0xac>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_PCD_MspInit+0xac>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800173e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001750:	230a      	movs	r3, #10
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4815      	ldr	r0, [pc, #84]	; (80017b0 <HAL_PCD_MspInit+0xb0>)
 800175c:	f000 fb7e 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	480e      	ldr	r0, [pc, #56]	; (80017b0 <HAL_PCD_MspInit+0xb0>)
 8001776:	f000 fb71 	bl	8001e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_PCD_MspInit+0xac>)
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_PCD_MspInit+0xac>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001784:	6353      	str	r3, [r2, #52]	; 0x34
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_PCD_MspInit+0xac>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_PCD_MspInit+0xac>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_PCD_MspInit+0xac>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f944 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART3_IRQHandler+0x10>)
 800180e:	f001 ffd7 	bl	80037c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000260 	.word	0x20000260

0800181c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_kill>:

int _kill(int pid, int sig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001836:	f007 fa05 	bl	8008c44 <__errno>
 800183a:	4603      	mov	r3, r0
 800183c:	2216      	movs	r2, #22
 800183e:	601a      	str	r2, [r3, #0]
  return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_exit>:

void _exit (int status)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffe7 	bl	800182c <_kill>
  while (1) {}    /* Make sure we hang here */
 800185e:	e7fe      	b.n	800185e <_exit+0x12>

08001860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e00a      	b.n	8001888 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001872:	f3af 8000 	nop.w
 8001876:	4601      	mov	r1, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf0      	blt.n	8001872 <_read+0x12>
  }

  return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_close>:
  }
  return len;
}

int _close(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c2:	605a      	str	r2, [r3, #4]
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_isatty>:

int _isatty(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f007 f986 	bl	8008c44 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20030000 	.word	0x20030000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000a10 	.word	0x20000a10
 800196c:	20000bb0 	.word	0x20000bb0

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199a:	490e      	ldr	r1, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b0:	4c0b      	ldr	r4, [pc, #44]	; (80019e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019be:	f7ff ffd7 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f007 f945 	bl	8008c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fa93 	bl	8000ef0 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80019d8:	0800b214 	.word	0x0800b214
  ldr r2, =_sbss
 80019dc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80019e0:	20000bac 	.word	0x20000bac

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f94f 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fdb0 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f967 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a68:	f000 f92f 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000a14 	.word	0x20000a14

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000a14 	.word	0x20000a14

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_Delay+0x44>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	bf00      	nop
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff feb6 	bl	8001ab4 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d008      	beq.n	8001d68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e052      	b.n	8001e0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0216 	bic.w	r2, r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d103      	bne.n	8001d98 <HAL_DMA_Abort+0x62>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0208 	bic.w	r2, r2, #8
 8001da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db8:	e013      	b.n	8001de2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dba:	f7ff fe7b 	bl	8001ab4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d90c      	bls.n	8001de2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e015      	b.n	8001e0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e4      	bne.n	8001dba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	223f      	movs	r2, #63	; 0x3f
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d004      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e00c      	b.n	8001e4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2205      	movs	r2, #5
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e177      	b.n	8002168 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8166 	bne.w	8002162 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d005      	beq.n	8001eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d130      	bne.n	8001f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 0201 	and.w	r2, r3, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d017      	beq.n	8001f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d123      	bne.n	8001fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80c0 	beq.w	8002162 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b66      	ldr	r3, [pc, #408]	; (8002180 <HAL_GPIO_Init+0x324>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_GPIO_Init+0x324>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_GPIO_Init+0x324>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffe:	4a61      	ldr	r2, [pc, #388]	; (8002184 <HAL_GPIO_Init+0x328>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d037      	beq.n	800209a <HAL_GPIO_Init+0x23e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_GPIO_Init+0x23a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a56      	ldr	r2, [pc, #344]	; (8002190 <HAL_GPIO_Init+0x334>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x236>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a55      	ldr	r2, [pc, #340]	; (8002194 <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x232>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x22e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x22a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x226>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x222>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x21e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	; (80021ac <HAL_GPIO_Init+0x350>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x21a>
 8002072:	2309      	movs	r3, #9
 8002074:	e012      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002076:	230a      	movs	r3, #10
 8002078:	e010      	b.n	800209c <HAL_GPIO_Init+0x240>
 800207a:	2308      	movs	r3, #8
 800207c:	e00e      	b.n	800209c <HAL_GPIO_Init+0x240>
 800207e:	2307      	movs	r3, #7
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002082:	2306      	movs	r3, #6
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x240>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x240>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x240>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <HAL_GPIO_Init+0x328>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_GPIO_Init+0x354>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <HAL_GPIO_Init+0x354>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_GPIO_Init+0x354>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_GPIO_Init+0x354>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_GPIO_Init+0x354>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_GPIO_Init+0x354>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_GPIO_Init+0x354>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_GPIO_Init+0x354>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f ae84 	bls.w	8001e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40021400 	.word	0x40021400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40021c00 	.word	0x40021c00
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40022400 	.word	0x40022400
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f8:	887a      	ldrh	r2, [r7, #2]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43d9      	mvns	r1, r3
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	400b      	ands	r3, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b08f      	sub	sp, #60	; 0x3c
 800221e:	af0a      	add	r7, sp, #40	; 0x28
 8002220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e10f      	b.n	800244c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fa5a 	bl	8001700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f002 faaf 	bl	80047ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	687e      	ldr	r6, [r7, #4]
 8002278:	466d      	mov	r5, sp
 800227a:	f106 0410 	add.w	r4, r6, #16
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228a:	e885 0003 	stmia.w	r5, {r0, r1}
 800228e:	1d33      	adds	r3, r6, #4
 8002290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f002 fa3a 	bl	800470c <USB_CoreInit>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0d0      	b.n	800244c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fa9d 	bl	80047f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e04a      	b.n	8002352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	333d      	adds	r3, #61	; 0x3d
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	333c      	adds	r3, #60	; 0x3c
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	b298      	uxth	r0, r3
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3344      	adds	r3, #68	; 0x44
 80022f8:	4602      	mov	r2, r0
 80022fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3340      	adds	r3, #64	; 0x40
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3348      	adds	r3, #72	; 0x48
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	334c      	adds	r3, #76	; 0x4c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3354      	adds	r3, #84	; 0x54
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	3301      	adds	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3af      	bcc.n	80022bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e044      	b.n	80023ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3b5      	bcc.n	8002362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	687e      	ldr	r6, [r7, #4]
 80023fe:	466d      	mov	r5, sp
 8002400:	f106 0410 	add.w	r4, r6, #16
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002410:	e885 0003 	stmia.w	r5, {r0, r1}
 8002414:	1d33      	adds	r3, r6, #4
 8002416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f002 fa35 	bl	8004888 <USB_DevInit>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e00d      	b.n	800244c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f002 fc00 	bl	8004c4a <USB_DevDisconnect>

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e267      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00c      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e242      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6f      	ldr	r2, [pc, #444]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6c      	ldr	r2, [pc, #432]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a68      	ldr	r2, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff fad2 	bl	8001ab4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff face 	bl	8001ab4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e207      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fabe 	bl	8001ab4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff faba 	bl	8001ab4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1f3      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c7      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_OscConfig+0x244>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7ff fa73 	bl	8001ab4 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff fa6f 	bl	8001ab4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a8      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4925      	ldr	r1, [pc, #148]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x244>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fa52 	bl	8001ab4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002614:	f7ff fa4e 	bl	8001ab4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e187      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCC_OscConfig+0x248>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff fa32 	bl	8001ab4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7ff fa2e 	bl	8001ab4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e167      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_OscConfig+0x248>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff fa1b 	bl	8001ab4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	e00e      	b.n	80026a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002682:	f7ff fa17 	bl	8001ab4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d907      	bls.n	80026a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e150      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	42470000 	.word	0x42470000
 800269c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ea      	bne.n	8002682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8097 	beq.w	80027e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026be:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a7c      	ldr	r2, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b7a      	ldr	r3, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a73      	ldr	r2, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7ff f9d7 	bl	8001ab4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7ff f9d3 	bl	8001ab4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e10c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x2ea>
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x30c>
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5e      	ldr	r2, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5b      	ldr	r2, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a54      	ldr	r2, [pc, #336]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff f998 	bl	8001ab4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff f994 	bl	8001ab4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0cb      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCC_OscConfig+0x334>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7ff f982 	bl	8001ab4 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff f97e 	bl	8001ab4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0b5      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ee      	bne.n	80027b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a1 	beq.w	8002934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d05c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d141      	bne.n	800288a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff f952 	bl	8001ab4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7ff f94e 	bl	8001ab4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e087      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff f927 	bl	8001ab4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7ff f923 	bl	8001ab4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e05c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x416>
 8002888:	e054      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f910 	bl	8001ab4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7ff f90c 	bl	8001ab4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e045      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x444>
 80028b6:	e03d      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e038      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4ec>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d028      	beq.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d121      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cc      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d90c      	bls.n	8002980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	494d      	ldr	r1, [pc, #308]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d044      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e067      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4934      	ldr	r1, [pc, #208]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7ff f83e 	bl	8001ab4 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7ff f83a 	bl	8001ab4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d20c      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e032      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4916      	ldr	r1, [pc, #88]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aca:	f000 f821 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ff9e 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	0800adf8 	.word	0x0800adf8
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b094      	sub	sp, #80	; 0x50
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b20:	2300      	movs	r3, #0
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b28:	4b79      	ldr	r3, [pc, #484]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x40>
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f200 80e1 	bhi.w	8002cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b42:	e0db      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b48:	e0db      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4a:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b4e:	e0d8      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b50:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	0159      	lsls	r1, r3, #5
 8002b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b94:	0150      	lsls	r0, r2, #5
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	1a51      	subs	r1, r2, r1
 8002b9e:	6139      	str	r1, [r7, #16]
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	018b      	lsls	r3, r1, #6
 8002bb8:	4651      	mov	r1, sl
 8002bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	018a      	lsls	r2, r1, #6
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc8:	4659      	mov	r1, fp
 8002bca:	eb63 0901 	sbc.w	r9, r3, r1
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be2:	4690      	mov	r8, r2
 8002be4:	4699      	mov	r9, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	eb18 0303 	adds.w	r3, r8, r3
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	462b      	mov	r3, r5
 8002bf0:	eb49 0303 	adc.w	r3, r9, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c02:	4629      	mov	r1, r5
 8002c04:	024b      	lsls	r3, r1, #9
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	024a      	lsls	r2, r1, #9
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c16:	2200      	movs	r2, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c20:	f7fd ffd2 	bl	8000bc8 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	e058      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	4611      	mov	r1, r2
 8002c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0159      	lsls	r1, r3, #5
 8002c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5a:	0150      	lsls	r0, r2, #5
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4641      	mov	r1, r8
 8002c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c80:	ebb2 040a 	subs.w	r4, r2, sl
 8002c84:	eb63 050b 	sbc.w	r5, r3, fp
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	00eb      	lsls	r3, r5, #3
 8002c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c96:	00e2      	lsls	r2, r4, #3
 8002c98:	4614      	mov	r4, r2
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	4643      	mov	r3, r8
 8002c9e:	18e3      	adds	r3, r4, r3
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	eb45 0303 	adc.w	r3, r5, r3
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	61fa      	str	r2, [r7, #28]
 8002cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd4:	f7fd ff78 	bl	8000bc8 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3750      	adds	r7, #80	; 0x50
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	0800ae08 	.word	0x0800ae08

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffdc 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	0800ae08 	.word	0x0800ae08

08002d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07b      	b.n	8002e8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da6:	d009      	beq.n	8002dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	e005      	b.n	8002dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fbfa 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	ea42 0103 	orr.w	r1, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	f003 0104 	and.w	r1, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f003 0210 	and.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b088      	sub	sp, #32
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_SPI_Transmit+0x22>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e126      	b.n	8003106 <HAL_SPI_Transmit+0x270>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec0:	f7fe fdf8 	bl	8001ab4 <HAL_GetTick>
 8002ec4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eda:	e10b      	b.n	80030f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Transmit+0x52>
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eec:	e102      	b.n	80030f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f34:	d10f      	bne.n	8002f56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d007      	beq.n	8002f74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7c:	d14b      	bne.n	8003016 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Transmit+0xf6>
 8002f86:	8afb      	ldrh	r3, [r7, #22]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d13e      	bne.n	800300a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	1c9a      	adds	r2, r3, #2
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fb0:	e02b      	b.n	800300a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d112      	bne.n	8002fe6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fe4:	e011      	b.n	800300a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe6:	f7fe fd65 	bl	8001ab4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d803      	bhi.n	8002ffe <HAL_SPI_Transmit+0x168>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Transmit+0x16e>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003008:	e074      	b.n	80030f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ce      	bne.n	8002fb2 <HAL_SPI_Transmit+0x11c>
 8003014:	e04c      	b.n	80030b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Transmit+0x18e>
 800301e:	8afb      	ldrh	r3, [r7, #22]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d140      	bne.n	80030a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800304a:	e02c      	b.n	80030a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d113      	bne.n	8003082 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003080:	e011      	b.n	80030a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003082:	f7fe fd17 	bl	8001ab4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d803      	bhi.n	800309a <HAL_SPI_Transmit+0x204>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d102      	bne.n	80030a0 <HAL_SPI_Transmit+0x20a>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030a4:	e026      	b.n	80030f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1cd      	bne.n	800304c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fa55 	bl	8003564 <SPI_EndRxTxTransaction>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e000      	b.n	80030f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003104:	7ffb      	ldrb	r3, [r7, #31]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08c      	sub	sp, #48	; 0x30
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800311c:	2301      	movs	r3, #1
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x26>
 8003130:	2302      	movs	r3, #2
 8003132:	e18a      	b.n	800344a <HAL_SPI_TransmitReceive+0x33c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800313c:	f7fe fcba 	bl	8001ab4 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00f      	beq.n	800317e <HAL_SPI_TransmitReceive+0x70>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003164:	d107      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x68>
 800316e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003172:	2b04      	cmp	r3, #4
 8003174:	d003      	beq.n	800317e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800317c:	e15b      	b.n	8003436 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x82>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x82>
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003196:	e14e      	b.n	8003436 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d003      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2205      	movs	r2, #5
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	887a      	ldrh	r2, [r7, #2]
 80031c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	887a      	ldrh	r2, [r7, #2]
 80031ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d007      	beq.n	8003200 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003208:	d178      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x10a>
 8003212:	8b7b      	ldrh	r3, [r7, #26]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d166      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323c:	e053      	b.n	80032e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	d11b      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x176>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x176>
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d113      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	1c9a      	adds	r2, r3, #2
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d119      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x1b8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d014      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	b292      	uxth	r2, r2
 80032a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032c2:	2301      	movs	r3, #1
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032c6:	f7fe fbf5 	bl	8001ab4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d807      	bhi.n	80032e6 <HAL_SPI_TransmitReceive+0x1d8>
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d003      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032e4:	e0a7      	b.n	8003436 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1a6      	bne.n	800323e <HAL_SPI_TransmitReceive+0x130>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1a1      	bne.n	800323e <HAL_SPI_TransmitReceive+0x130>
 80032fa:	e07c      	b.n	80033f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_SPI_TransmitReceive+0x1fc>
 8003304:	8b7b      	ldrh	r3, [r7, #26]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d16b      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003330:	e057      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d11c      	bne.n	800337a <HAL_SPI_TransmitReceive+0x26c>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d017      	beq.n	800337a <HAL_SPI_TransmitReceive+0x26c>
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d114      	bne.n	800337a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d119      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x2ae>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d014      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b8:	2301      	movs	r3, #1
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033bc:	f7fe fb7a 	bl	8001ab4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d803      	bhi.n	80033d4 <HAL_SPI_TransmitReceive+0x2c6>
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d2:	d102      	bne.n	80033da <HAL_SPI_TransmitReceive+0x2cc>
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033e0:	e029      	b.n	8003436 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1a2      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x224>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d19d      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f8b2 	bl	8003564 <SPI_EndRxTxTransaction>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003412:	e010      	b.n	8003436 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	e000      	b.n	8003436 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003434:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800344a:	4618      	mov	r0, r3
 800344c:	3730      	adds	r7, #48	; 0x30
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003464:	f7fe fb26 	bl	8001ab4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003474:	f7fe fb1e 	bl	8001ab4 <HAL_GetTick>
 8003478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	015b      	lsls	r3, r3, #5
 8003480:	0d1b      	lsrs	r3, r3, #20
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800348a:	e054      	b.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003492:	d050      	beq.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003494:	f7fe fb0e 	bl	8001ab4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d902      	bls.n	80034aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d13d      	bne.n	8003526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c2:	d111      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034cc:	d004      	beq.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d107      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f0:	d10f      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e017      	b.n	8003556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3b01      	subs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	429a      	cmp	r2, r3
 8003552:	d19b      	bne.n	800348c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000000 	.word	0x20000000

08003564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <SPI_EndRxTxTransaction+0x7c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <SPI_EndRxTxTransaction+0x80>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0d5b      	lsrs	r3, r3, #21
 800357c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358e:	d112      	bne.n	80035b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff5a 	bl	8003454 <SPI_WaitFlagStateUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3b01      	subs	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d0f2      	beq.n	80035b6 <SPI_EndRxTxTransaction+0x52>
 80035d0:	e000      	b.n	80035d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035d2:	bf00      	nop
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000000 	.word	0x20000000
 80035e4:	165e9f81 	.word	0x165e9f81

080035e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e04a      	b.n	8003690 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d111      	bne.n	800362a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fbc4 	bl	8003d9c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_UART_Init+0xb0>)
 8003620:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2224      	movs	r2, #36	; 0x24
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003640:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fdee 	bl	8004224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003656:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003666:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	08001661 	.word	0x08001661

0800369c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d17c      	bne.n	80037b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_UART_Transmit+0x2c>
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e075      	b.n	80037b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_UART_Transmit+0x3e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e06e      	b.n	80037b8 <HAL_UART_Transmit+0x11c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2221      	movs	r2, #33	; 0x21
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f0:	f7fe f9e0 	bl	8001ab4 <HAL_GetTick>
 80036f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d108      	bne.n	800371e <HAL_UART_Transmit+0x82>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	e003      	b.n	8003726 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800372e:	e02a      	b.n	8003786 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	2180      	movs	r1, #128	; 0x80
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb66 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e036      	b.n	80037b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800375e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3302      	adds	r3, #2
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	e007      	b.n	8003778 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3301      	adds	r3, #1
 8003776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1cf      	bne.n	8003730 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb36 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e006      	b.n	80037b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b0ba      	sub	sp, #232	; 0xe8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_UART_IRQHandler+0x66>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fc43 	bl	80040aa <UART_Receive_IT>
      return;
 8003824:	e25b      	b.n	8003cde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80e1 	beq.w	80039f2 <HAL_UART_IRQHandler+0x232>
 8003830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003840:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80d4 	beq.w	80039f2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_UART_IRQHandler+0xae>
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0xd2>
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_UART_IRQHandler+0xf6>
 800389e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_UART_IRQHandler+0x126>
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0208 	orr.w	r2, r3, #8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 81f2 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_UART_IRQHandler+0x14e>
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fbce 	bl	80040aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <HAL_UART_IRQHandler+0x17a>
 8003932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d051      	beq.n	80039de <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fad4 	bl	8003ee8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d142      	bne.n	80039d4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800396c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800397a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800397e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1d9      	bne.n	800394e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d013      	beq.n	80039ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4a7f      	ldr	r2, [pc, #508]	; (8003ba4 <HAL_UART_IRQHandler+0x3e4>)
 80039a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fa31 	bl	8001e16 <HAL_DMA_Abort_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d019      	beq.n	80039ee <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c4:	4610      	mov	r0, r2
 80039c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e011      	b.n	80039ee <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d2:	e00c      	b.n	80039ee <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e007      	b.n	80039ee <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ec:	e172      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ee:	bf00      	nop
    return;
 80039f0:	e170      	b.n	8003cd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 814c 	bne.w	8003c94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8145 	beq.w	8003c94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 813e 	beq.w	8003c94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	f040 80b5 	bne.w	8003ba8 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8142 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	f080 813b 	bcs.w	8003cd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a74:	f000 8088 	beq.w	8003b88 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003aa4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ab0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1d9      	bne.n	8003a78 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ae8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003aec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003af0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e1      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3314      	adds	r3, #20
 8003b06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e3      	bne.n	8003b00 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	f023 0310 	bic.w	r3, r3, #16
 8003b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b6c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e3      	bne.n	8003b46 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe f8d7 	bl	8001d36 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003b94:	b292      	uxth	r2, r2
 8003b96:	1a8a      	subs	r2, r1, r2
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ba0:	e09a      	b.n	8003cd8 <HAL_UART_IRQHandler+0x518>
 8003ba2:	bf00      	nop
 8003ba4:	08003faf 	.word	0x08003faf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 808c 	beq.w	8003cdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8087 	beq.w	8003cdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e3      	bne.n	8003bce <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	623b      	str	r3, [r7, #32]
   return(result);
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e3      	bne.n	8003c06 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
 8003c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c70:	61fa      	str	r2, [r7, #28]
 8003c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	69b9      	ldr	r1, [r7, #24]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e3      	bne.n	8003c4c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c88:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c92:	e023      	b.n	8003cdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x4f4>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f993 	bl	8003fd8 <UART_Transmit_IT>
    return;
 8003cb2:	e014      	b.n	8003cde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <HAL_UART_IRQHandler+0x51e>
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f9d3 	bl	8004078 <UART_EndTransmit_IT>
    return;
 8003cd2:	e004      	b.n	8003cde <HAL_UART_IRQHandler+0x51e>
    return;
 8003cd4:	bf00      	nop
 8003cd6:	e002      	b.n	8003cde <HAL_UART_IRQHandler+0x51e>
      return;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <HAL_UART_IRQHandler+0x51e>
      return;
 8003cdc:	bf00      	nop
  }
}
 8003cde:	37e8      	adds	r7, #232	; 0xe8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <UART_InitCallbacksToDefault+0x4c>)
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <UART_InitCallbacksToDefault+0x50>)
 8003dae:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <UART_InitCallbacksToDefault+0x54>)
 8003db4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <UART_InitCallbacksToDefault+0x58>)
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <UART_InitCallbacksToDefault+0x5c>)
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <UART_InitCallbacksToDefault+0x60>)
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <UART_InitCallbacksToDefault+0x64>)
 8003dcc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <UART_InitCallbacksToDefault+0x68>)
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <UART_InitCallbacksToDefault+0x6c>)
 8003dd8:	669a      	str	r2, [r3, #104]	; 0x68

}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	08003cf9 	.word	0x08003cf9
 8003dec:	08003ce5 	.word	0x08003ce5
 8003df0:	08003d21 	.word	0x08003d21
 8003df4:	08003d0d 	.word	0x08003d0d
 8003df8:	08003d35 	.word	0x08003d35
 8003dfc:	08003d49 	.word	0x08003d49
 8003e00:	08003d5d 	.word	0x08003d5d
 8003e04:	08003d71 	.word	0x08003d71
 8003e08:	08003d85 	.word	0x08003d85

08003e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b090      	sub	sp, #64	; 0x40
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1c:	e050      	b.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e24:	d04c      	beq.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2c:	f7fd fe42 	bl	8001ab4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d241      	bcs.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5c:	637a      	str	r2, [r7, #52]	; 0x34
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3314      	adds	r3, #20
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e90:	623a      	str	r2, [r7, #32]
 8003e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e00f      	b.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d09f      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3740      	adds	r7, #64	; 0x40
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b095      	sub	sp, #84	; 0x54
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f10:	643a      	str	r2, [r7, #64]	; 0x40
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d119      	bne.n	8003f94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	647b      	str	r3, [r7, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f80:	61ba      	str	r2, [r7, #24]
 8003f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fa2:	bf00      	nop
 8003fa4:	3754      	adds	r7, #84	; 0x54
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b21      	cmp	r3, #33	; 0x21
 8003fea:	d13e      	bne.n	800406a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d114      	bne.n	8004020 <UART_Transmit_IT+0x48>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d110      	bne.n	8004020 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004012:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]
 800401e:	e008      	b.n	8004032 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	1c59      	adds	r1, r3, #1
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6211      	str	r1, [r2, #32]
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4619      	mov	r1, r3
 8004040:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004054:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004064:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b08c      	sub	sp, #48	; 0x30
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b22      	cmp	r3, #34	; 0x22
 80040bc:	f040 80ad 	bne.w	800421a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d117      	bne.n	80040fa <UART_Receive_IT+0x50>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d113      	bne.n	80040fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	1c9a      	adds	r2, r3, #2
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
 80040f8:	e026      	b.n	8004148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d007      	beq.n	800411e <UART_Receive_IT+0x74>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <UART_Receive_IT+0x82>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e008      	b.n	800413e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004138:	b2da      	uxtb	r2, r3
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4619      	mov	r1, r3
 8004156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004158:	2b00      	cmp	r3, #0
 800415a:	d15c      	bne.n	8004216 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0220 	bic.w	r2, r2, #32
 800416a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	2b01      	cmp	r3, #1
 800419a:	d136      	bne.n	800420a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	613b      	str	r3, [r7, #16]
   return(result);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f023 0310 	bic.w	r3, r3, #16
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	623a      	str	r2, [r7, #32]
 80041c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	69f9      	ldr	r1, [r7, #28]
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d10a      	bne.n	80041fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004202:	4611      	mov	r1, r2
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
 8004208:	e003      	b.n	8004212 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e002      	b.n	800421c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3730      	adds	r7, #48	; 0x30
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004228:	b0c0      	sub	sp, #256	; 0x100
 800422a:	af00      	add	r7, sp, #0
 800422c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	68d9      	ldr	r1, [r3, #12]
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	ea40 0301 	orr.w	r3, r0, r1
 800424c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	431a      	orrs	r2, r3
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	431a      	orrs	r2, r3
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800427c:	f021 010c 	bic.w	r1, r1, #12
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800428a:	430b      	orrs	r3, r1
 800428c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429e:	6999      	ldr	r1, [r3, #24]
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	ea40 0301 	orr.w	r3, r0, r1
 80042aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b8f      	ldr	r3, [pc, #572]	; (80044f0 <UART_SetConfig+0x2cc>)
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d005      	beq.n	80042c4 <UART_SetConfig+0xa0>
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b8d      	ldr	r3, [pc, #564]	; (80044f4 <UART_SetConfig+0x2d0>)
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d104      	bne.n	80042ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7fe fd4a 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 80042c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042cc:	e003      	b.n	80042d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ce:	f7fe fd31 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80042d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e0:	f040 810c 	bne.w	80044fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042f6:	4622      	mov	r2, r4
 80042f8:	462b      	mov	r3, r5
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80042fe:	415b      	adcs	r3, r3
 8004300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004306:	4621      	mov	r1, r4
 8004308:	eb12 0801 	adds.w	r8, r2, r1
 800430c:	4629      	mov	r1, r5
 800430e:	eb43 0901 	adc.w	r9, r3, r1
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800431e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004326:	4690      	mov	r8, r2
 8004328:	4699      	mov	r9, r3
 800432a:	4623      	mov	r3, r4
 800432c:	eb18 0303 	adds.w	r3, r8, r3
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004334:	462b      	mov	r3, r5
 8004336:	eb49 0303 	adc.w	r3, r9, r3
 800433a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800434a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800434e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004352:	460b      	mov	r3, r1
 8004354:	18db      	adds	r3, r3, r3
 8004356:	653b      	str	r3, [r7, #80]	; 0x50
 8004358:	4613      	mov	r3, r2
 800435a:	eb42 0303 	adc.w	r3, r2, r3
 800435e:	657b      	str	r3, [r7, #84]	; 0x54
 8004360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004368:	f7fc fc2e 	bl	8000bc8 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4b61      	ldr	r3, [pc, #388]	; (80044f8 <UART_SetConfig+0x2d4>)
 8004372:	fba3 2302 	umull	r2, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	011c      	lsls	r4, r3, #4
 800437a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800437e:	2200      	movs	r2, #0
 8004380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	1891      	adds	r1, r2, r2
 8004392:	64b9      	str	r1, [r7, #72]	; 0x48
 8004394:	415b      	adcs	r3, r3
 8004396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800439c:	4641      	mov	r1, r8
 800439e:	eb12 0a01 	adds.w	sl, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb43 0b01 	adc.w	fp, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043bc:	4692      	mov	sl, r2
 80043be:	469b      	mov	fp, r3
 80043c0:	4643      	mov	r3, r8
 80043c2:	eb1a 0303 	adds.w	r3, sl, r3
 80043c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043ca:	464b      	mov	r3, r9
 80043cc:	eb4b 0303 	adc.w	r3, fp, r3
 80043d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043e8:	460b      	mov	r3, r1
 80043ea:	18db      	adds	r3, r3, r3
 80043ec:	643b      	str	r3, [r7, #64]	; 0x40
 80043ee:	4613      	mov	r3, r2
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
 80043f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043fe:	f7fc fbe3 	bl	8000bc8 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4611      	mov	r1, r2
 8004408:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <UART_SetConfig+0x2d4>)
 800440a:	fba3 2301 	umull	r2, r3, r3, r1
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2264      	movs	r2, #100	; 0x64
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	1acb      	subs	r3, r1, r3
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <UART_SetConfig+0x2d4>)
 8004420:	fba3 2302 	umull	r2, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800442c:	441c      	add	r4, r3
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800443c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	1891      	adds	r1, r2, r2
 8004446:	63b9      	str	r1, [r7, #56]	; 0x38
 8004448:	415b      	adcs	r3, r3
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004450:	4641      	mov	r1, r8
 8004452:	1851      	adds	r1, r2, r1
 8004454:	6339      	str	r1, [r7, #48]	; 0x30
 8004456:	4649      	mov	r1, r9
 8004458:	414b      	adcs	r3, r1
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004468:	4659      	mov	r1, fp
 800446a:	00cb      	lsls	r3, r1, #3
 800446c:	4651      	mov	r1, sl
 800446e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004472:	4651      	mov	r1, sl
 8004474:	00ca      	lsls	r2, r1, #3
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	4603      	mov	r3, r0
 800447c:	4642      	mov	r2, r8
 800447e:	189b      	adds	r3, r3, r2
 8004480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004484:	464b      	mov	r3, r9
 8004486:	460a      	mov	r2, r1
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800449c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044a4:	460b      	mov	r3, r1
 80044a6:	18db      	adds	r3, r3, r3
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044aa:	4613      	mov	r3, r2
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044ba:	f7fc fb85 	bl	8000bc8 <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <UART_SetConfig+0x2d4>)
 80044c4:	fba3 1302 	umull	r1, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2164      	movs	r1, #100	; 0x64
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <UART_SetConfig+0x2d4>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f003 0207 	and.w	r2, r3, #7
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4422      	add	r2, r4
 80044ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ec:	e106      	b.n	80046fc <UART_SetConfig+0x4d8>
 80044ee:	bf00      	nop
 80044f0:	40011000 	.word	0x40011000
 80044f4:	40011400 	.word	0x40011400
 80044f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004500:	2200      	movs	r2, #0
 8004502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800450a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800450e:	4642      	mov	r2, r8
 8004510:	464b      	mov	r3, r9
 8004512:	1891      	adds	r1, r2, r2
 8004514:	6239      	str	r1, [r7, #32]
 8004516:	415b      	adcs	r3, r3
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800451e:	4641      	mov	r1, r8
 8004520:	1854      	adds	r4, r2, r1
 8004522:	4649      	mov	r1, r9
 8004524:	eb43 0501 	adc.w	r5, r3, r1
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	00eb      	lsls	r3, r5, #3
 8004532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004536:	00e2      	lsls	r2, r4, #3
 8004538:	4614      	mov	r4, r2
 800453a:	461d      	mov	r5, r3
 800453c:	4643      	mov	r3, r8
 800453e:	18e3      	adds	r3, r4, r3
 8004540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004544:	464b      	mov	r3, r9
 8004546:	eb45 0303 	adc.w	r3, r5, r3
 800454a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800455a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800456a:	4629      	mov	r1, r5
 800456c:	008b      	lsls	r3, r1, #2
 800456e:	4621      	mov	r1, r4
 8004570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004574:	4621      	mov	r1, r4
 8004576:	008a      	lsls	r2, r1, #2
 8004578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800457c:	f7fc fb24 	bl	8000bc8 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4b60      	ldr	r3, [pc, #384]	; (8004708 <UART_SetConfig+0x4e4>)
 8004586:	fba3 2302 	umull	r2, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	011c      	lsls	r4, r3, #4
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800459c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	61b9      	str	r1, [r7, #24]
 80045a8:	415b      	adcs	r3, r3
 80045aa:	61fb      	str	r3, [r7, #28]
 80045ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b0:	4641      	mov	r1, r8
 80045b2:	1851      	adds	r1, r2, r1
 80045b4:	6139      	str	r1, [r7, #16]
 80045b6:	4649      	mov	r1, r9
 80045b8:	414b      	adcs	r3, r1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c8:	4659      	mov	r1, fp
 80045ca:	00cb      	lsls	r3, r1, #3
 80045cc:	4651      	mov	r1, sl
 80045ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d2:	4651      	mov	r1, sl
 80045d4:	00ca      	lsls	r2, r1, #3
 80045d6:	4610      	mov	r0, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	4642      	mov	r2, r8
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045e4:	464b      	mov	r3, r9
 80045e6:	460a      	mov	r2, r1
 80045e8:	eb42 0303 	adc.w	r3, r2, r3
 80045ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004608:	4649      	mov	r1, r9
 800460a:	008b      	lsls	r3, r1, #2
 800460c:	4641      	mov	r1, r8
 800460e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004612:	4641      	mov	r1, r8
 8004614:	008a      	lsls	r2, r1, #2
 8004616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800461a:	f7fc fad5 	bl	8000bc8 <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4611      	mov	r1, r2
 8004624:	4b38      	ldr	r3, [pc, #224]	; (8004708 <UART_SetConfig+0x4e4>)
 8004626:	fba3 2301 	umull	r2, r3, r3, r1
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2264      	movs	r2, #100	; 0x64
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	1acb      	subs	r3, r1, r3
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	3332      	adds	r3, #50	; 0x32
 8004638:	4a33      	ldr	r2, [pc, #204]	; (8004708 <UART_SetConfig+0x4e4>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004644:	441c      	add	r4, r3
 8004646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800464a:	2200      	movs	r2, #0
 800464c:	673b      	str	r3, [r7, #112]	; 0x70
 800464e:	677a      	str	r2, [r7, #116]	; 0x74
 8004650:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	415b      	adcs	r3, r3
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004664:	4641      	mov	r1, r8
 8004666:	1851      	adds	r1, r2, r1
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	4649      	mov	r1, r9
 800466c:	414b      	adcs	r3, r1
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800467c:	4659      	mov	r1, fp
 800467e:	00cb      	lsls	r3, r1, #3
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004686:	4651      	mov	r1, sl
 8004688:	00ca      	lsls	r2, r1, #3
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	4603      	mov	r3, r0
 8004690:	4642      	mov	r2, r8
 8004692:	189b      	adds	r3, r3, r2
 8004694:	66bb      	str	r3, [r7, #104]	; 0x68
 8004696:	464b      	mov	r3, r9
 8004698:	460a      	mov	r2, r1
 800469a:	eb42 0303 	adc.w	r3, r2, r3
 800469e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	663b      	str	r3, [r7, #96]	; 0x60
 80046aa:	667a      	str	r2, [r7, #100]	; 0x64
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046b8:	4649      	mov	r1, r9
 80046ba:	008b      	lsls	r3, r1, #2
 80046bc:	4641      	mov	r1, r8
 80046be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c2:	4641      	mov	r1, r8
 80046c4:	008a      	lsls	r2, r1, #2
 80046c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046ca:	f7fc fa7d 	bl	8000bc8 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <UART_SetConfig+0x4e4>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <UART_SetConfig+0x4e4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4422      	add	r2, r4
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004708:	51eb851f 	.word	0x51eb851f

0800470c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800470c:	b084      	sub	sp, #16
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	f107 001c 	add.w	r0, r7, #28
 800471a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2b01      	cmp	r3, #1
 8004722:	d122      	bne.n	800476a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800474c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 faa2 	bl	8004ca8 <USB_CoreReset>
 8004764:	4603      	mov	r3, r0
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	e01a      	b.n	80047a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa96 	bl	8004ca8 <USB_CoreReset>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
 8004792:	e005      	b.n	80047a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10b      	bne.n	80047be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f043 0206 	orr.w	r2, r3, #6
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ca:	b004      	add	sp, #16
 80047cc:	4770      	bx	lr

080047ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d115      	bne.n	800483e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800481e:	2001      	movs	r0, #1
 8004820:	f7fd f954 	bl	8001acc <HAL_Delay>
      ms++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa2e 	bl	8004c8c <USB_GetMode>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d01e      	beq.n	8004874 <USB_SetCurrentMode+0x84>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b31      	cmp	r3, #49	; 0x31
 800483a:	d9f0      	bls.n	800481e <USB_SetCurrentMode+0x2e>
 800483c:	e01a      	b.n	8004874 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d115      	bne.n	8004870 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004850:	2001      	movs	r0, #1
 8004852:	f7fd f93b 	bl	8001acc <HAL_Delay>
      ms++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fa15 	bl	8004c8c <USB_GetMode>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <USB_SetCurrentMode+0x84>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b31      	cmp	r3, #49	; 0x31
 800486c:	d9f0      	bls.n	8004850 <USB_SetCurrentMode+0x60>
 800486e:	e001      	b.n	8004874 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e005      	b.n	8004880 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b32      	cmp	r3, #50	; 0x32
 8004878:	d101      	bne.n	800487e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004888:	b084      	sub	sp, #16
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e009      	b.n	80048bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	3340      	adds	r3, #64	; 0x40
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b0e      	cmp	r3, #14
 80048c0:	d9f2      	bls.n	80048a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11c      	bne.n	8004902 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004900:	e00b      	b.n	800491a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004920:	461a      	mov	r2, r3
 8004922:	2300      	movs	r3, #0
 8004924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	4619      	mov	r1, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004934:	461a      	mov	r2, r3
 8004936:	680b      	ldr	r3, [r1, #0]
 8004938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10c      	bne.n	800495a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004946:	2100      	movs	r1, #0
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f965 	bl	8004c18 <USB_SetDevSpeed>
 800494e:	e008      	b.n	8004962 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004950:	2101      	movs	r1, #1
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f960 	bl	8004c18 <USB_SetDevSpeed>
 8004958:	e003      	b.n	8004962 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800495a:	2103      	movs	r1, #3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f95b 	bl	8004c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004962:	2110      	movs	r1, #16
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8f3 	bl	8004b50 <USB_FlushTxFifo>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f91f 	bl	8004bb8 <USB_FlushRxFifo>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	461a      	mov	r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	461a      	mov	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	461a      	mov	r2, r3
 80049a4:	2300      	movs	r3, #0
 80049a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	e043      	b.n	8004a36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c4:	d118      	bne.n	80049f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	461a      	mov	r2, r3
 80049da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e013      	b.n	8004a0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e008      	b.n	8004a0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	461a      	mov	r2, r3
 8004a06:	2300      	movs	r3, #0
 8004a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3301      	adds	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3b7      	bcc.n	80049ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e043      	b.n	8004acc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5a:	d118      	bne.n	8004a8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e013      	b.n	8004aa0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e008      	b.n	8004aa0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d3b7      	bcc.n	8004a44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f043 0210 	orr.w	r2, r3, #16
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699a      	ldr	r2, [r3, #24]
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <USB_DevInit+0x2c4>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f043 0208 	orr.w	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b48:	b004      	add	sp, #16
 8004b4a:	4770      	bx	lr
 8004b4c:	803c3800 	.word	0x803c3800

08004b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <USB_FlushTxFifo+0x64>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e01b      	b.n	8004ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	daf2      	bge.n	8004b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	019b      	lsls	r3, r3, #6
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <USB_FlushTxFifo+0x64>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e006      	b.n	8004ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d0f0      	beq.n	8004b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	00030d40 	.word	0x00030d40

08004bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <USB_FlushRxFifo+0x5c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e018      	b.n	8004c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	daf2      	bge.n	8004bc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2210      	movs	r2, #16
 8004be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3301      	adds	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <USB_FlushRxFifo+0x5c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e006      	b.n	8004c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d0f0      	beq.n	8004be8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	00030d40 	.word	0x00030d40

08004c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c64:	f023 0303 	bic.w	r3, r3, #3
 8004c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0301 	and.w	r3, r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <USB_CoreReset+0x64>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e01b      	b.n	8004cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	daf2      	bge.n	8004cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <USB_CoreReset+0x64>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d0f0      	beq.n	8004cde <USB_CoreReset+0x36>

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	00030d40 	.word	0x00030d40

08004d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d14:	4904      	ldr	r1, [pc, #16]	; (8004d28 <MX_FATFS_Init+0x18>)
 8004d16:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_FATFS_Init+0x1c>)
 8004d18:	f003 f882 	bl	8007e20 <FATFS_LinkDriver>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <MX_FATFS_Init+0x20>)
 8004d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000a1c 	.word	0x20000a1c
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	20000a18 	.word	0x20000a18

08004d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 f9d7 	bl	8005104 <USER_SPI_initialize>
 8004d56:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fab3 	bl	80052d8 <USER_SPI_status>
 8004d72:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004d8c:	7bf8      	ldrb	r0, [r7, #15]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	f000 fab6 	bl	8005304 <USER_SPI_read>
 8004d98:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004db2:	7bf8      	ldrb	r0, [r7, #15]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	f000 fb09 	bl	80053d0 <USER_SPI_write>
 8004dbe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	603a      	str	r2, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004dd8:	79b9      	ldrb	r1, [r7, #6]
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fb72 	bl	80054c8 <USER_SPI_ioctl>
 8004de4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004df8:	f7fc fe5c 	bl	8001ab4 <HAL_GetTick>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <SPI_Timer_On+0x20>)
 8004e00:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004e02:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <SPI_Timer_On+0x24>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000a24 	.word	0x20000a24
 8004e14:	20000a28 	.word	0x20000a28

08004e18 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004e1c:	f7fc fe4a 	bl	8001ab4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <SPI_Timer_Status+0x24>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <SPI_Timer_Status+0x28>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	bf34      	ite	cc
 8004e30:	2301      	movcc	r3, #1
 8004e32:	2300      	movcs	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000a24 	.word	0x20000a24
 8004e40:	20000a28 	.word	0x20000a28

08004e44 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004e4e:	f107 020f 	add.w	r2, r7, #15
 8004e52:	1df9      	adds	r1, r7, #7
 8004e54:	2332      	movs	r3, #50	; 0x32
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4804      	ldr	r0, [pc, #16]	; (8004e6c <xchg_spi+0x28>)
 8004e5c:	f7fe f957 	bl	800310e <HAL_SPI_TransmitReceive>
    return rxDat;
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000208 	.word	0x20000208

08004e70 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e00a      	b.n	8004e96 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	18d4      	adds	r4, r2, r3
 8004e86:	20ff      	movs	r0, #255	; 0xff
 8004e88:	f7ff ffdc 	bl	8004e44 <xchg_spi>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3f0      	bcc.n	8004e80 <rcvr_spi_multi+0x10>
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd90      	pop	{r4, r7, pc}

08004ea8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <xmit_spi_multi+0x24>)
 8004ebe:	f7fd ffea 	bl	8002e96 <HAL_SPI_Transmit>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000208 	.word	0x20000208

08004ed0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004ed8:	f7fc fdec 	bl	8001ab4 <HAL_GetTick>
 8004edc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004ee2:	20ff      	movs	r0, #255	; 0xff
 8004ee4:	f7ff ffae 	bl	8004e44 <xchg_spi>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2bff      	cmp	r3, #255	; 0xff
 8004ef0:	d007      	beq.n	8004f02 <wait_ready+0x32>
 8004ef2:	f7fc fddf 	bl	8001ab4 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d8ef      	bhi.n	8004ee2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2bff      	cmp	r3, #255	; 0xff
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f22:	4804      	ldr	r0, [pc, #16]	; (8004f34 <despiselect+0x1c>)
 8004f24:	f7fd f946 	bl	80021b4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004f28:	20ff      	movs	r0, #255	; 0xff
 8004f2a:	f7ff ff8b 	bl	8004e44 <xchg_spi>

}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f42:	480a      	ldr	r0, [pc, #40]	; (8004f6c <spiselect+0x34>)
 8004f44:	f7fd f936 	bl	80021b4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004f48:	20ff      	movs	r0, #255	; 0xff
 8004f4a:	f7ff ff7b 	bl	8004e44 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f52:	f7ff ffbd 	bl	8004ed0 <wait_ready>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <spiselect+0x28>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e002      	b.n	8004f66 <spiselect+0x2e>

	despiselect();
 8004f60:	f7ff ffda 	bl	8004f18 <despiselect>
	return 0;	/* Timeout */
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000

08004f70 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004f7a:	20c8      	movs	r0, #200	; 0xc8
 8004f7c:	f7ff ff38 	bl	8004df0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004f80:	20ff      	movs	r0, #255	; 0xff
 8004f82:	f7ff ff5f 	bl	8004e44 <xchg_spi>
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2bff      	cmp	r3, #255	; 0xff
 8004f8e:	d104      	bne.n	8004f9a <rcvr_datablock+0x2a>
 8004f90:	f7ff ff42 	bl	8004e18 <SPI_Timer_Status>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f2      	bne.n	8004f80 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	2bfe      	cmp	r3, #254	; 0xfe
 8004f9e:	d001      	beq.n	8004fa4 <rcvr_datablock+0x34>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e00a      	b.n	8004fba <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ff62 	bl	8004e70 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004fac:	20ff      	movs	r0, #255	; 0xff
 8004fae:	f7ff ff49 	bl	8004e44 <xchg_spi>
 8004fb2:	20ff      	movs	r0, #255	; 0xff
 8004fb4:	f7ff ff46 	bl	8004e44 <xchg_spi>

	return 1;						/* Function succeeded */
 8004fb8:	2301      	movs	r3, #1
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fd2:	f7ff ff7d 	bl	8004ed0 <wait_ready>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <xmit_datablock+0x1e>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e01e      	b.n	800501e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ff2e 	bl	8004e44 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2bfd      	cmp	r3, #253	; 0xfd
 8004fec:	d016      	beq.n	800501c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff ff58 	bl	8004ea8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004ff8:	20ff      	movs	r0, #255	; 0xff
 8004ffa:	f7ff ff23 	bl	8004e44 <xchg_spi>
 8004ffe:	20ff      	movs	r0, #255	; 0xff
 8005000:	f7ff ff20 	bl	8004e44 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005004:	20ff      	movs	r0, #255	; 0xff
 8005006:	f7ff ff1d 	bl	8004e44 <xchg_spi>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2b05      	cmp	r3, #5
 8005016:	d001      	beq.n	800501c <xmit_datablock+0x5a>
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <xmit_datablock+0x5c>
	}
	return 1;
 800501c:	2301      	movs	r3, #1
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	6039      	str	r1, [r7, #0]
 8005030:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	2b00      	cmp	r3, #0
 8005038:	da0e      	bge.n	8005058 <send_cmd+0x32>
		cmd &= 0x7F;
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005040:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005042:	2100      	movs	r1, #0
 8005044:	2037      	movs	r0, #55	; 0x37
 8005046:	f7ff ffee 	bl	8005026 <send_cmd>
 800504a:	4603      	mov	r3, r0
 800504c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800504e:	7bbb      	ldrb	r3, [r7, #14]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d901      	bls.n	8005058 <send_cmd+0x32>
 8005054:	7bbb      	ldrb	r3, [r7, #14]
 8005056:	e051      	b.n	80050fc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d008      	beq.n	8005070 <send_cmd+0x4a>
		despiselect();
 800505e:	f7ff ff5b 	bl	8004f18 <despiselect>
		if (!spiselect()) return 0xFF;
 8005062:	f7ff ff69 	bl	8004f38 <spiselect>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <send_cmd+0x4a>
 800506c:	23ff      	movs	r3, #255	; 0xff
 800506e:	e045      	b.n	80050fc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005076:	b2db      	uxtb	r3, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fee3 	bl	8004e44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	0e1b      	lsrs	r3, r3, #24
 8005082:	b2db      	uxtb	r3, r3
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fedd 	bl	8004e44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fed7 	bl	8004e44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	b2db      	uxtb	r3, r3
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fed1 	bl	8004e44 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fecc 	bl	8004e44 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <send_cmd+0x94>
 80050b6:	2395      	movs	r3, #149	; 0x95
 80050b8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d101      	bne.n	80050c4 <send_cmd+0x9e>
 80050c0:	2387      	movs	r3, #135	; 0x87
 80050c2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff febc 	bl	8004e44 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d102      	bne.n	80050d8 <send_cmd+0xb2>
 80050d2:	20ff      	movs	r0, #255	; 0xff
 80050d4:	f7ff feb6 	bl	8004e44 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80050d8:	230a      	movs	r3, #10
 80050da:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80050dc:	20ff      	movs	r0, #255	; 0xff
 80050de:	f7ff feb1 	bl	8004e44 <xchg_spi>
 80050e2:	4603      	mov	r3, r0
 80050e4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80050e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da05      	bge.n	80050fa <send_cmd+0xd4>
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <send_cmd+0xb6>

	return res;							/* Return received response */
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <USER_SPI_initialize+0x14>
 8005114:	2301      	movs	r3, #1
 8005116:	e0d4      	b.n	80052c2 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005118:	4b6c      	ldr	r3, [pc, #432]	; (80052cc <USER_SPI_initialize+0x1c8>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <USER_SPI_initialize+0x2a>
 8005126:	4b69      	ldr	r3, [pc, #420]	; (80052cc <USER_SPI_initialize+0x1c8>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e0c9      	b.n	80052c2 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800512e:	4b68      	ldr	r3, [pc, #416]	; (80052d0 <USER_SPI_initialize+0x1cc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b66      	ldr	r3, [pc, #408]	; (80052d0 <USER_SPI_initialize+0x1cc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800513c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800513e:	230a      	movs	r3, #10
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e005      	b.n	8005150 <USER_SPI_initialize+0x4c>
 8005144:	20ff      	movs	r0, #255	; 0xff
 8005146:	f7ff fe7d 	bl	8004e44 <xchg_spi>
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	3b01      	subs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f6      	bne.n	8005144 <USER_SPI_initialize+0x40>

	ty = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800515a:	2100      	movs	r1, #0
 800515c:	2000      	movs	r0, #0
 800515e:	f7ff ff62 	bl	8005026 <send_cmd>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 808b 	bne.w	8005280 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800516a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800516e:	f7ff fe3f 	bl	8004df0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005172:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005176:	2008      	movs	r0, #8
 8005178:	f7ff ff55 	bl	8005026 <send_cmd>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d151      	bne.n	8005226 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
 8005186:	e00d      	b.n	80051a4 <USER_SPI_initialize+0xa0>
 8005188:	7bfc      	ldrb	r4, [r7, #15]
 800518a:	20ff      	movs	r0, #255	; 0xff
 800518c:	f7ff fe5a 	bl	8004e44 <xchg_spi>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	f104 0310 	add.w	r3, r4, #16
 8005198:	443b      	add	r3, r7
 800519a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	3301      	adds	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d9ee      	bls.n	8005188 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80051aa:	7abb      	ldrb	r3, [r7, #10]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d167      	bne.n	8005280 <USER_SPI_initialize+0x17c>
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	2baa      	cmp	r3, #170	; 0xaa
 80051b4:	d164      	bne.n	8005280 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80051b6:	bf00      	nop
 80051b8:	f7ff fe2e 	bl	8004e18 <SPI_Timer_Status>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <USER_SPI_initialize+0xce>
 80051c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80051c6:	20a9      	movs	r0, #169	; 0xa9
 80051c8:	f7ff ff2d 	bl	8005026 <send_cmd>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f2      	bne.n	80051b8 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80051d2:	f7ff fe21 	bl	8004e18 <SPI_Timer_Status>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d051      	beq.n	8005280 <USER_SPI_initialize+0x17c>
 80051dc:	2100      	movs	r1, #0
 80051de:	203a      	movs	r0, #58	; 0x3a
 80051e0:	f7ff ff21 	bl	8005026 <send_cmd>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d14a      	bne.n	8005280 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	e00d      	b.n	800520c <USER_SPI_initialize+0x108>
 80051f0:	7bfc      	ldrb	r4, [r7, #15]
 80051f2:	20ff      	movs	r0, #255	; 0xff
 80051f4:	f7ff fe26 	bl	8004e44 <xchg_spi>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	f104 0310 	add.w	r3, r4, #16
 8005200:	443b      	add	r3, r7
 8005202:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	3301      	adds	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d9ee      	bls.n	80051f0 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005212:	7a3b      	ldrb	r3, [r7, #8]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <USER_SPI_initialize+0x11c>
 800521c:	230c      	movs	r3, #12
 800521e:	e000      	b.n	8005222 <USER_SPI_initialize+0x11e>
 8005220:	2304      	movs	r3, #4
 8005222:	737b      	strb	r3, [r7, #13]
 8005224:	e02c      	b.n	8005280 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005226:	2100      	movs	r1, #0
 8005228:	20a9      	movs	r0, #169	; 0xa9
 800522a:	f7ff fefc 	bl	8005026 <send_cmd>
 800522e:	4603      	mov	r3, r0
 8005230:	2b01      	cmp	r3, #1
 8005232:	d804      	bhi.n	800523e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005234:	2302      	movs	r3, #2
 8005236:	737b      	strb	r3, [r7, #13]
 8005238:	23a9      	movs	r3, #169	; 0xa9
 800523a:	73bb      	strb	r3, [r7, #14]
 800523c:	e003      	b.n	8005246 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800523e:	2301      	movs	r3, #1
 8005240:	737b      	strb	r3, [r7, #13]
 8005242:	2301      	movs	r3, #1
 8005244:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005246:	bf00      	nop
 8005248:	f7ff fde6 	bl	8004e18 <SPI_Timer_Status>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <USER_SPI_initialize+0x15e>
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff fee5 	bl	8005026 <send_cmd>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f2      	bne.n	8005248 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005262:	f7ff fdd9 	bl	8004e18 <SPI_Timer_Status>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <USER_SPI_initialize+0x178>
 800526c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005270:	2010      	movs	r0, #16
 8005272:	f7ff fed8 	bl	8005026 <send_cmd>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <USER_SPI_initialize+0x17c>
				ty = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <USER_SPI_initialize+0x1d0>)
 8005282:	7b7b      	ldrb	r3, [r7, #13]
 8005284:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005286:	f7ff fe47 	bl	8004f18 <despiselect>

	if (ty) {			/* OK */
 800528a:	7b7b      	ldrb	r3, [r7, #13]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d012      	beq.n	80052b6 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <USER_SPI_initialize+0x1cc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <USER_SPI_initialize+0x1cc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0218 	orr.w	r2, r2, #24
 80052a2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <USER_SPI_initialize+0x1c8>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <USER_SPI_initialize+0x1c8>)
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e002      	b.n	80052bc <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <USER_SPI_initialize+0x1c8>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <USER_SPI_initialize+0x1c8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000020 	.word	0x20000020
 80052d0:	20000208 	.word	0x20000208
 80052d4:	20000a20 	.word	0x20000a20

080052d8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <USER_SPI_status+0x14>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e002      	b.n	80052f2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <USER_SPI_status+0x28>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000020 	.word	0x20000020

08005304 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <USER_SPI_read+0x1c>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <USER_SPI_read+0x20>
 8005320:	2304      	movs	r3, #4
 8005322:	e04d      	b.n	80053c0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005324:	4b28      	ldr	r3, [pc, #160]	; (80053c8 <USER_SPI_read+0xc4>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <USER_SPI_read+0x32>
 8005332:	2303      	movs	r3, #3
 8005334:	e044      	b.n	80053c0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005336:	4b25      	ldr	r3, [pc, #148]	; (80053cc <USER_SPI_read+0xc8>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <USER_SPI_read+0x44>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	025b      	lsls	r3, r3, #9
 8005346:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d111      	bne.n	8005372 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	2011      	movs	r0, #17
 8005352:	f7ff fe68 	bl	8005026 <send_cmd>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d129      	bne.n	80053b0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800535c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005360:	68b8      	ldr	r0, [r7, #8]
 8005362:	f7ff fe05 	bl	8004f70 <rcvr_datablock>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d021      	beq.n	80053b0 <USER_SPI_read+0xac>
			count = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	e01e      	b.n	80053b0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	2012      	movs	r0, #18
 8005376:	f7ff fe56 	bl	8005026 <send_cmd>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d117      	bne.n	80053b0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f7ff fdf3 	bl	8004f70 <rcvr_datablock>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <USER_SPI_read+0xa2>
				buff += 512;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005396:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1ed      	bne.n	8005380 <USER_SPI_read+0x7c>
 80053a4:	e000      	b.n	80053a8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80053a6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80053a8:	2100      	movs	r1, #0
 80053aa:	200c      	movs	r0, #12
 80053ac:	f7ff fe3b 	bl	8005026 <send_cmd>
		}
	}
	despiselect();
 80053b0:	f7ff fdb2 	bl	8004f18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bf14      	ite	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	2300      	moveq	r3, #0
 80053be:	b2db      	uxtb	r3, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000020 	.word	0x20000020
 80053cc:	20000a20 	.word	0x20000a20

080053d0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <USER_SPI_write+0x1c>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <USER_SPI_write+0x20>
 80053ec:	2304      	movs	r3, #4
 80053ee:	e063      	b.n	80054b8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80053f0:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <USER_SPI_write+0xf0>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <USER_SPI_write+0x32>
 80053fe:	2303      	movs	r3, #3
 8005400:	e05a      	b.n	80054b8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <USER_SPI_write+0xf0>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <USER_SPI_write+0x44>
 8005410:	2302      	movs	r3, #2
 8005412:	e051      	b.n	80054b8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005414:	4b2b      	ldr	r3, [pc, #172]	; (80054c4 <USER_SPI_write+0xf4>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <USER_SPI_write+0x56>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	025b      	lsls	r3, r3, #9
 8005424:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d110      	bne.n	800544e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	2018      	movs	r0, #24
 8005430:	f7ff fdf9 	bl	8005026 <send_cmd>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d136      	bne.n	80054a8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800543a:	21fe      	movs	r1, #254	; 0xfe
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f7ff fdc0 	bl	8004fc2 <xmit_datablock>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d02f      	beq.n	80054a8 <USER_SPI_write+0xd8>
			count = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	e02c      	b.n	80054a8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <USER_SPI_write+0xf4>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f003 0306 	and.w	r3, r3, #6
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <USER_SPI_write+0x92>
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	2097      	movs	r0, #151	; 0x97
 800545e:	f7ff fde2 	bl	8005026 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	2019      	movs	r0, #25
 8005466:	f7ff fdde 	bl	8005026 <send_cmd>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11b      	bne.n	80054a8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005470:	21fc      	movs	r1, #252	; 0xfc
 8005472:	68b8      	ldr	r0, [r7, #8]
 8005474:	f7ff fda5 	bl	8004fc2 <xmit_datablock>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <USER_SPI_write+0xc4>
				buff += 512;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005484:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	3b01      	subs	r3, #1
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ee      	bne.n	8005470 <USER_SPI_write+0xa0>
 8005492:	e000      	b.n	8005496 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005494:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005496:	21fd      	movs	r1, #253	; 0xfd
 8005498:	2000      	movs	r0, #0
 800549a:	f7ff fd92 	bl	8004fc2 <xmit_datablock>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <USER_SPI_write+0xd8>
 80054a4:	2301      	movs	r3, #1
 80054a6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80054a8:	f7ff fd36 	bl	8004f18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bf14      	ite	ne
 80054b2:	2301      	movne	r3, #1
 80054b4:	2300      	moveq	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000020 	.word	0x20000020
 80054c4:	20000a20 	.word	0x20000a20

080054c8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	; 0x30
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	603a      	str	r2, [r7, #0]
 80054d2:	71fb      	strb	r3, [r7, #7]
 80054d4:	460b      	mov	r3, r1
 80054d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <USER_SPI_ioctl+0x1a>
 80054de:	2304      	movs	r3, #4
 80054e0:	e15a      	b.n	8005798 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80054e2:	4baf      	ldr	r3, [pc, #700]	; (80057a0 <USER_SPI_ioctl+0x2d8>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <USER_SPI_ioctl+0x2c>
 80054f0:	2303      	movs	r3, #3
 80054f2:	e151      	b.n	8005798 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80054fa:	79bb      	ldrb	r3, [r7, #6]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	f200 8136 	bhi.w	800576e <USER_SPI_ioctl+0x2a6>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <USER_SPI_ioctl+0x40>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800551d 	.word	0x0800551d
 800550c:	08005531 	.word	0x08005531
 8005510:	0800576f 	.word	0x0800576f
 8005514:	080055dd 	.word	0x080055dd
 8005518:	080056d3 	.word	0x080056d3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800551c:	f7ff fd0c 	bl	8004f38 <spiselect>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8127 	beq.w	8005776 <USER_SPI_ioctl+0x2ae>
 8005528:	2300      	movs	r3, #0
 800552a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800552e:	e122      	b.n	8005776 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005530:	2100      	movs	r1, #0
 8005532:	2009      	movs	r0, #9
 8005534:	f7ff fd77 	bl	8005026 <send_cmd>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 811d 	bne.w	800577a <USER_SPI_ioctl+0x2b2>
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	2110      	movs	r1, #16
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fd12 	bl	8004f70 <rcvr_datablock>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8113 	beq.w	800577a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005554:	7b3b      	ldrb	r3, [r7, #12]
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d111      	bne.n	8005582 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800555e:	7d7b      	ldrb	r3, [r7, #21]
 8005560:	461a      	mov	r2, r3
 8005562:	7d3b      	ldrb	r3, [r7, #20]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	4413      	add	r3, r2
 8005568:	461a      	mov	r2, r3
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005572:	4413      	add	r3, r2
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	029a      	lsls	r2, r3, #10
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e028      	b.n	80055d4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005582:	7c7b      	ldrb	r3, [r7, #17]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	b2da      	uxtb	r2, r3
 800558a:	7dbb      	ldrb	r3, [r7, #22]
 800558c:	09db      	lsrs	r3, r3, #7
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4413      	add	r3, r2
 8005592:	b2da      	uxtb	r2, r3
 8005594:	7d7b      	ldrb	r3, [r7, #21]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f003 0306 	and.w	r3, r3, #6
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	3302      	adds	r3, #2
 80055a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80055aa:	7d3b      	ldrb	r3, [r7, #20]
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	441a      	add	r2, r3
 80055b8:	7cbb      	ldrb	r3, [r7, #18]
 80055ba:	029b      	lsls	r3, r3, #10
 80055bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055c0:	4413      	add	r3, r2
 80055c2:	3301      	adds	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80055c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055ca:	3b09      	subs	r3, #9
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	409a      	lsls	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80055da:	e0ce      	b.n	800577a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80055dc:	4b71      	ldr	r3, [pc, #452]	; (80057a4 <USER_SPI_ioctl+0x2dc>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d031      	beq.n	800564c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80055e8:	2100      	movs	r1, #0
 80055ea:	208d      	movs	r0, #141	; 0x8d
 80055ec:	f7ff fd1b 	bl	8005026 <send_cmd>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 80c3 	bne.w	800577e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80055f8:	20ff      	movs	r0, #255	; 0xff
 80055fa:	f7ff fc23 	bl	8004e44 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	2110      	movs	r1, #16
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fcb3 	bl	8004f70 <rcvr_datablock>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80b6 	beq.w	800577e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005612:	2330      	movs	r3, #48	; 0x30
 8005614:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005618:	e007      	b.n	800562a <USER_SPI_ioctl+0x162>
 800561a:	20ff      	movs	r0, #255	; 0xff
 800561c:	f7ff fc12 	bl	8004e44 <xchg_spi>
 8005620:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005624:	3b01      	subs	r3, #1
 8005626:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800562a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f3      	bne.n	800561a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005632:	7dbb      	ldrb	r3, [r7, #22]
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	2310      	movs	r3, #16
 800563c:	fa03 f202 	lsl.w	r2, r3, r2
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800564a:	e098      	b.n	800577e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800564c:	2100      	movs	r1, #0
 800564e:	2009      	movs	r0, #9
 8005650:	f7ff fce9 	bl	8005026 <send_cmd>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 8091 	bne.w	800577e <USER_SPI_ioctl+0x2b6>
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	2110      	movs	r1, #16
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fc84 	bl	8004f70 <rcvr_datablock>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8087 	beq.w	800577e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005670:	4b4c      	ldr	r3, [pc, #304]	; (80057a4 <USER_SPI_ioctl+0x2dc>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800567c:	7dbb      	ldrb	r3, [r7, #22]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005684:	7dfa      	ldrb	r2, [r7, #23]
 8005686:	09d2      	lsrs	r2, r2, #7
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	4413      	add	r3, r2
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	7e7b      	ldrb	r3, [r7, #25]
 8005690:	099b      	lsrs	r3, r3, #6
 8005692:	b2db      	uxtb	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	461a      	mov	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	e013      	b.n	80056ca <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80056a2:	7dbb      	ldrb	r3, [r7, #22]
 80056a4:	109b      	asrs	r3, r3, #2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	3301      	adds	r3, #1
 80056ae:	7dfa      	ldrb	r2, [r7, #23]
 80056b0:	00d2      	lsls	r2, r2, #3
 80056b2:	f002 0218 	and.w	r2, r2, #24
 80056b6:	7df9      	ldrb	r1, [r7, #23]
 80056b8:	0949      	lsrs	r1, r1, #5
 80056ba:	b2c9      	uxtb	r1, r1
 80056bc:	440a      	add	r2, r1
 80056be:	3201      	adds	r2, #1
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80056d0:	e055      	b.n	800577e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80056d2:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <USER_SPI_ioctl+0x2dc>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 0306 	and.w	r3, r3, #6
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d051      	beq.n	8005782 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80056de:	f107 020c 	add.w	r2, r7, #12
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	210b      	movs	r1, #11
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff feee 	bl	80054c8 <USER_SPI_ioctl>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d149      	bne.n	8005786 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80056f2:	7b3b      	ldrb	r3, [r7, #12]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <USER_SPI_ioctl+0x23e>
 80056fc:	7dbb      	ldrb	r3, [r7, #22]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d041      	beq.n	800578a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005716:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <USER_SPI_ioctl+0x2dc>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d105      	bne.n	800572e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	025b      	lsls	r3, r3, #9
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	025b      	lsls	r3, r3, #9
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800572e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005730:	2020      	movs	r0, #32
 8005732:	f7ff fc78 	bl	8005026 <send_cmd>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d128      	bne.n	800578e <USER_SPI_ioctl+0x2c6>
 800573c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800573e:	2021      	movs	r0, #33	; 0x21
 8005740:	f7ff fc71 	bl	8005026 <send_cmd>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d121      	bne.n	800578e <USER_SPI_ioctl+0x2c6>
 800574a:	2100      	movs	r1, #0
 800574c:	2026      	movs	r0, #38	; 0x26
 800574e:	f7ff fc6a 	bl	8005026 <send_cmd>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11a      	bne.n	800578e <USER_SPI_ioctl+0x2c6>
 8005758:	f247 5030 	movw	r0, #30000	; 0x7530
 800575c:	f7ff fbb8 	bl	8004ed0 <wait_ready>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d013      	beq.n	800578e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005766:	2300      	movs	r3, #0
 8005768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800576c:	e00f      	b.n	800578e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800576e:	2304      	movs	r3, #4
 8005770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005774:	e00c      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		break;
 8005776:	bf00      	nop
 8005778:	e00a      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		break;
 800577a:	bf00      	nop
 800577c:	e008      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		break;
 800577e:	bf00      	nop
 8005780:	e006      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005782:	bf00      	nop
 8005784:	e004      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005786:	bf00      	nop
 8005788:	e002      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <USER_SPI_ioctl+0x2c8>
		break;
 800578e:	bf00      	nop
	}

	despiselect();
 8005790:	f7ff fbc2 	bl	8004f18 <despiselect>

	return res;
 8005794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005798:	4618      	mov	r0, r3
 800579a:	3730      	adds	r7, #48	; 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000020 	.word	0x20000020
 80057a4:	20000a20 	.word	0x20000a20

080057a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <disk_status+0x30>)
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	79fa      	ldrb	r2, [r7, #7]
 80057c0:	4905      	ldr	r1, [pc, #20]	; (80057d8 <disk_status+0x30>)
 80057c2:	440a      	add	r2, r1
 80057c4:	7a12      	ldrb	r2, [r2, #8]
 80057c6:	4610      	mov	r0, r2
 80057c8:	4798      	blx	r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000a54 	.word	0x20000a54

080057dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <disk_initialize+0x48>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d111      	bne.n	8005818 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	4a0b      	ldr	r2, [pc, #44]	; (8005824 <disk_initialize+0x48>)
 80057f8:	2101      	movs	r1, #1
 80057fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <disk_initialize+0x48>)
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	79fa      	ldrb	r2, [r7, #7]
 800580a:	4906      	ldr	r1, [pc, #24]	; (8005824 <disk_initialize+0x48>)
 800580c:	440a      	add	r2, r1
 800580e:	7a12      	ldrb	r2, [r2, #8]
 8005810:	4610      	mov	r0, r2
 8005812:	4798      	blx	r3
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000a54 	.word	0x20000a54

08005828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <disk_read+0x3c>)
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	689c      	ldr	r4, [r3, #8]
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	4a07      	ldr	r2, [pc, #28]	; (8005864 <disk_read+0x3c>)
 8005848:	4413      	add	r3, r2
 800584a:	7a18      	ldrb	r0, [r3, #8]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	47a0      	blx	r4
 8005854:	4603      	mov	r3, r0
 8005856:	75fb      	strb	r3, [r7, #23]
  return res;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd90      	pop	{r4, r7, pc}
 8005862:	bf00      	nop
 8005864:	20000a54 	.word	0x20000a54

08005868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <disk_write+0x3c>)
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68dc      	ldr	r4, [r3, #12]
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <disk_write+0x3c>)
 8005888:	4413      	add	r3, r2
 800588a:	7a18      	ldrb	r0, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	47a0      	blx	r4
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]
  return res;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd90      	pop	{r4, r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000a54 	.word	0x20000a54

080058a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	603a      	str	r2, [r7, #0]
 80058b2:	71fb      	strb	r3, [r7, #7]
 80058b4:	460b      	mov	r3, r1
 80058b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <disk_ioctl+0x38>)
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	79fa      	ldrb	r2, [r7, #7]
 80058c6:	4906      	ldr	r1, [pc, #24]	; (80058e0 <disk_ioctl+0x38>)
 80058c8:	440a      	add	r2, r1
 80058ca:	7a10      	ldrb	r0, [r2, #8]
 80058cc:	79b9      	ldrb	r1, [r7, #6]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	4798      	blx	r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000a54 	.word	0x20000a54

080058e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3301      	adds	r3, #1
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80058f4:	89fb      	ldrh	r3, [r7, #14]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b21b      	sxth	r3, r3
 8005900:	4313      	orrs	r3, r2
 8005902:	b21b      	sxth	r3, r3
 8005904:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005906:	89fb      	ldrh	r3, [r7, #14]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3303      	adds	r3, #3
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	3202      	adds	r2, #2
 800592c:	7812      	ldrb	r2, [r2, #0]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	3201      	adds	r2, #1
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
	return rv;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	887a      	ldrh	r2, [r7, #2]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	887b      	ldrh	r3, [r7, #2]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	607a      	str	r2, [r7, #4]
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	0a1b      	lsrs	r3, r3, #8
 80059ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	607a      	str	r2, [r7, #4]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	1c53      	adds	r3, r2, #1
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	6179      	str	r1, [r7, #20]
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	607b      	str	r3, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f1      	bne.n	8005a02 <mem_cpy+0x1a>
	}
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a2a:	b480      	push	{r7}
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	617a      	str	r2, [r7, #20]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f3      	bne.n	8005a3a <mem_set+0x10>
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	61fa      	str	r2, [r7, #28]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	4619      	mov	r1, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	61ba      	str	r2, [r7, #24]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	1acb      	subs	r3, r1, r3
 8005a8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <mem_cmp+0x40>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0eb      	beq.n	8005a78 <mem_cmp+0x18>

	return r;
 8005aa0:	697b      	ldr	r3, [r7, #20]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3724      	adds	r7, #36	; 0x24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ab8:	e002      	b.n	8005ac0 <chk_chr+0x12>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3301      	adds	r3, #1
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <chk_chr+0x26>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d1f2      	bne.n	8005aba <chk_chr+0xc>
	return *str;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e029      	b.n	8005b4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005af8:	4a27      	ldr	r2, [pc, #156]	; (8005b98 <chk_lock+0xb4>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	4413      	add	r3, r2
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01d      	beq.n	8005b42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <chk_lock+0xb4>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	4413      	add	r3, r2
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d116      	bne.n	8005b46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <chk_lock+0xb4>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d10c      	bne.n	8005b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b2c:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <chk_lock+0xb4>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	4413      	add	r3, r2
 8005b34:	3308      	adds	r3, #8
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d102      	bne.n	8005b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b40:	e007      	b.n	8005b52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b42:	2301      	movs	r3, #1
 8005b44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d9d2      	bls.n	8005af8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d109      	bne.n	8005b6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <chk_lock+0x80>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d101      	bne.n	8005b68 <chk_lock+0x84>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e010      	b.n	8005b8a <chk_lock+0xa6>
 8005b68:	2312      	movs	r3, #18
 8005b6a:	e00e      	b.n	8005b8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d108      	bne.n	8005b84 <chk_lock+0xa0>
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <chk_lock+0xb4>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	4413      	add	r3, r2
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d101      	bne.n	8005b88 <chk_lock+0xa4>
 8005b84:	2310      	movs	r3, #16
 8005b86:	e000      	b.n	8005b8a <chk_lock+0xa6>
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000a34 	.word	0x20000a34

08005b9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
 8005ba6:	e002      	b.n	8005bae <enq_lock+0x12>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d806      	bhi.n	8005bc2 <enq_lock+0x26>
 8005bb4:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <enq_lock+0x40>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	4413      	add	r3, r2
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f2      	bne.n	8005ba8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000a34 	.word	0x20000a34

08005be0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e01f      	b.n	8005c30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005bf0:	4a41      	ldr	r2, [pc, #260]	; (8005cf8 <inc_lock+0x118>)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	4413      	add	r3, r2
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d113      	bne.n	8005c2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c02:	4a3d      	ldr	r2, [pc, #244]	; (8005cf8 <inc_lock+0x118>)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	4413      	add	r3, r2
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d109      	bne.n	8005c2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <inc_lock+0x118>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3308      	adds	r3, #8
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d006      	beq.n	8005c38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d9dc      	bls.n	8005bf0 <inc_lock+0x10>
 8005c36:	e000      	b.n	8005c3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d132      	bne.n	8005ca6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e002      	b.n	8005c4c <inc_lock+0x6c>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d806      	bhi.n	8005c60 <inc_lock+0x80>
 8005c52:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <inc_lock+0x118>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f2      	bne.n	8005c46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d101      	bne.n	8005c6a <inc_lock+0x8a>
 8005c66:	2300      	movs	r3, #0
 8005c68:	e040      	b.n	8005cec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4922      	ldr	r1, [pc, #136]	; (8005cf8 <inc_lock+0x118>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	440b      	add	r3, r1
 8005c76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	491e      	ldr	r1, [pc, #120]	; (8005cf8 <inc_lock+0x118>)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	440b      	add	r3, r1
 8005c84:	3304      	adds	r3, #4
 8005c86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	491a      	ldr	r1, [pc, #104]	; (8005cf8 <inc_lock+0x118>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	440b      	add	r3, r1
 8005c94:	3308      	adds	r3, #8
 8005c96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c98:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <inc_lock+0x118>)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	4413      	add	r3, r2
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <inc_lock+0xe0>
 8005cac:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <inc_lock+0x118>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	4413      	add	r3, r2
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <inc_lock+0xe0>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e015      	b.n	8005cec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <inc_lock+0xf8>
 8005cc6:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <inc_lock+0x118>)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4413      	add	r3, r2
 8005cce:	330c      	adds	r3, #12
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	e001      	b.n	8005cdc <inc_lock+0xfc>
 8005cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cdc:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <inc_lock+0x118>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	440b      	add	r3, r1
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000a34 	.word	0x20000a34

08005cfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d825      	bhi.n	8005d5c <dec_lock+0x60>
		n = Files[i].ctr;
 8005d10:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <dec_lock+0x74>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	4413      	add	r3, r2
 8005d18:	330c      	adds	r3, #12
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d1e:	89fb      	ldrh	r3, [r7, #14]
 8005d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d24:	d101      	bne.n	8005d2a <dec_lock+0x2e>
 8005d26:	2300      	movs	r3, #0
 8005d28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <dec_lock+0x3a>
 8005d30:	89fb      	ldrh	r3, [r7, #14]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d36:	4a0e      	ldr	r2, [pc, #56]	; (8005d70 <dec_lock+0x74>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	4413      	add	r3, r2
 8005d3e:	330c      	adds	r3, #12
 8005d40:	89fa      	ldrh	r2, [r7, #14]
 8005d42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <dec_lock+0x5a>
 8005d4a:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <dec_lock+0x74>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4413      	add	r3, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	737b      	strb	r3, [r7, #13]
 8005d5a:	e001      	b.n	8005d60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d60:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000a34 	.word	0x20000a34

08005d74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e010      	b.n	8005da4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d82:	4a0d      	ldr	r2, [pc, #52]	; (8005db8 <clear_lock+0x44>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	4413      	add	r3, r2
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d105      	bne.n	8005d9e <clear_lock+0x2a>
 8005d92:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <clear_lock+0x44>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	4413      	add	r3, r2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d9eb      	bls.n	8005d82 <clear_lock+0xe>
	}
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20000a34 	.word	0x20000a34

08005dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	78db      	ldrb	r3, [r3, #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d034      	beq.n	8005e3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7858      	ldrb	r0, [r3, #1]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005de0:	2301      	movs	r3, #1
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	f7ff fd40 	bl	8005868 <disk_write>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	e022      	b.n	8005e3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	1ad2      	subs	r2, r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d217      	bcs.n	8005e3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	789b      	ldrb	r3, [r3, #2]
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e010      	b.n	8005e34 <sync_window+0x78>
					wsect += fs->fsize;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7858      	ldrb	r0, [r3, #1]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e26:	2301      	movs	r3, #1
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	f7ff fd1d 	bl	8005868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d8eb      	bhi.n	8005e12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d01b      	beq.n	8005e94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ffad 	bl	8005dbc <sync_window>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d113      	bne.n	8005e94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7858      	ldrb	r0, [r3, #1]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e76:	2301      	movs	r3, #1
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	f7ff fcd5 	bl	8005828 <disk_read>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ff87 	bl	8005dbc <sync_window>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d158      	bne.n	8005f6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d148      	bne.n	8005f52 <sync_fs+0xb2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d144      	bne.n	8005f52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3330      	adds	r3, #48	; 0x30
 8005ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff fda9 	bl	8005a2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3330      	adds	r3, #48	; 0x30
 8005edc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ee0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fd38 	bl	800595a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3330      	adds	r3, #48	; 0x30
 8005eee:	4921      	ldr	r1, [pc, #132]	; (8005f74 <sync_fs+0xd4>)
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fd4d 	bl	8005990 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3330      	adds	r3, #48	; 0x30
 8005efa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005efe:	491e      	ldr	r1, [pc, #120]	; (8005f78 <sync_fs+0xd8>)
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fd45 	bl	8005990 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3330      	adds	r3, #48	; 0x30
 8005f0a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7ff fd3b 	bl	8005990 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3330      	adds	r3, #48	; 0x30
 8005f1e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f7ff fd31 	bl	8005990 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	7858      	ldrb	r0, [r3, #1]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	2301      	movs	r3, #1
 8005f48:	f7ff fc8e 	bl	8005868 <disk_write>
			fs->fsi_flag = 0;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fca4 	bl	80058a8 <disk_ioctl>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <sync_fs+0xca>
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	41615252 	.word	0x41615252
 8005f78:	61417272 	.word	0x61417272

08005f7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	3b02      	subs	r3, #2
 8005f8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	3b02      	subs	r3, #2
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d301      	bcc.n	8005f9c <clust2sect+0x20>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e008      	b.n	8005fae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	895b      	ldrh	r3, [r3, #10]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	fb03 f202 	mul.w	r2, r3, r2
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	4413      	add	r3, r2
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b086      	sub	sp, #24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d904      	bls.n	8005fda <get_fat+0x20>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005fda:	2301      	movs	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e08f      	b.n	8006100 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d062      	beq.n	80060b4 <get_fat+0xfa>
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	dc7c      	bgt.n	80060ec <get_fat+0x132>
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d002      	beq.n	8005ffc <get_fat+0x42>
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d042      	beq.n	8006080 <get_fat+0xc6>
 8005ffa:	e077      	b.n	80060ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6a1a      	ldr	r2, [r3, #32]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	4413      	add	r3, r2
 8006014:	4619      	mov	r1, r3
 8006016:	6938      	ldr	r0, [r7, #16]
 8006018:	f7ff ff14 	bl	8005e44 <move_window>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d167      	bne.n	80060f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	60fa      	str	r2, [r7, #12]
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006034:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	0a5b      	lsrs	r3, r3, #9
 800603e:	4413      	add	r3, r2
 8006040:	4619      	mov	r1, r3
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7ff fefe 	bl	8005e44 <move_window>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d153      	bne.n	80060f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	461a      	mov	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <get_fat+0xbc>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	091b      	lsrs	r3, r3, #4
 8006074:	e002      	b.n	800607c <get_fat+0xc2>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607c:	617b      	str	r3, [r7, #20]
			break;
 800607e:	e03f      	b.n	8006100 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	4413      	add	r3, r2
 800608a:	4619      	mov	r1, r3
 800608c:	6938      	ldr	r0, [r7, #16]
 800608e:	f7ff fed9 	bl	8005e44 <move_window>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d130      	bne.n	80060fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80060a6:	4413      	add	r3, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fc1b 	bl	80058e4 <ld_word>
 80060ae:	4603      	mov	r3, r0
 80060b0:	617b      	str	r3, [r7, #20]
			break;
 80060b2:	e025      	b.n	8006100 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6a1a      	ldr	r2, [r3, #32]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	4413      	add	r3, r2
 80060be:	4619      	mov	r1, r3
 80060c0:	6938      	ldr	r0, [r7, #16]
 80060c2:	f7ff febf 	bl	8005e44 <move_window>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d118      	bne.n	80060fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80060da:	4413      	add	r3, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fc19 	bl	8005914 <ld_dword>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060e8:	617b      	str	r3, [r7, #20]
			break;
 80060ea:	e009      	b.n	8006100 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e006      	b.n	8006100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060f2:	bf00      	nop
 80060f4:	e004      	b.n	8006100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060fe:	bf00      	nop
		}
	}

	return val;
 8006100:	697b      	ldr	r3, [r7, #20]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800610a:	b590      	push	{r4, r7, lr}
 800610c:	b089      	sub	sp, #36	; 0x24
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006116:	2302      	movs	r3, #2
 8006118:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b01      	cmp	r3, #1
 800611e:	f240 80d9 	bls.w	80062d4 <put_fat+0x1ca>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	f080 80d3 	bcs.w	80062d4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b03      	cmp	r3, #3
 8006134:	f000 8096 	beq.w	8006264 <put_fat+0x15a>
 8006138:	2b03      	cmp	r3, #3
 800613a:	f300 80cb 	bgt.w	80062d4 <put_fat+0x1ca>
 800613e:	2b01      	cmp	r3, #1
 8006140:	d002      	beq.n	8006148 <put_fat+0x3e>
 8006142:	2b02      	cmp	r3, #2
 8006144:	d06e      	beq.n	8006224 <put_fat+0x11a>
 8006146:	e0c5      	b.n	80062d4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4413      	add	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	0a5b      	lsrs	r3, r3, #9
 800615e:	4413      	add	r3, r2
 8006160:	4619      	mov	r1, r3
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fe6e 	bl	8005e44 <move_window>
 8006168:	4603      	mov	r3, r0
 800616a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800616c:	7ffb      	ldrb	r3, [r7, #31]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 80a9 	bne.w	80062c6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	61b9      	str	r1, [r7, #24]
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	4413      	add	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <put_fat+0xa4>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	b25a      	sxtb	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	4313      	orrs	r3, r2
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e001      	b.n	80061b2 <put_fat+0xa8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	0a5b      	lsrs	r3, r3, #9
 80061c4:	4413      	add	r3, r2
 80061c6:	4619      	mov	r1, r3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff fe3b 	bl	8005e44 <move_window>
 80061ce:	4603      	mov	r3, r0
 80061d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061d2:	7ffb      	ldrb	r3, [r7, #31]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d178      	bne.n	80062ca <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e4:	4413      	add	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <put_fat+0xf0>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e00e      	b.n	8006218 <put_fat+0x10e>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b25b      	sxtb	r3, r3
 8006200:	f023 030f 	bic.w	r3, r3, #15
 8006204:	b25a      	sxtb	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b25b      	sxtb	r3, r3
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	b25b      	sxtb	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b25b      	sxtb	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	70da      	strb	r2, [r3, #3]
			break;
 8006222:	e057      	b.n	80062d4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	4413      	add	r3, r2
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fe07 	bl	8005e44 <move_window>
 8006236:	4603      	mov	r3, r0
 8006238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d146      	bne.n	80062ce <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800624e:	4413      	add	r3, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	b292      	uxth	r2, r2
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fb7f 	bl	800595a <st_word>
			fs->wflag = 1;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	70da      	strb	r2, [r3, #3]
			break;
 8006262:	e037      	b.n	80062d4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	09db      	lsrs	r3, r3, #7
 800626c:	4413      	add	r3, r2
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fde7 	bl	8005e44 <move_window>
 8006276:	4603      	mov	r3, r0
 8006278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d128      	bne.n	80062d2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006294:	4413      	add	r3, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fb3c 	bl	8005914 <ld_dword>
 800629c:	4603      	mov	r3, r0
 800629e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062a2:	4323      	orrs	r3, r4
 80062a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062b4:	4413      	add	r3, r2
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fb69 	bl	8005990 <st_dword>
			fs->wflag = 1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	70da      	strb	r2, [r3, #3]
			break;
 80062c4:	e006      	b.n	80062d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80062c6:	bf00      	nop
 80062c8:	e004      	b.n	80062d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80062ca:	bf00      	nop
 80062cc:	e002      	b.n	80062d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80062d2:	bf00      	nop
		}
	}
	return res;
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3724      	adds	r7, #36	; 0x24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd90      	pop	{r4, r7, pc}

080062de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b088      	sub	sp, #32
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d904      	bls.n	8006304 <remove_chain+0x26>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d301      	bcc.n	8006308 <remove_chain+0x2a>
 8006304:	2302      	movs	r3, #2
 8006306:	e04b      	b.n	80063a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800630e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	69b8      	ldr	r0, [r7, #24]
 8006316:	f7ff fef8 	bl	800610a <put_fat>
 800631a:	4603      	mov	r3, r0
 800631c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800631e:	7ffb      	ldrb	r3, [r7, #31]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <remove_chain+0x4a>
 8006324:	7ffb      	ldrb	r3, [r7, #31]
 8006326:	e03b      	b.n	80063a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff fe45 	bl	8005fba <get_fat>
 8006330:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d031      	beq.n	800639c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <remove_chain+0x64>
 800633e:	2302      	movs	r3, #2
 8006340:	e02e      	b.n	80063a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006348:	d101      	bne.n	800634e <remove_chain+0x70>
 800634a:	2301      	movs	r3, #1
 800634c:	e028      	b.n	80063a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800634e:	2200      	movs	r2, #0
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	69b8      	ldr	r0, [r7, #24]
 8006354:	f7ff fed9 	bl	800610a <put_fat>
 8006358:	4603      	mov	r3, r0
 800635a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <remove_chain+0x88>
 8006362:	7ffb      	ldrb	r3, [r7, #31]
 8006364:	e01c      	b.n	80063a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	3b02      	subs	r3, #2
 8006370:	429a      	cmp	r2, r3
 8006372:	d20b      	bcs.n	800638c <remove_chain+0xae>
			fs->free_clst++;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	b2da      	uxtb	r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	429a      	cmp	r2, r3
 8006398:	d3c6      	bcc.n	8006328 <remove_chain+0x4a>
 800639a:	e000      	b.n	800639e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800639c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10d      	bne.n	80063da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <create_chain+0x2c>
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d31b      	bcc.n	800640c <create_chain+0x64>
 80063d4:	2301      	movs	r3, #1
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e018      	b.n	800640c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fdec 	bl	8005fba <get_fat>
 80063e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d801      	bhi.n	80063ee <create_chain+0x46>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e070      	b.n	80064d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f4:	d101      	bne.n	80063fa <create_chain+0x52>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	e06a      	b.n	80064d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	429a      	cmp	r2, r3
 8006402:	d201      	bcs.n	8006408 <create_chain+0x60>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	e063      	b.n	80064d0 <create_chain+0x128>
		scl = clst;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d307      	bcc.n	8006430 <create_chain+0x88>
				ncl = 2;
 8006420:	2302      	movs	r3, #2
 8006422:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	429a      	cmp	r2, r3
 800642a:	d901      	bls.n	8006430 <create_chain+0x88>
 800642c:	2300      	movs	r3, #0
 800642e:	e04f      	b.n	80064d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006430:	69f9      	ldr	r1, [r7, #28]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fdc1 	bl	8005fba <get_fat>
 8006438:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d003      	beq.n	800644e <create_chain+0xa6>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644c:	d101      	bne.n	8006452 <create_chain+0xaa>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	e03e      	b.n	80064d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	429a      	cmp	r2, r3
 8006458:	d1da      	bne.n	8006410 <create_chain+0x68>
 800645a:	2300      	movs	r3, #0
 800645c:	e038      	b.n	80064d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800645e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006464:	69f9      	ldr	r1, [r7, #28]
 8006466:	6938      	ldr	r0, [r7, #16]
 8006468:	f7ff fe4f 	bl	800610a <put_fat>
 800646c:	4603      	mov	r3, r0
 800646e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <create_chain+0xe2>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6938      	ldr	r0, [r7, #16]
 8006482:	f7ff fe42 	bl	800610a <put_fat>
 8006486:	4603      	mov	r3, r0
 8006488:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d116      	bne.n	80064be <create_chain+0x116>
		fs->last_clst = ncl;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	3b02      	subs	r3, #2
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d804      	bhi.n	80064ae <create_chain+0x106>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	791b      	ldrb	r3, [r3, #4]
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	711a      	strb	r2, [r3, #4]
 80064bc:	e007      	b.n	80064ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d102      	bne.n	80064ca <create_chain+0x122>
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064c8:	e000      	b.n	80064cc <create_chain+0x124>
 80064ca:	2301      	movs	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064ce:	69fb      	ldr	r3, [r7, #28]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	3304      	adds	r3, #4
 80064ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	0a5b      	lsrs	r3, r3, #9
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	8952      	ldrh	r2, [r2, #10]
 80064f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1d1a      	adds	r2, r3, #4
 8006502:	613a      	str	r2, [r7, #16]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <clmt_clust+0x3a>
 800650e:	2300      	movs	r3, #0
 8006510:	e010      	b.n	8006534 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	429a      	cmp	r2, r3
 8006518:	d307      	bcc.n	800652a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3304      	adds	r3, #4
 8006526:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006528:	e7e9      	b.n	80064fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800652a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	4413      	add	r3, r2
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006556:	d204      	bcs.n	8006562 <dir_sdi+0x22>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006562:	2302      	movs	r3, #2
 8006564:	e063      	b.n	800662e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <dir_sdi+0x46>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d902      	bls.n	8006586 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	8912      	ldrh	r2, [r2, #8]
 8006594:	4293      	cmp	r3, r2
 8006596:	d301      	bcc.n	800659c <dir_sdi+0x5c>
 8006598:	2302      	movs	r3, #2
 800659a:	e048      	b.n	800662e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	61da      	str	r2, [r3, #28]
 80065a4:	e029      	b.n	80065fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	895b      	ldrh	r3, [r3, #10]
 80065aa:	025b      	lsls	r3, r3, #9
 80065ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065ae:	e019      	b.n	80065e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fd00 	bl	8005fba <get_fat>
 80065ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065c2:	d101      	bne.n	80065c8 <dir_sdi+0x88>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e032      	b.n	800662e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d904      	bls.n	80065d8 <dir_sdi+0x98>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d301      	bcc.n	80065dc <dir_sdi+0x9c>
 80065d8:	2302      	movs	r3, #2
 80065da:	e028      	b.n	800662e <dir_sdi+0xee>
			ofs -= csz;
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d2e1      	bcs.n	80065b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80065ec:	6979      	ldr	r1, [r7, #20]
 80065ee:	6938      	ldr	r0, [r7, #16]
 80065f0:	f7ff fcc4 	bl	8005f7c <clust2sect>
 80065f4:	4602      	mov	r2, r0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <dir_sdi+0xcc>
 8006608:	2302      	movs	r3, #2
 800660a:	e010      	b.n	800662e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	0a5b      	lsrs	r3, r3, #9
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006626:	441a      	add	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	3320      	adds	r3, #32
 800664c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <dir_next+0x28>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800665c:	d301      	bcc.n	8006662 <dir_next+0x2c>
 800665e:	2304      	movs	r3, #4
 8006660:	e0aa      	b.n	80067b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8098 	bne.w	800679e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	8912      	ldrh	r2, [r2, #8]
 8006688:	4293      	cmp	r3, r2
 800668a:	f0c0 8088 	bcc.w	800679e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	61da      	str	r2, [r3, #28]
 8006694:	2304      	movs	r3, #4
 8006696:	e08f      	b.n	80067b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	0a5b      	lsrs	r3, r3, #9
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	8952      	ldrh	r2, [r2, #10]
 80066a0:	3a01      	subs	r2, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d17a      	bne.n	800679e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7ff fc82 	bl	8005fba <get_fat>
 80066b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d801      	bhi.n	80066c2 <dir_next+0x8c>
 80066be:	2302      	movs	r3, #2
 80066c0:	e07a      	b.n	80067b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c8:	d101      	bne.n	80066ce <dir_next+0x98>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e074      	b.n	80067b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d358      	bcc.n	800678a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	61da      	str	r2, [r3, #28]
 80066e4:	2304      	movs	r3, #4
 80066e6:	e067      	b.n	80067b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	4619      	mov	r1, r3
 80066f0:	4610      	mov	r0, r2
 80066f2:	f7ff fe59 	bl	80063a8 <create_chain>
 80066f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <dir_next+0xcc>
 80066fe:	2307      	movs	r3, #7
 8006700:	e05a      	b.n	80067b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <dir_next+0xd6>
 8006708:	2302      	movs	r3, #2
 800670a:	e055      	b.n	80067b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006712:	d101      	bne.n	8006718 <dir_next+0xe2>
 8006714:	2301      	movs	r3, #1
 8006716:	e04f      	b.n	80067b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff fb4f 	bl	8005dbc <sync_window>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <dir_next+0xf2>
 8006724:	2301      	movs	r3, #1
 8006726:	e047      	b.n	80067b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3330      	adds	r3, #48	; 0x30
 800672c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f979 	bl	8005a2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	6979      	ldr	r1, [r7, #20]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fc1c 	bl	8005f7c <clust2sect>
 8006744:	4602      	mov	r2, r0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c
 800674a:	e012      	b.n	8006772 <dir_next+0x13c>
						fs->wflag = 1;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fb32 	bl	8005dbc <sync_window>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <dir_next+0x12c>
 800675e:	2301      	movs	r3, #1
 8006760:	e02a      	b.n	80067b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3301      	adds	r3, #1
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	62da      	str	r2, [r3, #44]	; 0x2c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	895b      	ldrh	r3, [r3, #10]
 8006776:	461a      	mov	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4293      	cmp	r3, r2
 800677c:	d3e6      	bcc.n	800674c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006790:	6979      	ldr	r1, [r7, #20]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fbf2 	bl	8005f7c <clust2sect>
 8006798:	4602      	mov	r2, r0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff feb4 	bl	8006540 <dir_sdi>
 80067d8:	4603      	mov	r3, r0
 80067da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d12b      	bne.n	800683a <dir_alloc+0x7a>
		n = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	4619      	mov	r1, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fb29 	bl	8005e44 <move_window>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11d      	bne.n	8006838 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2be5      	cmp	r3, #229	; 0xe5
 8006804:	d004      	beq.n	8006810 <dir_alloc+0x50>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d107      	bne.n	8006820 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	3301      	adds	r3, #1
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d102      	bne.n	8006824 <dir_alloc+0x64>
 800681e:	e00c      	b.n	800683a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006820:	2300      	movs	r3, #0
 8006822:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006824:	2101      	movs	r1, #1
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff05 	bl	8006636 <dir_next>
 800682c:	4603      	mov	r3, r0
 800682e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0d7      	beq.n	80067e6 <dir_alloc+0x26>
 8006836:	e000      	b.n	800683a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006838:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d101      	bne.n	8006844 <dir_alloc+0x84>
 8006840:	2307      	movs	r3, #7
 8006842:	75fb      	strb	r3, [r7, #23]
	return res;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	331a      	adds	r3, #26
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff f841 	bl	80058e4 <ld_word>
 8006862:	4603      	mov	r3, r0
 8006864:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b03      	cmp	r3, #3
 800686c:	d109      	bne.n	8006882 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	3314      	adds	r3, #20
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff f836 	bl	80058e4 <ld_word>
 8006878:	4603      	mov	r3, r0
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006882:	68fb      	ldr	r3, [r7, #12]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	331a      	adds	r3, #26
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	b292      	uxth	r2, r2
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f859 	bl	800595a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d109      	bne.n	80068c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f103 0214 	add.w	r2, r3, #20
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7ff f84b 	bl	800595a <st_word>
	}
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80068d6:	2304      	movs	r3, #4
 80068d8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80068e0:	e03c      	b.n	800695c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6938      	ldr	r0, [r7, #16]
 80068ea:	f7ff faab 	bl	8005e44 <move_window>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d136      	bne.n	8006966 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006906:	2304      	movs	r3, #4
 8006908:	75fb      	strb	r3, [r7, #23]
 800690a:	e031      	b.n	8006970 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	330b      	adds	r3, #11
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006918:	73bb      	strb	r3, [r7, #14]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	7bba      	ldrb	r2, [r7, #14]
 800691e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	2be5      	cmp	r3, #229	; 0xe5
 8006924:	d011      	beq.n	800694a <dir_read+0x7e>
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b2e      	cmp	r3, #46	; 0x2e
 800692a:	d00e      	beq.n	800694a <dir_read+0x7e>
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	2b0f      	cmp	r3, #15
 8006930:	d00b      	beq.n	800694a <dir_read+0x7e>
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	f023 0320 	bic.w	r3, r3, #32
 8006938:	2b08      	cmp	r3, #8
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800694a:	2100      	movs	r1, #0
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fe72 	bl	8006636 <dir_next>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <dir_read+0xa2>
	while (dp->sect) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1be      	bne.n	80068e2 <dir_read+0x16>
 8006964:	e004      	b.n	8006970 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006966:	bf00      	nop
 8006968:	e002      	b.n	8006970 <dir_read+0xa4>
				break;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <dir_read+0xa4>
		if (res != FR_OK) break;
 800696e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <dir_read+0xb0>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	61da      	str	r2, [r3, #28]
	return res;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006994:	2100      	movs	r1, #0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fdd2 	bl	8006540 <dir_sdi>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <dir_find+0x24>
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	e03e      	b.n	8006a28 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6938      	ldr	r0, [r7, #16]
 80069b2:	f7ff fa47 	bl	8005e44 <move_window>
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d12f      	bne.n	8006a20 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <dir_find+0x4e>
 80069ce:	2304      	movs	r3, #4
 80069d0:	75fb      	strb	r3, [r7, #23]
 80069d2:	e028      	b.n	8006a26 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	330b      	adds	r3, #11
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	330b      	adds	r3, #11
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <dir_find+0x86>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a18      	ldr	r0, [r3, #32]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3324      	adds	r3, #36	; 0x24
 80069fe:	220b      	movs	r2, #11
 8006a00:	4619      	mov	r1, r3
 8006a02:	f7ff f82d 	bl	8005a60 <mem_cmp>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fe11 	bl	8006636 <dir_next>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0c5      	beq.n	80069aa <dir_find+0x24>
 8006a1e:	e002      	b.n	8006a26 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a24:	bf00      	nop

	return res;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006a3e:	2101      	movs	r1, #1
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff febd 	bl	80067c0 <dir_alloc>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11c      	bne.n	8006a8a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4619      	mov	r1, r3
 8006a56:	68b8      	ldr	r0, [r7, #8]
 8006a58:	f7ff f9f4 	bl	8005e44 <move_window>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d111      	bne.n	8006a8a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe ffdb 	bl	8005a2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a18      	ldr	r0, [r3, #32]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	220b      	movs	r2, #11
 8006a7e:	4619      	mov	r1, r3
 8006a80:	f7fe ffb2 	bl	80059e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2201      	movs	r2, #1
 8006a88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d04e      	beq.n	8006b4a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006ab4:	e021      	b.n	8006afa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	6179      	str	r1, [r7, #20]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d100      	bne.n	8006ace <get_fileinfo+0x3a>
 8006acc:	e015      	b.n	8006afa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b05      	cmp	r3, #5
 8006ad2:	d101      	bne.n	8006ad8 <get_fileinfo+0x44>
 8006ad4:	23e5      	movs	r3, #229	; 0xe5
 8006ad6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d106      	bne.n	8006aec <get_fileinfo+0x58>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	613a      	str	r2, [r7, #16]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	222e      	movs	r2, #46	; 0x2e
 8006aea:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	613a      	str	r2, [r7, #16]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	7bfa      	ldrb	r2, [r7, #15]
 8006af8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b0a      	cmp	r3, #10
 8006afe:	d9da      	bls.n	8006ab6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	3309      	adds	r3, #9
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	7ada      	ldrb	r2, [r3, #11]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	331c      	adds	r3, #28
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fef9 	bl	8005914 <ld_dword>
 8006b22:	4602      	mov	r2, r0
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	3316      	adds	r3, #22
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fef0 	bl	8005914 <ld_dword>
 8006b34:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	80da      	strh	r2, [r3, #6]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	0c1b      	lsrs	r3, r3, #16
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	809a      	strh	r2, [r3, #4]
 8006b48:	e000      	b.n	8006b4c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006b4a:	bf00      	nop
}
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3324      	adds	r3, #36	; 0x24
 8006b68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006b6a:	220b      	movs	r2, #11
 8006b6c:	2120      	movs	r1, #32
 8006b6e:	68b8      	ldr	r0, [r7, #8]
 8006b70:	f7fe ff5b 	bl	8005a2a <mem_set>
	si = i = 0; ni = 8;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	61fa      	str	r2, [r7, #28]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b8e:	7efb      	ldrb	r3, [r7, #27]
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d94e      	bls.n	8006c32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006b94:	7efb      	ldrb	r3, [r7, #27]
 8006b96:	2b2f      	cmp	r3, #47	; 0x2f
 8006b98:	d006      	beq.n	8006ba8 <create_name+0x54>
 8006b9a:	7efb      	ldrb	r3, [r7, #27]
 8006b9c:	2b5c      	cmp	r3, #92	; 0x5c
 8006b9e:	d110      	bne.n	8006bc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ba0:	e002      	b.n	8006ba8 <create_name+0x54>
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b2f      	cmp	r3, #47	; 0x2f
 8006bb2:	d0f6      	beq.n	8006ba2 <create_name+0x4e>
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8006bbe:	d0f0      	beq.n	8006ba2 <create_name+0x4e>
			break;
 8006bc0:	e038      	b.n	8006c34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006bc2:	7efb      	ldrb	r3, [r7, #27]
 8006bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc6:	d003      	beq.n	8006bd0 <create_name+0x7c>
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d30c      	bcc.n	8006bea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2b0b      	cmp	r3, #11
 8006bd4:	d002      	beq.n	8006bdc <create_name+0x88>
 8006bd6:	7efb      	ldrb	r3, [r7, #27]
 8006bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bda:	d001      	beq.n	8006be0 <create_name+0x8c>
 8006bdc:	2306      	movs	r3, #6
 8006bde:	e044      	b.n	8006c6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006be0:	2308      	movs	r3, #8
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	230b      	movs	r3, #11
 8006be6:	617b      	str	r3, [r7, #20]
			continue;
 8006be8:	e022      	b.n	8006c30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006bea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da04      	bge.n	8006bfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006bf2:	7efb      	ldrb	r3, [r7, #27]
 8006bf4:	3b80      	subs	r3, #128	; 0x80
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <create_name+0x120>)
 8006bf8:	5cd3      	ldrb	r3, [r2, r3]
 8006bfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006bfc:	7efb      	ldrb	r3, [r7, #27]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	481d      	ldr	r0, [pc, #116]	; (8006c78 <create_name+0x124>)
 8006c02:	f7fe ff54 	bl	8005aae <chk_chr>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <create_name+0xbc>
 8006c0c:	2306      	movs	r3, #6
 8006c0e:	e02c      	b.n	8006c6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006c10:	7efb      	ldrb	r3, [r7, #27]
 8006c12:	2b60      	cmp	r3, #96	; 0x60
 8006c14:	d905      	bls.n	8006c22 <create_name+0xce>
 8006c16:	7efb      	ldrb	r3, [r7, #27]
 8006c18:	2b7a      	cmp	r3, #122	; 0x7a
 8006c1a:	d802      	bhi.n	8006c22 <create_name+0xce>
 8006c1c:	7efb      	ldrb	r3, [r7, #27]
 8006c1e:	3b20      	subs	r3, #32
 8006c20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	613a      	str	r2, [r7, #16]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	7efa      	ldrb	r2, [r7, #27]
 8006c2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006c30:	e7a6      	b.n	8006b80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	441a      	add	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <create_name+0xf4>
 8006c44:	2306      	movs	r3, #6
 8006c46:	e010      	b.n	8006c6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2be5      	cmp	r3, #229	; 0xe5
 8006c4e:	d102      	bne.n	8006c56 <create_name+0x102>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2205      	movs	r2, #5
 8006c54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006c56:	7efb      	ldrb	r3, [r7, #27]
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d801      	bhi.n	8006c60 <create_name+0x10c>
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	e000      	b.n	8006c62 <create_name+0x10e>
 8006c60:	2200      	movs	r2, #0
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	330b      	adds	r3, #11
 8006c66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006c68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	0800ae10 	.word	0x0800ae10
 8006c78:	0800adb4 	.word	0x0800adb4

08006c7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006c90:	e002      	b.n	8006c98 <follow_path+0x1c>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8006c9e:	d0f8      	beq.n	8006c92 <follow_path+0x16>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ca6:	d0f4      	beq.n	8006c92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b1f      	cmp	r3, #31
 8006cb4:	d80a      	bhi.n	8006ccc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2280      	movs	r2, #128	; 0x80
 8006cba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fc3d 	bl	8006540 <dir_sdi>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]
 8006cca:	e043      	b.n	8006d54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ccc:	463b      	mov	r3, r7
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff3f 	bl	8006b54 <create_name>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d134      	bne.n	8006d4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fe50 	bl	8006986 <dir_find>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d127      	bne.n	8006d4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d122      	bne.n	8006d4e <follow_path+0xd2>
 8006d08:	2305      	movs	r3, #5
 8006d0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006d0c:	e01f      	b.n	8006d4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11c      	bne.n	8006d52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	799b      	ldrb	r3, [r3, #6]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006d24:	2305      	movs	r3, #5
 8006d26:	75fb      	strb	r3, [r7, #23]
 8006d28:	e014      	b.n	8006d54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d38:	4413      	add	r3, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7ff fd86 	bl	800684e <ld_clust>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d48:	e7c0      	b.n	8006ccc <follow_path+0x50>
			if (res != FR_OK) break;
 8006d4a:	bf00      	nop
 8006d4c:	e002      	b.n	8006d54 <follow_path+0xd8>
				break;
 8006d4e:	bf00      	nop
 8006d50:	e000      	b.n	8006d54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d52:	bf00      	nop
			}
		}
	}

	return res;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d031      	beq.n	8006dd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	e002      	b.n	8006d82 <get_ldnumber+0x24>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d903      	bls.n	8006d92 <get_ldnumber+0x34>
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b3a      	cmp	r3, #58	; 0x3a
 8006d90:	d1f4      	bne.n	8006d7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b3a      	cmp	r3, #58	; 0x3a
 8006d98:	d11c      	bne.n	8006dd4 <get_ldnumber+0x76>
			tp = *path;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	60fa      	str	r2, [r7, #12]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	3b30      	subs	r3, #48	; 0x30
 8006daa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b09      	cmp	r3, #9
 8006db0:	d80e      	bhi.n	8006dd0 <get_ldnumber+0x72>
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d10a      	bne.n	8006dd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d107      	bne.n	8006dd0 <get_ldnumber+0x72>
					vol = (int)i;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	e002      	b.n	8006dda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006dd8:	693b      	ldr	r3, [r7, #16]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	70da      	strb	r2, [r3, #3]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff f81e 	bl	8005e44 <move_window>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <check_fs+0x2a>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	e038      	b.n	8006e84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3330      	adds	r3, #48	; 0x30
 8006e16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fd62 	bl	80058e4 <ld_word>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d001      	beq.n	8006e30 <check_fs+0x48>
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e029      	b.n	8006e84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e36:	2be9      	cmp	r3, #233	; 0xe9
 8006e38:	d009      	beq.n	8006e4e <check_fs+0x66>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e40:	2beb      	cmp	r3, #235	; 0xeb
 8006e42:	d11e      	bne.n	8006e82 <check_fs+0x9a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e4a:	2b90      	cmp	r3, #144	; 0x90
 8006e4c:	d119      	bne.n	8006e82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3330      	adds	r3, #48	; 0x30
 8006e52:	3336      	adds	r3, #54	; 0x36
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fd5d 	bl	8005914 <ld_dword>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e60:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <check_fs+0xa4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d101      	bne.n	8006e6a <check_fs+0x82>
 8006e66:	2300      	movs	r3, #0
 8006e68:	e00c      	b.n	8006e84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3330      	adds	r3, #48	; 0x30
 8006e6e:	3352      	adds	r3, #82	; 0x52
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fd4f 	bl	8005914 <ld_dword>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4a05      	ldr	r2, [pc, #20]	; (8006e90 <check_fs+0xa8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d101      	bne.n	8006e82 <check_fs+0x9a>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006e82:	2302      	movs	r3, #2
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	00544146 	.word	0x00544146
 8006e90:	33544146 	.word	0x33544146

08006e94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b096      	sub	sp, #88	; 0x58
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff ff58 	bl	8006d5e <get_ldnumber>
 8006eae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da01      	bge.n	8006eba <find_volume+0x26>
 8006eb6:	230b      	movs	r3, #11
 8006eb8:	e22d      	b.n	8007316 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006eba:	4aa1      	ldr	r2, [pc, #644]	; (8007140 <find_volume+0x2ac>)
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <find_volume+0x3a>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	e223      	b.n	8007316 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01a      	beq.n	8006f1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fc5d 	bl	80057a8 <disk_status>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10c      	bne.n	8006f1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <find_volume+0x82>
 8006f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f12:	230a      	movs	r3, #10
 8006f14:	e1ff      	b.n	8007316 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006f16:	2300      	movs	r3, #0
 8006f18:	e1fd      	b.n	8007316 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fc55 	bl	80057dc <disk_initialize>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f44:	2303      	movs	r3, #3
 8006f46:	e1e6      	b.n	8007316 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <find_volume+0xca>
 8006f4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006f5a:	230a      	movs	r3, #10
 8006f5c:	e1db      	b.n	8007316 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f66:	f7ff ff3f 	bl	8006de8 <check_fs>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d149      	bne.n	800700c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f78:	2300      	movs	r3, #0
 8006f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f7c:	e01e      	b.n	8006fbc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f8c:	4413      	add	r3, r2
 8006f8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	3304      	adds	r3, #4
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d006      	beq.n	8006fa8 <find_volume+0x114>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fcb8 	bl	8005914 <ld_dword>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	e000      	b.n	8006faa <find_volume+0x116>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	3358      	adds	r3, #88	; 0x58
 8006fb0:	443b      	add	r3, r7
 8006fb2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb8:	3301      	adds	r3, #1
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d9dd      	bls.n	8006f7e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <find_volume+0x13e>
 8006fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	3358      	adds	r3, #88	; 0x58
 8006fd8:	443b      	add	r3, r7
 8006fda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006fde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <find_volume+0x15e>
 8006fe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fea:	f7ff fefd 	bl	8006de8 <check_fs>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	e000      	b.n	8006ff4 <find_volume+0x160>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d905      	bls.n	800700c <find_volume+0x178>
 8007000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007002:	3301      	adds	r3, #1
 8007004:	643b      	str	r3, [r7, #64]	; 0x40
 8007006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007008:	2b03      	cmp	r3, #3
 800700a:	d9e2      	bls.n	8006fd2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800700c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007010:	2b04      	cmp	r3, #4
 8007012:	d101      	bne.n	8007018 <find_volume+0x184>
 8007014:	2301      	movs	r3, #1
 8007016:	e17e      	b.n	8007316 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800701c:	2b01      	cmp	r3, #1
 800701e:	d901      	bls.n	8007024 <find_volume+0x190>
 8007020:	230d      	movs	r3, #13
 8007022:	e178      	b.n	8007316 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	3330      	adds	r3, #48	; 0x30
 8007028:	330b      	adds	r3, #11
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe fc5a 	bl	80058e4 <ld_word>
 8007030:	4603      	mov	r3, r0
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d001      	beq.n	800703c <find_volume+0x1a8>
 8007038:	230d      	movs	r3, #13
 800703a:	e16c      	b.n	8007316 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	3330      	adds	r3, #48	; 0x30
 8007040:	3316      	adds	r3, #22
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fc4e 	bl	80058e4 <ld_word>
 8007048:	4603      	mov	r3, r0
 800704a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800704c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <find_volume+0x1cc>
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	3330      	adds	r3, #48	; 0x30
 8007056:	3324      	adds	r3, #36	; 0x24
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fc5b 	bl	8005914 <ld_dword>
 800705e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007064:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	789b      	ldrb	r3, [r3, #2]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d005      	beq.n	8007084 <find_volume+0x1f0>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	789b      	ldrb	r3, [r3, #2]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d001      	beq.n	8007084 <find_volume+0x1f0>
 8007080:	230d      	movs	r3, #13
 8007082:	e148      	b.n	8007316 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	789b      	ldrb	r3, [r3, #2]
 8007088:	461a      	mov	r2, r3
 800708a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708c:	fb02 f303 	mul.w	r3, r2, r3
 8007090:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007098:	b29a      	uxth	r2, r3
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	895b      	ldrh	r3, [r3, #10]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <find_volume+0x224>
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	895b      	ldrh	r3, [r3, #10]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	895b      	ldrh	r3, [r3, #10]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <find_volume+0x228>
 80070b8:	230d      	movs	r3, #13
 80070ba:	e12c      	b.n	8007316 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	3330      	adds	r3, #48	; 0x30
 80070c0:	3311      	adds	r3, #17
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fc0e 	bl	80058e4 <ld_word>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	891b      	ldrh	r3, [r3, #8]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <find_volume+0x24e>
 80070de:	230d      	movs	r3, #13
 80070e0:	e119      	b.n	8007316 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	3330      	adds	r3, #48	; 0x30
 80070e6:	3313      	adds	r3, #19
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fbfb 	bl	80058e4 <ld_word>
 80070ee:	4603      	mov	r3, r0
 80070f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80070f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d106      	bne.n	8007106 <find_volume+0x272>
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	3330      	adds	r3, #48	; 0x30
 80070fc:	3320      	adds	r3, #32
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fc08 	bl	8005914 <ld_dword>
 8007104:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	3330      	adds	r3, #48	; 0x30
 800710a:	330e      	adds	r3, #14
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fbe9 	bl	80058e4 <ld_word>
 8007112:	4603      	mov	r3, r0
 8007114:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <find_volume+0x28c>
 800711c:	230d      	movs	r3, #13
 800711e:	e0fa      	b.n	8007316 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007124:	4413      	add	r3, r2
 8007126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007128:	8912      	ldrh	r2, [r2, #8]
 800712a:	0912      	lsrs	r2, r2, #4
 800712c:	b292      	uxth	r2, r2
 800712e:	4413      	add	r3, r2
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	429a      	cmp	r2, r3
 8007138:	d204      	bcs.n	8007144 <find_volume+0x2b0>
 800713a:	230d      	movs	r3, #13
 800713c:	e0eb      	b.n	8007316 <find_volume+0x482>
 800713e:	bf00      	nop
 8007140:	20000a2c 	.word	0x20000a2c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800714c:	8952      	ldrh	r2, [r2, #10]
 800714e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <find_volume+0x2ca>
 800715a:	230d      	movs	r3, #13
 800715c:	e0db      	b.n	8007316 <find_volume+0x482>
		fmt = FS_FAT32;
 800715e:	2303      	movs	r3, #3
 8007160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800716a:	4293      	cmp	r3, r2
 800716c:	d802      	bhi.n	8007174 <find_volume+0x2e0>
 800716e:	2302      	movs	r3, #2
 8007170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f640 72f5 	movw	r2, #4085	; 0xff5
 800717a:	4293      	cmp	r3, r2
 800717c:	d802      	bhi.n	8007184 <find_volume+0x2f0>
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007190:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007192:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007196:	441a      	add	r2, r3
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800719c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	441a      	add	r2, r3
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80071a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d11e      	bne.n	80071ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	3330      	adds	r3, #48	; 0x30
 80071b2:	332a      	adds	r3, #42	; 0x2a
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fb95 	bl	80058e4 <ld_word>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <find_volume+0x330>
 80071c0:	230d      	movs	r3, #13
 80071c2:	e0a8      	b.n	8007316 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	891b      	ldrh	r3, [r3, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <find_volume+0x33c>
 80071cc:	230d      	movs	r3, #13
 80071ce:	e0a2      	b.n	8007316 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	3330      	adds	r3, #48	; 0x30
 80071d4:	332c      	adds	r3, #44	; 0x2c
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fb9c 	bl	8005914 <ld_dword>
 80071dc:	4602      	mov	r2, r0
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ea:	e01f      	b.n	800722c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	891b      	ldrh	r3, [r3, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <find_volume+0x364>
 80071f4:	230d      	movs	r3, #13
 80071f6:	e08e      	b.n	8007316 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	6a1a      	ldr	r2, [r3, #32]
 80071fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fe:	441a      	add	r2, r3
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007208:	2b02      	cmp	r3, #2
 800720a:	d103      	bne.n	8007214 <find_volume+0x380>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	e00a      	b.n	800722a <find_volume+0x396>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	4613      	mov	r3, r2
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	4413      	add	r3, r2
 800721e:	085a      	lsrs	r2, r3, #1
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800722a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007232:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007236:	0a5b      	lsrs	r3, r3, #9
 8007238:	429a      	cmp	r2, r3
 800723a:	d201      	bcs.n	8007240 <find_volume+0x3ac>
 800723c:	230d      	movs	r3, #13
 800723e:	e06a      	b.n	8007316 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007246:	611a      	str	r2, [r3, #16]
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	2280      	movs	r2, #128	; 0x80
 8007254:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800725a:	2b03      	cmp	r3, #3
 800725c:	d149      	bne.n	80072f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	3330      	adds	r3, #48	; 0x30
 8007262:	3330      	adds	r3, #48	; 0x30
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fb3d 	bl	80058e4 <ld_word>
 800726a:	4603      	mov	r3, r0
 800726c:	2b01      	cmp	r3, #1
 800726e:	d140      	bne.n	80072f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007272:	3301      	adds	r3, #1
 8007274:	4619      	mov	r1, r3
 8007276:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007278:	f7fe fde4 	bl	8005e44 <move_window>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d137      	bne.n	80072f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	2200      	movs	r2, #0
 8007286:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	3330      	adds	r3, #48	; 0x30
 800728c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fb27 	bl	80058e4 <ld_word>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800729e:	429a      	cmp	r2, r3
 80072a0:	d127      	bne.n	80072f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	3330      	adds	r3, #48	; 0x30
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fb34 	bl	8005914 <ld_dword>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4a1c      	ldr	r2, [pc, #112]	; (8007320 <find_volume+0x48c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d11e      	bne.n	80072f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	3330      	adds	r3, #48	; 0x30
 80072b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe fb29 	bl	8005914 <ld_dword>
 80072c2:	4603      	mov	r3, r0
 80072c4:	4a17      	ldr	r2, [pc, #92]	; (8007324 <find_volume+0x490>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d113      	bne.n	80072f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	3330      	adds	r3, #48	; 0x30
 80072ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fb1e 	bl	8005914 <ld_dword>
 80072d8:	4602      	mov	r2, r0
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	3330      	adds	r3, #48	; 0x30
 80072e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fb14 	bl	8005914 <ld_dword>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80072f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80072fa:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <find_volume+0x494>)
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <find_volume+0x494>)
 8007304:	801a      	strh	r2, [r3, #0]
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <find_volume+0x494>)
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800730e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007310:	f7fe fd30 	bl	8005d74 <clear_lock>
#endif
	return FR_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3758      	adds	r7, #88	; 0x58
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	41615252 	.word	0x41615252
 8007324:	61417272 	.word	0x61417272
 8007328:	20000a30 	.word	0x20000a30

0800732c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007336:	2309      	movs	r3, #9
 8007338:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01c      	beq.n	800737a <validate+0x4e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d018      	beq.n	800737a <validate+0x4e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <validate+0x4e>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	889a      	ldrh	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	88db      	ldrh	r3, [r3, #6]
 800735c:	429a      	cmp	r2, r3
 800735e:	d10c      	bne.n	800737a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fa1e 	bl	80057a8 <disk_status>
 800736c:	4603      	mov	r3, r0
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <validate+0x4e>
			res = FR_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <validate+0x5a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	e000      	b.n	8007388 <validate+0x5c>
 8007386:	2300      	movs	r3, #0
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	6013      	str	r3, [r2, #0]
	return res;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80073aa:	f107 0310 	add.w	r3, r7, #16
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff fcd5 	bl	8006d5e <get_ldnumber>
 80073b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da01      	bge.n	80073c0 <f_mount+0x28>
 80073bc:	230b      	movs	r3, #11
 80073be:	e02b      	b.n	8007418 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073c0:	4a17      	ldr	r2, [pc, #92]	; (8007420 <f_mount+0x88>)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80073d0:	69b8      	ldr	r0, [r7, #24]
 80073d2:	f7fe fccf 	bl	8005d74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	490d      	ldr	r1, [pc, #52]	; (8007420 <f_mount+0x88>)
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <f_mount+0x66>
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d001      	beq.n	8007402 <f_mount+0x6a>
 80073fe:	2300      	movs	r3, #0
 8007400:	e00a      	b.n	8007418 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007402:	f107 010c 	add.w	r1, r7, #12
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	2200      	movs	r2, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff fd41 	bl	8006e94 <find_volume>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007416:	7dfb      	ldrb	r3, [r7, #23]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000a2c 	.word	0x20000a2c

08007424 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b098      	sub	sp, #96	; 0x60
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <f_open+0x18>
 8007438:	2309      	movs	r3, #9
 800743a:	e1ad      	b.n	8007798 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007442:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007444:	79fa      	ldrb	r2, [r7, #7]
 8007446:	f107 0110 	add.w	r1, r7, #16
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fd20 	bl	8006e94 <find_volume>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800745a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 8191 	bne.w	8007786 <f_open+0x362>
		dj.obj.fs = fs;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fc03 	bl	8006c7c <follow_path>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800747c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007480:	2b00      	cmp	r3, #0
 8007482:	d11a      	bne.n	80074ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007484:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007488:	b25b      	sxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	da03      	bge.n	8007496 <f_open+0x72>
				res = FR_INVALID_NAME;
 800748e:	2306      	movs	r3, #6
 8007490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007494:	e011      	b.n	80074ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	bf14      	ite	ne
 80074a0:	2301      	movne	r3, #1
 80074a2:	2300      	moveq	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	f107 0314 	add.w	r3, r7, #20
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fb18 	bl	8005ae4 <chk_lock>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	f003 031c 	and.w	r3, r3, #28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d07f      	beq.n	80075c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80074c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d017      	beq.n	80074fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d10e      	bne.n	80074f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074d4:	f7fe fb62 	bl	8005b9c <enq_lock>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <f_open+0xc8>
 80074de:	f107 0314 	add.w	r3, r7, #20
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff faa4 	bl	8006a30 <dir_register>
 80074e8:	4603      	mov	r3, r0
 80074ea:	e000      	b.n	80074ee <f_open+0xca>
 80074ec:	2312      	movs	r3, #18
 80074ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	f043 0308 	orr.w	r3, r3, #8
 80074f8:	71fb      	strb	r3, [r7, #7]
 80074fa:	e010      	b.n	800751e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80074fc:	7ebb      	ldrb	r3, [r7, #26]
 80074fe:	f003 0311 	and.w	r3, r3, #17
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <f_open+0xea>
					res = FR_DENIED;
 8007506:	2307      	movs	r3, #7
 8007508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800750c:	e007      	b.n	800751e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <f_open+0xfa>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800751e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007522:	2b00      	cmp	r3, #0
 8007524:	d168      	bne.n	80075f8 <f_open+0x1d4>
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d063      	beq.n	80075f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007530:	f7fd fc00 	bl	8004d34 <get_fattime>
 8007534:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	330e      	adds	r3, #14
 800753a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fa27 	bl	8005990 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	3316      	adds	r3, #22
 8007546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fa21 	bl	8005990 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	330b      	adds	r3, #11
 8007552:	2220      	movs	r2, #32
 8007554:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800755a:	4611      	mov	r1, r2
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff f976 	bl	800684e <ld_clust>
 8007562:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007568:	2200      	movs	r2, #0
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff f98e 	bl	800688c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	331c      	adds	r3, #28
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fa0a 	bl	8005990 <st_dword>
					fs->wflag = 1;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2201      	movs	r2, #1
 8007580:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d037      	beq.n	80075f8 <f_open+0x1d4>
						dw = fs->winsect;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800758e:	f107 0314 	add.w	r3, r7, #20
 8007592:	2200      	movs	r2, #0
 8007594:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fea1 	bl	80062de <remove_chain>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80075a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d126      	bne.n	80075f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fc48 	bl	8005e44 <move_window>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075be:	3a01      	subs	r2, #1
 80075c0:	60da      	str	r2, [r3, #12]
 80075c2:	e019      	b.n	80075f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80075c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d115      	bne.n	80075f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80075cc:	7ebb      	ldrb	r3, [r7, #26]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <f_open+0x1ba>
					res = FR_NO_FILE;
 80075d6:	2304      	movs	r3, #4
 80075d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075dc:	e00c      	b.n	80075f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <f_open+0x1d4>
 80075e8:	7ebb      	ldrb	r3, [r7, #26]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <f_open+0x1d4>
						res = FR_DENIED;
 80075f2:	2307      	movs	r3, #7
 80075f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80075f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d128      	bne.n	8007652 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007610:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800761a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf14      	ite	ne
 800762a:	2301      	movne	r3, #1
 800762c:	2300      	moveq	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fad1 	bl	8005be0 <inc_lock>
 800763e:	4602      	mov	r2, r0
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <f_open+0x22e>
 800764c:	2302      	movs	r3, #2
 800764e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 8095 	bne.w	8007786 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff f8f3 	bl	800684e <ld_clust>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	331c      	adds	r3, #28
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe f94e 	bl	8005914 <ld_dword>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	88da      	ldrh	r2, [r3, #6]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	79fa      	ldrb	r2, [r7, #7]
 8007696:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3330      	adds	r3, #48	; 0x30
 80076ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b2:	2100      	movs	r1, #0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe f9b8 	bl	8005a2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	f003 0320 	and.w	r3, r3, #32
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d060      	beq.n	8007786 <f_open+0x362>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05c      	beq.n	8007786 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	895b      	ldrh	r3, [r3, #10]
 80076d8:	025b      	lsls	r3, r3, #9
 80076da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	657b      	str	r3, [r7, #84]	; 0x54
 80076e8:	e016      	b.n	8007718 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fc63 	bl	8005fba <get_fat>
 80076f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80076f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d802      	bhi.n	8007702 <f_open+0x2de>
 80076fc:	2302      	movs	r3, #2
 80076fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007708:	d102      	bne.n	8007710 <f_open+0x2ec>
 800770a:	2301      	movs	r3, #1
 800770c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007710:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	657b      	str	r3, [r7, #84]	; 0x54
 8007718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <f_open+0x304>
 8007720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007724:	429a      	cmp	r2, r3
 8007726:	d8e0      	bhi.n	80076ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800772c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800772e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007732:	2b00      	cmp	r3, #0
 8007734:	d127      	bne.n	8007786 <f_open+0x362>
 8007736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773c:	2b00      	cmp	r3, #0
 800773e:	d022      	beq.n	8007786 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fc19 	bl	8005f7c <clust2sect>
 800774a:	6478      	str	r0, [r7, #68]	; 0x44
 800774c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <f_open+0x336>
						res = FR_INT_ERR;
 8007752:	2302      	movs	r3, #2
 8007754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007758:	e015      	b.n	8007786 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800775a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775c:	0a5a      	lsrs	r2, r3, #9
 800775e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007760:	441a      	add	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	7858      	ldrb	r0, [r3, #1]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a1a      	ldr	r2, [r3, #32]
 8007774:	2301      	movs	r3, #1
 8007776:	f7fe f857 	bl	8005828 <disk_read>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <f_open+0x362>
 8007780:	2301      	movs	r3, #1
 8007782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <f_open+0x370>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007798:	4618      	mov	r0, r3
 800779a:	3760      	adds	r7, #96	; 0x60
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f107 0210 	add.w	r2, r7, #16
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fdb3 	bl	800732c <validate>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80077cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <f_write+0x44>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7d5b      	ldrb	r3, [r3, #21]
 80077d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80077dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <f_write+0x4a>
 80077e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e8:	e14b      	b.n	8007a82 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	7d1b      	ldrb	r3, [r3, #20]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <f_write+0x5a>
 80077f6:	2307      	movs	r3, #7
 80077f8:	e143      	b.n	8007a82 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	429a      	cmp	r2, r3
 8007808:	f080 812d 	bcs.w	8007a66 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	43db      	mvns	r3, r3
 8007812:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007814:	e127      	b.n	8007a66 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	2b00      	cmp	r3, #0
 8007820:	f040 80e3 	bne.w	80079ea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	0a5b      	lsrs	r3, r3, #9
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	8952      	ldrh	r2, [r2, #10]
 800782e:	3a01      	subs	r2, #1
 8007830:	4013      	ands	r3, r2
 8007832:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d143      	bne.n	80078c2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10c      	bne.n	800785c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d11a      	bne.n	8007884 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fda8 	bl	80063a8 <create_chain>
 8007858:	62b8      	str	r0, [r7, #40]	; 0x28
 800785a:	e013      	b.n	8007884 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	4619      	mov	r1, r3
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7fe fe34 	bl	80064d8 <clmt_clust>
 8007870:	62b8      	str	r0, [r7, #40]	; 0x28
 8007872:	e007      	b.n	8007884 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f7fe fd93 	bl	80063a8 <create_chain>
 8007882:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80f2 	beq.w	8007a70 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2b01      	cmp	r3, #1
 8007890:	d104      	bne.n	800789c <f_write+0xfc>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2202      	movs	r2, #2
 8007896:	755a      	strb	r2, [r3, #21]
 8007898:	2302      	movs	r3, #2
 800789a:	e0f2      	b.n	8007a82 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a2:	d104      	bne.n	80078ae <f_write+0x10e>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	755a      	strb	r2, [r3, #21]
 80078aa:	2301      	movs	r3, #1
 80078ac:	e0e9      	b.n	8007a82 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <f_write+0x122>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	7d1b      	ldrb	r3, [r3, #20]
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da18      	bge.n	80078fe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	7858      	ldrb	r0, [r3, #1]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a1a      	ldr	r2, [r3, #32]
 80078da:	2301      	movs	r3, #1
 80078dc:	f7fd ffc4 	bl	8005868 <disk_write>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <f_write+0x150>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	755a      	strb	r2, [r3, #21]
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0c8      	b.n	8007a82 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	7d1b      	ldrb	r3, [r3, #20]
 80078f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe fb38 	bl	8005f7c <clust2sect>
 800790c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <f_write+0x17e>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2202      	movs	r2, #2
 8007918:	755a      	strb	r2, [r3, #21]
 800791a:	2302      	movs	r3, #2
 800791c:	e0b1      	b.n	8007a82 <f_write+0x2e2>
			sect += csect;
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	4413      	add	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	0a5b      	lsrs	r3, r3, #9
 800792a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d03c      	beq.n	80079ac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	4413      	add	r3, r2
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	8952      	ldrh	r2, [r2, #10]
 800793c:	4293      	cmp	r3, r2
 800793e:	d905      	bls.n	800794c <f_write+0x1ac>
					cc = fs->csize - csect;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	895b      	ldrh	r3, [r3, #10]
 8007944:	461a      	mov	r2, r3
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	7858      	ldrb	r0, [r3, #1]
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	f7fd ff87 	bl	8005868 <disk_write>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <f_write+0x1ca>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	755a      	strb	r2, [r3, #21]
 8007966:	2301      	movs	r3, #1
 8007968:	e08b      	b.n	8007a82 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1a      	ldr	r2, [r3, #32]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	6a3a      	ldr	r2, [r7, #32]
 8007974:	429a      	cmp	r2, r3
 8007976:	d915      	bls.n	80079a4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	025b      	lsls	r3, r3, #9
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007990:	4619      	mov	r1, r3
 8007992:	f7fe f829 	bl	80059e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7d1b      	ldrb	r3, [r3, #20]
 800799a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	025b      	lsls	r3, r3, #9
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80079aa:	e03f      	b.n	8007a2c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d016      	beq.n	80079e4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80079be:	429a      	cmp	r2, r3
 80079c0:	d210      	bcs.n	80079e4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	7858      	ldrb	r0, [r3, #1]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079cc:	2301      	movs	r3, #1
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	f7fd ff2a 	bl	8005828 <disk_read>
 80079d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	755a      	strb	r2, [r3, #21]
 80079e0:	2301      	movs	r3, #1
 80079e2:	e04e      	b.n	8007a82 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d901      	bls.n	8007a04 <f_write+0x264>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a12:	4413      	add	r3, r2
 8007a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a16:	69f9      	ldr	r1, [r7, #28]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fd ffe5 	bl	80059e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	7d1b      	ldrb	r3, [r3, #20]
 8007a22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	4413      	add	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	619a      	str	r2, [r3, #24]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	bf38      	it	cc
 8007a4c:	461a      	movcc	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	60da      	str	r2, [r3, #12]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	441a      	add	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f47f aed4 	bne.w	8007816 <f_write+0x76>
 8007a6e:	e000      	b.n	8007a72 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	7d1b      	ldrb	r3, [r3, #20]
 8007a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3730      	adds	r7, #48	; 0x30
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f107 0208 	add.w	r2, r7, #8
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff fc46 	bl	800732c <validate>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d168      	bne.n	8007b7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7d1b      	ldrb	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d062      	beq.n	8007b7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7d1b      	ldrb	r3, [r3, #20]
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da15      	bge.n	8007aec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	7858      	ldrb	r0, [r3, #1]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1a      	ldr	r2, [r3, #32]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f7fd feca 	bl	8005868 <disk_write>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <f_sync+0x54>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e04f      	b.n	8007b7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7d1b      	ldrb	r3, [r3, #20]
 8007ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007aec:	f7fd f922 	bl	8004d34 <get_fattime>
 8007af0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	4619      	mov	r1, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	f7fe f9a2 	bl	8005e44 <move_window>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d138      	bne.n	8007b7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	330b      	adds	r3, #11
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	330b      	adds	r3, #11
 8007b1a:	f042 0220 	orr.w	r2, r2, #32
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68f9      	ldr	r1, [r7, #12]
 8007b2e:	f7fe fead 	bl	800688c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f103 021c 	add.w	r2, r3, #28
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fd ff26 	bl	8005990 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3316      	adds	r3, #22
 8007b48:	6939      	ldr	r1, [r7, #16]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd ff20 	bl	8005990 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3312      	adds	r3, #18
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd feff 	bl	800595a <st_word>
					fs->wflag = 1;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe f99b 	bl	8005ea0 <sync_fs>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7d1b      	ldrb	r3, [r3, #20]
 8007b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff ff7b 	bl	8007a8a <f_sync>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d118      	bne.n	8007bd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fbc0 	bl	800732c <validate>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10c      	bne.n	8007bd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe f89e 	bl	8005cfc <dec_lock>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <f_opendir+0x14>
 8007bea:	2309      	movs	r3, #9
 8007bec:	e064      	b.n	8007cb8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007bf2:	f107 010c 	add.w	r1, r7, #12
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f94a 	bl	8006e94 <find_volume>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d14f      	bne.n	8007caa <f_opendir+0xd0>
		obj->fs = fs;
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff f831 	bl	8006c7c <follow_path>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d13d      	bne.n	8007ca0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	db12      	blt.n	8007c56 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	799b      	ldrb	r3, [r3, #6]
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f7fe fe02 	bl	800684e <ld_clust>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	609a      	str	r2, [r3, #8]
 8007c50:	e001      	b.n	8007c56 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007c52:	2305      	movs	r3, #5
 8007c54:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d121      	bne.n	8007ca0 <f_opendir+0xc6>
				obj->id = fs->id;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	88da      	ldrh	r2, [r3, #6]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fe fc6a 	bl	8006540 <dir_sdi>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d114      	bne.n	8007ca0 <f_opendir+0xc6>
					if (obj->sclust) {
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00d      	beq.n	8007c9a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fd ffad 	bl	8005be0 <inc_lock>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <f_opendir+0xc6>
 8007c94:	2312      	movs	r3, #18
 8007c96:	75fb      	strb	r3, [r7, #23]
 8007c98:	e002      	b.n	8007ca0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d101      	bne.n	8007caa <f_opendir+0xd0>
 8007ca6:	2305      	movs	r3, #5
 8007ca8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <f_opendir+0xdc>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f107 0208 	add.w	r2, r7, #8
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fb2b 	bl	800732c <validate>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d110      	bne.n	8007d02 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d006      	beq.n	8007cf6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe f805 	bl	8005cfc <dec_lock>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d102      	bne.n	8007d02 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fb04 	bl	800732c <validate>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d126      	bne.n	8007d7c <f_readdir+0x70>
		if (!fno) {
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d106      	bne.n	8007d42 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fe fc02 	bl	8006540 <dir_sdi>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
 8007d40:	e01c      	b.n	8007d7c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fe fdc1 	bl	80068cc <dir_read>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d101      	bne.n	8007d58 <f_readdir+0x4c>
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10e      	bne.n	8007d7c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fe fe97 	bl	8006a94 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fe fc64 	bl	8006636 <dir_next>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d101      	bne.n	8007d7c <f_readdir+0x70>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007da0:	7a5b      	ldrb	r3, [r3, #9]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d131      	bne.n	8007e0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007da8:	4b1c      	ldr	r3, [pc, #112]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007daa:	7a5b      	ldrb	r3, [r3, #9]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007db2:	2100      	movs	r1, #0
 8007db4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007db6:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007db8:	7a5b      	ldrb	r3, [r3, #9]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dc8:	7a5b      	ldrb	r3, [r3, #9]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dd0:	4413      	add	r3, r2
 8007dd2:	79fa      	ldrb	r2, [r7, #7]
 8007dd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007dd6:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007dd8:	7a5b      	ldrb	r3, [r3, #9]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	b2d1      	uxtb	r1, r2
 8007de0:	4a0e      	ldr	r2, [pc, #56]	; (8007e1c <FATFS_LinkDriverEx+0x94>)
 8007de2:	7251      	strb	r1, [r2, #9]
 8007de4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007de6:	7dbb      	ldrb	r3, [r7, #22]
 8007de8:	3330      	adds	r3, #48	; 0x30
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3301      	adds	r3, #1
 8007df4:	223a      	movs	r2, #58	; 0x3a
 8007df6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	222f      	movs	r2, #47	; 0x2f
 8007dfe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	3303      	adds	r3, #3
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000a54 	.word	0x20000a54

08007e20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ffaa 	bl	8007d88 <FATFS_LinkDriverEx>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <__cvt>:
 8007e3e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e42:	ec55 4b10 	vmov	r4, r5, d0
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	460e      	mov	r6, r1
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	bfbb      	ittet	lt
 8007e50:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e54:	461d      	movlt	r5, r3
 8007e56:	2300      	movge	r3, #0
 8007e58:	232d      	movlt	r3, #45	; 0x2d
 8007e5a:	700b      	strb	r3, [r1, #0]
 8007e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e5e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e62:	4691      	mov	r9, r2
 8007e64:	f023 0820 	bic.w	r8, r3, #32
 8007e68:	bfbc      	itt	lt
 8007e6a:	4622      	movlt	r2, r4
 8007e6c:	4614      	movlt	r4, r2
 8007e6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e72:	d005      	beq.n	8007e80 <__cvt+0x42>
 8007e74:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e78:	d100      	bne.n	8007e7c <__cvt+0x3e>
 8007e7a:	3601      	adds	r6, #1
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	e000      	b.n	8007e82 <__cvt+0x44>
 8007e80:	2103      	movs	r1, #3
 8007e82:	ab03      	add	r3, sp, #12
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	ab02      	add	r3, sp, #8
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	ec45 4b10 	vmov	d0, r4, r5
 8007e8e:	4653      	mov	r3, sl
 8007e90:	4632      	mov	r2, r6
 8007e92:	f000 ff8d 	bl	8008db0 <_dtoa_r>
 8007e96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	d102      	bne.n	8007ea4 <__cvt+0x66>
 8007e9e:	f019 0f01 	tst.w	r9, #1
 8007ea2:	d022      	beq.n	8007eea <__cvt+0xac>
 8007ea4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ea8:	eb07 0906 	add.w	r9, r7, r6
 8007eac:	d110      	bne.n	8007ed0 <__cvt+0x92>
 8007eae:	783b      	ldrb	r3, [r7, #0]
 8007eb0:	2b30      	cmp	r3, #48	; 0x30
 8007eb2:	d10a      	bne.n	8007eca <__cvt+0x8c>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 fe14 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ec0:	b918      	cbnz	r0, 8007eca <__cvt+0x8c>
 8007ec2:	f1c6 0601 	rsb	r6, r6, #1
 8007ec6:	f8ca 6000 	str.w	r6, [sl]
 8007eca:	f8da 3000 	ldr.w	r3, [sl]
 8007ece:	4499      	add	r9, r3
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7f8 fe06 	bl	8000ae8 <__aeabi_dcmpeq>
 8007edc:	b108      	cbz	r0, 8007ee2 <__cvt+0xa4>
 8007ede:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ee2:	2230      	movs	r2, #48	; 0x30
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	454b      	cmp	r3, r9
 8007ee8:	d307      	bcc.n	8007efa <__cvt+0xbc>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eee:	1bdb      	subs	r3, r3, r7
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	b004      	add	sp, #16
 8007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efa:	1c59      	adds	r1, r3, #1
 8007efc:	9103      	str	r1, [sp, #12]
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	e7f0      	b.n	8007ee4 <__cvt+0xa6>

08007f02 <__exponent>:
 8007f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f04:	4603      	mov	r3, r0
 8007f06:	2900      	cmp	r1, #0
 8007f08:	bfb8      	it	lt
 8007f0a:	4249      	neglt	r1, r1
 8007f0c:	f803 2b02 	strb.w	r2, [r3], #2
 8007f10:	bfb4      	ite	lt
 8007f12:	222d      	movlt	r2, #45	; 0x2d
 8007f14:	222b      	movge	r2, #43	; 0x2b
 8007f16:	2909      	cmp	r1, #9
 8007f18:	7042      	strb	r2, [r0, #1]
 8007f1a:	dd2a      	ble.n	8007f72 <__exponent+0x70>
 8007f1c:	f10d 0207 	add.w	r2, sp, #7
 8007f20:	4617      	mov	r7, r2
 8007f22:	260a      	movs	r6, #10
 8007f24:	4694      	mov	ip, r2
 8007f26:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f2a:	fb06 1415 	mls	r4, r6, r5, r1
 8007f2e:	3430      	adds	r4, #48	; 0x30
 8007f30:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f34:	460c      	mov	r4, r1
 8007f36:	2c63      	cmp	r4, #99	; 0x63
 8007f38:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	dcf1      	bgt.n	8007f24 <__exponent+0x22>
 8007f40:	3130      	adds	r1, #48	; 0x30
 8007f42:	f1ac 0402 	sub.w	r4, ip, #2
 8007f46:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f4a:	1c41      	adds	r1, r0, #1
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	42ba      	cmp	r2, r7
 8007f50:	d30a      	bcc.n	8007f68 <__exponent+0x66>
 8007f52:	f10d 0209 	add.w	r2, sp, #9
 8007f56:	eba2 020c 	sub.w	r2, r2, ip
 8007f5a:	42bc      	cmp	r4, r7
 8007f5c:	bf88      	it	hi
 8007f5e:	2200      	movhi	r2, #0
 8007f60:	4413      	add	r3, r2
 8007f62:	1a18      	subs	r0, r3, r0
 8007f64:	b003      	add	sp, #12
 8007f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f68:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007f6c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007f70:	e7ed      	b.n	8007f4e <__exponent+0x4c>
 8007f72:	2330      	movs	r3, #48	; 0x30
 8007f74:	3130      	adds	r1, #48	; 0x30
 8007f76:	7083      	strb	r3, [r0, #2]
 8007f78:	70c1      	strb	r1, [r0, #3]
 8007f7a:	1d03      	adds	r3, r0, #4
 8007f7c:	e7f1      	b.n	8007f62 <__exponent+0x60>
	...

08007f80 <_printf_float>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	ed2d 8b02 	vpush	{d8}
 8007f88:	b08d      	sub	sp, #52	; 0x34
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f90:	4616      	mov	r6, r2
 8007f92:	461f      	mov	r7, r3
 8007f94:	4605      	mov	r5, r0
 8007f96:	f000 fe0b 	bl	8008bb0 <_localeconv_r>
 8007f9a:	f8d0 a000 	ldr.w	sl, [r0]
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	f7f8 f976 	bl	8000290 <strlen>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	9305      	str	r3, [sp, #20]
 8007fac:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007fb4:	3307      	adds	r3, #7
 8007fb6:	f023 0307 	bic.w	r3, r3, #7
 8007fba:	f103 0208 	add.w	r2, r3, #8
 8007fbe:	f8c8 2000 	str.w	r2, [r8]
 8007fc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fca:	9307      	str	r3, [sp, #28]
 8007fcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fd0:	ee08 0a10 	vmov	s16, r0
 8007fd4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fdc:	4b9e      	ldr	r3, [pc, #632]	; (8008258 <_printf_float+0x2d8>)
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fe2:	f7f8 fdb3 	bl	8000b4c <__aeabi_dcmpun>
 8007fe6:	bb88      	cbnz	r0, 800804c <_printf_float+0xcc>
 8007fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fec:	4b9a      	ldr	r3, [pc, #616]	; (8008258 <_printf_float+0x2d8>)
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ff2:	f7f8 fd8d 	bl	8000b10 <__aeabi_dcmple>
 8007ff6:	bb48      	cbnz	r0, 800804c <_printf_float+0xcc>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 fd7c 	bl	8000afc <__aeabi_dcmplt>
 8008004:	b110      	cbz	r0, 800800c <_printf_float+0x8c>
 8008006:	232d      	movs	r3, #45	; 0x2d
 8008008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800c:	4a93      	ldr	r2, [pc, #588]	; (800825c <_printf_float+0x2dc>)
 800800e:	4b94      	ldr	r3, [pc, #592]	; (8008260 <_printf_float+0x2e0>)
 8008010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008014:	bf94      	ite	ls
 8008016:	4690      	movls	r8, r2
 8008018:	4698      	movhi	r8, r3
 800801a:	2303      	movs	r3, #3
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	9b05      	ldr	r3, [sp, #20]
 8008020:	f023 0304 	bic.w	r3, r3, #4
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	9700      	str	r7, [sp, #0]
 800802c:	4633      	mov	r3, r6
 800802e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f9da 	bl	80083ec <_printf_common>
 8008038:	3001      	adds	r0, #1
 800803a:	f040 8090 	bne.w	800815e <_printf_float+0x1de>
 800803e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008042:	b00d      	add	sp, #52	; 0x34
 8008044:	ecbd 8b02 	vpop	{d8}
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 fd7a 	bl	8000b4c <__aeabi_dcmpun>
 8008058:	b140      	cbz	r0, 800806c <_printf_float+0xec>
 800805a:	464b      	mov	r3, r9
 800805c:	2b00      	cmp	r3, #0
 800805e:	bfbc      	itt	lt
 8008060:	232d      	movlt	r3, #45	; 0x2d
 8008062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008066:	4a7f      	ldr	r2, [pc, #508]	; (8008264 <_printf_float+0x2e4>)
 8008068:	4b7f      	ldr	r3, [pc, #508]	; (8008268 <_printf_float+0x2e8>)
 800806a:	e7d1      	b.n	8008010 <_printf_float+0x90>
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008072:	9206      	str	r2, [sp, #24]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	d13f      	bne.n	80080f8 <_printf_float+0x178>
 8008078:	2306      	movs	r3, #6
 800807a:	6063      	str	r3, [r4, #4]
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	6861      	ldr	r1, [r4, #4]
 8008080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008084:	2300      	movs	r3, #0
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	ab0a      	add	r3, sp, #40	; 0x28
 800808a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800808e:	ab09      	add	r3, sp, #36	; 0x24
 8008090:	ec49 8b10 	vmov	d0, r8, r9
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	6022      	str	r2, [r4, #0]
 8008098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff fece 	bl	8007e3e <__cvt>
 80080a2:	9b06      	ldr	r3, [sp, #24]
 80080a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a6:	2b47      	cmp	r3, #71	; 0x47
 80080a8:	4680      	mov	r8, r0
 80080aa:	d108      	bne.n	80080be <_printf_float+0x13e>
 80080ac:	1cc8      	adds	r0, r1, #3
 80080ae:	db02      	blt.n	80080b6 <_printf_float+0x136>
 80080b0:	6863      	ldr	r3, [r4, #4]
 80080b2:	4299      	cmp	r1, r3
 80080b4:	dd41      	ble.n	800813a <_printf_float+0x1ba>
 80080b6:	f1ab 0302 	sub.w	r3, fp, #2
 80080ba:	fa5f fb83 	uxtb.w	fp, r3
 80080be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080c2:	d820      	bhi.n	8008106 <_printf_float+0x186>
 80080c4:	3901      	subs	r1, #1
 80080c6:	465a      	mov	r2, fp
 80080c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080cc:	9109      	str	r1, [sp, #36]	; 0x24
 80080ce:	f7ff ff18 	bl	8007f02 <__exponent>
 80080d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080d4:	1813      	adds	r3, r2, r0
 80080d6:	2a01      	cmp	r2, #1
 80080d8:	4681      	mov	r9, r0
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	dc02      	bgt.n	80080e4 <_printf_float+0x164>
 80080de:	6822      	ldr	r2, [r4, #0]
 80080e0:	07d2      	lsls	r2, r2, #31
 80080e2:	d501      	bpl.n	80080e8 <_printf_float+0x168>
 80080e4:	3301      	adds	r3, #1
 80080e6:	6123      	str	r3, [r4, #16]
 80080e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d09c      	beq.n	800802a <_printf_float+0xaa>
 80080f0:	232d      	movs	r3, #45	; 0x2d
 80080f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f6:	e798      	b.n	800802a <_printf_float+0xaa>
 80080f8:	9a06      	ldr	r2, [sp, #24]
 80080fa:	2a47      	cmp	r2, #71	; 0x47
 80080fc:	d1be      	bne.n	800807c <_printf_float+0xfc>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1bc      	bne.n	800807c <_printf_float+0xfc>
 8008102:	2301      	movs	r3, #1
 8008104:	e7b9      	b.n	800807a <_printf_float+0xfa>
 8008106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800810a:	d118      	bne.n	800813e <_printf_float+0x1be>
 800810c:	2900      	cmp	r1, #0
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	dd0b      	ble.n	800812a <_printf_float+0x1aa>
 8008112:	6121      	str	r1, [r4, #16]
 8008114:	b913      	cbnz	r3, 800811c <_printf_float+0x19c>
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	07d0      	lsls	r0, r2, #31
 800811a:	d502      	bpl.n	8008122 <_printf_float+0x1a2>
 800811c:	3301      	adds	r3, #1
 800811e:	440b      	add	r3, r1
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	65a1      	str	r1, [r4, #88]	; 0x58
 8008124:	f04f 0900 	mov.w	r9, #0
 8008128:	e7de      	b.n	80080e8 <_printf_float+0x168>
 800812a:	b913      	cbnz	r3, 8008132 <_printf_float+0x1b2>
 800812c:	6822      	ldr	r2, [r4, #0]
 800812e:	07d2      	lsls	r2, r2, #31
 8008130:	d501      	bpl.n	8008136 <_printf_float+0x1b6>
 8008132:	3302      	adds	r3, #2
 8008134:	e7f4      	b.n	8008120 <_printf_float+0x1a0>
 8008136:	2301      	movs	r3, #1
 8008138:	e7f2      	b.n	8008120 <_printf_float+0x1a0>
 800813a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800813e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008140:	4299      	cmp	r1, r3
 8008142:	db05      	blt.n	8008150 <_printf_float+0x1d0>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	6121      	str	r1, [r4, #16]
 8008148:	07d8      	lsls	r0, r3, #31
 800814a:	d5ea      	bpl.n	8008122 <_printf_float+0x1a2>
 800814c:	1c4b      	adds	r3, r1, #1
 800814e:	e7e7      	b.n	8008120 <_printf_float+0x1a0>
 8008150:	2900      	cmp	r1, #0
 8008152:	bfd4      	ite	le
 8008154:	f1c1 0202 	rsble	r2, r1, #2
 8008158:	2201      	movgt	r2, #1
 800815a:	4413      	add	r3, r2
 800815c:	e7e0      	b.n	8008120 <_printf_float+0x1a0>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	055a      	lsls	r2, r3, #21
 8008162:	d407      	bmi.n	8008174 <_printf_float+0x1f4>
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	4642      	mov	r2, r8
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	d12c      	bne.n	80081cc <_printf_float+0x24c>
 8008172:	e764      	b.n	800803e <_printf_float+0xbe>
 8008174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008178:	f240 80e0 	bls.w	800833c <_printf_float+0x3bc>
 800817c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008180:	2200      	movs	r2, #0
 8008182:	2300      	movs	r3, #0
 8008184:	f7f8 fcb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008188:	2800      	cmp	r0, #0
 800818a:	d034      	beq.n	80081f6 <_printf_float+0x276>
 800818c:	4a37      	ldr	r2, [pc, #220]	; (800826c <_printf_float+0x2ec>)
 800818e:	2301      	movs	r3, #1
 8008190:	4631      	mov	r1, r6
 8008192:	4628      	mov	r0, r5
 8008194:	47b8      	blx	r7
 8008196:	3001      	adds	r0, #1
 8008198:	f43f af51 	beq.w	800803e <_printf_float+0xbe>
 800819c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a0:	429a      	cmp	r2, r3
 80081a2:	db02      	blt.n	80081aa <_printf_float+0x22a>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	07d8      	lsls	r0, r3, #31
 80081a8:	d510      	bpl.n	80081cc <_printf_float+0x24c>
 80081aa:	ee18 3a10 	vmov	r3, s16
 80081ae:	4652      	mov	r2, sl
 80081b0:	4631      	mov	r1, r6
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b8      	blx	r7
 80081b6:	3001      	adds	r0, #1
 80081b8:	f43f af41 	beq.w	800803e <_printf_float+0xbe>
 80081bc:	f04f 0800 	mov.w	r8, #0
 80081c0:	f104 091a 	add.w	r9, r4, #26
 80081c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c6:	3b01      	subs	r3, #1
 80081c8:	4543      	cmp	r3, r8
 80081ca:	dc09      	bgt.n	80081e0 <_printf_float+0x260>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	079b      	lsls	r3, r3, #30
 80081d0:	f100 8107 	bmi.w	80083e2 <_printf_float+0x462>
 80081d4:	68e0      	ldr	r0, [r4, #12]
 80081d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d8:	4298      	cmp	r0, r3
 80081da:	bfb8      	it	lt
 80081dc:	4618      	movlt	r0, r3
 80081de:	e730      	b.n	8008042 <_printf_float+0xc2>
 80081e0:	2301      	movs	r3, #1
 80081e2:	464a      	mov	r2, r9
 80081e4:	4631      	mov	r1, r6
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f af27 	beq.w	800803e <_printf_float+0xbe>
 80081f0:	f108 0801 	add.w	r8, r8, #1
 80081f4:	e7e6      	b.n	80081c4 <_printf_float+0x244>
 80081f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dc39      	bgt.n	8008270 <_printf_float+0x2f0>
 80081fc:	4a1b      	ldr	r2, [pc, #108]	; (800826c <_printf_float+0x2ec>)
 80081fe:	2301      	movs	r3, #1
 8008200:	4631      	mov	r1, r6
 8008202:	4628      	mov	r0, r5
 8008204:	47b8      	blx	r7
 8008206:	3001      	adds	r0, #1
 8008208:	f43f af19 	beq.w	800803e <_printf_float+0xbe>
 800820c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008210:	4313      	orrs	r3, r2
 8008212:	d102      	bne.n	800821a <_printf_float+0x29a>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	07d9      	lsls	r1, r3, #31
 8008218:	d5d8      	bpl.n	80081cc <_printf_float+0x24c>
 800821a:	ee18 3a10 	vmov	r3, s16
 800821e:	4652      	mov	r2, sl
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	f43f af09 	beq.w	800803e <_printf_float+0xbe>
 800822c:	f04f 0900 	mov.w	r9, #0
 8008230:	f104 0a1a 	add.w	sl, r4, #26
 8008234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008236:	425b      	negs	r3, r3
 8008238:	454b      	cmp	r3, r9
 800823a:	dc01      	bgt.n	8008240 <_printf_float+0x2c0>
 800823c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800823e:	e792      	b.n	8008166 <_printf_float+0x1e6>
 8008240:	2301      	movs	r3, #1
 8008242:	4652      	mov	r2, sl
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f aef7 	beq.w	800803e <_printf_float+0xbe>
 8008250:	f109 0901 	add.w	r9, r9, #1
 8008254:	e7ee      	b.n	8008234 <_printf_float+0x2b4>
 8008256:	bf00      	nop
 8008258:	7fefffff 	.word	0x7fefffff
 800825c:	0800ae90 	.word	0x0800ae90
 8008260:	0800ae94 	.word	0x0800ae94
 8008264:	0800ae98 	.word	0x0800ae98
 8008268:	0800ae9c 	.word	0x0800ae9c
 800826c:	0800aea0 	.word	0x0800aea0
 8008270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008274:	429a      	cmp	r2, r3
 8008276:	bfa8      	it	ge
 8008278:	461a      	movge	r2, r3
 800827a:	2a00      	cmp	r2, #0
 800827c:	4691      	mov	r9, r2
 800827e:	dc37      	bgt.n	80082f0 <_printf_float+0x370>
 8008280:	f04f 0b00 	mov.w	fp, #0
 8008284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008288:	f104 021a 	add.w	r2, r4, #26
 800828c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800828e:	9305      	str	r3, [sp, #20]
 8008290:	eba3 0309 	sub.w	r3, r3, r9
 8008294:	455b      	cmp	r3, fp
 8008296:	dc33      	bgt.n	8008300 <_printf_float+0x380>
 8008298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800829c:	429a      	cmp	r2, r3
 800829e:	db3b      	blt.n	8008318 <_printf_float+0x398>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	07da      	lsls	r2, r3, #31
 80082a4:	d438      	bmi.n	8008318 <_printf_float+0x398>
 80082a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082aa:	eba2 0903 	sub.w	r9, r2, r3
 80082ae:	9b05      	ldr	r3, [sp, #20]
 80082b0:	1ad2      	subs	r2, r2, r3
 80082b2:	4591      	cmp	r9, r2
 80082b4:	bfa8      	it	ge
 80082b6:	4691      	movge	r9, r2
 80082b8:	f1b9 0f00 	cmp.w	r9, #0
 80082bc:	dc35      	bgt.n	800832a <_printf_float+0x3aa>
 80082be:	f04f 0800 	mov.w	r8, #0
 80082c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082c6:	f104 0a1a 	add.w	sl, r4, #26
 80082ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	eba3 0309 	sub.w	r3, r3, r9
 80082d4:	4543      	cmp	r3, r8
 80082d6:	f77f af79 	ble.w	80081cc <_printf_float+0x24c>
 80082da:	2301      	movs	r3, #1
 80082dc:	4652      	mov	r2, sl
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f aeaa 	beq.w	800803e <_printf_float+0xbe>
 80082ea:	f108 0801 	add.w	r8, r8, #1
 80082ee:	e7ec      	b.n	80082ca <_printf_float+0x34a>
 80082f0:	4613      	mov	r3, r2
 80082f2:	4631      	mov	r1, r6
 80082f4:	4642      	mov	r2, r8
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	d1c0      	bne.n	8008280 <_printf_float+0x300>
 80082fe:	e69e      	b.n	800803e <_printf_float+0xbe>
 8008300:	2301      	movs	r3, #1
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	9205      	str	r2, [sp, #20]
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	f43f ae97 	beq.w	800803e <_printf_float+0xbe>
 8008310:	9a05      	ldr	r2, [sp, #20]
 8008312:	f10b 0b01 	add.w	fp, fp, #1
 8008316:	e7b9      	b.n	800828c <_printf_float+0x30c>
 8008318:	ee18 3a10 	vmov	r3, s16
 800831c:	4652      	mov	r2, sl
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	d1be      	bne.n	80082a6 <_printf_float+0x326>
 8008328:	e689      	b.n	800803e <_printf_float+0xbe>
 800832a:	9a05      	ldr	r2, [sp, #20]
 800832c:	464b      	mov	r3, r9
 800832e:	4442      	add	r2, r8
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	d1c1      	bne.n	80082be <_printf_float+0x33e>
 800833a:	e680      	b.n	800803e <_printf_float+0xbe>
 800833c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833e:	2a01      	cmp	r2, #1
 8008340:	dc01      	bgt.n	8008346 <_printf_float+0x3c6>
 8008342:	07db      	lsls	r3, r3, #31
 8008344:	d53a      	bpl.n	80083bc <_printf_float+0x43c>
 8008346:	2301      	movs	r3, #1
 8008348:	4642      	mov	r2, r8
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f ae74 	beq.w	800803e <_printf_float+0xbe>
 8008356:	ee18 3a10 	vmov	r3, s16
 800835a:	4652      	mov	r2, sl
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f ae6b 	beq.w	800803e <_printf_float+0xbe>
 8008368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800836c:	2200      	movs	r2, #0
 800836e:	2300      	movs	r3, #0
 8008370:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008374:	f7f8 fbb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008378:	b9d8      	cbnz	r0, 80083b2 <_printf_float+0x432>
 800837a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800837e:	f108 0201 	add.w	r2, r8, #1
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	d10e      	bne.n	80083aa <_printf_float+0x42a>
 800838c:	e657      	b.n	800803e <_printf_float+0xbe>
 800838e:	2301      	movs	r3, #1
 8008390:	4652      	mov	r2, sl
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	f43f ae50 	beq.w	800803e <_printf_float+0xbe>
 800839e:	f108 0801 	add.w	r8, r8, #1
 80083a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4543      	cmp	r3, r8
 80083a8:	dcf1      	bgt.n	800838e <_printf_float+0x40e>
 80083aa:	464b      	mov	r3, r9
 80083ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083b0:	e6da      	b.n	8008168 <_printf_float+0x1e8>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	f104 0a1a 	add.w	sl, r4, #26
 80083ba:	e7f2      	b.n	80083a2 <_printf_float+0x422>
 80083bc:	2301      	movs	r3, #1
 80083be:	4642      	mov	r2, r8
 80083c0:	e7df      	b.n	8008382 <_printf_float+0x402>
 80083c2:	2301      	movs	r3, #1
 80083c4:	464a      	mov	r2, r9
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	f43f ae36 	beq.w	800803e <_printf_float+0xbe>
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	68e3      	ldr	r3, [r4, #12]
 80083d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083da:	1a5b      	subs	r3, r3, r1
 80083dc:	4543      	cmp	r3, r8
 80083de:	dcf0      	bgt.n	80083c2 <_printf_float+0x442>
 80083e0:	e6f8      	b.n	80081d4 <_printf_float+0x254>
 80083e2:	f04f 0800 	mov.w	r8, #0
 80083e6:	f104 0919 	add.w	r9, r4, #25
 80083ea:	e7f4      	b.n	80083d6 <_printf_float+0x456>

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4699      	mov	r9, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008438:	1e13      	subs	r3, r2, #0
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008448:	4649      	mov	r1, r9
 800844a:	4638      	mov	r0, r7
 800844c:	47c0      	blx	r8
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4649      	mov	r1, r9
 8008488:	4638      	mov	r0, r7
 800848a:	47c0      	blx	r8
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	; 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4649      	mov	r1, r9
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d0:	2f78      	cmp	r7, #120	; 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	; 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d4 	beq.w	8008692 <_printf_i+0x1ca>
 80084ea:	2f58      	cmp	r7, #88	; 0x58
 80084ec:	f000 80c0 	beq.w	8008670 <_printf_i+0x1a8>
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	; (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008679 	.word	0x08008679
 8008538:	080085a1 	.word	0x080085a1
 800853c:	08008633 	.word	0x08008633
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	0800869b 	.word	0x0800869b
 800854c:	080084f1 	.word	0x080084f1
 8008550:	080085a1 	.word	0x080085a1
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	0800863b 	.word	0x0800863b
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	602a      	str	r2, [r5, #0]
 8008568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09f      	b.n	80086b4 <_printf_i+0x1ec>
 8008574:	6820      	ldr	r0, [r4, #0]
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	0607      	lsls	r7, r0, #24
 800857a:	f103 0104 	add.w	r1, r3, #4
 800857e:	6029      	str	r1, [r5, #0]
 8008580:	d501      	bpl.n	8008586 <_printf_i+0xbe>
 8008582:	681e      	ldr	r6, [r3, #0]
 8008584:	e003      	b.n	800858e <_printf_i+0xc6>
 8008586:	0646      	lsls	r6, r0, #25
 8008588:	d5fb      	bpl.n	8008582 <_printf_i+0xba>
 800858a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800858e:	2e00      	cmp	r6, #0
 8008590:	da03      	bge.n	800859a <_printf_i+0xd2>
 8008592:	232d      	movs	r3, #45	; 0x2d
 8008594:	4276      	negs	r6, r6
 8008596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859a:	485a      	ldr	r0, [pc, #360]	; (8008704 <_printf_i+0x23c>)
 800859c:	230a      	movs	r3, #10
 800859e:	e012      	b.n	80085c6 <_printf_i+0xfe>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	6029      	str	r1, [r5, #0]
 80085a8:	0605      	lsls	r5, r0, #24
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0xe8>
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	e002      	b.n	80085b6 <_printf_i+0xee>
 80085b0:	0641      	lsls	r1, r0, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0xe4>
 80085b4:	881e      	ldrh	r6, [r3, #0]
 80085b6:	4853      	ldr	r0, [pc, #332]	; (8008704 <_printf_i+0x23c>)
 80085b8:	2f6f      	cmp	r7, #111	; 0x6f
 80085ba:	bf0c      	ite	eq
 80085bc:	2308      	moveq	r3, #8
 80085be:	230a      	movne	r3, #10
 80085c0:	2100      	movs	r1, #0
 80085c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c6:	6865      	ldr	r5, [r4, #4]
 80085c8:	60a5      	str	r5, [r4, #8]
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	bfa2      	ittt	ge
 80085ce:	6821      	ldrge	r1, [r4, #0]
 80085d0:	f021 0104 	bicge.w	r1, r1, #4
 80085d4:	6021      	strge	r1, [r4, #0]
 80085d6:	b90e      	cbnz	r6, 80085dc <_printf_i+0x114>
 80085d8:	2d00      	cmp	r5, #0
 80085da:	d04b      	beq.n	8008674 <_printf_i+0x1ac>
 80085dc:	4615      	mov	r5, r2
 80085de:	fbb6 f1f3 	udiv	r1, r6, r3
 80085e2:	fb03 6711 	mls	r7, r3, r1, r6
 80085e6:	5dc7      	ldrb	r7, [r0, r7]
 80085e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085ec:	4637      	mov	r7, r6
 80085ee:	42bb      	cmp	r3, r7
 80085f0:	460e      	mov	r6, r1
 80085f2:	d9f4      	bls.n	80085de <_printf_i+0x116>
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d10b      	bne.n	8008610 <_printf_i+0x148>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	07de      	lsls	r6, r3, #31
 80085fc:	d508      	bpl.n	8008610 <_printf_i+0x148>
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	4299      	cmp	r1, r3
 8008604:	bfde      	ittt	le
 8008606:	2330      	movle	r3, #48	; 0x30
 8008608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800860c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008610:	1b52      	subs	r2, r2, r5
 8008612:	6122      	str	r2, [r4, #16]
 8008614:	f8cd a000 	str.w	sl, [sp]
 8008618:	464b      	mov	r3, r9
 800861a:	aa03      	add	r2, sp, #12
 800861c:	4621      	mov	r1, r4
 800861e:	4640      	mov	r0, r8
 8008620:	f7ff fee4 	bl	80083ec <_printf_common>
 8008624:	3001      	adds	r0, #1
 8008626:	d14a      	bne.n	80086be <_printf_i+0x1f6>
 8008628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800862c:	b004      	add	sp, #16
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	f043 0320 	orr.w	r3, r3, #32
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	4833      	ldr	r0, [pc, #204]	; (8008708 <_printf_i+0x240>)
 800863c:	2778      	movs	r7, #120	; 0x78
 800863e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	6829      	ldr	r1, [r5, #0]
 8008646:	061f      	lsls	r7, r3, #24
 8008648:	f851 6b04 	ldr.w	r6, [r1], #4
 800864c:	d402      	bmi.n	8008654 <_printf_i+0x18c>
 800864e:	065f      	lsls	r7, r3, #25
 8008650:	bf48      	it	mi
 8008652:	b2b6      	uxthmi	r6, r6
 8008654:	07df      	lsls	r7, r3, #31
 8008656:	bf48      	it	mi
 8008658:	f043 0320 	orrmi.w	r3, r3, #32
 800865c:	6029      	str	r1, [r5, #0]
 800865e:	bf48      	it	mi
 8008660:	6023      	strmi	r3, [r4, #0]
 8008662:	b91e      	cbnz	r6, 800866c <_printf_i+0x1a4>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	2310      	movs	r3, #16
 800866e:	e7a7      	b.n	80085c0 <_printf_i+0xf8>
 8008670:	4824      	ldr	r0, [pc, #144]	; (8008704 <_printf_i+0x23c>)
 8008672:	e7e4      	b.n	800863e <_printf_i+0x176>
 8008674:	4615      	mov	r5, r2
 8008676:	e7bd      	b.n	80085f4 <_printf_i+0x12c>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	6826      	ldr	r6, [r4, #0]
 800867c:	6961      	ldr	r1, [r4, #20]
 800867e:	1d18      	adds	r0, r3, #4
 8008680:	6028      	str	r0, [r5, #0]
 8008682:	0635      	lsls	r5, r6, #24
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	d501      	bpl.n	800868c <_printf_i+0x1c4>
 8008688:	6019      	str	r1, [r3, #0]
 800868a:	e002      	b.n	8008692 <_printf_i+0x1ca>
 800868c:	0670      	lsls	r0, r6, #25
 800868e:	d5fb      	bpl.n	8008688 <_printf_i+0x1c0>
 8008690:	8019      	strh	r1, [r3, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	4615      	mov	r5, r2
 8008698:	e7bc      	b.n	8008614 <_printf_i+0x14c>
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	2100      	movs	r1, #0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f7f7 fda2 	bl	80001f0 <memchr>
 80086ac:	b108      	cbz	r0, 80086b2 <_printf_i+0x1ea>
 80086ae:	1b40      	subs	r0, r0, r5
 80086b0:	6060      	str	r0, [r4, #4]
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	2300      	movs	r3, #0
 80086b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086bc:	e7aa      	b.n	8008614 <_printf_i+0x14c>
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4649      	mov	r1, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	47d0      	blx	sl
 80086c8:	3001      	adds	r0, #1
 80086ca:	d0ad      	beq.n	8008628 <_printf_i+0x160>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	079b      	lsls	r3, r3, #30
 80086d0:	d413      	bmi.n	80086fa <_printf_i+0x232>
 80086d2:	68e0      	ldr	r0, [r4, #12]
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	4298      	cmp	r0, r3
 80086d8:	bfb8      	it	lt
 80086da:	4618      	movlt	r0, r3
 80086dc:	e7a6      	b.n	800862c <_printf_i+0x164>
 80086de:	2301      	movs	r3, #1
 80086e0:	4632      	mov	r2, r6
 80086e2:	4649      	mov	r1, r9
 80086e4:	4640      	mov	r0, r8
 80086e6:	47d0      	blx	sl
 80086e8:	3001      	adds	r0, #1
 80086ea:	d09d      	beq.n	8008628 <_printf_i+0x160>
 80086ec:	3501      	adds	r5, #1
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	9903      	ldr	r1, [sp, #12]
 80086f2:	1a5b      	subs	r3, r3, r1
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dcf2      	bgt.n	80086de <_printf_i+0x216>
 80086f8:	e7eb      	b.n	80086d2 <_printf_i+0x20a>
 80086fa:	2500      	movs	r5, #0
 80086fc:	f104 0619 	add.w	r6, r4, #25
 8008700:	e7f5      	b.n	80086ee <_printf_i+0x226>
 8008702:	bf00      	nop
 8008704:	0800aea2 	.word	0x0800aea2
 8008708:	0800aeb3 	.word	0x0800aeb3

0800870c <std>:
 800870c:	2300      	movs	r3, #0
 800870e:	b510      	push	{r4, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	e9c0 3300 	strd	r3, r3, [r0]
 8008716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800871a:	6083      	str	r3, [r0, #8]
 800871c:	8181      	strh	r1, [r0, #12]
 800871e:	6643      	str	r3, [r0, #100]	; 0x64
 8008720:	81c2      	strh	r2, [r0, #14]
 8008722:	6183      	str	r3, [r0, #24]
 8008724:	4619      	mov	r1, r3
 8008726:	2208      	movs	r2, #8
 8008728:	305c      	adds	r0, #92	; 0x5c
 800872a:	f000 fa39 	bl	8008ba0 <memset>
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <std+0x38>)
 8008730:	6263      	str	r3, [r4, #36]	; 0x24
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <std+0x3c>)
 8008734:	62a3      	str	r3, [r4, #40]	; 0x28
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <std+0x40>)
 8008738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <std+0x44>)
 800873c:	6224      	str	r4, [r4, #32]
 800873e:	6323      	str	r3, [r4, #48]	; 0x30
 8008740:	bd10      	pop	{r4, pc}
 8008742:	bf00      	nop
 8008744:	080089f1 	.word	0x080089f1
 8008748:	08008a13 	.word	0x08008a13
 800874c:	08008a4b 	.word	0x08008a4b
 8008750:	08008a6f 	.word	0x08008a6f

08008754 <stdio_exit_handler>:
 8008754:	4a02      	ldr	r2, [pc, #8]	; (8008760 <stdio_exit_handler+0xc>)
 8008756:	4903      	ldr	r1, [pc, #12]	; (8008764 <stdio_exit_handler+0x10>)
 8008758:	4803      	ldr	r0, [pc, #12]	; (8008768 <stdio_exit_handler+0x14>)
 800875a:	f000 b869 	b.w	8008830 <_fwalk_sglue>
 800875e:	bf00      	nop
 8008760:	20000024 	.word	0x20000024
 8008764:	0800a8d1 	.word	0x0800a8d1
 8008768:	20000030 	.word	0x20000030

0800876c <cleanup_stdio>:
 800876c:	6841      	ldr	r1, [r0, #4]
 800876e:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <cleanup_stdio+0x34>)
 8008770:	4299      	cmp	r1, r3
 8008772:	b510      	push	{r4, lr}
 8008774:	4604      	mov	r4, r0
 8008776:	d001      	beq.n	800877c <cleanup_stdio+0x10>
 8008778:	f002 f8aa 	bl	800a8d0 <_fflush_r>
 800877c:	68a1      	ldr	r1, [r4, #8]
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <cleanup_stdio+0x38>)
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <cleanup_stdio+0x1e>
 8008784:	4620      	mov	r0, r4
 8008786:	f002 f8a3 	bl	800a8d0 <_fflush_r>
 800878a:	68e1      	ldr	r1, [r4, #12]
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <cleanup_stdio+0x3c>)
 800878e:	4299      	cmp	r1, r3
 8008790:	d004      	beq.n	800879c <cleanup_stdio+0x30>
 8008792:	4620      	mov	r0, r4
 8008794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008798:	f002 b89a 	b.w	800a8d0 <_fflush_r>
 800879c:	bd10      	pop	{r4, pc}
 800879e:	bf00      	nop
 80087a0:	20000a60 	.word	0x20000a60
 80087a4:	20000ac8 	.word	0x20000ac8
 80087a8:	20000b30 	.word	0x20000b30

080087ac <global_stdio_init.part.0>:
 80087ac:	b510      	push	{r4, lr}
 80087ae:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <global_stdio_init.part.0+0x30>)
 80087b0:	4c0b      	ldr	r4, [pc, #44]	; (80087e0 <global_stdio_init.part.0+0x34>)
 80087b2:	4a0c      	ldr	r2, [pc, #48]	; (80087e4 <global_stdio_init.part.0+0x38>)
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	4620      	mov	r0, r4
 80087b8:	2200      	movs	r2, #0
 80087ba:	2104      	movs	r1, #4
 80087bc:	f7ff ffa6 	bl	800870c <std>
 80087c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087c4:	2201      	movs	r2, #1
 80087c6:	2109      	movs	r1, #9
 80087c8:	f7ff ffa0 	bl	800870c <std>
 80087cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087d0:	2202      	movs	r2, #2
 80087d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d6:	2112      	movs	r1, #18
 80087d8:	f7ff bf98 	b.w	800870c <std>
 80087dc:	20000b98 	.word	0x20000b98
 80087e0:	20000a60 	.word	0x20000a60
 80087e4:	08008755 	.word	0x08008755

080087e8 <__sfp_lock_acquire>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__sfp_lock_acquire+0x8>)
 80087ea:	f000 ba55 	b.w	8008c98 <__retarget_lock_acquire_recursive>
 80087ee:	bf00      	nop
 80087f0:	20000ba1 	.word	0x20000ba1

080087f4 <__sfp_lock_release>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__sfp_lock_release+0x8>)
 80087f6:	f000 ba50 	b.w	8008c9a <__retarget_lock_release_recursive>
 80087fa:	bf00      	nop
 80087fc:	20000ba1 	.word	0x20000ba1

08008800 <__sinit>:
 8008800:	b510      	push	{r4, lr}
 8008802:	4604      	mov	r4, r0
 8008804:	f7ff fff0 	bl	80087e8 <__sfp_lock_acquire>
 8008808:	6a23      	ldr	r3, [r4, #32]
 800880a:	b11b      	cbz	r3, 8008814 <__sinit+0x14>
 800880c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008810:	f7ff bff0 	b.w	80087f4 <__sfp_lock_release>
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <__sinit+0x28>)
 8008816:	6223      	str	r3, [r4, #32]
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <__sinit+0x2c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f5      	bne.n	800880c <__sinit+0xc>
 8008820:	f7ff ffc4 	bl	80087ac <global_stdio_init.part.0>
 8008824:	e7f2      	b.n	800880c <__sinit+0xc>
 8008826:	bf00      	nop
 8008828:	0800876d 	.word	0x0800876d
 800882c:	20000b98 	.word	0x20000b98

08008830 <_fwalk_sglue>:
 8008830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008834:	4607      	mov	r7, r0
 8008836:	4688      	mov	r8, r1
 8008838:	4614      	mov	r4, r2
 800883a:	2600      	movs	r6, #0
 800883c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008840:	f1b9 0901 	subs.w	r9, r9, #1
 8008844:	d505      	bpl.n	8008852 <_fwalk_sglue+0x22>
 8008846:	6824      	ldr	r4, [r4, #0]
 8008848:	2c00      	cmp	r4, #0
 800884a:	d1f7      	bne.n	800883c <_fwalk_sglue+0xc>
 800884c:	4630      	mov	r0, r6
 800884e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008852:	89ab      	ldrh	r3, [r5, #12]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d907      	bls.n	8008868 <_fwalk_sglue+0x38>
 8008858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800885c:	3301      	adds	r3, #1
 800885e:	d003      	beq.n	8008868 <_fwalk_sglue+0x38>
 8008860:	4629      	mov	r1, r5
 8008862:	4638      	mov	r0, r7
 8008864:	47c0      	blx	r8
 8008866:	4306      	orrs	r6, r0
 8008868:	3568      	adds	r5, #104	; 0x68
 800886a:	e7e9      	b.n	8008840 <_fwalk_sglue+0x10>

0800886c <iprintf>:
 800886c:	b40f      	push	{r0, r1, r2, r3}
 800886e:	b507      	push	{r0, r1, r2, lr}
 8008870:	4906      	ldr	r1, [pc, #24]	; (800888c <iprintf+0x20>)
 8008872:	ab04      	add	r3, sp, #16
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	f853 2b04 	ldr.w	r2, [r3], #4
 800887a:	6881      	ldr	r1, [r0, #8]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	f001 fe87 	bl	800a590 <_vfiprintf_r>
 8008882:	b003      	add	sp, #12
 8008884:	f85d eb04 	ldr.w	lr, [sp], #4
 8008888:	b004      	add	sp, #16
 800888a:	4770      	bx	lr
 800888c:	2000007c 	.word	0x2000007c

08008890 <_puts_r>:
 8008890:	6a03      	ldr	r3, [r0, #32]
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	6884      	ldr	r4, [r0, #8]
 8008896:	4605      	mov	r5, r0
 8008898:	460e      	mov	r6, r1
 800889a:	b90b      	cbnz	r3, 80088a0 <_puts_r+0x10>
 800889c:	f7ff ffb0 	bl	8008800 <__sinit>
 80088a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a2:	07db      	lsls	r3, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <_puts_r+0x22>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	0598      	lsls	r0, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <_puts_r+0x22>
 80088ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ae:	f000 f9f3 	bl	8008c98 <__retarget_lock_acquire_recursive>
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	0719      	lsls	r1, r3, #28
 80088b6:	d513      	bpl.n	80088e0 <_puts_r+0x50>
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	b18b      	cbz	r3, 80088e0 <_puts_r+0x50>
 80088bc:	3e01      	subs	r6, #1
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088c4:	3b01      	subs	r3, #1
 80088c6:	60a3      	str	r3, [r4, #8]
 80088c8:	b9e9      	cbnz	r1, 8008906 <_puts_r+0x76>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da2e      	bge.n	800892c <_puts_r+0x9c>
 80088ce:	4622      	mov	r2, r4
 80088d0:	210a      	movs	r1, #10
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f8cf 	bl	8008a76 <__swbuf_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	d007      	beq.n	80088ec <_puts_r+0x5c>
 80088dc:	250a      	movs	r5, #10
 80088de:	e007      	b.n	80088f0 <_puts_r+0x60>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	f000 f904 	bl	8008af0 <__swsetup_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0e7      	beq.n	80088bc <_puts_r+0x2c>
 80088ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80088f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f2:	07da      	lsls	r2, r3, #31
 80088f4:	d405      	bmi.n	8008902 <_puts_r+0x72>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	059b      	lsls	r3, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_puts_r+0x72>
 80088fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fe:	f000 f9cc 	bl	8008c9a <__retarget_lock_release_recursive>
 8008902:	4628      	mov	r0, r5
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	2b00      	cmp	r3, #0
 8008908:	da04      	bge.n	8008914 <_puts_r+0x84>
 800890a:	69a2      	ldr	r2, [r4, #24]
 800890c:	429a      	cmp	r2, r3
 800890e:	dc06      	bgt.n	800891e <_puts_r+0x8e>
 8008910:	290a      	cmp	r1, #10
 8008912:	d004      	beq.n	800891e <_puts_r+0x8e>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	6022      	str	r2, [r4, #0]
 800891a:	7019      	strb	r1, [r3, #0]
 800891c:	e7cf      	b.n	80088be <_puts_r+0x2e>
 800891e:	4622      	mov	r2, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f000 f8a8 	bl	8008a76 <__swbuf_r>
 8008926:	3001      	adds	r0, #1
 8008928:	d1c9      	bne.n	80088be <_puts_r+0x2e>
 800892a:	e7df      	b.n	80088ec <_puts_r+0x5c>
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	250a      	movs	r5, #10
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	6022      	str	r2, [r4, #0]
 8008934:	701d      	strb	r5, [r3, #0]
 8008936:	e7db      	b.n	80088f0 <_puts_r+0x60>

08008938 <puts>:
 8008938:	4b02      	ldr	r3, [pc, #8]	; (8008944 <puts+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f7ff bfa7 	b.w	8008890 <_puts_r>
 8008942:	bf00      	nop
 8008944:	2000007c 	.word	0x2000007c

08008948 <sniprintf>:
 8008948:	b40c      	push	{r2, r3}
 800894a:	b530      	push	{r4, r5, lr}
 800894c:	4b17      	ldr	r3, [pc, #92]	; (80089ac <sniprintf+0x64>)
 800894e:	1e0c      	subs	r4, r1, #0
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	b09d      	sub	sp, #116	; 0x74
 8008954:	da08      	bge.n	8008968 <sniprintf+0x20>
 8008956:	238b      	movs	r3, #139	; 0x8b
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800895e:	b01d      	add	sp, #116	; 0x74
 8008960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008964:	b002      	add	sp, #8
 8008966:	4770      	bx	lr
 8008968:	f44f 7302 	mov.w	r3, #520	; 0x208
 800896c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008970:	bf14      	ite	ne
 8008972:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008976:	4623      	moveq	r3, r4
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008980:	9002      	str	r0, [sp, #8]
 8008982:	9006      	str	r0, [sp, #24]
 8008984:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008988:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800898a:	ab21      	add	r3, sp, #132	; 0x84
 800898c:	a902      	add	r1, sp, #8
 800898e:	4628      	mov	r0, r5
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	f001 fcd5 	bl	800a340 <_svfiprintf_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	bfbc      	itt	lt
 800899a:	238b      	movlt	r3, #139	; 0x8b
 800899c:	602b      	strlt	r3, [r5, #0]
 800899e:	2c00      	cmp	r4, #0
 80089a0:	d0dd      	beq.n	800895e <sniprintf+0x16>
 80089a2:	9b02      	ldr	r3, [sp, #8]
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	e7d9      	b.n	800895e <sniprintf+0x16>
 80089aa:	bf00      	nop
 80089ac:	2000007c 	.word	0x2000007c

080089b0 <siprintf>:
 80089b0:	b40e      	push	{r1, r2, r3}
 80089b2:	b500      	push	{lr}
 80089b4:	b09c      	sub	sp, #112	; 0x70
 80089b6:	ab1d      	add	r3, sp, #116	; 0x74
 80089b8:	9002      	str	r0, [sp, #8]
 80089ba:	9006      	str	r0, [sp, #24]
 80089bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c0:	4809      	ldr	r0, [pc, #36]	; (80089e8 <siprintf+0x38>)
 80089c2:	9107      	str	r1, [sp, #28]
 80089c4:	9104      	str	r1, [sp, #16]
 80089c6:	4909      	ldr	r1, [pc, #36]	; (80089ec <siprintf+0x3c>)
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	9105      	str	r1, [sp, #20]
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	a902      	add	r1, sp, #8
 80089d4:	f001 fcb4 	bl	800a340 <_svfiprintf_r>
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	b01c      	add	sp, #112	; 0x70
 80089e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e4:	b003      	add	sp, #12
 80089e6:	4770      	bx	lr
 80089e8:	2000007c 	.word	0x2000007c
 80089ec:	ffff0208 	.word	0xffff0208

080089f0 <__sread>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	f000 f900 	bl	8008bfc <_read_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	bfab      	itete	ge
 8008a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a02:	89a3      	ldrhlt	r3, [r4, #12]
 8008a04:	181b      	addge	r3, r3, r0
 8008a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0a:	bfac      	ite	ge
 8008a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a0e:	81a3      	strhlt	r3, [r4, #12]
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <__swrite>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	461f      	mov	r7, r3
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	05db      	lsls	r3, r3, #23
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	d505      	bpl.n	8008a30 <__swrite+0x1e>
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2302      	movs	r3, #2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f000 f8d4 	bl	8008bd8 <_lseek_r>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	f000 b8eb 	b.w	8008c20 <_write_r>

08008a4a <__sseek>:
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 f8c1 	bl	8008bd8 <_lseek_r>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	bf15      	itete	ne
 8008a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a66:	81a3      	strheq	r3, [r4, #12]
 8008a68:	bf18      	it	ne
 8008a6a:	81a3      	strhne	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__sclose>:
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 b8a1 	b.w	8008bb8 <_close_r>

08008a76 <__swbuf_r>:
 8008a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a78:	460e      	mov	r6, r1
 8008a7a:	4614      	mov	r4, r2
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	b118      	cbz	r0, 8008a88 <__swbuf_r+0x12>
 8008a80:	6a03      	ldr	r3, [r0, #32]
 8008a82:	b90b      	cbnz	r3, 8008a88 <__swbuf_r+0x12>
 8008a84:	f7ff febc 	bl	8008800 <__sinit>
 8008a88:	69a3      	ldr	r3, [r4, #24]
 8008a8a:	60a3      	str	r3, [r4, #8]
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	071a      	lsls	r2, r3, #28
 8008a90:	d525      	bpl.n	8008ade <__swbuf_r+0x68>
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	b31b      	cbz	r3, 8008ade <__swbuf_r+0x68>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	1a98      	subs	r0, r3, r2
 8008a9c:	6963      	ldr	r3, [r4, #20]
 8008a9e:	b2f6      	uxtb	r6, r6
 8008aa0:	4283      	cmp	r3, r0
 8008aa2:	4637      	mov	r7, r6
 8008aa4:	dc04      	bgt.n	8008ab0 <__swbuf_r+0x3a>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f001 ff11 	bl	800a8d0 <_fflush_r>
 8008aae:	b9e0      	cbnz	r0, 8008aea <__swbuf_r+0x74>
 8008ab0:	68a3      	ldr	r3, [r4, #8]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	60a3      	str	r3, [r4, #8]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	6022      	str	r2, [r4, #0]
 8008abc:	701e      	strb	r6, [r3, #0]
 8008abe:	6962      	ldr	r2, [r4, #20]
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d004      	beq.n	8008ad0 <__swbuf_r+0x5a>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d506      	bpl.n	8008ada <__swbuf_r+0x64>
 8008acc:	2e0a      	cmp	r6, #10
 8008ace:	d104      	bne.n	8008ada <__swbuf_r+0x64>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f001 fefc 	bl	800a8d0 <_fflush_r>
 8008ad8:	b938      	cbnz	r0, 8008aea <__swbuf_r+0x74>
 8008ada:	4638      	mov	r0, r7
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 f805 	bl	8008af0 <__swsetup_r>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0d5      	beq.n	8008a96 <__swbuf_r+0x20>
 8008aea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008aee:	e7f4      	b.n	8008ada <__swbuf_r+0x64>

08008af0 <__swsetup_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4b2a      	ldr	r3, [pc, #168]	; (8008b9c <__swsetup_r+0xac>)
 8008af4:	4605      	mov	r5, r0
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	460c      	mov	r4, r1
 8008afa:	b118      	cbz	r0, 8008b04 <__swsetup_r+0x14>
 8008afc:	6a03      	ldr	r3, [r0, #32]
 8008afe:	b90b      	cbnz	r3, 8008b04 <__swsetup_r+0x14>
 8008b00:	f7ff fe7e 	bl	8008800 <__sinit>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b0a:	0718      	lsls	r0, r3, #28
 8008b0c:	d422      	bmi.n	8008b54 <__swsetup_r+0x64>
 8008b0e:	06d9      	lsls	r1, r3, #27
 8008b10:	d407      	bmi.n	8008b22 <__swsetup_r+0x32>
 8008b12:	2309      	movs	r3, #9
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b20:	e034      	b.n	8008b8c <__swsetup_r+0x9c>
 8008b22:	0758      	lsls	r0, r3, #29
 8008b24:	d512      	bpl.n	8008b4c <__swsetup_r+0x5c>
 8008b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b28:	b141      	cbz	r1, 8008b3c <__swsetup_r+0x4c>
 8008b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	d002      	beq.n	8008b38 <__swsetup_r+0x48>
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 ff2e 	bl	8009994 <_free_r>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	2300      	movs	r3, #0
 8008b46:	6063      	str	r3, [r4, #4]
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f043 0308 	orr.w	r3, r3, #8
 8008b52:	81a3      	strh	r3, [r4, #12]
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	b94b      	cbnz	r3, 8008b6c <__swsetup_r+0x7c>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b62:	d003      	beq.n	8008b6c <__swsetup_r+0x7c>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4628      	mov	r0, r5
 8008b68:	f001 ff00 	bl	800a96c <__smakebuf_r>
 8008b6c:	89a0      	ldrh	r0, [r4, #12]
 8008b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b72:	f010 0301 	ands.w	r3, r0, #1
 8008b76:	d00a      	beq.n	8008b8e <__swsetup_r+0x9e>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	6963      	ldr	r3, [r4, #20]
 8008b7e:	425b      	negs	r3, r3
 8008b80:	61a3      	str	r3, [r4, #24]
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	b943      	cbnz	r3, 8008b98 <__swsetup_r+0xa8>
 8008b86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8a:	d1c4      	bne.n	8008b16 <__swsetup_r+0x26>
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	0781      	lsls	r1, r0, #30
 8008b90:	bf58      	it	pl
 8008b92:	6963      	ldrpl	r3, [r4, #20]
 8008b94:	60a3      	str	r3, [r4, #8]
 8008b96:	e7f4      	b.n	8008b82 <__swsetup_r+0x92>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e7f7      	b.n	8008b8c <__swsetup_r+0x9c>
 8008b9c:	2000007c 	.word	0x2000007c

08008ba0 <memset>:
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <_localeconv_r>:
 8008bb0:	4800      	ldr	r0, [pc, #0]	; (8008bb4 <_localeconv_r+0x4>)
 8008bb2:	4770      	bx	lr
 8008bb4:	20000170 	.word	0x20000170

08008bb8 <_close_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d06      	ldr	r5, [pc, #24]	; (8008bd4 <_close_r+0x1c>)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f7f8 fe69 	bl	800189a <_close>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_close_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_close_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20000b9c 	.word	0x20000b9c

08008bd8 <_lseek_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d07      	ldr	r5, [pc, #28]	; (8008bf8 <_lseek_r+0x20>)
 8008bdc:	4604      	mov	r4, r0
 8008bde:	4608      	mov	r0, r1
 8008be0:	4611      	mov	r1, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f7f8 fe7e 	bl	80018e8 <_lseek>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_lseek_r+0x1e>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_lseek_r+0x1e>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000b9c 	.word	0x20000b9c

08008bfc <_read_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	; (8008c1c <_read_r+0x20>)
 8008c00:	4604      	mov	r4, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7f8 fe28 	bl	8001860 <_read>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_read_r+0x1e>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_read_r+0x1e>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000b9c 	.word	0x20000b9c

08008c20 <_write_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d07      	ldr	r5, [pc, #28]	; (8008c40 <_write_r+0x20>)
 8008c24:	4604      	mov	r4, r0
 8008c26:	4608      	mov	r0, r1
 8008c28:	4611      	mov	r1, r2
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	602a      	str	r2, [r5, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f7f8 f948 	bl	8000ec4 <_write>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_write_r+0x1e>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_write_r+0x1e>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20000b9c 	.word	0x20000b9c

08008c44 <__errno>:
 8008c44:	4b01      	ldr	r3, [pc, #4]	; (8008c4c <__errno+0x8>)
 8008c46:	6818      	ldr	r0, [r3, #0]
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	2000007c 	.word	0x2000007c

08008c50 <__libc_init_array>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	4d0d      	ldr	r5, [pc, #52]	; (8008c88 <__libc_init_array+0x38>)
 8008c54:	4c0d      	ldr	r4, [pc, #52]	; (8008c8c <__libc_init_array+0x3c>)
 8008c56:	1b64      	subs	r4, r4, r5
 8008c58:	10a4      	asrs	r4, r4, #2
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	42a6      	cmp	r6, r4
 8008c5e:	d109      	bne.n	8008c74 <__libc_init_array+0x24>
 8008c60:	4d0b      	ldr	r5, [pc, #44]	; (8008c90 <__libc_init_array+0x40>)
 8008c62:	4c0c      	ldr	r4, [pc, #48]	; (8008c94 <__libc_init_array+0x44>)
 8008c64:	f002 f800 	bl	800ac68 <_init>
 8008c68:	1b64      	subs	r4, r4, r5
 8008c6a:	10a4      	asrs	r4, r4, #2
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	42a6      	cmp	r6, r4
 8008c70:	d105      	bne.n	8008c7e <__libc_init_array+0x2e>
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c78:	4798      	blx	r3
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	e7ee      	b.n	8008c5c <__libc_init_array+0xc>
 8008c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c82:	4798      	blx	r3
 8008c84:	3601      	adds	r6, #1
 8008c86:	e7f2      	b.n	8008c6e <__libc_init_array+0x1e>
 8008c88:	0800b20c 	.word	0x0800b20c
 8008c8c:	0800b20c 	.word	0x0800b20c
 8008c90:	0800b20c 	.word	0x0800b20c
 8008c94:	0800b210 	.word	0x0800b210

08008c98 <__retarget_lock_acquire_recursive>:
 8008c98:	4770      	bx	lr

08008c9a <__retarget_lock_release_recursive>:
 8008c9a:	4770      	bx	lr

08008c9c <quorem>:
 8008c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	6903      	ldr	r3, [r0, #16]
 8008ca2:	690c      	ldr	r4, [r1, #16]
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	db7e      	blt.n	8008da8 <quorem+0x10c>
 8008caa:	3c01      	subs	r4, #1
 8008cac:	f101 0814 	add.w	r8, r1, #20
 8008cb0:	f100 0514 	add.w	r5, r0, #20
 8008cb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cce:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cd2:	d331      	bcc.n	8008d38 <quorem+0x9c>
 8008cd4:	f04f 0e00 	mov.w	lr, #0
 8008cd8:	4640      	mov	r0, r8
 8008cda:	46ac      	mov	ip, r5
 8008cdc:	46f2      	mov	sl, lr
 8008cde:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ce2:	b293      	uxth	r3, r2
 8008ce4:	fb06 e303 	mla	r3, r6, r3, lr
 8008ce8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008cec:	0c1a      	lsrs	r2, r3, #16
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8008cf4:	f8dc a000 	ldr.w	sl, [ip]
 8008cf8:	fa13 f38a 	uxtah	r3, r3, sl
 8008cfc:	fb06 220e 	mla	r2, r6, lr, r2
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d08:	b292      	uxth	r2, r2
 8008d0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d12:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d16:	4581      	cmp	r9, r0
 8008d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d1c:	f84c 3b04 	str.w	r3, [ip], #4
 8008d20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d24:	d2db      	bcs.n	8008cde <quorem+0x42>
 8008d26:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d2a:	b92b      	cbnz	r3, 8008d38 <quorem+0x9c>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	3b04      	subs	r3, #4
 8008d30:	429d      	cmp	r5, r3
 8008d32:	461a      	mov	r2, r3
 8008d34:	d32c      	bcc.n	8008d90 <quorem+0xf4>
 8008d36:	613c      	str	r4, [r7, #16]
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f001 f9a7 	bl	800a08c <__mcmp>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	db22      	blt.n	8008d88 <quorem+0xec>
 8008d42:	3601      	adds	r6, #1
 8008d44:	4629      	mov	r1, r5
 8008d46:	2000      	movs	r0, #0
 8008d48:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d4c:	f8d1 c000 	ldr.w	ip, [r1]
 8008d50:	b293      	uxth	r3, r2
 8008d52:	1ac3      	subs	r3, r0, r3
 8008d54:	0c12      	lsrs	r2, r2, #16
 8008d56:	fa13 f38c 	uxtah	r3, r3, ip
 8008d5a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008d5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d68:	45c1      	cmp	r9, r8
 8008d6a:	f841 3b04 	str.w	r3, [r1], #4
 8008d6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d72:	d2e9      	bcs.n	8008d48 <quorem+0xac>
 8008d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d7c:	b922      	cbnz	r2, 8008d88 <quorem+0xec>
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	429d      	cmp	r5, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	d30a      	bcc.n	8008d9c <quorem+0x100>
 8008d86:	613c      	str	r4, [r7, #16]
 8008d88:	4630      	mov	r0, r6
 8008d8a:	b003      	add	sp, #12
 8008d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d90:	6812      	ldr	r2, [r2, #0]
 8008d92:	3b04      	subs	r3, #4
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	d1ce      	bne.n	8008d36 <quorem+0x9a>
 8008d98:	3c01      	subs	r4, #1
 8008d9a:	e7c9      	b.n	8008d30 <quorem+0x94>
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	d1f0      	bne.n	8008d86 <quorem+0xea>
 8008da4:	3c01      	subs	r4, #1
 8008da6:	e7eb      	b.n	8008d80 <quorem+0xe4>
 8008da8:	2000      	movs	r0, #0
 8008daa:	e7ee      	b.n	8008d8a <quorem+0xee>
 8008dac:	0000      	movs	r0, r0
	...

08008db0 <_dtoa_r>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	ed2d 8b04 	vpush	{d8-d9}
 8008db8:	69c5      	ldr	r5, [r0, #28]
 8008dba:	b093      	sub	sp, #76	; 0x4c
 8008dbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dc0:	ec57 6b10 	vmov	r6, r7, d0
 8008dc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dc8:	9107      	str	r1, [sp, #28]
 8008dca:	4604      	mov	r4, r0
 8008dcc:	920a      	str	r2, [sp, #40]	; 0x28
 8008dce:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd0:	b975      	cbnz	r5, 8008df0 <_dtoa_r+0x40>
 8008dd2:	2010      	movs	r0, #16
 8008dd4:	f000 fe2a 	bl	8009a2c <malloc>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	61e0      	str	r0, [r4, #28]
 8008ddc:	b920      	cbnz	r0, 8008de8 <_dtoa_r+0x38>
 8008dde:	4bae      	ldr	r3, [pc, #696]	; (8009098 <_dtoa_r+0x2e8>)
 8008de0:	21ef      	movs	r1, #239	; 0xef
 8008de2:	48ae      	ldr	r0, [pc, #696]	; (800909c <_dtoa_r+0x2ec>)
 8008de4:	f001 fe58 	bl	800aa98 <__assert_func>
 8008de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dec:	6005      	str	r5, [r0, #0]
 8008dee:	60c5      	str	r5, [r0, #12]
 8008df0:	69e3      	ldr	r3, [r4, #28]
 8008df2:	6819      	ldr	r1, [r3, #0]
 8008df4:	b151      	cbz	r1, 8008e0c <_dtoa_r+0x5c>
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	604a      	str	r2, [r1, #4]
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4093      	lsls	r3, r2
 8008dfe:	608b      	str	r3, [r1, #8]
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 ff07 	bl	8009c14 <_Bfree>
 8008e06:	69e3      	ldr	r3, [r4, #28]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	1e3b      	subs	r3, r7, #0
 8008e0e:	bfbb      	ittet	lt
 8008e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	9303      	strlt	r3, [sp, #12]
 8008e16:	2300      	movge	r3, #0
 8008e18:	2201      	movlt	r2, #1
 8008e1a:	bfac      	ite	ge
 8008e1c:	f8c8 3000 	strge.w	r3, [r8]
 8008e20:	f8c8 2000 	strlt.w	r2, [r8]
 8008e24:	4b9e      	ldr	r3, [pc, #632]	; (80090a0 <_dtoa_r+0x2f0>)
 8008e26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e2a:	ea33 0308 	bics.w	r3, r3, r8
 8008e2e:	d11b      	bne.n	8008e68 <_dtoa_r+0xb8>
 8008e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008e3c:	4333      	orrs	r3, r6
 8008e3e:	f000 8593 	beq.w	8009968 <_dtoa_r+0xbb8>
 8008e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e44:	b963      	cbnz	r3, 8008e60 <_dtoa_r+0xb0>
 8008e46:	4b97      	ldr	r3, [pc, #604]	; (80090a4 <_dtoa_r+0x2f4>)
 8008e48:	e027      	b.n	8008e9a <_dtoa_r+0xea>
 8008e4a:	4b97      	ldr	r3, [pc, #604]	; (80090a8 <_dtoa_r+0x2f8>)
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	9800      	ldr	r0, [sp, #0]
 8008e56:	b013      	add	sp, #76	; 0x4c
 8008e58:	ecbd 8b04 	vpop	{d8-d9}
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	4b90      	ldr	r3, [pc, #576]	; (80090a4 <_dtoa_r+0x2f4>)
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	3303      	adds	r3, #3
 8008e66:	e7f3      	b.n	8008e50 <_dtoa_r+0xa0>
 8008e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	ec51 0b17 	vmov	r0, r1, d7
 8008e72:	eeb0 8a47 	vmov.f32	s16, s14
 8008e76:	eef0 8a67 	vmov.f32	s17, s15
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f7f7 fe34 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e80:	4681      	mov	r9, r0
 8008e82:	b160      	cbz	r0, 8008e9e <_dtoa_r+0xee>
 8008e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e86:	2301      	movs	r3, #1
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 8568 	beq.w	8009962 <_dtoa_r+0xbb2>
 8008e92:	4b86      	ldr	r3, [pc, #536]	; (80090ac <_dtoa_r+0x2fc>)
 8008e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	e7da      	b.n	8008e54 <_dtoa_r+0xa4>
 8008e9e:	aa10      	add	r2, sp, #64	; 0x40
 8008ea0:	a911      	add	r1, sp, #68	; 0x44
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ea8:	eef0 0a68 	vmov.f32	s1, s17
 8008eac:	f001 f994 	bl	800a1d8 <__d2b>
 8008eb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	d07f      	beq.n	8008fba <_dtoa_r+0x20a>
 8008eba:	ee18 3a90 	vmov	r3, s17
 8008ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ec6:	ec51 0b18 	vmov	r0, r1, d8
 8008eca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ed2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4b75      	ldr	r3, [pc, #468]	; (80090b0 <_dtoa_r+0x300>)
 8008edc:	f7f7 f9e4 	bl	80002a8 <__aeabi_dsub>
 8008ee0:	a367      	add	r3, pc, #412	; (adr r3, 8009080 <_dtoa_r+0x2d0>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 fb97 	bl	8000618 <__aeabi_dmul>
 8008eea:	a367      	add	r3, pc, #412	; (adr r3, 8009088 <_dtoa_r+0x2d8>)
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f7f7 f9dc 	bl	80002ac <__adddf3>
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	460f      	mov	r7, r1
 8008efa:	f7f7 fb23 	bl	8000544 <__aeabi_i2d>
 8008efe:	a364      	add	r3, pc, #400	; (adr r3, 8009090 <_dtoa_r+0x2e0>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 fb88 	bl	8000618 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 f9cc 	bl	80002ac <__adddf3>
 8008f14:	4606      	mov	r6, r0
 8008f16:	460f      	mov	r7, r1
 8008f18:	f7f7 fe2e 	bl	8000b78 <__aeabi_d2iz>
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4683      	mov	fp, r0
 8008f20:	2300      	movs	r3, #0
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 fde9 	bl	8000afc <__aeabi_dcmplt>
 8008f2a:	b148      	cbz	r0, 8008f40 <_dtoa_r+0x190>
 8008f2c:	4658      	mov	r0, fp
 8008f2e:	f7f7 fb09 	bl	8000544 <__aeabi_i2d>
 8008f32:	4632      	mov	r2, r6
 8008f34:	463b      	mov	r3, r7
 8008f36:	f7f7 fdd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f3a:	b908      	cbnz	r0, 8008f40 <_dtoa_r+0x190>
 8008f3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008f40:	f1bb 0f16 	cmp.w	fp, #22
 8008f44:	d857      	bhi.n	8008ff6 <_dtoa_r+0x246>
 8008f46:	4b5b      	ldr	r3, [pc, #364]	; (80090b4 <_dtoa_r+0x304>)
 8008f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	ec51 0b18 	vmov	r0, r1, d8
 8008f54:	f7f7 fdd2 	bl	8000afc <__aeabi_dcmplt>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d04e      	beq.n	8008ffa <_dtoa_r+0x24a>
 8008f5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008f60:	2300      	movs	r3, #0
 8008f62:	930c      	str	r3, [sp, #48]	; 0x30
 8008f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f66:	1b5b      	subs	r3, r3, r5
 8008f68:	1e5a      	subs	r2, r3, #1
 8008f6a:	bf45      	ittet	mi
 8008f6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f70:	9305      	strmi	r3, [sp, #20]
 8008f72:	2300      	movpl	r3, #0
 8008f74:	2300      	movmi	r3, #0
 8008f76:	9206      	str	r2, [sp, #24]
 8008f78:	bf54      	ite	pl
 8008f7a:	9305      	strpl	r3, [sp, #20]
 8008f7c:	9306      	strmi	r3, [sp, #24]
 8008f7e:	f1bb 0f00 	cmp.w	fp, #0
 8008f82:	db3c      	blt.n	8008ffe <_dtoa_r+0x24e>
 8008f84:	9b06      	ldr	r3, [sp, #24]
 8008f86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008f8a:	445b      	add	r3, fp
 8008f8c:	9306      	str	r3, [sp, #24]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9308      	str	r3, [sp, #32]
 8008f92:	9b07      	ldr	r3, [sp, #28]
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d868      	bhi.n	800906a <_dtoa_r+0x2ba>
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	bfc4      	itt	gt
 8008f9c:	3b04      	subgt	r3, #4
 8008f9e:	9307      	strgt	r3, [sp, #28]
 8008fa0:	9b07      	ldr	r3, [sp, #28]
 8008fa2:	f1a3 0302 	sub.w	r3, r3, #2
 8008fa6:	bfcc      	ite	gt
 8008fa8:	2500      	movgt	r5, #0
 8008faa:	2501      	movle	r5, #1
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	f200 8085 	bhi.w	80090bc <_dtoa_r+0x30c>
 8008fb2:	e8df f003 	tbb	[pc, r3]
 8008fb6:	3b2e      	.short	0x3b2e
 8008fb8:	5839      	.short	0x5839
 8008fba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fbe:	441d      	add	r5, r3
 8008fc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	bfc1      	itttt	gt
 8008fc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008fd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008fd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008fd8:	bfd6      	itet	le
 8008fda:	f1c3 0320 	rsble	r3, r3, #32
 8008fde:	ea48 0003 	orrgt.w	r0, r8, r3
 8008fe2:	fa06 f003 	lslle.w	r0, r6, r3
 8008fe6:	f7f7 fa9d 	bl	8000524 <__aeabi_ui2d>
 8008fea:	2201      	movs	r2, #1
 8008fec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ff0:	3d01      	subs	r5, #1
 8008ff2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ff4:	e76f      	b.n	8008ed6 <_dtoa_r+0x126>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7b3      	b.n	8008f62 <_dtoa_r+0x1b2>
 8008ffa:	900c      	str	r0, [sp, #48]	; 0x30
 8008ffc:	e7b2      	b.n	8008f64 <_dtoa_r+0x1b4>
 8008ffe:	9b05      	ldr	r3, [sp, #20]
 8009000:	eba3 030b 	sub.w	r3, r3, fp
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	f1cb 0300 	rsb	r3, fp, #0
 800900a:	9308      	str	r3, [sp, #32]
 800900c:	2300      	movs	r3, #0
 800900e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009010:	e7bf      	b.n	8008f92 <_dtoa_r+0x1e2>
 8009012:	2300      	movs	r3, #0
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc52      	bgt.n	80090c2 <_dtoa_r+0x312>
 800901c:	2301      	movs	r3, #1
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	461a      	mov	r2, r3
 8009024:	920a      	str	r2, [sp, #40]	; 0x28
 8009026:	e00b      	b.n	8009040 <_dtoa_r+0x290>
 8009028:	2301      	movs	r3, #1
 800902a:	e7f3      	b.n	8009014 <_dtoa_r+0x264>
 800902c:	2300      	movs	r3, #0
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009032:	445b      	add	r3, fp
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	3301      	adds	r3, #1
 8009038:	2b01      	cmp	r3, #1
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	bfb8      	it	lt
 800903e:	2301      	movlt	r3, #1
 8009040:	69e0      	ldr	r0, [r4, #28]
 8009042:	2100      	movs	r1, #0
 8009044:	2204      	movs	r2, #4
 8009046:	f102 0614 	add.w	r6, r2, #20
 800904a:	429e      	cmp	r6, r3
 800904c:	d93d      	bls.n	80090ca <_dtoa_r+0x31a>
 800904e:	6041      	str	r1, [r0, #4]
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fd9f 	bl	8009b94 <_Balloc>
 8009056:	9000      	str	r0, [sp, #0]
 8009058:	2800      	cmp	r0, #0
 800905a:	d139      	bne.n	80090d0 <_dtoa_r+0x320>
 800905c:	4b16      	ldr	r3, [pc, #88]	; (80090b8 <_dtoa_r+0x308>)
 800905e:	4602      	mov	r2, r0
 8009060:	f240 11af 	movw	r1, #431	; 0x1af
 8009064:	e6bd      	b.n	8008de2 <_dtoa_r+0x32>
 8009066:	2301      	movs	r3, #1
 8009068:	e7e1      	b.n	800902e <_dtoa_r+0x27e>
 800906a:	2501      	movs	r5, #1
 800906c:	2300      	movs	r3, #0
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	9509      	str	r5, [sp, #36]	; 0x24
 8009072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	2200      	movs	r2, #0
 800907c:	2312      	movs	r3, #18
 800907e:	e7d1      	b.n	8009024 <_dtoa_r+0x274>
 8009080:	636f4361 	.word	0x636f4361
 8009084:	3fd287a7 	.word	0x3fd287a7
 8009088:	8b60c8b3 	.word	0x8b60c8b3
 800908c:	3fc68a28 	.word	0x3fc68a28
 8009090:	509f79fb 	.word	0x509f79fb
 8009094:	3fd34413 	.word	0x3fd34413
 8009098:	0800aed1 	.word	0x0800aed1
 800909c:	0800aee8 	.word	0x0800aee8
 80090a0:	7ff00000 	.word	0x7ff00000
 80090a4:	0800aecd 	.word	0x0800aecd
 80090a8:	0800aec4 	.word	0x0800aec4
 80090ac:	0800aea1 	.word	0x0800aea1
 80090b0:	3ff80000 	.word	0x3ff80000
 80090b4:	0800afd8 	.word	0x0800afd8
 80090b8:	0800af40 	.word	0x0800af40
 80090bc:	2301      	movs	r3, #1
 80090be:	9309      	str	r3, [sp, #36]	; 0x24
 80090c0:	e7d7      	b.n	8009072 <_dtoa_r+0x2c2>
 80090c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	9304      	str	r3, [sp, #16]
 80090c8:	e7ba      	b.n	8009040 <_dtoa_r+0x290>
 80090ca:	3101      	adds	r1, #1
 80090cc:	0052      	lsls	r2, r2, #1
 80090ce:	e7ba      	b.n	8009046 <_dtoa_r+0x296>
 80090d0:	69e3      	ldr	r3, [r4, #28]
 80090d2:	9a00      	ldr	r2, [sp, #0]
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	2b0e      	cmp	r3, #14
 80090da:	f200 80a8 	bhi.w	800922e <_dtoa_r+0x47e>
 80090de:	2d00      	cmp	r5, #0
 80090e0:	f000 80a5 	beq.w	800922e <_dtoa_r+0x47e>
 80090e4:	f1bb 0f00 	cmp.w	fp, #0
 80090e8:	dd38      	ble.n	800915c <_dtoa_r+0x3ac>
 80090ea:	4bc0      	ldr	r3, [pc, #768]	; (80093ec <_dtoa_r+0x63c>)
 80090ec:	f00b 020f 	and.w	r2, fp, #15
 80090f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80090f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80090fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009100:	d019      	beq.n	8009136 <_dtoa_r+0x386>
 8009102:	4bbb      	ldr	r3, [pc, #748]	; (80093f0 <_dtoa_r+0x640>)
 8009104:	ec51 0b18 	vmov	r0, r1, d8
 8009108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800910c:	f7f7 fbae 	bl	800086c <__aeabi_ddiv>
 8009110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009114:	f008 080f 	and.w	r8, r8, #15
 8009118:	2503      	movs	r5, #3
 800911a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80093f0 <_dtoa_r+0x640>
 800911e:	f1b8 0f00 	cmp.w	r8, #0
 8009122:	d10a      	bne.n	800913a <_dtoa_r+0x38a>
 8009124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009128:	4632      	mov	r2, r6
 800912a:	463b      	mov	r3, r7
 800912c:	f7f7 fb9e 	bl	800086c <__aeabi_ddiv>
 8009130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009134:	e02b      	b.n	800918e <_dtoa_r+0x3de>
 8009136:	2502      	movs	r5, #2
 8009138:	e7ef      	b.n	800911a <_dtoa_r+0x36a>
 800913a:	f018 0f01 	tst.w	r8, #1
 800913e:	d008      	beq.n	8009152 <_dtoa_r+0x3a2>
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009148:	f7f7 fa66 	bl	8000618 <__aeabi_dmul>
 800914c:	3501      	adds	r5, #1
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009156:	f109 0908 	add.w	r9, r9, #8
 800915a:	e7e0      	b.n	800911e <_dtoa_r+0x36e>
 800915c:	f000 809f 	beq.w	800929e <_dtoa_r+0x4ee>
 8009160:	f1cb 0600 	rsb	r6, fp, #0
 8009164:	4ba1      	ldr	r3, [pc, #644]	; (80093ec <_dtoa_r+0x63c>)
 8009166:	4fa2      	ldr	r7, [pc, #648]	; (80093f0 <_dtoa_r+0x640>)
 8009168:	f006 020f 	and.w	r2, r6, #15
 800916c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	ec51 0b18 	vmov	r0, r1, d8
 8009178:	f7f7 fa4e 	bl	8000618 <__aeabi_dmul>
 800917c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009180:	1136      	asrs	r6, r6, #4
 8009182:	2300      	movs	r3, #0
 8009184:	2502      	movs	r5, #2
 8009186:	2e00      	cmp	r6, #0
 8009188:	d17e      	bne.n	8009288 <_dtoa_r+0x4d8>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1d0      	bne.n	8009130 <_dtoa_r+0x380>
 800918e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009190:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8084 	beq.w	80092a2 <_dtoa_r+0x4f2>
 800919a:	4b96      	ldr	r3, [pc, #600]	; (80093f4 <_dtoa_r+0x644>)
 800919c:	2200      	movs	r2, #0
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	f7f7 fcab 	bl	8000afc <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d07b      	beq.n	80092a2 <_dtoa_r+0x4f2>
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d078      	beq.n	80092a2 <_dtoa_r+0x4f2>
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd39      	ble.n	800922a <_dtoa_r+0x47a>
 80091b6:	4b90      	ldr	r3, [pc, #576]	; (80093f8 <_dtoa_r+0x648>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 fa2b 	bl	8000618 <__aeabi_dmul>
 80091c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c6:	9e01      	ldr	r6, [sp, #4]
 80091c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80091cc:	3501      	adds	r5, #1
 80091ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80091d2:	4628      	mov	r0, r5
 80091d4:	f7f7 f9b6 	bl	8000544 <__aeabi_i2d>
 80091d8:	4642      	mov	r2, r8
 80091da:	464b      	mov	r3, r9
 80091dc:	f7f7 fa1c 	bl	8000618 <__aeabi_dmul>
 80091e0:	4b86      	ldr	r3, [pc, #536]	; (80093fc <_dtoa_r+0x64c>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	f7f7 f862 	bl	80002ac <__adddf3>
 80091e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80091ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d158      	bne.n	80092a8 <_dtoa_r+0x4f8>
 80091f6:	4b82      	ldr	r3, [pc, #520]	; (8009400 <_dtoa_r+0x650>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	f7f7 f853 	bl	80002a8 <__aeabi_dsub>
 8009202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009206:	4680      	mov	r8, r0
 8009208:	4689      	mov	r9, r1
 800920a:	f7f7 fc95 	bl	8000b38 <__aeabi_dcmpgt>
 800920e:	2800      	cmp	r0, #0
 8009210:	f040 8296 	bne.w	8009740 <_dtoa_r+0x990>
 8009214:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009218:	4640      	mov	r0, r8
 800921a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800921e:	4649      	mov	r1, r9
 8009220:	f7f7 fc6c 	bl	8000afc <__aeabi_dcmplt>
 8009224:	2800      	cmp	r0, #0
 8009226:	f040 8289 	bne.w	800973c <_dtoa_r+0x98c>
 800922a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800922e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009230:	2b00      	cmp	r3, #0
 8009232:	f2c0 814e 	blt.w	80094d2 <_dtoa_r+0x722>
 8009236:	f1bb 0f0e 	cmp.w	fp, #14
 800923a:	f300 814a 	bgt.w	80094d2 <_dtoa_r+0x722>
 800923e:	4b6b      	ldr	r3, [pc, #428]	; (80093ec <_dtoa_r+0x63c>)
 8009240:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	f280 80dc 	bge.w	8009408 <_dtoa_r+0x658>
 8009250:	9b04      	ldr	r3, [sp, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f300 80d8 	bgt.w	8009408 <_dtoa_r+0x658>
 8009258:	f040 826f 	bne.w	800973a <_dtoa_r+0x98a>
 800925c:	4b68      	ldr	r3, [pc, #416]	; (8009400 <_dtoa_r+0x650>)
 800925e:	2200      	movs	r2, #0
 8009260:	4640      	mov	r0, r8
 8009262:	4649      	mov	r1, r9
 8009264:	f7f7 f9d8 	bl	8000618 <__aeabi_dmul>
 8009268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800926c:	f7f7 fc5a 	bl	8000b24 <__aeabi_dcmpge>
 8009270:	9e04      	ldr	r6, [sp, #16]
 8009272:	4637      	mov	r7, r6
 8009274:	2800      	cmp	r0, #0
 8009276:	f040 8245 	bne.w	8009704 <_dtoa_r+0x954>
 800927a:	9d00      	ldr	r5, [sp, #0]
 800927c:	2331      	movs	r3, #49	; 0x31
 800927e:	f805 3b01 	strb.w	r3, [r5], #1
 8009282:	f10b 0b01 	add.w	fp, fp, #1
 8009286:	e241      	b.n	800970c <_dtoa_r+0x95c>
 8009288:	07f2      	lsls	r2, r6, #31
 800928a:	d505      	bpl.n	8009298 <_dtoa_r+0x4e8>
 800928c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009290:	f7f7 f9c2 	bl	8000618 <__aeabi_dmul>
 8009294:	3501      	adds	r5, #1
 8009296:	2301      	movs	r3, #1
 8009298:	1076      	asrs	r6, r6, #1
 800929a:	3708      	adds	r7, #8
 800929c:	e773      	b.n	8009186 <_dtoa_r+0x3d6>
 800929e:	2502      	movs	r5, #2
 80092a0:	e775      	b.n	800918e <_dtoa_r+0x3de>
 80092a2:	9e04      	ldr	r6, [sp, #16]
 80092a4:	465f      	mov	r7, fp
 80092a6:	e792      	b.n	80091ce <_dtoa_r+0x41e>
 80092a8:	9900      	ldr	r1, [sp, #0]
 80092aa:	4b50      	ldr	r3, [pc, #320]	; (80093ec <_dtoa_r+0x63c>)
 80092ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092b0:	4431      	add	r1, r6
 80092b2:	9102      	str	r1, [sp, #8]
 80092b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092b6:	eeb0 9a47 	vmov.f32	s18, s14
 80092ba:	eef0 9a67 	vmov.f32	s19, s15
 80092be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d044      	beq.n	8009354 <_dtoa_r+0x5a4>
 80092ca:	494e      	ldr	r1, [pc, #312]	; (8009404 <_dtoa_r+0x654>)
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7f7 facd 	bl	800086c <__aeabi_ddiv>
 80092d2:	ec53 2b19 	vmov	r2, r3, d9
 80092d6:	f7f6 ffe7 	bl	80002a8 <__aeabi_dsub>
 80092da:	9d00      	ldr	r5, [sp, #0]
 80092dc:	ec41 0b19 	vmov	d9, r0, r1
 80092e0:	4649      	mov	r1, r9
 80092e2:	4640      	mov	r0, r8
 80092e4:	f7f7 fc48 	bl	8000b78 <__aeabi_d2iz>
 80092e8:	4606      	mov	r6, r0
 80092ea:	f7f7 f92b 	bl	8000544 <__aeabi_i2d>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ffd7 	bl	80002a8 <__aeabi_dsub>
 80092fa:	3630      	adds	r6, #48	; 0x30
 80092fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009300:	ec53 2b19 	vmov	r2, r3, d9
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	f7f7 fbf8 	bl	8000afc <__aeabi_dcmplt>
 800930c:	2800      	cmp	r0, #0
 800930e:	d164      	bne.n	80093da <_dtoa_r+0x62a>
 8009310:	4642      	mov	r2, r8
 8009312:	464b      	mov	r3, r9
 8009314:	4937      	ldr	r1, [pc, #220]	; (80093f4 <_dtoa_r+0x644>)
 8009316:	2000      	movs	r0, #0
 8009318:	f7f6 ffc6 	bl	80002a8 <__aeabi_dsub>
 800931c:	ec53 2b19 	vmov	r2, r3, d9
 8009320:	f7f7 fbec 	bl	8000afc <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	f040 80b6 	bne.w	8009496 <_dtoa_r+0x6e6>
 800932a:	9b02      	ldr	r3, [sp, #8]
 800932c:	429d      	cmp	r5, r3
 800932e:	f43f af7c 	beq.w	800922a <_dtoa_r+0x47a>
 8009332:	4b31      	ldr	r3, [pc, #196]	; (80093f8 <_dtoa_r+0x648>)
 8009334:	ec51 0b19 	vmov	r0, r1, d9
 8009338:	2200      	movs	r2, #0
 800933a:	f7f7 f96d 	bl	8000618 <__aeabi_dmul>
 800933e:	4b2e      	ldr	r3, [pc, #184]	; (80093f8 <_dtoa_r+0x648>)
 8009340:	ec41 0b19 	vmov	d9, r0, r1
 8009344:	2200      	movs	r2, #0
 8009346:	4640      	mov	r0, r8
 8009348:	4649      	mov	r1, r9
 800934a:	f7f7 f965 	bl	8000618 <__aeabi_dmul>
 800934e:	4680      	mov	r8, r0
 8009350:	4689      	mov	r9, r1
 8009352:	e7c5      	b.n	80092e0 <_dtoa_r+0x530>
 8009354:	ec51 0b17 	vmov	r0, r1, d7
 8009358:	f7f7 f95e 	bl	8000618 <__aeabi_dmul>
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	9d00      	ldr	r5, [sp, #0]
 8009360:	930f      	str	r3, [sp, #60]	; 0x3c
 8009362:	ec41 0b19 	vmov	d9, r0, r1
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	f7f7 fc05 	bl	8000b78 <__aeabi_d2iz>
 800936e:	4606      	mov	r6, r0
 8009370:	f7f7 f8e8 	bl	8000544 <__aeabi_i2d>
 8009374:	3630      	adds	r6, #48	; 0x30
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	f7f6 ff93 	bl	80002a8 <__aeabi_dsub>
 8009382:	f805 6b01 	strb.w	r6, [r5], #1
 8009386:	9b02      	ldr	r3, [sp, #8]
 8009388:	429d      	cmp	r5, r3
 800938a:	4680      	mov	r8, r0
 800938c:	4689      	mov	r9, r1
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	d124      	bne.n	80093de <_dtoa_r+0x62e>
 8009394:	4b1b      	ldr	r3, [pc, #108]	; (8009404 <_dtoa_r+0x654>)
 8009396:	ec51 0b19 	vmov	r0, r1, d9
 800939a:	f7f6 ff87 	bl	80002ac <__adddf3>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	f7f7 fbc7 	bl	8000b38 <__aeabi_dcmpgt>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d173      	bne.n	8009496 <_dtoa_r+0x6e6>
 80093ae:	ec53 2b19 	vmov	r2, r3, d9
 80093b2:	4914      	ldr	r1, [pc, #80]	; (8009404 <_dtoa_r+0x654>)
 80093b4:	2000      	movs	r0, #0
 80093b6:	f7f6 ff77 	bl	80002a8 <__aeabi_dsub>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4640      	mov	r0, r8
 80093c0:	4649      	mov	r1, r9
 80093c2:	f7f7 fb9b 	bl	8000afc <__aeabi_dcmplt>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f43f af2f 	beq.w	800922a <_dtoa_r+0x47a>
 80093cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093ce:	1e6b      	subs	r3, r5, #1
 80093d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093d6:	2b30      	cmp	r3, #48	; 0x30
 80093d8:	d0f8      	beq.n	80093cc <_dtoa_r+0x61c>
 80093da:	46bb      	mov	fp, r7
 80093dc:	e04a      	b.n	8009474 <_dtoa_r+0x6c4>
 80093de:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <_dtoa_r+0x648>)
 80093e0:	f7f7 f91a 	bl	8000618 <__aeabi_dmul>
 80093e4:	4680      	mov	r8, r0
 80093e6:	4689      	mov	r9, r1
 80093e8:	e7bd      	b.n	8009366 <_dtoa_r+0x5b6>
 80093ea:	bf00      	nop
 80093ec:	0800afd8 	.word	0x0800afd8
 80093f0:	0800afb0 	.word	0x0800afb0
 80093f4:	3ff00000 	.word	0x3ff00000
 80093f8:	40240000 	.word	0x40240000
 80093fc:	401c0000 	.word	0x401c0000
 8009400:	40140000 	.word	0x40140000
 8009404:	3fe00000 	.word	0x3fe00000
 8009408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800940c:	9d00      	ldr	r5, [sp, #0]
 800940e:	4642      	mov	r2, r8
 8009410:	464b      	mov	r3, r9
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f7 fa29 	bl	800086c <__aeabi_ddiv>
 800941a:	f7f7 fbad 	bl	8000b78 <__aeabi_d2iz>
 800941e:	9001      	str	r0, [sp, #4]
 8009420:	f7f7 f890 	bl	8000544 <__aeabi_i2d>
 8009424:	4642      	mov	r2, r8
 8009426:	464b      	mov	r3, r9
 8009428:	f7f7 f8f6 	bl	8000618 <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f6 ff38 	bl	80002a8 <__aeabi_dsub>
 8009438:	9e01      	ldr	r6, [sp, #4]
 800943a:	9f04      	ldr	r7, [sp, #16]
 800943c:	3630      	adds	r6, #48	; 0x30
 800943e:	f805 6b01 	strb.w	r6, [r5], #1
 8009442:	9e00      	ldr	r6, [sp, #0]
 8009444:	1bae      	subs	r6, r5, r6
 8009446:	42b7      	cmp	r7, r6
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	d134      	bne.n	80094b8 <_dtoa_r+0x708>
 800944e:	f7f6 ff2d 	bl	80002ac <__adddf3>
 8009452:	4642      	mov	r2, r8
 8009454:	464b      	mov	r3, r9
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	f7f7 fb6d 	bl	8000b38 <__aeabi_dcmpgt>
 800945e:	b9c8      	cbnz	r0, 8009494 <_dtoa_r+0x6e4>
 8009460:	4642      	mov	r2, r8
 8009462:	464b      	mov	r3, r9
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f7f7 fb3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800946c:	b110      	cbz	r0, 8009474 <_dtoa_r+0x6c4>
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	07db      	lsls	r3, r3, #31
 8009472:	d40f      	bmi.n	8009494 <_dtoa_r+0x6e4>
 8009474:	4651      	mov	r1, sl
 8009476:	4620      	mov	r0, r4
 8009478:	f000 fbcc 	bl	8009c14 <_Bfree>
 800947c:	2300      	movs	r3, #0
 800947e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009480:	702b      	strb	r3, [r5, #0]
 8009482:	f10b 0301 	add.w	r3, fp, #1
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800948a:	2b00      	cmp	r3, #0
 800948c:	f43f ace2 	beq.w	8008e54 <_dtoa_r+0xa4>
 8009490:	601d      	str	r5, [r3, #0]
 8009492:	e4df      	b.n	8008e54 <_dtoa_r+0xa4>
 8009494:	465f      	mov	r7, fp
 8009496:	462b      	mov	r3, r5
 8009498:	461d      	mov	r5, r3
 800949a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800949e:	2a39      	cmp	r2, #57	; 0x39
 80094a0:	d106      	bne.n	80094b0 <_dtoa_r+0x700>
 80094a2:	9a00      	ldr	r2, [sp, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d1f7      	bne.n	8009498 <_dtoa_r+0x6e8>
 80094a8:	9900      	ldr	r1, [sp, #0]
 80094aa:	2230      	movs	r2, #48	; 0x30
 80094ac:	3701      	adds	r7, #1
 80094ae:	700a      	strb	r2, [r1, #0]
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	3201      	adds	r2, #1
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e790      	b.n	80093da <_dtoa_r+0x62a>
 80094b8:	4ba3      	ldr	r3, [pc, #652]	; (8009748 <_dtoa_r+0x998>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7f7 f8ac 	bl	8000618 <__aeabi_dmul>
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	f7f7 fb0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d09e      	beq.n	800940e <_dtoa_r+0x65e>
 80094d0:	e7d0      	b.n	8009474 <_dtoa_r+0x6c4>
 80094d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	f000 80ca 	beq.w	800966e <_dtoa_r+0x8be>
 80094da:	9a07      	ldr	r2, [sp, #28]
 80094dc:	2a01      	cmp	r2, #1
 80094de:	f300 80ad 	bgt.w	800963c <_dtoa_r+0x88c>
 80094e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e4:	2a00      	cmp	r2, #0
 80094e6:	f000 80a5 	beq.w	8009634 <_dtoa_r+0x884>
 80094ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094ee:	9e08      	ldr	r6, [sp, #32]
 80094f0:	9d05      	ldr	r5, [sp, #20]
 80094f2:	9a05      	ldr	r2, [sp, #20]
 80094f4:	441a      	add	r2, r3
 80094f6:	9205      	str	r2, [sp, #20]
 80094f8:	9a06      	ldr	r2, [sp, #24]
 80094fa:	2101      	movs	r1, #1
 80094fc:	441a      	add	r2, r3
 80094fe:	4620      	mov	r0, r4
 8009500:	9206      	str	r2, [sp, #24]
 8009502:	f000 fc3d 	bl	8009d80 <__i2b>
 8009506:	4607      	mov	r7, r0
 8009508:	b165      	cbz	r5, 8009524 <_dtoa_r+0x774>
 800950a:	9b06      	ldr	r3, [sp, #24]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd09      	ble.n	8009524 <_dtoa_r+0x774>
 8009510:	42ab      	cmp	r3, r5
 8009512:	9a05      	ldr	r2, [sp, #20]
 8009514:	bfa8      	it	ge
 8009516:	462b      	movge	r3, r5
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	9205      	str	r2, [sp, #20]
 800951c:	9a06      	ldr	r2, [sp, #24]
 800951e:	1aed      	subs	r5, r5, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	9306      	str	r3, [sp, #24]
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	b1f3      	cbz	r3, 8009566 <_dtoa_r+0x7b6>
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 80a3 	beq.w	8009676 <_dtoa_r+0x8c6>
 8009530:	2e00      	cmp	r6, #0
 8009532:	dd10      	ble.n	8009556 <_dtoa_r+0x7a6>
 8009534:	4639      	mov	r1, r7
 8009536:	4632      	mov	r2, r6
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fce1 	bl	8009f00 <__pow5mult>
 800953e:	4652      	mov	r2, sl
 8009540:	4601      	mov	r1, r0
 8009542:	4607      	mov	r7, r0
 8009544:	4620      	mov	r0, r4
 8009546:	f000 fc31 	bl	8009dac <__multiply>
 800954a:	4651      	mov	r1, sl
 800954c:	4680      	mov	r8, r0
 800954e:	4620      	mov	r0, r4
 8009550:	f000 fb60 	bl	8009c14 <_Bfree>
 8009554:	46c2      	mov	sl, r8
 8009556:	9b08      	ldr	r3, [sp, #32]
 8009558:	1b9a      	subs	r2, r3, r6
 800955a:	d004      	beq.n	8009566 <_dtoa_r+0x7b6>
 800955c:	4651      	mov	r1, sl
 800955e:	4620      	mov	r0, r4
 8009560:	f000 fcce 	bl	8009f00 <__pow5mult>
 8009564:	4682      	mov	sl, r0
 8009566:	2101      	movs	r1, #1
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fc09 	bl	8009d80 <__i2b>
 800956e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009570:	2b00      	cmp	r3, #0
 8009572:	4606      	mov	r6, r0
 8009574:	f340 8081 	ble.w	800967a <_dtoa_r+0x8ca>
 8009578:	461a      	mov	r2, r3
 800957a:	4601      	mov	r1, r0
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fcbf 	bl	8009f00 <__pow5mult>
 8009582:	9b07      	ldr	r3, [sp, #28]
 8009584:	2b01      	cmp	r3, #1
 8009586:	4606      	mov	r6, r0
 8009588:	dd7a      	ble.n	8009680 <_dtoa_r+0x8d0>
 800958a:	f04f 0800 	mov.w	r8, #0
 800958e:	6933      	ldr	r3, [r6, #16]
 8009590:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009594:	6918      	ldr	r0, [r3, #16]
 8009596:	f000 fba5 	bl	8009ce4 <__hi0bits>
 800959a:	f1c0 0020 	rsb	r0, r0, #32
 800959e:	9b06      	ldr	r3, [sp, #24]
 80095a0:	4418      	add	r0, r3
 80095a2:	f010 001f 	ands.w	r0, r0, #31
 80095a6:	f000 8094 	beq.w	80096d2 <_dtoa_r+0x922>
 80095aa:	f1c0 0320 	rsb	r3, r0, #32
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	f340 8085 	ble.w	80096be <_dtoa_r+0x90e>
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	f1c0 001c 	rsb	r0, r0, #28
 80095ba:	4403      	add	r3, r0
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	9b06      	ldr	r3, [sp, #24]
 80095c0:	4403      	add	r3, r0
 80095c2:	4405      	add	r5, r0
 80095c4:	9306      	str	r3, [sp, #24]
 80095c6:	9b05      	ldr	r3, [sp, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dd05      	ble.n	80095d8 <_dtoa_r+0x828>
 80095cc:	4651      	mov	r1, sl
 80095ce:	461a      	mov	r2, r3
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fcef 	bl	8009fb4 <__lshift>
 80095d6:	4682      	mov	sl, r0
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dd05      	ble.n	80095ea <_dtoa_r+0x83a>
 80095de:	4631      	mov	r1, r6
 80095e0:	461a      	mov	r2, r3
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fce6 	bl	8009fb4 <__lshift>
 80095e8:	4606      	mov	r6, r0
 80095ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d072      	beq.n	80096d6 <_dtoa_r+0x926>
 80095f0:	4631      	mov	r1, r6
 80095f2:	4650      	mov	r0, sl
 80095f4:	f000 fd4a 	bl	800a08c <__mcmp>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	da6c      	bge.n	80096d6 <_dtoa_r+0x926>
 80095fc:	2300      	movs	r3, #0
 80095fe:	4651      	mov	r1, sl
 8009600:	220a      	movs	r2, #10
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fb28 	bl	8009c58 <__multadd>
 8009608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800960e:	4682      	mov	sl, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 81b0 	beq.w	8009976 <_dtoa_r+0xbc6>
 8009616:	2300      	movs	r3, #0
 8009618:	4639      	mov	r1, r7
 800961a:	220a      	movs	r2, #10
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fb1b 	bl	8009c58 <__multadd>
 8009622:	9b01      	ldr	r3, [sp, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	4607      	mov	r7, r0
 8009628:	f300 8096 	bgt.w	8009758 <_dtoa_r+0x9a8>
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	2b02      	cmp	r3, #2
 8009630:	dc59      	bgt.n	80096e6 <_dtoa_r+0x936>
 8009632:	e091      	b.n	8009758 <_dtoa_r+0x9a8>
 8009634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800963a:	e758      	b.n	80094ee <_dtoa_r+0x73e>
 800963c:	9b04      	ldr	r3, [sp, #16]
 800963e:	1e5e      	subs	r6, r3, #1
 8009640:	9b08      	ldr	r3, [sp, #32]
 8009642:	42b3      	cmp	r3, r6
 8009644:	bfbf      	itttt	lt
 8009646:	9b08      	ldrlt	r3, [sp, #32]
 8009648:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800964a:	9608      	strlt	r6, [sp, #32]
 800964c:	1af3      	sublt	r3, r6, r3
 800964e:	bfb4      	ite	lt
 8009650:	18d2      	addlt	r2, r2, r3
 8009652:	1b9e      	subge	r6, r3, r6
 8009654:	9b04      	ldr	r3, [sp, #16]
 8009656:	bfbc      	itt	lt
 8009658:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800965a:	2600      	movlt	r6, #0
 800965c:	2b00      	cmp	r3, #0
 800965e:	bfb7      	itett	lt
 8009660:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009664:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009668:	1a9d      	sublt	r5, r3, r2
 800966a:	2300      	movlt	r3, #0
 800966c:	e741      	b.n	80094f2 <_dtoa_r+0x742>
 800966e:	9e08      	ldr	r6, [sp, #32]
 8009670:	9d05      	ldr	r5, [sp, #20]
 8009672:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009674:	e748      	b.n	8009508 <_dtoa_r+0x758>
 8009676:	9a08      	ldr	r2, [sp, #32]
 8009678:	e770      	b.n	800955c <_dtoa_r+0x7ac>
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	2b01      	cmp	r3, #1
 800967e:	dc19      	bgt.n	80096b4 <_dtoa_r+0x904>
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	b9bb      	cbnz	r3, 80096b4 <_dtoa_r+0x904>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800968a:	b99b      	cbnz	r3, 80096b4 <_dtoa_r+0x904>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009692:	0d1b      	lsrs	r3, r3, #20
 8009694:	051b      	lsls	r3, r3, #20
 8009696:	b183      	cbz	r3, 80096ba <_dtoa_r+0x90a>
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	3301      	adds	r3, #1
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	3301      	adds	r3, #1
 80096a2:	9306      	str	r3, [sp, #24]
 80096a4:	f04f 0801 	mov.w	r8, #1
 80096a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f47f af6f 	bne.w	800958e <_dtoa_r+0x7de>
 80096b0:	2001      	movs	r0, #1
 80096b2:	e774      	b.n	800959e <_dtoa_r+0x7ee>
 80096b4:	f04f 0800 	mov.w	r8, #0
 80096b8:	e7f6      	b.n	80096a8 <_dtoa_r+0x8f8>
 80096ba:	4698      	mov	r8, r3
 80096bc:	e7f4      	b.n	80096a8 <_dtoa_r+0x8f8>
 80096be:	d082      	beq.n	80095c6 <_dtoa_r+0x816>
 80096c0:	9a05      	ldr	r2, [sp, #20]
 80096c2:	331c      	adds	r3, #28
 80096c4:	441a      	add	r2, r3
 80096c6:	9205      	str	r2, [sp, #20]
 80096c8:	9a06      	ldr	r2, [sp, #24]
 80096ca:	441a      	add	r2, r3
 80096cc:	441d      	add	r5, r3
 80096ce:	9206      	str	r2, [sp, #24]
 80096d0:	e779      	b.n	80095c6 <_dtoa_r+0x816>
 80096d2:	4603      	mov	r3, r0
 80096d4:	e7f4      	b.n	80096c0 <_dtoa_r+0x910>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dc37      	bgt.n	800974c <_dtoa_r+0x99c>
 80096dc:	9b07      	ldr	r3, [sp, #28]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	dd34      	ble.n	800974c <_dtoa_r+0x99c>
 80096e2:	9b04      	ldr	r3, [sp, #16]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	b963      	cbnz	r3, 8009704 <_dtoa_r+0x954>
 80096ea:	4631      	mov	r1, r6
 80096ec:	2205      	movs	r2, #5
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 fab2 	bl	8009c58 <__multadd>
 80096f4:	4601      	mov	r1, r0
 80096f6:	4606      	mov	r6, r0
 80096f8:	4650      	mov	r0, sl
 80096fa:	f000 fcc7 	bl	800a08c <__mcmp>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f73f adbb 	bgt.w	800927a <_dtoa_r+0x4ca>
 8009704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009706:	9d00      	ldr	r5, [sp, #0]
 8009708:	ea6f 0b03 	mvn.w	fp, r3
 800970c:	f04f 0800 	mov.w	r8, #0
 8009710:	4631      	mov	r1, r6
 8009712:	4620      	mov	r0, r4
 8009714:	f000 fa7e 	bl	8009c14 <_Bfree>
 8009718:	2f00      	cmp	r7, #0
 800971a:	f43f aeab 	beq.w	8009474 <_dtoa_r+0x6c4>
 800971e:	f1b8 0f00 	cmp.w	r8, #0
 8009722:	d005      	beq.n	8009730 <_dtoa_r+0x980>
 8009724:	45b8      	cmp	r8, r7
 8009726:	d003      	beq.n	8009730 <_dtoa_r+0x980>
 8009728:	4641      	mov	r1, r8
 800972a:	4620      	mov	r0, r4
 800972c:	f000 fa72 	bl	8009c14 <_Bfree>
 8009730:	4639      	mov	r1, r7
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fa6e 	bl	8009c14 <_Bfree>
 8009738:	e69c      	b.n	8009474 <_dtoa_r+0x6c4>
 800973a:	2600      	movs	r6, #0
 800973c:	4637      	mov	r7, r6
 800973e:	e7e1      	b.n	8009704 <_dtoa_r+0x954>
 8009740:	46bb      	mov	fp, r7
 8009742:	4637      	mov	r7, r6
 8009744:	e599      	b.n	800927a <_dtoa_r+0x4ca>
 8009746:	bf00      	nop
 8009748:	40240000 	.word	0x40240000
 800974c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 80c8 	beq.w	80098e4 <_dtoa_r+0xb34>
 8009754:	9b04      	ldr	r3, [sp, #16]
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	2d00      	cmp	r5, #0
 800975a:	dd05      	ble.n	8009768 <_dtoa_r+0x9b8>
 800975c:	4639      	mov	r1, r7
 800975e:	462a      	mov	r2, r5
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fc27 	bl	8009fb4 <__lshift>
 8009766:	4607      	mov	r7, r0
 8009768:	f1b8 0f00 	cmp.w	r8, #0
 800976c:	d05b      	beq.n	8009826 <_dtoa_r+0xa76>
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fa0f 	bl	8009b94 <_Balloc>
 8009776:	4605      	mov	r5, r0
 8009778:	b928      	cbnz	r0, 8009786 <_dtoa_r+0x9d6>
 800977a:	4b83      	ldr	r3, [pc, #524]	; (8009988 <_dtoa_r+0xbd8>)
 800977c:	4602      	mov	r2, r0
 800977e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009782:	f7ff bb2e 	b.w	8008de2 <_dtoa_r+0x32>
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	3202      	adds	r2, #2
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	f107 010c 	add.w	r1, r7, #12
 8009790:	300c      	adds	r0, #12
 8009792:	f001 f973 	bl	800aa7c <memcpy>
 8009796:	2201      	movs	r2, #1
 8009798:	4629      	mov	r1, r5
 800979a:	4620      	mov	r0, r4
 800979c:	f000 fc0a 	bl	8009fb4 <__lshift>
 80097a0:	9b00      	ldr	r3, [sp, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	9304      	str	r3, [sp, #16]
 80097a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097aa:	4413      	add	r3, r2
 80097ac:	9308      	str	r3, [sp, #32]
 80097ae:	9b02      	ldr	r3, [sp, #8]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	46b8      	mov	r8, r7
 80097b6:	9306      	str	r3, [sp, #24]
 80097b8:	4607      	mov	r7, r0
 80097ba:	9b04      	ldr	r3, [sp, #16]
 80097bc:	4631      	mov	r1, r6
 80097be:	3b01      	subs	r3, #1
 80097c0:	4650      	mov	r0, sl
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	f7ff fa6a 	bl	8008c9c <quorem>
 80097c8:	4641      	mov	r1, r8
 80097ca:	9002      	str	r0, [sp, #8]
 80097cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80097d0:	4650      	mov	r0, sl
 80097d2:	f000 fc5b 	bl	800a08c <__mcmp>
 80097d6:	463a      	mov	r2, r7
 80097d8:	9005      	str	r0, [sp, #20]
 80097da:	4631      	mov	r1, r6
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 fc71 	bl	800a0c4 <__mdiff>
 80097e2:	68c2      	ldr	r2, [r0, #12]
 80097e4:	4605      	mov	r5, r0
 80097e6:	bb02      	cbnz	r2, 800982a <_dtoa_r+0xa7a>
 80097e8:	4601      	mov	r1, r0
 80097ea:	4650      	mov	r0, sl
 80097ec:	f000 fc4e 	bl	800a08c <__mcmp>
 80097f0:	4602      	mov	r2, r0
 80097f2:	4629      	mov	r1, r5
 80097f4:	4620      	mov	r0, r4
 80097f6:	9209      	str	r2, [sp, #36]	; 0x24
 80097f8:	f000 fa0c 	bl	8009c14 <_Bfree>
 80097fc:	9b07      	ldr	r3, [sp, #28]
 80097fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009800:	9d04      	ldr	r5, [sp, #16]
 8009802:	ea43 0102 	orr.w	r1, r3, r2
 8009806:	9b06      	ldr	r3, [sp, #24]
 8009808:	4319      	orrs	r1, r3
 800980a:	d110      	bne.n	800982e <_dtoa_r+0xa7e>
 800980c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009810:	d029      	beq.n	8009866 <_dtoa_r+0xab6>
 8009812:	9b05      	ldr	r3, [sp, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	dd02      	ble.n	800981e <_dtoa_r+0xa6e>
 8009818:	9b02      	ldr	r3, [sp, #8]
 800981a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	f883 9000 	strb.w	r9, [r3]
 8009824:	e774      	b.n	8009710 <_dtoa_r+0x960>
 8009826:	4638      	mov	r0, r7
 8009828:	e7ba      	b.n	80097a0 <_dtoa_r+0x9f0>
 800982a:	2201      	movs	r2, #1
 800982c:	e7e1      	b.n	80097f2 <_dtoa_r+0xa42>
 800982e:	9b05      	ldr	r3, [sp, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	db04      	blt.n	800983e <_dtoa_r+0xa8e>
 8009834:	9907      	ldr	r1, [sp, #28]
 8009836:	430b      	orrs	r3, r1
 8009838:	9906      	ldr	r1, [sp, #24]
 800983a:	430b      	orrs	r3, r1
 800983c:	d120      	bne.n	8009880 <_dtoa_r+0xad0>
 800983e:	2a00      	cmp	r2, #0
 8009840:	dded      	ble.n	800981e <_dtoa_r+0xa6e>
 8009842:	4651      	mov	r1, sl
 8009844:	2201      	movs	r2, #1
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fbb4 	bl	8009fb4 <__lshift>
 800984c:	4631      	mov	r1, r6
 800984e:	4682      	mov	sl, r0
 8009850:	f000 fc1c 	bl	800a08c <__mcmp>
 8009854:	2800      	cmp	r0, #0
 8009856:	dc03      	bgt.n	8009860 <_dtoa_r+0xab0>
 8009858:	d1e1      	bne.n	800981e <_dtoa_r+0xa6e>
 800985a:	f019 0f01 	tst.w	r9, #1
 800985e:	d0de      	beq.n	800981e <_dtoa_r+0xa6e>
 8009860:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009864:	d1d8      	bne.n	8009818 <_dtoa_r+0xa68>
 8009866:	9a01      	ldr	r2, [sp, #4]
 8009868:	2339      	movs	r3, #57	; 0x39
 800986a:	7013      	strb	r3, [r2, #0]
 800986c:	462b      	mov	r3, r5
 800986e:	461d      	mov	r5, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009876:	2a39      	cmp	r2, #57	; 0x39
 8009878:	d06c      	beq.n	8009954 <_dtoa_r+0xba4>
 800987a:	3201      	adds	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	e747      	b.n	8009710 <_dtoa_r+0x960>
 8009880:	2a00      	cmp	r2, #0
 8009882:	dd07      	ble.n	8009894 <_dtoa_r+0xae4>
 8009884:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009888:	d0ed      	beq.n	8009866 <_dtoa_r+0xab6>
 800988a:	9a01      	ldr	r2, [sp, #4]
 800988c:	f109 0301 	add.w	r3, r9, #1
 8009890:	7013      	strb	r3, [r2, #0]
 8009892:	e73d      	b.n	8009710 <_dtoa_r+0x960>
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	9a08      	ldr	r2, [sp, #32]
 8009898:	f803 9c01 	strb.w	r9, [r3, #-1]
 800989c:	4293      	cmp	r3, r2
 800989e:	d043      	beq.n	8009928 <_dtoa_r+0xb78>
 80098a0:	4651      	mov	r1, sl
 80098a2:	2300      	movs	r3, #0
 80098a4:	220a      	movs	r2, #10
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f9d6 	bl	8009c58 <__multadd>
 80098ac:	45b8      	cmp	r8, r7
 80098ae:	4682      	mov	sl, r0
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	f04f 020a 	mov.w	r2, #10
 80098b8:	4641      	mov	r1, r8
 80098ba:	4620      	mov	r0, r4
 80098bc:	d107      	bne.n	80098ce <_dtoa_r+0xb1e>
 80098be:	f000 f9cb 	bl	8009c58 <__multadd>
 80098c2:	4680      	mov	r8, r0
 80098c4:	4607      	mov	r7, r0
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	3301      	adds	r3, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	e775      	b.n	80097ba <_dtoa_r+0xa0a>
 80098ce:	f000 f9c3 	bl	8009c58 <__multadd>
 80098d2:	4639      	mov	r1, r7
 80098d4:	4680      	mov	r8, r0
 80098d6:	2300      	movs	r3, #0
 80098d8:	220a      	movs	r2, #10
 80098da:	4620      	mov	r0, r4
 80098dc:	f000 f9bc 	bl	8009c58 <__multadd>
 80098e0:	4607      	mov	r7, r0
 80098e2:	e7f0      	b.n	80098c6 <_dtoa_r+0xb16>
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	9d00      	ldr	r5, [sp, #0]
 80098ea:	4631      	mov	r1, r6
 80098ec:	4650      	mov	r0, sl
 80098ee:	f7ff f9d5 	bl	8008c9c <quorem>
 80098f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	f805 9b01 	strb.w	r9, [r5], #1
 80098fc:	1aea      	subs	r2, r5, r3
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	4293      	cmp	r3, r2
 8009902:	dd07      	ble.n	8009914 <_dtoa_r+0xb64>
 8009904:	4651      	mov	r1, sl
 8009906:	2300      	movs	r3, #0
 8009908:	220a      	movs	r2, #10
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f9a4 	bl	8009c58 <__multadd>
 8009910:	4682      	mov	sl, r0
 8009912:	e7ea      	b.n	80098ea <_dtoa_r+0xb3a>
 8009914:	9b01      	ldr	r3, [sp, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfc8      	it	gt
 800991a:	461d      	movgt	r5, r3
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	bfd8      	it	le
 8009920:	2501      	movle	r5, #1
 8009922:	441d      	add	r5, r3
 8009924:	f04f 0800 	mov.w	r8, #0
 8009928:	4651      	mov	r1, sl
 800992a:	2201      	movs	r2, #1
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fb41 	bl	8009fb4 <__lshift>
 8009932:	4631      	mov	r1, r6
 8009934:	4682      	mov	sl, r0
 8009936:	f000 fba9 	bl	800a08c <__mcmp>
 800993a:	2800      	cmp	r0, #0
 800993c:	dc96      	bgt.n	800986c <_dtoa_r+0xabc>
 800993e:	d102      	bne.n	8009946 <_dtoa_r+0xb96>
 8009940:	f019 0f01 	tst.w	r9, #1
 8009944:	d192      	bne.n	800986c <_dtoa_r+0xabc>
 8009946:	462b      	mov	r3, r5
 8009948:	461d      	mov	r5, r3
 800994a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800994e:	2a30      	cmp	r2, #48	; 0x30
 8009950:	d0fa      	beq.n	8009948 <_dtoa_r+0xb98>
 8009952:	e6dd      	b.n	8009710 <_dtoa_r+0x960>
 8009954:	9a00      	ldr	r2, [sp, #0]
 8009956:	429a      	cmp	r2, r3
 8009958:	d189      	bne.n	800986e <_dtoa_r+0xabe>
 800995a:	f10b 0b01 	add.w	fp, fp, #1
 800995e:	2331      	movs	r3, #49	; 0x31
 8009960:	e796      	b.n	8009890 <_dtoa_r+0xae0>
 8009962:	4b0a      	ldr	r3, [pc, #40]	; (800998c <_dtoa_r+0xbdc>)
 8009964:	f7ff ba99 	b.w	8008e9a <_dtoa_r+0xea>
 8009968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800996a:	2b00      	cmp	r3, #0
 800996c:	f47f aa6d 	bne.w	8008e4a <_dtoa_r+0x9a>
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <_dtoa_r+0xbe0>)
 8009972:	f7ff ba92 	b.w	8008e9a <_dtoa_r+0xea>
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	dcb5      	bgt.n	80098e8 <_dtoa_r+0xb38>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	2b02      	cmp	r3, #2
 8009980:	f73f aeb1 	bgt.w	80096e6 <_dtoa_r+0x936>
 8009984:	e7b0      	b.n	80098e8 <_dtoa_r+0xb38>
 8009986:	bf00      	nop
 8009988:	0800af40 	.word	0x0800af40
 800998c:	0800aea0 	.word	0x0800aea0
 8009990:	0800aec4 	.word	0x0800aec4

08009994 <_free_r>:
 8009994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009996:	2900      	cmp	r1, #0
 8009998:	d044      	beq.n	8009a24 <_free_r+0x90>
 800999a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999e:	9001      	str	r0, [sp, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f1a1 0404 	sub.w	r4, r1, #4
 80099a6:	bfb8      	it	lt
 80099a8:	18e4      	addlt	r4, r4, r3
 80099aa:	f000 f8e7 	bl	8009b7c <__malloc_lock>
 80099ae:	4a1e      	ldr	r2, [pc, #120]	; (8009a28 <_free_r+0x94>)
 80099b0:	9801      	ldr	r0, [sp, #4]
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	b933      	cbnz	r3, 80099c4 <_free_r+0x30>
 80099b6:	6063      	str	r3, [r4, #4]
 80099b8:	6014      	str	r4, [r2, #0]
 80099ba:	b003      	add	sp, #12
 80099bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099c0:	f000 b8e2 	b.w	8009b88 <__malloc_unlock>
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	d908      	bls.n	80099da <_free_r+0x46>
 80099c8:	6825      	ldr	r5, [r4, #0]
 80099ca:	1961      	adds	r1, r4, r5
 80099cc:	428b      	cmp	r3, r1
 80099ce:	bf01      	itttt	eq
 80099d0:	6819      	ldreq	r1, [r3, #0]
 80099d2:	685b      	ldreq	r3, [r3, #4]
 80099d4:	1949      	addeq	r1, r1, r5
 80099d6:	6021      	streq	r1, [r4, #0]
 80099d8:	e7ed      	b.n	80099b6 <_free_r+0x22>
 80099da:	461a      	mov	r2, r3
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b10b      	cbz	r3, 80099e4 <_free_r+0x50>
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d9fa      	bls.n	80099da <_free_r+0x46>
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	1855      	adds	r5, r2, r1
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d10b      	bne.n	8009a04 <_free_r+0x70>
 80099ec:	6824      	ldr	r4, [r4, #0]
 80099ee:	4421      	add	r1, r4
 80099f0:	1854      	adds	r4, r2, r1
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	6011      	str	r1, [r2, #0]
 80099f6:	d1e0      	bne.n	80099ba <_free_r+0x26>
 80099f8:	681c      	ldr	r4, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6053      	str	r3, [r2, #4]
 80099fe:	440c      	add	r4, r1
 8009a00:	6014      	str	r4, [r2, #0]
 8009a02:	e7da      	b.n	80099ba <_free_r+0x26>
 8009a04:	d902      	bls.n	8009a0c <_free_r+0x78>
 8009a06:	230c      	movs	r3, #12
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	e7d6      	b.n	80099ba <_free_r+0x26>
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	1961      	adds	r1, r4, r5
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf04      	itt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	bf04      	itt	eq
 8009a1c:	1949      	addeq	r1, r1, r5
 8009a1e:	6021      	streq	r1, [r4, #0]
 8009a20:	6054      	str	r4, [r2, #4]
 8009a22:	e7ca      	b.n	80099ba <_free_r+0x26>
 8009a24:	b003      	add	sp, #12
 8009a26:	bd30      	pop	{r4, r5, pc}
 8009a28:	20000ba4 	.word	0x20000ba4

08009a2c <malloc>:
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <malloc+0xc>)
 8009a2e:	4601      	mov	r1, r0
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	f000 b823 	b.w	8009a7c <_malloc_r>
 8009a36:	bf00      	nop
 8009a38:	2000007c 	.word	0x2000007c

08009a3c <sbrk_aligned>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	4e0e      	ldr	r6, [pc, #56]	; (8009a78 <sbrk_aligned+0x3c>)
 8009a40:	460c      	mov	r4, r1
 8009a42:	6831      	ldr	r1, [r6, #0]
 8009a44:	4605      	mov	r5, r0
 8009a46:	b911      	cbnz	r1, 8009a4e <sbrk_aligned+0x12>
 8009a48:	f001 f808 	bl	800aa5c <_sbrk_r>
 8009a4c:	6030      	str	r0, [r6, #0]
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4628      	mov	r0, r5
 8009a52:	f001 f803 	bl	800aa5c <_sbrk_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d00a      	beq.n	8009a70 <sbrk_aligned+0x34>
 8009a5a:	1cc4      	adds	r4, r0, #3
 8009a5c:	f024 0403 	bic.w	r4, r4, #3
 8009a60:	42a0      	cmp	r0, r4
 8009a62:	d007      	beq.n	8009a74 <sbrk_aligned+0x38>
 8009a64:	1a21      	subs	r1, r4, r0
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 fff8 	bl	800aa5c <_sbrk_r>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d101      	bne.n	8009a74 <sbrk_aligned+0x38>
 8009a70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a74:	4620      	mov	r0, r4
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	20000ba8 	.word	0x20000ba8

08009a7c <_malloc_r>:
 8009a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a80:	1ccd      	adds	r5, r1, #3
 8009a82:	f025 0503 	bic.w	r5, r5, #3
 8009a86:	3508      	adds	r5, #8
 8009a88:	2d0c      	cmp	r5, #12
 8009a8a:	bf38      	it	cc
 8009a8c:	250c      	movcc	r5, #12
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	4607      	mov	r7, r0
 8009a92:	db01      	blt.n	8009a98 <_malloc_r+0x1c>
 8009a94:	42a9      	cmp	r1, r5
 8009a96:	d905      	bls.n	8009aa4 <_malloc_r+0x28>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b78 <_malloc_r+0xfc>
 8009aa8:	f000 f868 	bl	8009b7c <__malloc_lock>
 8009aac:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab0:	461c      	mov	r4, r3
 8009ab2:	bb5c      	cbnz	r4, 8009b0c <_malloc_r+0x90>
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f7ff ffc0 	bl	8009a3c <sbrk_aligned>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	4604      	mov	r4, r0
 8009ac0:	d155      	bne.n	8009b6e <_malloc_r+0xf2>
 8009ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8009ac6:	4626      	mov	r6, r4
 8009ac8:	2e00      	cmp	r6, #0
 8009aca:	d145      	bne.n	8009b58 <_malloc_r+0xdc>
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	d048      	beq.n	8009b62 <_malloc_r+0xe6>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	eb04 0903 	add.w	r9, r4, r3
 8009ada:	f000 ffbf 	bl	800aa5c <_sbrk_r>
 8009ade:	4581      	cmp	r9, r0
 8009ae0:	d13f      	bne.n	8009b62 <_malloc_r+0xe6>
 8009ae2:	6821      	ldr	r1, [r4, #0]
 8009ae4:	1a6d      	subs	r5, r5, r1
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7ff ffa7 	bl	8009a3c <sbrk_aligned>
 8009aee:	3001      	adds	r0, #1
 8009af0:	d037      	beq.n	8009b62 <_malloc_r+0xe6>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	442b      	add	r3, r5
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	f8d8 3000 	ldr.w	r3, [r8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d038      	beq.n	8009b72 <_malloc_r+0xf6>
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	42a2      	cmp	r2, r4
 8009b04:	d12b      	bne.n	8009b5e <_malloc_r+0xe2>
 8009b06:	2200      	movs	r2, #0
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	e00f      	b.n	8009b2c <_malloc_r+0xb0>
 8009b0c:	6822      	ldr	r2, [r4, #0]
 8009b0e:	1b52      	subs	r2, r2, r5
 8009b10:	d41f      	bmi.n	8009b52 <_malloc_r+0xd6>
 8009b12:	2a0b      	cmp	r2, #11
 8009b14:	d917      	bls.n	8009b46 <_malloc_r+0xca>
 8009b16:	1961      	adds	r1, r4, r5
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	6025      	str	r5, [r4, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	6059      	strne	r1, [r3, #4]
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	bf08      	it	eq
 8009b24:	f8c8 1000 	streq.w	r1, [r8]
 8009b28:	5162      	str	r2, [r4, r5]
 8009b2a:	604b      	str	r3, [r1, #4]
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f104 060b 	add.w	r6, r4, #11
 8009b32:	f000 f829 	bl	8009b88 <__malloc_unlock>
 8009b36:	f026 0607 	bic.w	r6, r6, #7
 8009b3a:	1d23      	adds	r3, r4, #4
 8009b3c:	1af2      	subs	r2, r6, r3
 8009b3e:	d0ae      	beq.n	8009a9e <_malloc_r+0x22>
 8009b40:	1b9b      	subs	r3, r3, r6
 8009b42:	50a3      	str	r3, [r4, r2]
 8009b44:	e7ab      	b.n	8009a9e <_malloc_r+0x22>
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	6862      	ldr	r2, [r4, #4]
 8009b4a:	d1dd      	bne.n	8009b08 <_malloc_r+0x8c>
 8009b4c:	f8c8 2000 	str.w	r2, [r8]
 8009b50:	e7ec      	b.n	8009b2c <_malloc_r+0xb0>
 8009b52:	4623      	mov	r3, r4
 8009b54:	6864      	ldr	r4, [r4, #4]
 8009b56:	e7ac      	b.n	8009ab2 <_malloc_r+0x36>
 8009b58:	4634      	mov	r4, r6
 8009b5a:	6876      	ldr	r6, [r6, #4]
 8009b5c:	e7b4      	b.n	8009ac8 <_malloc_r+0x4c>
 8009b5e:	4613      	mov	r3, r2
 8009b60:	e7cc      	b.n	8009afc <_malloc_r+0x80>
 8009b62:	230c      	movs	r3, #12
 8009b64:	603b      	str	r3, [r7, #0]
 8009b66:	4638      	mov	r0, r7
 8009b68:	f000 f80e 	bl	8009b88 <__malloc_unlock>
 8009b6c:	e797      	b.n	8009a9e <_malloc_r+0x22>
 8009b6e:	6025      	str	r5, [r4, #0]
 8009b70:	e7dc      	b.n	8009b2c <_malloc_r+0xb0>
 8009b72:	605b      	str	r3, [r3, #4]
 8009b74:	deff      	udf	#255	; 0xff
 8009b76:	bf00      	nop
 8009b78:	20000ba4 	.word	0x20000ba4

08009b7c <__malloc_lock>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	; (8009b84 <__malloc_lock+0x8>)
 8009b7e:	f7ff b88b 	b.w	8008c98 <__retarget_lock_acquire_recursive>
 8009b82:	bf00      	nop
 8009b84:	20000ba0 	.word	0x20000ba0

08009b88 <__malloc_unlock>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__malloc_unlock+0x8>)
 8009b8a:	f7ff b886 	b.w	8008c9a <__retarget_lock_release_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20000ba0 	.word	0x20000ba0

08009b94 <_Balloc>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	69c6      	ldr	r6, [r0, #28]
 8009b98:	4604      	mov	r4, r0
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	b976      	cbnz	r6, 8009bbc <_Balloc+0x28>
 8009b9e:	2010      	movs	r0, #16
 8009ba0:	f7ff ff44 	bl	8009a2c <malloc>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	61e0      	str	r0, [r4, #28]
 8009ba8:	b920      	cbnz	r0, 8009bb4 <_Balloc+0x20>
 8009baa:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <_Balloc+0x78>)
 8009bac:	4818      	ldr	r0, [pc, #96]	; (8009c10 <_Balloc+0x7c>)
 8009bae:	216b      	movs	r1, #107	; 0x6b
 8009bb0:	f000 ff72 	bl	800aa98 <__assert_func>
 8009bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb8:	6006      	str	r6, [r0, #0]
 8009bba:	60c6      	str	r6, [r0, #12]
 8009bbc:	69e6      	ldr	r6, [r4, #28]
 8009bbe:	68f3      	ldr	r3, [r6, #12]
 8009bc0:	b183      	cbz	r3, 8009be4 <_Balloc+0x50>
 8009bc2:	69e3      	ldr	r3, [r4, #28]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bca:	b9b8      	cbnz	r0, 8009bfc <_Balloc+0x68>
 8009bcc:	2101      	movs	r1, #1
 8009bce:	fa01 f605 	lsl.w	r6, r1, r5
 8009bd2:	1d72      	adds	r2, r6, #5
 8009bd4:	0092      	lsls	r2, r2, #2
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 ff7c 	bl	800aad4 <_calloc_r>
 8009bdc:	b160      	cbz	r0, 8009bf8 <_Balloc+0x64>
 8009bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009be2:	e00e      	b.n	8009c02 <_Balloc+0x6e>
 8009be4:	2221      	movs	r2, #33	; 0x21
 8009be6:	2104      	movs	r1, #4
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 ff73 	bl	800aad4 <_calloc_r>
 8009bee:	69e3      	ldr	r3, [r4, #28]
 8009bf0:	60f0      	str	r0, [r6, #12]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e4      	bne.n	8009bc2 <_Balloc+0x2e>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	6802      	ldr	r2, [r0, #0]
 8009bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c02:	2300      	movs	r3, #0
 8009c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c08:	e7f7      	b.n	8009bfa <_Balloc+0x66>
 8009c0a:	bf00      	nop
 8009c0c:	0800aed1 	.word	0x0800aed1
 8009c10:	0800af51 	.word	0x0800af51

08009c14 <_Bfree>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	69c6      	ldr	r6, [r0, #28]
 8009c18:	4605      	mov	r5, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	b976      	cbnz	r6, 8009c3c <_Bfree+0x28>
 8009c1e:	2010      	movs	r0, #16
 8009c20:	f7ff ff04 	bl	8009a2c <malloc>
 8009c24:	4602      	mov	r2, r0
 8009c26:	61e8      	str	r0, [r5, #28]
 8009c28:	b920      	cbnz	r0, 8009c34 <_Bfree+0x20>
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <_Bfree+0x3c>)
 8009c2c:	4809      	ldr	r0, [pc, #36]	; (8009c54 <_Bfree+0x40>)
 8009c2e:	218f      	movs	r1, #143	; 0x8f
 8009c30:	f000 ff32 	bl	800aa98 <__assert_func>
 8009c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c38:	6006      	str	r6, [r0, #0]
 8009c3a:	60c6      	str	r6, [r0, #12]
 8009c3c:	b13c      	cbz	r4, 8009c4e <_Bfree+0x3a>
 8009c3e:	69eb      	ldr	r3, [r5, #28]
 8009c40:	6862      	ldr	r2, [r4, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c48:	6021      	str	r1, [r4, #0]
 8009c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	0800aed1 	.word	0x0800aed1
 8009c54:	0800af51 	.word	0x0800af51

08009c58 <__multadd>:
 8009c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5c:	690d      	ldr	r5, [r1, #16]
 8009c5e:	4607      	mov	r7, r0
 8009c60:	460c      	mov	r4, r1
 8009c62:	461e      	mov	r6, r3
 8009c64:	f101 0c14 	add.w	ip, r1, #20
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f8dc 3000 	ldr.w	r3, [ip]
 8009c6e:	b299      	uxth	r1, r3
 8009c70:	fb02 6101 	mla	r1, r2, r1, r6
 8009c74:	0c1e      	lsrs	r6, r3, #16
 8009c76:	0c0b      	lsrs	r3, r1, #16
 8009c78:	fb02 3306 	mla	r3, r2, r6, r3
 8009c7c:	b289      	uxth	r1, r1
 8009c7e:	3001      	adds	r0, #1
 8009c80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c84:	4285      	cmp	r5, r0
 8009c86:	f84c 1b04 	str.w	r1, [ip], #4
 8009c8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c8e:	dcec      	bgt.n	8009c6a <__multadd+0x12>
 8009c90:	b30e      	cbz	r6, 8009cd6 <__multadd+0x7e>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	42ab      	cmp	r3, r5
 8009c96:	dc19      	bgt.n	8009ccc <__multadd+0x74>
 8009c98:	6861      	ldr	r1, [r4, #4]
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	f7ff ff79 	bl	8009b94 <_Balloc>
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	b928      	cbnz	r0, 8009cb2 <__multadd+0x5a>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <__multadd+0x84>)
 8009caa:	480d      	ldr	r0, [pc, #52]	; (8009ce0 <__multadd+0x88>)
 8009cac:	21ba      	movs	r1, #186	; 0xba
 8009cae:	f000 fef3 	bl	800aa98 <__assert_func>
 8009cb2:	6922      	ldr	r2, [r4, #16]
 8009cb4:	3202      	adds	r2, #2
 8009cb6:	f104 010c 	add.w	r1, r4, #12
 8009cba:	0092      	lsls	r2, r2, #2
 8009cbc:	300c      	adds	r0, #12
 8009cbe:	f000 fedd 	bl	800aa7c <memcpy>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f7ff ffa5 	bl	8009c14 <_Bfree>
 8009cca:	4644      	mov	r4, r8
 8009ccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cd0:	3501      	adds	r5, #1
 8009cd2:	615e      	str	r6, [r3, #20]
 8009cd4:	6125      	str	r5, [r4, #16]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cdc:	0800af40 	.word	0x0800af40
 8009ce0:	0800af51 	.word	0x0800af51

08009ce4 <__hi0bits>:
 8009ce4:	0c03      	lsrs	r3, r0, #16
 8009ce6:	041b      	lsls	r3, r3, #16
 8009ce8:	b9d3      	cbnz	r3, 8009d20 <__hi0bits+0x3c>
 8009cea:	0400      	lsls	r0, r0, #16
 8009cec:	2310      	movs	r3, #16
 8009cee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cf2:	bf04      	itt	eq
 8009cf4:	0200      	lsleq	r0, r0, #8
 8009cf6:	3308      	addeq	r3, #8
 8009cf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cfc:	bf04      	itt	eq
 8009cfe:	0100      	lsleq	r0, r0, #4
 8009d00:	3304      	addeq	r3, #4
 8009d02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d06:	bf04      	itt	eq
 8009d08:	0080      	lsleq	r0, r0, #2
 8009d0a:	3302      	addeq	r3, #2
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	db05      	blt.n	8009d1c <__hi0bits+0x38>
 8009d10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d14:	f103 0301 	add.w	r3, r3, #1
 8009d18:	bf08      	it	eq
 8009d1a:	2320      	moveq	r3, #32
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	4770      	bx	lr
 8009d20:	2300      	movs	r3, #0
 8009d22:	e7e4      	b.n	8009cee <__hi0bits+0xa>

08009d24 <__lo0bits>:
 8009d24:	6803      	ldr	r3, [r0, #0]
 8009d26:	f013 0207 	ands.w	r2, r3, #7
 8009d2a:	d00c      	beq.n	8009d46 <__lo0bits+0x22>
 8009d2c:	07d9      	lsls	r1, r3, #31
 8009d2e:	d422      	bmi.n	8009d76 <__lo0bits+0x52>
 8009d30:	079a      	lsls	r2, r3, #30
 8009d32:	bf49      	itett	mi
 8009d34:	085b      	lsrmi	r3, r3, #1
 8009d36:	089b      	lsrpl	r3, r3, #2
 8009d38:	6003      	strmi	r3, [r0, #0]
 8009d3a:	2201      	movmi	r2, #1
 8009d3c:	bf5c      	itt	pl
 8009d3e:	6003      	strpl	r3, [r0, #0]
 8009d40:	2202      	movpl	r2, #2
 8009d42:	4610      	mov	r0, r2
 8009d44:	4770      	bx	lr
 8009d46:	b299      	uxth	r1, r3
 8009d48:	b909      	cbnz	r1, 8009d4e <__lo0bits+0x2a>
 8009d4a:	0c1b      	lsrs	r3, r3, #16
 8009d4c:	2210      	movs	r2, #16
 8009d4e:	b2d9      	uxtb	r1, r3
 8009d50:	b909      	cbnz	r1, 8009d56 <__lo0bits+0x32>
 8009d52:	3208      	adds	r2, #8
 8009d54:	0a1b      	lsrs	r3, r3, #8
 8009d56:	0719      	lsls	r1, r3, #28
 8009d58:	bf04      	itt	eq
 8009d5a:	091b      	lsreq	r3, r3, #4
 8009d5c:	3204      	addeq	r2, #4
 8009d5e:	0799      	lsls	r1, r3, #30
 8009d60:	bf04      	itt	eq
 8009d62:	089b      	lsreq	r3, r3, #2
 8009d64:	3202      	addeq	r2, #2
 8009d66:	07d9      	lsls	r1, r3, #31
 8009d68:	d403      	bmi.n	8009d72 <__lo0bits+0x4e>
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	f102 0201 	add.w	r2, r2, #1
 8009d70:	d003      	beq.n	8009d7a <__lo0bits+0x56>
 8009d72:	6003      	str	r3, [r0, #0]
 8009d74:	e7e5      	b.n	8009d42 <__lo0bits+0x1e>
 8009d76:	2200      	movs	r2, #0
 8009d78:	e7e3      	b.n	8009d42 <__lo0bits+0x1e>
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	e7e1      	b.n	8009d42 <__lo0bits+0x1e>
	...

08009d80 <__i2b>:
 8009d80:	b510      	push	{r4, lr}
 8009d82:	460c      	mov	r4, r1
 8009d84:	2101      	movs	r1, #1
 8009d86:	f7ff ff05 	bl	8009b94 <_Balloc>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	b928      	cbnz	r0, 8009d9a <__i2b+0x1a>
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <__i2b+0x24>)
 8009d90:	4805      	ldr	r0, [pc, #20]	; (8009da8 <__i2b+0x28>)
 8009d92:	f240 1145 	movw	r1, #325	; 0x145
 8009d96:	f000 fe7f 	bl	800aa98 <__assert_func>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	6144      	str	r4, [r0, #20]
 8009d9e:	6103      	str	r3, [r0, #16]
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	bf00      	nop
 8009da4:	0800af40 	.word	0x0800af40
 8009da8:	0800af51 	.word	0x0800af51

08009dac <__multiply>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	4691      	mov	r9, r2
 8009db2:	690a      	ldr	r2, [r1, #16]
 8009db4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	bfb8      	it	lt
 8009dbc:	460b      	movlt	r3, r1
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	bfbc      	itt	lt
 8009dc2:	464c      	movlt	r4, r9
 8009dc4:	4699      	movlt	r9, r3
 8009dc6:	6927      	ldr	r7, [r4, #16]
 8009dc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dcc:	68a3      	ldr	r3, [r4, #8]
 8009dce:	6861      	ldr	r1, [r4, #4]
 8009dd0:	eb07 060a 	add.w	r6, r7, sl
 8009dd4:	42b3      	cmp	r3, r6
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	bfb8      	it	lt
 8009dda:	3101      	addlt	r1, #1
 8009ddc:	f7ff feda 	bl	8009b94 <_Balloc>
 8009de0:	b930      	cbnz	r0, 8009df0 <__multiply+0x44>
 8009de2:	4602      	mov	r2, r0
 8009de4:	4b44      	ldr	r3, [pc, #272]	; (8009ef8 <__multiply+0x14c>)
 8009de6:	4845      	ldr	r0, [pc, #276]	; (8009efc <__multiply+0x150>)
 8009de8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009dec:	f000 fe54 	bl	800aa98 <__assert_func>
 8009df0:	f100 0514 	add.w	r5, r0, #20
 8009df4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009df8:	462b      	mov	r3, r5
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4543      	cmp	r3, r8
 8009dfe:	d321      	bcc.n	8009e44 <__multiply+0x98>
 8009e00:	f104 0314 	add.w	r3, r4, #20
 8009e04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e08:	f109 0314 	add.w	r3, r9, #20
 8009e0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e10:	9202      	str	r2, [sp, #8]
 8009e12:	1b3a      	subs	r2, r7, r4
 8009e14:	3a15      	subs	r2, #21
 8009e16:	f022 0203 	bic.w	r2, r2, #3
 8009e1a:	3204      	adds	r2, #4
 8009e1c:	f104 0115 	add.w	r1, r4, #21
 8009e20:	428f      	cmp	r7, r1
 8009e22:	bf38      	it	cc
 8009e24:	2204      	movcc	r2, #4
 8009e26:	9201      	str	r2, [sp, #4]
 8009e28:	9a02      	ldr	r2, [sp, #8]
 8009e2a:	9303      	str	r3, [sp, #12]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d80c      	bhi.n	8009e4a <__multiply+0x9e>
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	dd03      	ble.n	8009e3c <__multiply+0x90>
 8009e34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d05b      	beq.n	8009ef4 <__multiply+0x148>
 8009e3c:	6106      	str	r6, [r0, #16]
 8009e3e:	b005      	add	sp, #20
 8009e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e44:	f843 2b04 	str.w	r2, [r3], #4
 8009e48:	e7d8      	b.n	8009dfc <__multiply+0x50>
 8009e4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e4e:	f1ba 0f00 	cmp.w	sl, #0
 8009e52:	d024      	beq.n	8009e9e <__multiply+0xf2>
 8009e54:	f104 0e14 	add.w	lr, r4, #20
 8009e58:	46a9      	mov	r9, r5
 8009e5a:	f04f 0c00 	mov.w	ip, #0
 8009e5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e62:	f8d9 1000 	ldr.w	r1, [r9]
 8009e66:	fa1f fb82 	uxth.w	fp, r2
 8009e6a:	b289      	uxth	r1, r1
 8009e6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e74:	f8d9 2000 	ldr.w	r2, [r9]
 8009e78:	4461      	add	r1, ip
 8009e7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e86:	b289      	uxth	r1, r1
 8009e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e8c:	4577      	cmp	r7, lr
 8009e8e:	f849 1b04 	str.w	r1, [r9], #4
 8009e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e96:	d8e2      	bhi.n	8009e5e <__multiply+0xb2>
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	f845 c002 	str.w	ip, [r5, r2]
 8009e9e:	9a03      	ldr	r2, [sp, #12]
 8009ea0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	f1b9 0f00 	cmp.w	r9, #0
 8009eaa:	d021      	beq.n	8009ef0 <__multiply+0x144>
 8009eac:	6829      	ldr	r1, [r5, #0]
 8009eae:	f104 0c14 	add.w	ip, r4, #20
 8009eb2:	46ae      	mov	lr, r5
 8009eb4:	f04f 0a00 	mov.w	sl, #0
 8009eb8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ebc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ec0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ec4:	4452      	add	r2, sl
 8009ec6:	b289      	uxth	r1, r1
 8009ec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ecc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ed8:	f8be 1000 	ldrh.w	r1, [lr]
 8009edc:	fb09 110a 	mla	r1, r9, sl, r1
 8009ee0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009ee4:	4567      	cmp	r7, ip
 8009ee6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009eea:	d8e5      	bhi.n	8009eb8 <__multiply+0x10c>
 8009eec:	9a01      	ldr	r2, [sp, #4]
 8009eee:	50a9      	str	r1, [r5, r2]
 8009ef0:	3504      	adds	r5, #4
 8009ef2:	e799      	b.n	8009e28 <__multiply+0x7c>
 8009ef4:	3e01      	subs	r6, #1
 8009ef6:	e79b      	b.n	8009e30 <__multiply+0x84>
 8009ef8:	0800af40 	.word	0x0800af40
 8009efc:	0800af51 	.word	0x0800af51

08009f00 <__pow5mult>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	4615      	mov	r5, r2
 8009f06:	f012 0203 	ands.w	r2, r2, #3
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	d007      	beq.n	8009f20 <__pow5mult+0x20>
 8009f10:	4c25      	ldr	r4, [pc, #148]	; (8009fa8 <__pow5mult+0xa8>)
 8009f12:	3a01      	subs	r2, #1
 8009f14:	2300      	movs	r3, #0
 8009f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f1a:	f7ff fe9d 	bl	8009c58 <__multadd>
 8009f1e:	4607      	mov	r7, r0
 8009f20:	10ad      	asrs	r5, r5, #2
 8009f22:	d03d      	beq.n	8009fa0 <__pow5mult+0xa0>
 8009f24:	69f4      	ldr	r4, [r6, #28]
 8009f26:	b97c      	cbnz	r4, 8009f48 <__pow5mult+0x48>
 8009f28:	2010      	movs	r0, #16
 8009f2a:	f7ff fd7f 	bl	8009a2c <malloc>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	61f0      	str	r0, [r6, #28]
 8009f32:	b928      	cbnz	r0, 8009f40 <__pow5mult+0x40>
 8009f34:	4b1d      	ldr	r3, [pc, #116]	; (8009fac <__pow5mult+0xac>)
 8009f36:	481e      	ldr	r0, [pc, #120]	; (8009fb0 <__pow5mult+0xb0>)
 8009f38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009f3c:	f000 fdac 	bl	800aa98 <__assert_func>
 8009f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f44:	6004      	str	r4, [r0, #0]
 8009f46:	60c4      	str	r4, [r0, #12]
 8009f48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f50:	b94c      	cbnz	r4, 8009f66 <__pow5mult+0x66>
 8009f52:	f240 2171 	movw	r1, #625	; 0x271
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ff12 	bl	8009d80 <__i2b>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f62:	4604      	mov	r4, r0
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	f04f 0900 	mov.w	r9, #0
 8009f6a:	07eb      	lsls	r3, r5, #31
 8009f6c:	d50a      	bpl.n	8009f84 <__pow5mult+0x84>
 8009f6e:	4639      	mov	r1, r7
 8009f70:	4622      	mov	r2, r4
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7ff ff1a 	bl	8009dac <__multiply>
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff fe49 	bl	8009c14 <_Bfree>
 8009f82:	4647      	mov	r7, r8
 8009f84:	106d      	asrs	r5, r5, #1
 8009f86:	d00b      	beq.n	8009fa0 <__pow5mult+0xa0>
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	b938      	cbnz	r0, 8009f9c <__pow5mult+0x9c>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7ff ff0b 	bl	8009dac <__multiply>
 8009f96:	6020      	str	r0, [r4, #0]
 8009f98:	f8c0 9000 	str.w	r9, [r0]
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	e7e4      	b.n	8009f6a <__pow5mult+0x6a>
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa6:	bf00      	nop
 8009fa8:	0800b0a0 	.word	0x0800b0a0
 8009fac:	0800aed1 	.word	0x0800aed1
 8009fb0:	0800af51 	.word	0x0800af51

08009fb4 <__lshift>:
 8009fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	6849      	ldr	r1, [r1, #4]
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	4691      	mov	r9, r2
 8009fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fcc:	f108 0601 	add.w	r6, r8, #1
 8009fd0:	42b3      	cmp	r3, r6
 8009fd2:	db0b      	blt.n	8009fec <__lshift+0x38>
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	f7ff fddd 	bl	8009b94 <_Balloc>
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b948      	cbnz	r0, 8009ff2 <__lshift+0x3e>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	4b28      	ldr	r3, [pc, #160]	; (800a084 <__lshift+0xd0>)
 8009fe2:	4829      	ldr	r0, [pc, #164]	; (800a088 <__lshift+0xd4>)
 8009fe4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009fe8:	f000 fd56 	bl	800aa98 <__assert_func>
 8009fec:	3101      	adds	r1, #1
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	e7ee      	b.n	8009fd0 <__lshift+0x1c>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f100 0114 	add.w	r1, r0, #20
 8009ff8:	f100 0210 	add.w	r2, r0, #16
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	4553      	cmp	r3, sl
 800a000:	db33      	blt.n	800a06a <__lshift+0xb6>
 800a002:	6920      	ldr	r0, [r4, #16]
 800a004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a008:	f104 0314 	add.w	r3, r4, #20
 800a00c:	f019 091f 	ands.w	r9, r9, #31
 800a010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a018:	d02b      	beq.n	800a072 <__lshift+0xbe>
 800a01a:	f1c9 0e20 	rsb	lr, r9, #32
 800a01e:	468a      	mov	sl, r1
 800a020:	2200      	movs	r2, #0
 800a022:	6818      	ldr	r0, [r3, #0]
 800a024:	fa00 f009 	lsl.w	r0, r0, r9
 800a028:	4310      	orrs	r0, r2
 800a02a:	f84a 0b04 	str.w	r0, [sl], #4
 800a02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a032:	459c      	cmp	ip, r3
 800a034:	fa22 f20e 	lsr.w	r2, r2, lr
 800a038:	d8f3      	bhi.n	800a022 <__lshift+0x6e>
 800a03a:	ebac 0304 	sub.w	r3, ip, r4
 800a03e:	3b15      	subs	r3, #21
 800a040:	f023 0303 	bic.w	r3, r3, #3
 800a044:	3304      	adds	r3, #4
 800a046:	f104 0015 	add.w	r0, r4, #21
 800a04a:	4584      	cmp	ip, r0
 800a04c:	bf38      	it	cc
 800a04e:	2304      	movcc	r3, #4
 800a050:	50ca      	str	r2, [r1, r3]
 800a052:	b10a      	cbz	r2, 800a058 <__lshift+0xa4>
 800a054:	f108 0602 	add.w	r6, r8, #2
 800a058:	3e01      	subs	r6, #1
 800a05a:	4638      	mov	r0, r7
 800a05c:	612e      	str	r6, [r5, #16]
 800a05e:	4621      	mov	r1, r4
 800a060:	f7ff fdd8 	bl	8009c14 <_Bfree>
 800a064:	4628      	mov	r0, r5
 800a066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a06a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a06e:	3301      	adds	r3, #1
 800a070:	e7c5      	b.n	8009ffe <__lshift+0x4a>
 800a072:	3904      	subs	r1, #4
 800a074:	f853 2b04 	ldr.w	r2, [r3], #4
 800a078:	f841 2f04 	str.w	r2, [r1, #4]!
 800a07c:	459c      	cmp	ip, r3
 800a07e:	d8f9      	bhi.n	800a074 <__lshift+0xc0>
 800a080:	e7ea      	b.n	800a058 <__lshift+0xa4>
 800a082:	bf00      	nop
 800a084:	0800af40 	.word	0x0800af40
 800a088:	0800af51 	.word	0x0800af51

0800a08c <__mcmp>:
 800a08c:	b530      	push	{r4, r5, lr}
 800a08e:	6902      	ldr	r2, [r0, #16]
 800a090:	690c      	ldr	r4, [r1, #16]
 800a092:	1b12      	subs	r2, r2, r4
 800a094:	d10e      	bne.n	800a0b4 <__mcmp+0x28>
 800a096:	f100 0314 	add.w	r3, r0, #20
 800a09a:	3114      	adds	r1, #20
 800a09c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0ac:	42a5      	cmp	r5, r4
 800a0ae:	d003      	beq.n	800a0b8 <__mcmp+0x2c>
 800a0b0:	d305      	bcc.n	800a0be <__mcmp+0x32>
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	bd30      	pop	{r4, r5, pc}
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	d3f3      	bcc.n	800a0a4 <__mcmp+0x18>
 800a0bc:	e7fa      	b.n	800a0b4 <__mcmp+0x28>
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0c2:	e7f7      	b.n	800a0b4 <__mcmp+0x28>

0800a0c4 <__mdiff>:
 800a0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4690      	mov	r8, r2
 800a0d2:	f7ff ffdb 	bl	800a08c <__mcmp>
 800a0d6:	1e05      	subs	r5, r0, #0
 800a0d8:	d110      	bne.n	800a0fc <__mdiff+0x38>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff fd59 	bl	8009b94 <_Balloc>
 800a0e2:	b930      	cbnz	r0, 800a0f2 <__mdiff+0x2e>
 800a0e4:	4b3a      	ldr	r3, [pc, #232]	; (800a1d0 <__mdiff+0x10c>)
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	f240 2137 	movw	r1, #567	; 0x237
 800a0ec:	4839      	ldr	r0, [pc, #228]	; (800a1d4 <__mdiff+0x110>)
 800a0ee:	f000 fcd3 	bl	800aa98 <__assert_func>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	bfa4      	itt	ge
 800a0fe:	4643      	movge	r3, r8
 800a100:	46a0      	movge	r8, r4
 800a102:	4630      	mov	r0, r6
 800a104:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a108:	bfa6      	itte	ge
 800a10a:	461c      	movge	r4, r3
 800a10c:	2500      	movge	r5, #0
 800a10e:	2501      	movlt	r5, #1
 800a110:	f7ff fd40 	bl	8009b94 <_Balloc>
 800a114:	b920      	cbnz	r0, 800a120 <__mdiff+0x5c>
 800a116:	4b2e      	ldr	r3, [pc, #184]	; (800a1d0 <__mdiff+0x10c>)
 800a118:	4602      	mov	r2, r0
 800a11a:	f240 2145 	movw	r1, #581	; 0x245
 800a11e:	e7e5      	b.n	800a0ec <__mdiff+0x28>
 800a120:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a124:	6926      	ldr	r6, [r4, #16]
 800a126:	60c5      	str	r5, [r0, #12]
 800a128:	f104 0914 	add.w	r9, r4, #20
 800a12c:	f108 0514 	add.w	r5, r8, #20
 800a130:	f100 0e14 	add.w	lr, r0, #20
 800a134:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a138:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a13c:	f108 0210 	add.w	r2, r8, #16
 800a140:	46f2      	mov	sl, lr
 800a142:	2100      	movs	r1, #0
 800a144:	f859 3b04 	ldr.w	r3, [r9], #4
 800a148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a14c:	fa11 f88b 	uxtah	r8, r1, fp
 800a150:	b299      	uxth	r1, r3
 800a152:	0c1b      	lsrs	r3, r3, #16
 800a154:	eba8 0801 	sub.w	r8, r8, r1
 800a158:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a15c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a160:	fa1f f888 	uxth.w	r8, r8
 800a164:	1419      	asrs	r1, r3, #16
 800a166:	454e      	cmp	r6, r9
 800a168:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a16c:	f84a 3b04 	str.w	r3, [sl], #4
 800a170:	d8e8      	bhi.n	800a144 <__mdiff+0x80>
 800a172:	1b33      	subs	r3, r6, r4
 800a174:	3b15      	subs	r3, #21
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	3304      	adds	r3, #4
 800a17c:	3415      	adds	r4, #21
 800a17e:	42a6      	cmp	r6, r4
 800a180:	bf38      	it	cc
 800a182:	2304      	movcc	r3, #4
 800a184:	441d      	add	r5, r3
 800a186:	4473      	add	r3, lr
 800a188:	469e      	mov	lr, r3
 800a18a:	462e      	mov	r6, r5
 800a18c:	4566      	cmp	r6, ip
 800a18e:	d30e      	bcc.n	800a1ae <__mdiff+0xea>
 800a190:	f10c 0203 	add.w	r2, ip, #3
 800a194:	1b52      	subs	r2, r2, r5
 800a196:	f022 0203 	bic.w	r2, r2, #3
 800a19a:	3d03      	subs	r5, #3
 800a19c:	45ac      	cmp	ip, r5
 800a19e:	bf38      	it	cc
 800a1a0:	2200      	movcc	r2, #0
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a1a8:	b17a      	cbz	r2, 800a1ca <__mdiff+0x106>
 800a1aa:	6107      	str	r7, [r0, #16]
 800a1ac:	e7a4      	b.n	800a0f8 <__mdiff+0x34>
 800a1ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1b2:	fa11 f288 	uxtah	r2, r1, r8
 800a1b6:	1414      	asrs	r4, r2, #16
 800a1b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1bc:	b292      	uxth	r2, r2
 800a1be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1c2:	f84e 2b04 	str.w	r2, [lr], #4
 800a1c6:	1421      	asrs	r1, r4, #16
 800a1c8:	e7e0      	b.n	800a18c <__mdiff+0xc8>
 800a1ca:	3f01      	subs	r7, #1
 800a1cc:	e7ea      	b.n	800a1a4 <__mdiff+0xe0>
 800a1ce:	bf00      	nop
 800a1d0:	0800af40 	.word	0x0800af40
 800a1d4:	0800af51 	.word	0x0800af51

0800a1d8 <__d2b>:
 800a1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1dc:	460f      	mov	r7, r1
 800a1de:	2101      	movs	r1, #1
 800a1e0:	ec59 8b10 	vmov	r8, r9, d0
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	f7ff fcd5 	bl	8009b94 <_Balloc>
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	b930      	cbnz	r0, 800a1fc <__d2b+0x24>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	4b24      	ldr	r3, [pc, #144]	; (800a284 <__d2b+0xac>)
 800a1f2:	4825      	ldr	r0, [pc, #148]	; (800a288 <__d2b+0xb0>)
 800a1f4:	f240 310f 	movw	r1, #783	; 0x30f
 800a1f8:	f000 fc4e 	bl	800aa98 <__assert_func>
 800a1fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a204:	bb2d      	cbnz	r5, 800a252 <__d2b+0x7a>
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	f1b8 0300 	subs.w	r3, r8, #0
 800a20c:	d026      	beq.n	800a25c <__d2b+0x84>
 800a20e:	4668      	mov	r0, sp
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	f7ff fd87 	bl	8009d24 <__lo0bits>
 800a216:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a21a:	b1e8      	cbz	r0, 800a258 <__d2b+0x80>
 800a21c:	f1c0 0320 	rsb	r3, r0, #32
 800a220:	fa02 f303 	lsl.w	r3, r2, r3
 800a224:	430b      	orrs	r3, r1
 800a226:	40c2      	lsrs	r2, r0
 800a228:	6163      	str	r3, [r4, #20]
 800a22a:	9201      	str	r2, [sp, #4]
 800a22c:	9b01      	ldr	r3, [sp, #4]
 800a22e:	61a3      	str	r3, [r4, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	bf14      	ite	ne
 800a234:	2202      	movne	r2, #2
 800a236:	2201      	moveq	r2, #1
 800a238:	6122      	str	r2, [r4, #16]
 800a23a:	b1bd      	cbz	r5, 800a26c <__d2b+0x94>
 800a23c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a240:	4405      	add	r5, r0
 800a242:	603d      	str	r5, [r7, #0]
 800a244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	4620      	mov	r0, r4
 800a24c:	b003      	add	sp, #12
 800a24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a256:	e7d6      	b.n	800a206 <__d2b+0x2e>
 800a258:	6161      	str	r1, [r4, #20]
 800a25a:	e7e7      	b.n	800a22c <__d2b+0x54>
 800a25c:	a801      	add	r0, sp, #4
 800a25e:	f7ff fd61 	bl	8009d24 <__lo0bits>
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	6163      	str	r3, [r4, #20]
 800a266:	3020      	adds	r0, #32
 800a268:	2201      	movs	r2, #1
 800a26a:	e7e5      	b.n	800a238 <__d2b+0x60>
 800a26c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a274:	6038      	str	r0, [r7, #0]
 800a276:	6918      	ldr	r0, [r3, #16]
 800a278:	f7ff fd34 	bl	8009ce4 <__hi0bits>
 800a27c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a280:	e7e2      	b.n	800a248 <__d2b+0x70>
 800a282:	bf00      	nop
 800a284:	0800af40 	.word	0x0800af40
 800a288:	0800af51 	.word	0x0800af51

0800a28c <__ssputs_r>:
 800a28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a290:	688e      	ldr	r6, [r1, #8]
 800a292:	461f      	mov	r7, r3
 800a294:	42be      	cmp	r6, r7
 800a296:	680b      	ldr	r3, [r1, #0]
 800a298:	4682      	mov	sl, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	4690      	mov	r8, r2
 800a29e:	d82c      	bhi.n	800a2fa <__ssputs_r+0x6e>
 800a2a0:	898a      	ldrh	r2, [r1, #12]
 800a2a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2a6:	d026      	beq.n	800a2f6 <__ssputs_r+0x6a>
 800a2a8:	6965      	ldr	r5, [r4, #20]
 800a2aa:	6909      	ldr	r1, [r1, #16]
 800a2ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2b0:	eba3 0901 	sub.w	r9, r3, r1
 800a2b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2b8:	1c7b      	adds	r3, r7, #1
 800a2ba:	444b      	add	r3, r9
 800a2bc:	106d      	asrs	r5, r5, #1
 800a2be:	429d      	cmp	r5, r3
 800a2c0:	bf38      	it	cc
 800a2c2:	461d      	movcc	r5, r3
 800a2c4:	0553      	lsls	r3, r2, #21
 800a2c6:	d527      	bpl.n	800a318 <__ssputs_r+0x8c>
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7ff fbd7 	bl	8009a7c <_malloc_r>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	b360      	cbz	r0, 800a32c <__ssputs_r+0xa0>
 800a2d2:	6921      	ldr	r1, [r4, #16]
 800a2d4:	464a      	mov	r2, r9
 800a2d6:	f000 fbd1 	bl	800aa7c <memcpy>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	6126      	str	r6, [r4, #16]
 800a2e8:	6165      	str	r5, [r4, #20]
 800a2ea:	444e      	add	r6, r9
 800a2ec:	eba5 0509 	sub.w	r5, r5, r9
 800a2f0:	6026      	str	r6, [r4, #0]
 800a2f2:	60a5      	str	r5, [r4, #8]
 800a2f4:	463e      	mov	r6, r7
 800a2f6:	42be      	cmp	r6, r7
 800a2f8:	d900      	bls.n	800a2fc <__ssputs_r+0x70>
 800a2fa:	463e      	mov	r6, r7
 800a2fc:	6820      	ldr	r0, [r4, #0]
 800a2fe:	4632      	mov	r2, r6
 800a300:	4641      	mov	r1, r8
 800a302:	f000 fb6f 	bl	800a9e4 <memmove>
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	1b9b      	subs	r3, r3, r6
 800a30a:	60a3      	str	r3, [r4, #8]
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	4433      	add	r3, r6
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	2000      	movs	r0, #0
 800a314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a318:	462a      	mov	r2, r5
 800a31a:	f000 fc03 	bl	800ab24 <_realloc_r>
 800a31e:	4606      	mov	r6, r0
 800a320:	2800      	cmp	r0, #0
 800a322:	d1e0      	bne.n	800a2e6 <__ssputs_r+0x5a>
 800a324:	6921      	ldr	r1, [r4, #16]
 800a326:	4650      	mov	r0, sl
 800a328:	f7ff fb34 	bl	8009994 <_free_r>
 800a32c:	230c      	movs	r3, #12
 800a32e:	f8ca 3000 	str.w	r3, [sl]
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a33e:	e7e9      	b.n	800a314 <__ssputs_r+0x88>

0800a340 <_svfiprintf_r>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	4698      	mov	r8, r3
 800a346:	898b      	ldrh	r3, [r1, #12]
 800a348:	061b      	lsls	r3, r3, #24
 800a34a:	b09d      	sub	sp, #116	; 0x74
 800a34c:	4607      	mov	r7, r0
 800a34e:	460d      	mov	r5, r1
 800a350:	4614      	mov	r4, r2
 800a352:	d50e      	bpl.n	800a372 <_svfiprintf_r+0x32>
 800a354:	690b      	ldr	r3, [r1, #16]
 800a356:	b963      	cbnz	r3, 800a372 <_svfiprintf_r+0x32>
 800a358:	2140      	movs	r1, #64	; 0x40
 800a35a:	f7ff fb8f 	bl	8009a7c <_malloc_r>
 800a35e:	6028      	str	r0, [r5, #0]
 800a360:	6128      	str	r0, [r5, #16]
 800a362:	b920      	cbnz	r0, 800a36e <_svfiprintf_r+0x2e>
 800a364:	230c      	movs	r3, #12
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a36c:	e0d0      	b.n	800a510 <_svfiprintf_r+0x1d0>
 800a36e:	2340      	movs	r3, #64	; 0x40
 800a370:	616b      	str	r3, [r5, #20]
 800a372:	2300      	movs	r3, #0
 800a374:	9309      	str	r3, [sp, #36]	; 0x24
 800a376:	2320      	movs	r3, #32
 800a378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a380:	2330      	movs	r3, #48	; 0x30
 800a382:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a528 <_svfiprintf_r+0x1e8>
 800a386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a38a:	f04f 0901 	mov.w	r9, #1
 800a38e:	4623      	mov	r3, r4
 800a390:	469a      	mov	sl, r3
 800a392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a396:	b10a      	cbz	r2, 800a39c <_svfiprintf_r+0x5c>
 800a398:	2a25      	cmp	r2, #37	; 0x25
 800a39a:	d1f9      	bne.n	800a390 <_svfiprintf_r+0x50>
 800a39c:	ebba 0b04 	subs.w	fp, sl, r4
 800a3a0:	d00b      	beq.n	800a3ba <_svfiprintf_r+0x7a>
 800a3a2:	465b      	mov	r3, fp
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f7ff ff6f 	bl	800a28c <__ssputs_r>
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	f000 80a9 	beq.w	800a506 <_svfiprintf_r+0x1c6>
 800a3b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b6:	445a      	add	r2, fp
 800a3b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 80a1 	beq.w	800a506 <_svfiprintf_r+0x1c6>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ce:	f10a 0a01 	add.w	sl, sl, #1
 800a3d2:	9304      	str	r3, [sp, #16]
 800a3d4:	9307      	str	r3, [sp, #28]
 800a3d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3da:	931a      	str	r3, [sp, #104]	; 0x68
 800a3dc:	4654      	mov	r4, sl
 800a3de:	2205      	movs	r2, #5
 800a3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e4:	4850      	ldr	r0, [pc, #320]	; (800a528 <_svfiprintf_r+0x1e8>)
 800a3e6:	f7f5 ff03 	bl	80001f0 <memchr>
 800a3ea:	9a04      	ldr	r2, [sp, #16]
 800a3ec:	b9d8      	cbnz	r0, 800a426 <_svfiprintf_r+0xe6>
 800a3ee:	06d0      	lsls	r0, r2, #27
 800a3f0:	bf44      	itt	mi
 800a3f2:	2320      	movmi	r3, #32
 800a3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f8:	0711      	lsls	r1, r2, #28
 800a3fa:	bf44      	itt	mi
 800a3fc:	232b      	movmi	r3, #43	; 0x2b
 800a3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a402:	f89a 3000 	ldrb.w	r3, [sl]
 800a406:	2b2a      	cmp	r3, #42	; 0x2a
 800a408:	d015      	beq.n	800a436 <_svfiprintf_r+0xf6>
 800a40a:	9a07      	ldr	r2, [sp, #28]
 800a40c:	4654      	mov	r4, sl
 800a40e:	2000      	movs	r0, #0
 800a410:	f04f 0c0a 	mov.w	ip, #10
 800a414:	4621      	mov	r1, r4
 800a416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a41a:	3b30      	subs	r3, #48	; 0x30
 800a41c:	2b09      	cmp	r3, #9
 800a41e:	d94d      	bls.n	800a4bc <_svfiprintf_r+0x17c>
 800a420:	b1b0      	cbz	r0, 800a450 <_svfiprintf_r+0x110>
 800a422:	9207      	str	r2, [sp, #28]
 800a424:	e014      	b.n	800a450 <_svfiprintf_r+0x110>
 800a426:	eba0 0308 	sub.w	r3, r0, r8
 800a42a:	fa09 f303 	lsl.w	r3, r9, r3
 800a42e:	4313      	orrs	r3, r2
 800a430:	9304      	str	r3, [sp, #16]
 800a432:	46a2      	mov	sl, r4
 800a434:	e7d2      	b.n	800a3dc <_svfiprintf_r+0x9c>
 800a436:	9b03      	ldr	r3, [sp, #12]
 800a438:	1d19      	adds	r1, r3, #4
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	9103      	str	r1, [sp, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bfbb      	ittet	lt
 800a442:	425b      	neglt	r3, r3
 800a444:	f042 0202 	orrlt.w	r2, r2, #2
 800a448:	9307      	strge	r3, [sp, #28]
 800a44a:	9307      	strlt	r3, [sp, #28]
 800a44c:	bfb8      	it	lt
 800a44e:	9204      	strlt	r2, [sp, #16]
 800a450:	7823      	ldrb	r3, [r4, #0]
 800a452:	2b2e      	cmp	r3, #46	; 0x2e
 800a454:	d10c      	bne.n	800a470 <_svfiprintf_r+0x130>
 800a456:	7863      	ldrb	r3, [r4, #1]
 800a458:	2b2a      	cmp	r3, #42	; 0x2a
 800a45a:	d134      	bne.n	800a4c6 <_svfiprintf_r+0x186>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	1d1a      	adds	r2, r3, #4
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	9203      	str	r2, [sp, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	bfb8      	it	lt
 800a468:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a46c:	3402      	adds	r4, #2
 800a46e:	9305      	str	r3, [sp, #20]
 800a470:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a538 <_svfiprintf_r+0x1f8>
 800a474:	7821      	ldrb	r1, [r4, #0]
 800a476:	2203      	movs	r2, #3
 800a478:	4650      	mov	r0, sl
 800a47a:	f7f5 feb9 	bl	80001f0 <memchr>
 800a47e:	b138      	cbz	r0, 800a490 <_svfiprintf_r+0x150>
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	eba0 000a 	sub.w	r0, r0, sl
 800a486:	2240      	movs	r2, #64	; 0x40
 800a488:	4082      	lsls	r2, r0
 800a48a:	4313      	orrs	r3, r2
 800a48c:	3401      	adds	r4, #1
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a494:	4825      	ldr	r0, [pc, #148]	; (800a52c <_svfiprintf_r+0x1ec>)
 800a496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a49a:	2206      	movs	r2, #6
 800a49c:	f7f5 fea8 	bl	80001f0 <memchr>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d038      	beq.n	800a516 <_svfiprintf_r+0x1d6>
 800a4a4:	4b22      	ldr	r3, [pc, #136]	; (800a530 <_svfiprintf_r+0x1f0>)
 800a4a6:	bb1b      	cbnz	r3, 800a4f0 <_svfiprintf_r+0x1b0>
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	3307      	adds	r3, #7
 800a4ac:	f023 0307 	bic.w	r3, r3, #7
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	9303      	str	r3, [sp, #12]
 800a4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b6:	4433      	add	r3, r6
 800a4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ba:	e768      	b.n	800a38e <_svfiprintf_r+0x4e>
 800a4bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	e7a6      	b.n	800a414 <_svfiprintf_r+0xd4>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	f04f 0c0a 	mov.w	ip, #10
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d8:	3a30      	subs	r2, #48	; 0x30
 800a4da:	2a09      	cmp	r2, #9
 800a4dc:	d903      	bls.n	800a4e6 <_svfiprintf_r+0x1a6>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0c6      	beq.n	800a470 <_svfiprintf_r+0x130>
 800a4e2:	9105      	str	r1, [sp, #20]
 800a4e4:	e7c4      	b.n	800a470 <_svfiprintf_r+0x130>
 800a4e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e7f0      	b.n	800a4d2 <_svfiprintf_r+0x192>
 800a4f0:	ab03      	add	r3, sp, #12
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	462a      	mov	r2, r5
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <_svfiprintf_r+0x1f4>)
 800a4f8:	a904      	add	r1, sp, #16
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f7fd fd40 	bl	8007f80 <_printf_float>
 800a500:	1c42      	adds	r2, r0, #1
 800a502:	4606      	mov	r6, r0
 800a504:	d1d6      	bne.n	800a4b4 <_svfiprintf_r+0x174>
 800a506:	89ab      	ldrh	r3, [r5, #12]
 800a508:	065b      	lsls	r3, r3, #25
 800a50a:	f53f af2d 	bmi.w	800a368 <_svfiprintf_r+0x28>
 800a50e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a510:	b01d      	add	sp, #116	; 0x74
 800a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a516:	ab03      	add	r3, sp, #12
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	462a      	mov	r2, r5
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <_svfiprintf_r+0x1f4>)
 800a51e:	a904      	add	r1, sp, #16
 800a520:	4638      	mov	r0, r7
 800a522:	f7fd ffd1 	bl	80084c8 <_printf_i>
 800a526:	e7eb      	b.n	800a500 <_svfiprintf_r+0x1c0>
 800a528:	0800b0ac 	.word	0x0800b0ac
 800a52c:	0800b0b6 	.word	0x0800b0b6
 800a530:	08007f81 	.word	0x08007f81
 800a534:	0800a28d 	.word	0x0800a28d
 800a538:	0800b0b2 	.word	0x0800b0b2

0800a53c <__sfputc_r>:
 800a53c:	6893      	ldr	r3, [r2, #8]
 800a53e:	3b01      	subs	r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	b410      	push	{r4}
 800a544:	6093      	str	r3, [r2, #8]
 800a546:	da08      	bge.n	800a55a <__sfputc_r+0x1e>
 800a548:	6994      	ldr	r4, [r2, #24]
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	db01      	blt.n	800a552 <__sfputc_r+0x16>
 800a54e:	290a      	cmp	r1, #10
 800a550:	d103      	bne.n	800a55a <__sfputc_r+0x1e>
 800a552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a556:	f7fe ba8e 	b.w	8008a76 <__swbuf_r>
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	1c58      	adds	r0, r3, #1
 800a55e:	6010      	str	r0, [r2, #0]
 800a560:	7019      	strb	r1, [r3, #0]
 800a562:	4608      	mov	r0, r1
 800a564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <__sfputs_r>:
 800a56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	4614      	mov	r4, r2
 800a572:	18d5      	adds	r5, r2, r3
 800a574:	42ac      	cmp	r4, r5
 800a576:	d101      	bne.n	800a57c <__sfputs_r+0x12>
 800a578:	2000      	movs	r0, #0
 800a57a:	e007      	b.n	800a58c <__sfputs_r+0x22>
 800a57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a580:	463a      	mov	r2, r7
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff ffda 	bl	800a53c <__sfputc_r>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d1f3      	bne.n	800a574 <__sfputs_r+0xa>
 800a58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a590 <_vfiprintf_r>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	460d      	mov	r5, r1
 800a596:	b09d      	sub	sp, #116	; 0x74
 800a598:	4614      	mov	r4, r2
 800a59a:	4698      	mov	r8, r3
 800a59c:	4606      	mov	r6, r0
 800a59e:	b118      	cbz	r0, 800a5a8 <_vfiprintf_r+0x18>
 800a5a0:	6a03      	ldr	r3, [r0, #32]
 800a5a2:	b90b      	cbnz	r3, 800a5a8 <_vfiprintf_r+0x18>
 800a5a4:	f7fe f92c 	bl	8008800 <__sinit>
 800a5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5aa:	07d9      	lsls	r1, r3, #31
 800a5ac:	d405      	bmi.n	800a5ba <_vfiprintf_r+0x2a>
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	059a      	lsls	r2, r3, #22
 800a5b2:	d402      	bmi.n	800a5ba <_vfiprintf_r+0x2a>
 800a5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b6:	f7fe fb6f 	bl	8008c98 <__retarget_lock_acquire_recursive>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	071b      	lsls	r3, r3, #28
 800a5be:	d501      	bpl.n	800a5c4 <_vfiprintf_r+0x34>
 800a5c0:	692b      	ldr	r3, [r5, #16]
 800a5c2:	b99b      	cbnz	r3, 800a5ec <_vfiprintf_r+0x5c>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7fe fa92 	bl	8008af0 <__swsetup_r>
 800a5cc:	b170      	cbz	r0, 800a5ec <_vfiprintf_r+0x5c>
 800a5ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d0:	07dc      	lsls	r4, r3, #31
 800a5d2:	d504      	bpl.n	800a5de <_vfiprintf_r+0x4e>
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d8:	b01d      	add	sp, #116	; 0x74
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	0598      	lsls	r0, r3, #22
 800a5e2:	d4f7      	bmi.n	800a5d4 <_vfiprintf_r+0x44>
 800a5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5e6:	f7fe fb58 	bl	8008c9a <__retarget_lock_release_recursive>
 800a5ea:	e7f3      	b.n	800a5d4 <_vfiprintf_r+0x44>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5fa:	2330      	movs	r3, #48	; 0x30
 800a5fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a7b0 <_vfiprintf_r+0x220>
 800a600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a604:	f04f 0901 	mov.w	r9, #1
 800a608:	4623      	mov	r3, r4
 800a60a:	469a      	mov	sl, r3
 800a60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a610:	b10a      	cbz	r2, 800a616 <_vfiprintf_r+0x86>
 800a612:	2a25      	cmp	r2, #37	; 0x25
 800a614:	d1f9      	bne.n	800a60a <_vfiprintf_r+0x7a>
 800a616:	ebba 0b04 	subs.w	fp, sl, r4
 800a61a:	d00b      	beq.n	800a634 <_vfiprintf_r+0xa4>
 800a61c:	465b      	mov	r3, fp
 800a61e:	4622      	mov	r2, r4
 800a620:	4629      	mov	r1, r5
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ffa1 	bl	800a56a <__sfputs_r>
 800a628:	3001      	adds	r0, #1
 800a62a:	f000 80a9 	beq.w	800a780 <_vfiprintf_r+0x1f0>
 800a62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a630:	445a      	add	r2, fp
 800a632:	9209      	str	r2, [sp, #36]	; 0x24
 800a634:	f89a 3000 	ldrb.w	r3, [sl]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80a1 	beq.w	800a780 <_vfiprintf_r+0x1f0>
 800a63e:	2300      	movs	r3, #0
 800a640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a648:	f10a 0a01 	add.w	sl, sl, #1
 800a64c:	9304      	str	r3, [sp, #16]
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a654:	931a      	str	r3, [sp, #104]	; 0x68
 800a656:	4654      	mov	r4, sl
 800a658:	2205      	movs	r2, #5
 800a65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a65e:	4854      	ldr	r0, [pc, #336]	; (800a7b0 <_vfiprintf_r+0x220>)
 800a660:	f7f5 fdc6 	bl	80001f0 <memchr>
 800a664:	9a04      	ldr	r2, [sp, #16]
 800a666:	b9d8      	cbnz	r0, 800a6a0 <_vfiprintf_r+0x110>
 800a668:	06d1      	lsls	r1, r2, #27
 800a66a:	bf44      	itt	mi
 800a66c:	2320      	movmi	r3, #32
 800a66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a672:	0713      	lsls	r3, r2, #28
 800a674:	bf44      	itt	mi
 800a676:	232b      	movmi	r3, #43	; 0x2b
 800a678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a67c:	f89a 3000 	ldrb.w	r3, [sl]
 800a680:	2b2a      	cmp	r3, #42	; 0x2a
 800a682:	d015      	beq.n	800a6b0 <_vfiprintf_r+0x120>
 800a684:	9a07      	ldr	r2, [sp, #28]
 800a686:	4654      	mov	r4, sl
 800a688:	2000      	movs	r0, #0
 800a68a:	f04f 0c0a 	mov.w	ip, #10
 800a68e:	4621      	mov	r1, r4
 800a690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a694:	3b30      	subs	r3, #48	; 0x30
 800a696:	2b09      	cmp	r3, #9
 800a698:	d94d      	bls.n	800a736 <_vfiprintf_r+0x1a6>
 800a69a:	b1b0      	cbz	r0, 800a6ca <_vfiprintf_r+0x13a>
 800a69c:	9207      	str	r2, [sp, #28]
 800a69e:	e014      	b.n	800a6ca <_vfiprintf_r+0x13a>
 800a6a0:	eba0 0308 	sub.w	r3, r0, r8
 800a6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	9304      	str	r3, [sp, #16]
 800a6ac:	46a2      	mov	sl, r4
 800a6ae:	e7d2      	b.n	800a656 <_vfiprintf_r+0xc6>
 800a6b0:	9b03      	ldr	r3, [sp, #12]
 800a6b2:	1d19      	adds	r1, r3, #4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	9103      	str	r1, [sp, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bfbb      	ittet	lt
 800a6bc:	425b      	neglt	r3, r3
 800a6be:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c2:	9307      	strge	r3, [sp, #28]
 800a6c4:	9307      	strlt	r3, [sp, #28]
 800a6c6:	bfb8      	it	lt
 800a6c8:	9204      	strlt	r2, [sp, #16]
 800a6ca:	7823      	ldrb	r3, [r4, #0]
 800a6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ce:	d10c      	bne.n	800a6ea <_vfiprintf_r+0x15a>
 800a6d0:	7863      	ldrb	r3, [r4, #1]
 800a6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d4:	d134      	bne.n	800a740 <_vfiprintf_r+0x1b0>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9203      	str	r2, [sp, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfb8      	it	lt
 800a6e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a6e6:	3402      	adds	r4, #2
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a7c0 <_vfiprintf_r+0x230>
 800a6ee:	7821      	ldrb	r1, [r4, #0]
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	f7f5 fd7c 	bl	80001f0 <memchr>
 800a6f8:	b138      	cbz	r0, 800a70a <_vfiprintf_r+0x17a>
 800a6fa:	9b04      	ldr	r3, [sp, #16]
 800a6fc:	eba0 000a 	sub.w	r0, r0, sl
 800a700:	2240      	movs	r2, #64	; 0x40
 800a702:	4082      	lsls	r2, r0
 800a704:	4313      	orrs	r3, r2
 800a706:	3401      	adds	r4, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70e:	4829      	ldr	r0, [pc, #164]	; (800a7b4 <_vfiprintf_r+0x224>)
 800a710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a714:	2206      	movs	r2, #6
 800a716:	f7f5 fd6b 	bl	80001f0 <memchr>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d03f      	beq.n	800a79e <_vfiprintf_r+0x20e>
 800a71e:	4b26      	ldr	r3, [pc, #152]	; (800a7b8 <_vfiprintf_r+0x228>)
 800a720:	bb1b      	cbnz	r3, 800a76a <_vfiprintf_r+0x1da>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	3307      	adds	r3, #7
 800a726:	f023 0307 	bic.w	r3, r3, #7
 800a72a:	3308      	adds	r3, #8
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a730:	443b      	add	r3, r7
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	e768      	b.n	800a608 <_vfiprintf_r+0x78>
 800a736:	fb0c 3202 	mla	r2, ip, r2, r3
 800a73a:	460c      	mov	r4, r1
 800a73c:	2001      	movs	r0, #1
 800a73e:	e7a6      	b.n	800a68e <_vfiprintf_r+0xfe>
 800a740:	2300      	movs	r3, #0
 800a742:	3401      	adds	r4, #1
 800a744:	9305      	str	r3, [sp, #20]
 800a746:	4619      	mov	r1, r3
 800a748:	f04f 0c0a 	mov.w	ip, #10
 800a74c:	4620      	mov	r0, r4
 800a74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a752:	3a30      	subs	r2, #48	; 0x30
 800a754:	2a09      	cmp	r2, #9
 800a756:	d903      	bls.n	800a760 <_vfiprintf_r+0x1d0>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0c6      	beq.n	800a6ea <_vfiprintf_r+0x15a>
 800a75c:	9105      	str	r1, [sp, #20]
 800a75e:	e7c4      	b.n	800a6ea <_vfiprintf_r+0x15a>
 800a760:	fb0c 2101 	mla	r1, ip, r1, r2
 800a764:	4604      	mov	r4, r0
 800a766:	2301      	movs	r3, #1
 800a768:	e7f0      	b.n	800a74c <_vfiprintf_r+0x1bc>
 800a76a:	ab03      	add	r3, sp, #12
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	462a      	mov	r2, r5
 800a770:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <_vfiprintf_r+0x22c>)
 800a772:	a904      	add	r1, sp, #16
 800a774:	4630      	mov	r0, r6
 800a776:	f7fd fc03 	bl	8007f80 <_printf_float>
 800a77a:	4607      	mov	r7, r0
 800a77c:	1c78      	adds	r0, r7, #1
 800a77e:	d1d6      	bne.n	800a72e <_vfiprintf_r+0x19e>
 800a780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a782:	07d9      	lsls	r1, r3, #31
 800a784:	d405      	bmi.n	800a792 <_vfiprintf_r+0x202>
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	059a      	lsls	r2, r3, #22
 800a78a:	d402      	bmi.n	800a792 <_vfiprintf_r+0x202>
 800a78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a78e:	f7fe fa84 	bl	8008c9a <__retarget_lock_release_recursive>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	065b      	lsls	r3, r3, #25
 800a796:	f53f af1d 	bmi.w	800a5d4 <_vfiprintf_r+0x44>
 800a79a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79c:	e71c      	b.n	800a5d8 <_vfiprintf_r+0x48>
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <_vfiprintf_r+0x22c>)
 800a7a6:	a904      	add	r1, sp, #16
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7fd fe8d 	bl	80084c8 <_printf_i>
 800a7ae:	e7e4      	b.n	800a77a <_vfiprintf_r+0x1ea>
 800a7b0:	0800b0ac 	.word	0x0800b0ac
 800a7b4:	0800b0b6 	.word	0x0800b0b6
 800a7b8:	08007f81 	.word	0x08007f81
 800a7bc:	0800a56b 	.word	0x0800a56b
 800a7c0:	0800b0b2 	.word	0x0800b0b2

0800a7c4 <__sflush_r>:
 800a7c4:	898a      	ldrh	r2, [r1, #12]
 800a7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	0710      	lsls	r0, r2, #28
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	d458      	bmi.n	800a884 <__sflush_r+0xc0>
 800a7d2:	684b      	ldr	r3, [r1, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	dc05      	bgt.n	800a7e4 <__sflush_r+0x20>
 800a7d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dc02      	bgt.n	800a7e4 <__sflush_r+0x20>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7e6:	2e00      	cmp	r6, #0
 800a7e8:	d0f9      	beq.n	800a7de <__sflush_r+0x1a>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7f0:	682f      	ldr	r7, [r5, #0]
 800a7f2:	6a21      	ldr	r1, [r4, #32]
 800a7f4:	602b      	str	r3, [r5, #0]
 800a7f6:	d032      	beq.n	800a85e <__sflush_r+0x9a>
 800a7f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	075a      	lsls	r2, r3, #29
 800a7fe:	d505      	bpl.n	800a80c <__sflush_r+0x48>
 800a800:	6863      	ldr	r3, [r4, #4]
 800a802:	1ac0      	subs	r0, r0, r3
 800a804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a806:	b10b      	cbz	r3, 800a80c <__sflush_r+0x48>
 800a808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a80a:	1ac0      	subs	r0, r0, r3
 800a80c:	2300      	movs	r3, #0
 800a80e:	4602      	mov	r2, r0
 800a810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a812:	6a21      	ldr	r1, [r4, #32]
 800a814:	4628      	mov	r0, r5
 800a816:	47b0      	blx	r6
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	d106      	bne.n	800a82c <__sflush_r+0x68>
 800a81e:	6829      	ldr	r1, [r5, #0]
 800a820:	291d      	cmp	r1, #29
 800a822:	d82b      	bhi.n	800a87c <__sflush_r+0xb8>
 800a824:	4a29      	ldr	r2, [pc, #164]	; (800a8cc <__sflush_r+0x108>)
 800a826:	410a      	asrs	r2, r1
 800a828:	07d6      	lsls	r6, r2, #31
 800a82a:	d427      	bmi.n	800a87c <__sflush_r+0xb8>
 800a82c:	2200      	movs	r2, #0
 800a82e:	6062      	str	r2, [r4, #4]
 800a830:	04d9      	lsls	r1, r3, #19
 800a832:	6922      	ldr	r2, [r4, #16]
 800a834:	6022      	str	r2, [r4, #0]
 800a836:	d504      	bpl.n	800a842 <__sflush_r+0x7e>
 800a838:	1c42      	adds	r2, r0, #1
 800a83a:	d101      	bne.n	800a840 <__sflush_r+0x7c>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b903      	cbnz	r3, 800a842 <__sflush_r+0x7e>
 800a840:	6560      	str	r0, [r4, #84]	; 0x54
 800a842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a844:	602f      	str	r7, [r5, #0]
 800a846:	2900      	cmp	r1, #0
 800a848:	d0c9      	beq.n	800a7de <__sflush_r+0x1a>
 800a84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a84e:	4299      	cmp	r1, r3
 800a850:	d002      	beq.n	800a858 <__sflush_r+0x94>
 800a852:	4628      	mov	r0, r5
 800a854:	f7ff f89e 	bl	8009994 <_free_r>
 800a858:	2000      	movs	r0, #0
 800a85a:	6360      	str	r0, [r4, #52]	; 0x34
 800a85c:	e7c0      	b.n	800a7e0 <__sflush_r+0x1c>
 800a85e:	2301      	movs	r3, #1
 800a860:	4628      	mov	r0, r5
 800a862:	47b0      	blx	r6
 800a864:	1c41      	adds	r1, r0, #1
 800a866:	d1c8      	bne.n	800a7fa <__sflush_r+0x36>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0c5      	beq.n	800a7fa <__sflush_r+0x36>
 800a86e:	2b1d      	cmp	r3, #29
 800a870:	d001      	beq.n	800a876 <__sflush_r+0xb2>
 800a872:	2b16      	cmp	r3, #22
 800a874:	d101      	bne.n	800a87a <__sflush_r+0xb6>
 800a876:	602f      	str	r7, [r5, #0]
 800a878:	e7b1      	b.n	800a7de <__sflush_r+0x1a>
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	e7ad      	b.n	800a7e0 <__sflush_r+0x1c>
 800a884:	690f      	ldr	r7, [r1, #16]
 800a886:	2f00      	cmp	r7, #0
 800a888:	d0a9      	beq.n	800a7de <__sflush_r+0x1a>
 800a88a:	0793      	lsls	r3, r2, #30
 800a88c:	680e      	ldr	r6, [r1, #0]
 800a88e:	bf08      	it	eq
 800a890:	694b      	ldreq	r3, [r1, #20]
 800a892:	600f      	str	r7, [r1, #0]
 800a894:	bf18      	it	ne
 800a896:	2300      	movne	r3, #0
 800a898:	eba6 0807 	sub.w	r8, r6, r7
 800a89c:	608b      	str	r3, [r1, #8]
 800a89e:	f1b8 0f00 	cmp.w	r8, #0
 800a8a2:	dd9c      	ble.n	800a7de <__sflush_r+0x1a>
 800a8a4:	6a21      	ldr	r1, [r4, #32]
 800a8a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8a8:	4643      	mov	r3, r8
 800a8aa:	463a      	mov	r2, r7
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b0      	blx	r6
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	dc06      	bgt.n	800a8c2 <__sflush_r+0xfe>
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c0:	e78e      	b.n	800a7e0 <__sflush_r+0x1c>
 800a8c2:	4407      	add	r7, r0
 800a8c4:	eba8 0800 	sub.w	r8, r8, r0
 800a8c8:	e7e9      	b.n	800a89e <__sflush_r+0xda>
 800a8ca:	bf00      	nop
 800a8cc:	dfbffffe 	.word	0xdfbffffe

0800a8d0 <_fflush_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	690b      	ldr	r3, [r1, #16]
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	b913      	cbnz	r3, 800a8e0 <_fflush_r+0x10>
 800a8da:	2500      	movs	r5, #0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	b118      	cbz	r0, 800a8ea <_fflush_r+0x1a>
 800a8e2:	6a03      	ldr	r3, [r0, #32]
 800a8e4:	b90b      	cbnz	r3, 800a8ea <_fflush_r+0x1a>
 800a8e6:	f7fd ff8b 	bl	8008800 <__sinit>
 800a8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0f3      	beq.n	800a8da <_fflush_r+0xa>
 800a8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8f4:	07d0      	lsls	r0, r2, #31
 800a8f6:	d404      	bmi.n	800a902 <_fflush_r+0x32>
 800a8f8:	0599      	lsls	r1, r3, #22
 800a8fa:	d402      	bmi.n	800a902 <_fflush_r+0x32>
 800a8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8fe:	f7fe f9cb 	bl	8008c98 <__retarget_lock_acquire_recursive>
 800a902:	4628      	mov	r0, r5
 800a904:	4621      	mov	r1, r4
 800a906:	f7ff ff5d 	bl	800a7c4 <__sflush_r>
 800a90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a90c:	07da      	lsls	r2, r3, #31
 800a90e:	4605      	mov	r5, r0
 800a910:	d4e4      	bmi.n	800a8dc <_fflush_r+0xc>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	059b      	lsls	r3, r3, #22
 800a916:	d4e1      	bmi.n	800a8dc <_fflush_r+0xc>
 800a918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91a:	f7fe f9be 	bl	8008c9a <__retarget_lock_release_recursive>
 800a91e:	e7dd      	b.n	800a8dc <_fflush_r+0xc>

0800a920 <__swhatbuf_r>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	460c      	mov	r4, r1
 800a924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a928:	2900      	cmp	r1, #0
 800a92a:	b096      	sub	sp, #88	; 0x58
 800a92c:	4615      	mov	r5, r2
 800a92e:	461e      	mov	r6, r3
 800a930:	da0d      	bge.n	800a94e <__swhatbuf_r+0x2e>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a938:	f04f 0100 	mov.w	r1, #0
 800a93c:	bf0c      	ite	eq
 800a93e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a942:	2340      	movne	r3, #64	; 0x40
 800a944:	2000      	movs	r0, #0
 800a946:	6031      	str	r1, [r6, #0]
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	b016      	add	sp, #88	; 0x58
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
 800a94e:	466a      	mov	r2, sp
 800a950:	f000 f862 	bl	800aa18 <_fstat_r>
 800a954:	2800      	cmp	r0, #0
 800a956:	dbec      	blt.n	800a932 <__swhatbuf_r+0x12>
 800a958:	9901      	ldr	r1, [sp, #4]
 800a95a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a95e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a962:	4259      	negs	r1, r3
 800a964:	4159      	adcs	r1, r3
 800a966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a96a:	e7eb      	b.n	800a944 <__swhatbuf_r+0x24>

0800a96c <__smakebuf_r>:
 800a96c:	898b      	ldrh	r3, [r1, #12]
 800a96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a970:	079d      	lsls	r5, r3, #30
 800a972:	4606      	mov	r6, r0
 800a974:	460c      	mov	r4, r1
 800a976:	d507      	bpl.n	800a988 <__smakebuf_r+0x1c>
 800a978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	2301      	movs	r3, #1
 800a982:	6163      	str	r3, [r4, #20]
 800a984:	b002      	add	sp, #8
 800a986:	bd70      	pop	{r4, r5, r6, pc}
 800a988:	ab01      	add	r3, sp, #4
 800a98a:	466a      	mov	r2, sp
 800a98c:	f7ff ffc8 	bl	800a920 <__swhatbuf_r>
 800a990:	9900      	ldr	r1, [sp, #0]
 800a992:	4605      	mov	r5, r0
 800a994:	4630      	mov	r0, r6
 800a996:	f7ff f871 	bl	8009a7c <_malloc_r>
 800a99a:	b948      	cbnz	r0, 800a9b0 <__smakebuf_r+0x44>
 800a99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a0:	059a      	lsls	r2, r3, #22
 800a9a2:	d4ef      	bmi.n	800a984 <__smakebuf_r+0x18>
 800a9a4:	f023 0303 	bic.w	r3, r3, #3
 800a9a8:	f043 0302 	orr.w	r3, r3, #2
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	e7e3      	b.n	800a978 <__smakebuf_r+0xc>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	6020      	str	r0, [r4, #0]
 800a9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b8:	81a3      	strh	r3, [r4, #12]
 800a9ba:	9b00      	ldr	r3, [sp, #0]
 800a9bc:	6163      	str	r3, [r4, #20]
 800a9be:	9b01      	ldr	r3, [sp, #4]
 800a9c0:	6120      	str	r0, [r4, #16]
 800a9c2:	b15b      	cbz	r3, 800a9dc <__smakebuf_r+0x70>
 800a9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f000 f837 	bl	800aa3c <_isatty_r>
 800a9ce:	b128      	cbz	r0, 800a9dc <__smakebuf_r+0x70>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f023 0303 	bic.w	r3, r3, #3
 800a9d6:	f043 0301 	orr.w	r3, r3, #1
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	431d      	orrs	r5, r3
 800a9e0:	81a5      	strh	r5, [r4, #12]
 800a9e2:	e7cf      	b.n	800a984 <__smakebuf_r+0x18>

0800a9e4 <memmove>:
 800a9e4:	4288      	cmp	r0, r1
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	eb01 0402 	add.w	r4, r1, r2
 800a9ec:	d902      	bls.n	800a9f4 <memmove+0x10>
 800a9ee:	4284      	cmp	r4, r0
 800a9f0:	4623      	mov	r3, r4
 800a9f2:	d807      	bhi.n	800aa04 <memmove+0x20>
 800a9f4:	1e43      	subs	r3, r0, #1
 800a9f6:	42a1      	cmp	r1, r4
 800a9f8:	d008      	beq.n	800aa0c <memmove+0x28>
 800a9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa02:	e7f8      	b.n	800a9f6 <memmove+0x12>
 800aa04:	4402      	add	r2, r0
 800aa06:	4601      	mov	r1, r0
 800aa08:	428a      	cmp	r2, r1
 800aa0a:	d100      	bne.n	800aa0e <memmove+0x2a>
 800aa0c:	bd10      	pop	{r4, pc}
 800aa0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa16:	e7f7      	b.n	800aa08 <memmove+0x24>

0800aa18 <_fstat_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d07      	ldr	r5, [pc, #28]	; (800aa38 <_fstat_r+0x20>)
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	4611      	mov	r1, r2
 800aa24:	602b      	str	r3, [r5, #0]
 800aa26:	f7f6 ff44 	bl	80018b2 <_fstat>
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	d102      	bne.n	800aa34 <_fstat_r+0x1c>
 800aa2e:	682b      	ldr	r3, [r5, #0]
 800aa30:	b103      	cbz	r3, 800aa34 <_fstat_r+0x1c>
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	bd38      	pop	{r3, r4, r5, pc}
 800aa36:	bf00      	nop
 800aa38:	20000b9c 	.word	0x20000b9c

0800aa3c <_isatty_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d06      	ldr	r5, [pc, #24]	; (800aa58 <_isatty_r+0x1c>)
 800aa40:	2300      	movs	r3, #0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	f7f6 ff43 	bl	80018d2 <_isatty>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_isatty_r+0x1a>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_isatty_r+0x1a>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	20000b9c 	.word	0x20000b9c

0800aa5c <_sbrk_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d06      	ldr	r5, [pc, #24]	; (800aa78 <_sbrk_r+0x1c>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	f7f6 ff4c 	bl	8001904 <_sbrk>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_sbrk_r+0x1a>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_sbrk_r+0x1a>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20000b9c 	.word	0x20000b9c

0800aa7c <memcpy>:
 800aa7c:	440a      	add	r2, r1
 800aa7e:	4291      	cmp	r1, r2
 800aa80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aa84:	d100      	bne.n	800aa88 <memcpy+0xc>
 800aa86:	4770      	bx	lr
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa92:	4291      	cmp	r1, r2
 800aa94:	d1f9      	bne.n	800aa8a <memcpy+0xe>
 800aa96:	bd10      	pop	{r4, pc}

0800aa98 <__assert_func>:
 800aa98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa9a:	4614      	mov	r4, r2
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <__assert_func+0x2c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	68d8      	ldr	r0, [r3, #12]
 800aaa6:	b14c      	cbz	r4, 800aabc <__assert_func+0x24>
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <__assert_func+0x30>)
 800aaaa:	9100      	str	r1, [sp, #0]
 800aaac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aab0:	4906      	ldr	r1, [pc, #24]	; (800aacc <__assert_func+0x34>)
 800aab2:	462b      	mov	r3, r5
 800aab4:	f000 f872 	bl	800ab9c <fiprintf>
 800aab8:	f000 f882 	bl	800abc0 <abort>
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <__assert_func+0x38>)
 800aabe:	461c      	mov	r4, r3
 800aac0:	e7f3      	b.n	800aaaa <__assert_func+0x12>
 800aac2:	bf00      	nop
 800aac4:	2000007c 	.word	0x2000007c
 800aac8:	0800b0c7 	.word	0x0800b0c7
 800aacc:	0800b0d4 	.word	0x0800b0d4
 800aad0:	0800b102 	.word	0x0800b102

0800aad4 <_calloc_r>:
 800aad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aad6:	fba1 2402 	umull	r2, r4, r1, r2
 800aada:	b94c      	cbnz	r4, 800aaf0 <_calloc_r+0x1c>
 800aadc:	4611      	mov	r1, r2
 800aade:	9201      	str	r2, [sp, #4]
 800aae0:	f7fe ffcc 	bl	8009a7c <_malloc_r>
 800aae4:	9a01      	ldr	r2, [sp, #4]
 800aae6:	4605      	mov	r5, r0
 800aae8:	b930      	cbnz	r0, 800aaf8 <_calloc_r+0x24>
 800aaea:	4628      	mov	r0, r5
 800aaec:	b003      	add	sp, #12
 800aaee:	bd30      	pop	{r4, r5, pc}
 800aaf0:	220c      	movs	r2, #12
 800aaf2:	6002      	str	r2, [r0, #0]
 800aaf4:	2500      	movs	r5, #0
 800aaf6:	e7f8      	b.n	800aaea <_calloc_r+0x16>
 800aaf8:	4621      	mov	r1, r4
 800aafa:	f7fe f851 	bl	8008ba0 <memset>
 800aafe:	e7f4      	b.n	800aaea <_calloc_r+0x16>

0800ab00 <__ascii_mbtowc>:
 800ab00:	b082      	sub	sp, #8
 800ab02:	b901      	cbnz	r1, 800ab06 <__ascii_mbtowc+0x6>
 800ab04:	a901      	add	r1, sp, #4
 800ab06:	b142      	cbz	r2, 800ab1a <__ascii_mbtowc+0x1a>
 800ab08:	b14b      	cbz	r3, 800ab1e <__ascii_mbtowc+0x1e>
 800ab0a:	7813      	ldrb	r3, [r2, #0]
 800ab0c:	600b      	str	r3, [r1, #0]
 800ab0e:	7812      	ldrb	r2, [r2, #0]
 800ab10:	1e10      	subs	r0, r2, #0
 800ab12:	bf18      	it	ne
 800ab14:	2001      	movne	r0, #1
 800ab16:	b002      	add	sp, #8
 800ab18:	4770      	bx	lr
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	e7fb      	b.n	800ab16 <__ascii_mbtowc+0x16>
 800ab1e:	f06f 0001 	mvn.w	r0, #1
 800ab22:	e7f8      	b.n	800ab16 <__ascii_mbtowc+0x16>

0800ab24 <_realloc_r>:
 800ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab28:	4680      	mov	r8, r0
 800ab2a:	4614      	mov	r4, r2
 800ab2c:	460e      	mov	r6, r1
 800ab2e:	b921      	cbnz	r1, 800ab3a <_realloc_r+0x16>
 800ab30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	4611      	mov	r1, r2
 800ab36:	f7fe bfa1 	b.w	8009a7c <_malloc_r>
 800ab3a:	b92a      	cbnz	r2, 800ab48 <_realloc_r+0x24>
 800ab3c:	f7fe ff2a 	bl	8009994 <_free_r>
 800ab40:	4625      	mov	r5, r4
 800ab42:	4628      	mov	r0, r5
 800ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab48:	f000 f841 	bl	800abce <_malloc_usable_size_r>
 800ab4c:	4284      	cmp	r4, r0
 800ab4e:	4607      	mov	r7, r0
 800ab50:	d802      	bhi.n	800ab58 <_realloc_r+0x34>
 800ab52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab56:	d812      	bhi.n	800ab7e <_realloc_r+0x5a>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	f7fe ff8e 	bl	8009a7c <_malloc_r>
 800ab60:	4605      	mov	r5, r0
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d0ed      	beq.n	800ab42 <_realloc_r+0x1e>
 800ab66:	42bc      	cmp	r4, r7
 800ab68:	4622      	mov	r2, r4
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	bf28      	it	cs
 800ab6e:	463a      	movcs	r2, r7
 800ab70:	f7ff ff84 	bl	800aa7c <memcpy>
 800ab74:	4631      	mov	r1, r6
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7fe ff0c 	bl	8009994 <_free_r>
 800ab7c:	e7e1      	b.n	800ab42 <_realloc_r+0x1e>
 800ab7e:	4635      	mov	r5, r6
 800ab80:	e7df      	b.n	800ab42 <_realloc_r+0x1e>

0800ab82 <__ascii_wctomb>:
 800ab82:	b149      	cbz	r1, 800ab98 <__ascii_wctomb+0x16>
 800ab84:	2aff      	cmp	r2, #255	; 0xff
 800ab86:	bf85      	ittet	hi
 800ab88:	238a      	movhi	r3, #138	; 0x8a
 800ab8a:	6003      	strhi	r3, [r0, #0]
 800ab8c:	700a      	strbls	r2, [r1, #0]
 800ab8e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ab92:	bf98      	it	ls
 800ab94:	2001      	movls	r0, #1
 800ab96:	4770      	bx	lr
 800ab98:	4608      	mov	r0, r1
 800ab9a:	4770      	bx	lr

0800ab9c <fiprintf>:
 800ab9c:	b40e      	push	{r1, r2, r3}
 800ab9e:	b503      	push	{r0, r1, lr}
 800aba0:	4601      	mov	r1, r0
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	4805      	ldr	r0, [pc, #20]	; (800abbc <fiprintf+0x20>)
 800aba6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abaa:	6800      	ldr	r0, [r0, #0]
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	f7ff fcef 	bl	800a590 <_vfiprintf_r>
 800abb2:	b002      	add	sp, #8
 800abb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abb8:	b003      	add	sp, #12
 800abba:	4770      	bx	lr
 800abbc:	2000007c 	.word	0x2000007c

0800abc0 <abort>:
 800abc0:	b508      	push	{r3, lr}
 800abc2:	2006      	movs	r0, #6
 800abc4:	f000 f834 	bl	800ac30 <raise>
 800abc8:	2001      	movs	r0, #1
 800abca:	f7f6 fe3f 	bl	800184c <_exit>

0800abce <_malloc_usable_size_r>:
 800abce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd2:	1f18      	subs	r0, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	bfbc      	itt	lt
 800abd8:	580b      	ldrlt	r3, [r1, r0]
 800abda:	18c0      	addlt	r0, r0, r3
 800abdc:	4770      	bx	lr

0800abde <_raise_r>:
 800abde:	291f      	cmp	r1, #31
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4604      	mov	r4, r0
 800abe4:	460d      	mov	r5, r1
 800abe6:	d904      	bls.n	800abf2 <_raise_r+0x14>
 800abe8:	2316      	movs	r3, #22
 800abea:	6003      	str	r3, [r0, #0]
 800abec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf0:	bd38      	pop	{r3, r4, r5, pc}
 800abf2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800abf4:	b112      	cbz	r2, 800abfc <_raise_r+0x1e>
 800abf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abfa:	b94b      	cbnz	r3, 800ac10 <_raise_r+0x32>
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 f831 	bl	800ac64 <_getpid_r>
 800ac02:	462a      	mov	r2, r5
 800ac04:	4601      	mov	r1, r0
 800ac06:	4620      	mov	r0, r4
 800ac08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac0c:	f000 b818 	b.w	800ac40 <_kill_r>
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d00a      	beq.n	800ac2a <_raise_r+0x4c>
 800ac14:	1c59      	adds	r1, r3, #1
 800ac16:	d103      	bne.n	800ac20 <_raise_r+0x42>
 800ac18:	2316      	movs	r3, #22
 800ac1a:	6003      	str	r3, [r0, #0]
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	e7e7      	b.n	800abf0 <_raise_r+0x12>
 800ac20:	2400      	movs	r4, #0
 800ac22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac26:	4628      	mov	r0, r5
 800ac28:	4798      	blx	r3
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e7e0      	b.n	800abf0 <_raise_r+0x12>
	...

0800ac30 <raise>:
 800ac30:	4b02      	ldr	r3, [pc, #8]	; (800ac3c <raise+0xc>)
 800ac32:	4601      	mov	r1, r0
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	f7ff bfd2 	b.w	800abde <_raise_r>
 800ac3a:	bf00      	nop
 800ac3c:	2000007c 	.word	0x2000007c

0800ac40 <_kill_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d07      	ldr	r5, [pc, #28]	; (800ac60 <_kill_r+0x20>)
 800ac44:	2300      	movs	r3, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	f7f6 fded 	bl	800182c <_kill>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d102      	bne.n	800ac5c <_kill_r+0x1c>
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	b103      	cbz	r3, 800ac5c <_kill_r+0x1c>
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
 800ac5e:	bf00      	nop
 800ac60:	20000b9c 	.word	0x20000b9c

0800ac64 <_getpid_r>:
 800ac64:	f7f6 bdda 	b.w	800181c <_getpid>

0800ac68 <_init>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr

0800ac74 <_fini>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	bf00      	nop
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr
