
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08006bc0  08006bc0  00016bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f5c  08006f5c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000764  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c967  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ef9  00000000  00000000  0002cbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac8  00000000  00000000  0002eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000841  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f3a  00000000  00000000  0002fdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c7fe  00000000  00000000  00053ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5cab  00000000  00000000  000604e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c84  00000000  00000000  00136194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00139e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ba4 	.word	0x08006ba4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08006ba4 	.word	0x08006ba4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to uart debug
int _write(int file, char *ptr, int len) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <_write+0x28>)
 8000edc:	f001 fe80 	bl	8002be0 <HAL_UART_Transmit>
    return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000264 	.word	0x20000264

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fc66 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f818 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 f902 	bl	8001104 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f00:	f000 f8a8 	bl	8001054 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f04:	f000 f8d0 	bl	80010a8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000f08:	f000 f87a 	bl	8001000 <MX_UART4_Init>
	  }
	   */
	  // UART TX ONLY WORKS WHEN USB / DEBUG DISCONNECTED
	  // WITH DEBUGGER, CAN TEST RX
	  // OR - IT SEEMS THAT CONNECTING GND IS ENOUGH
	   HAL_UART_Transmit(&WIFI_UART_HANDLE, (uint8_t*)"CHAU\n", 5, 1000);
 8000f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f10:	2205      	movs	r2, #5
 8000f12:	4904      	ldr	r1, [pc, #16]	; (8000f24 <main+0x34>)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <main+0x38>)
 8000f16:	f001 fe63 	bl	8002be0 <HAL_UART_Transmit>
	   HAL_Delay(1000);
 8000f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1e:	f000 fcc3 	bl	80018a8 <HAL_Delay>
	   HAL_UART_Transmit(&WIFI_UART_HANDLE, (uint8_t*)"CHAU\n", 5, 1000);
 8000f22:	e7f3      	b.n	8000f0c <main+0x1c>
 8000f24:	08006bc0 	.word	0x08006bc0
 8000f28:	200001f0 	.word	0x200001f0

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fee3 	bl	8004d06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa0:	23a8      	movs	r3, #168	; 0xa8
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 f923 	bl	80021fc <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fbc:	f000 f9c6 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2105      	movs	r1, #5
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fb84 	bl	80026ec <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fea:	f000 f9af 	bl	800134c <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	; 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_UART4_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_UART4_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_UART4_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_UART4_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_UART4_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_UART4_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_UART4_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_UART4_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_UART4_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_UART4_Init+0x4c>)
 8001038:	f001 fd78 	bl	8002b2c <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f983 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40004c00 	.word	0x40004c00

08001054 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART3_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART3_UART_Init+0x4c>)
 800108c:	f001 fd4e 	bl	8002b2c <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f000 f959 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000264 	.word	0x20000264
 80010a4:	40004800 	.word	0x40004800

080010a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010bc:	2202      	movs	r2, #2
 80010be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ec:	f000 ff69 	bl	8001fc2 <HAL_PCD_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010f6:	f000 f929 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200002d8 	.word	0x200002d8

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	4b85      	ldr	r3, [pc, #532]	; (8001334 <MX_GPIO_Init+0x230>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a84      	ldr	r2, [pc, #528]	; (8001334 <MX_GPIO_Init+0x230>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <MX_GPIO_Init+0x230>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <MX_GPIO_Init+0x230>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a7d      	ldr	r2, [pc, #500]	; (8001334 <MX_GPIO_Init+0x230>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <MX_GPIO_Init+0x230>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b77      	ldr	r3, [pc, #476]	; (8001334 <MX_GPIO_Init+0x230>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a76      	ldr	r2, [pc, #472]	; (8001334 <MX_GPIO_Init+0x230>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b74      	ldr	r3, [pc, #464]	; (8001334 <MX_GPIO_Init+0x230>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b70      	ldr	r3, [pc, #448]	; (8001334 <MX_GPIO_Init+0x230>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a6f      	ldr	r2, [pc, #444]	; (8001334 <MX_GPIO_Init+0x230>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <MX_GPIO_Init+0x230>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b69      	ldr	r3, [pc, #420]	; (8001334 <MX_GPIO_Init+0x230>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a68      	ldr	r2, [pc, #416]	; (8001334 <MX_GPIO_Init+0x230>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b66      	ldr	r3, [pc, #408]	; (8001334 <MX_GPIO_Init+0x230>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b62      	ldr	r3, [pc, #392]	; (8001334 <MX_GPIO_Init+0x230>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a61      	ldr	r2, [pc, #388]	; (8001334 <MX_GPIO_Init+0x230>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <MX_GPIO_Init+0x230>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80011c8:	485b      	ldr	r0, [pc, #364]	; (8001338 <MX_GPIO_Init+0x234>)
 80011ca:	f000 fee1 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	485a      	ldr	r0, [pc, #360]	; (800133c <MX_GPIO_Init+0x238>)
 80011d4:	f000 fedc 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4854      	ldr	r0, [pc, #336]	; (8001340 <MX_GPIO_Init+0x23c>)
 80011f0:	f000 fd22 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011f4:	2332      	movs	r3, #50	; 0x32
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001204:	230b      	movs	r3, #11
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	484c      	ldr	r0, [pc, #304]	; (8001340 <MX_GPIO_Init+0x23c>)
 8001210:	f000 fd12 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001214:	2386      	movs	r3, #134	; 0x86
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001224:	230b      	movs	r3, #11
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4845      	ldr	r0, [pc, #276]	; (8001344 <MX_GPIO_Init+0x240>)
 8001230:	f000 fd02 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001234:	f244 0381 	movw	r3, #16513	; 0x4081
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	483a      	ldr	r0, [pc, #232]	; (8001338 <MX_GPIO_Init+0x234>)
 800124e:	f000 fcf3 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001264:	230b      	movs	r3, #11
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4832      	ldr	r0, [pc, #200]	; (8001338 <MX_GPIO_Init+0x234>)
 8001270:	f000 fce2 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	482c      	ldr	r0, [pc, #176]	; (800133c <MX_GPIO_Init+0x238>)
 800128c:	f000 fcd4 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4826      	ldr	r0, [pc, #152]	; (800133c <MX_GPIO_Init+0x238>)
 80012a4:	f000 fcc8 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012ba:	2308      	movs	r3, #8
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	481e      	ldr	r0, [pc, #120]	; (8001340 <MX_GPIO_Init+0x23c>)
 80012c6:	f000 fcb7 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ca:	2304      	movs	r3, #4
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012da:	2308      	movs	r3, #8
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4818      	ldr	r0, [pc, #96]	; (8001348 <MX_GPIO_Init+0x244>)
 80012e6:	f000 fca7 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fa:	2307      	movs	r3, #7
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_GPIO_Init+0x244>)
 8001306:	f000 fc97 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800130a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131c:	230b      	movs	r3, #11
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_GPIO_Init+0x238>)
 8001328:	f000 fc86 	bl	8001c38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132c:	bf00      	nop
 800132e:	3730      	adds	r7, #48	; 0x30
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	40021800 	.word	0x40021800
 8001340:	40020800 	.word	0x40020800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020c00 	.word	0x40020c00

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x4c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <HAL_UART_MspInit+0x10c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d135      	bne.n	8001436 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_UART_MspInit+0x110>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a39      	ldr	r2, [pc, #228]	; (80014b8 <HAL_UART_MspInit+0x110>)
 80013d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_UART_MspInit+0x110>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_UART_MspInit+0x110>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_UART_MspInit+0x110>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_UART_MspInit+0x110>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001402:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001414:	2308      	movs	r3, #8
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4827      	ldr	r0, [pc, #156]	; (80014bc <HAL_UART_MspInit+0x114>)
 8001420:	f000 fc0a 	bl	8001c38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2034      	movs	r0, #52	; 0x34
 800142a:	f000 fb3c 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800142e:	2034      	movs	r0, #52	; 0x34
 8001430:	f000 fb55 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001434:	e039      	b.n	80014aa <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_UART_MspInit+0x118>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d134      	bne.n	80014aa <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_UART_MspInit+0x110>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_UART_MspInit+0x110>)
 800144a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0x110>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_UART_MspInit+0x110>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_UART_MspInit+0x110>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_UART_MspInit+0x110>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001478:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800148a:	2307      	movs	r3, #7
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_UART_MspInit+0x11c>)
 8001496:	f000 fbcf 	bl	8001c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2027      	movs	r0, #39	; 0x27
 80014a0:	f000 fb01 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a4:	2027      	movs	r0, #39	; 0x27
 80014a6:	f000 fb1a 	bl	8001ade <HAL_NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004c00 	.word	0x40004c00
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e8:	d13f      	bne.n	800156a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_PCD_MspInit+0xac>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_PCD_MspInit+0xac>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_PCD_MspInit+0xac>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001506:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001518:	230a      	movs	r3, #10
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4815      	ldr	r0, [pc, #84]	; (8001578 <HAL_PCD_MspInit+0xb0>)
 8001524:	f000 fb88 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <HAL_PCD_MspInit+0xb0>)
 800153e:	f000 fb7b 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_PCD_MspInit+0xac>)
 8001544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_PCD_MspInit+0xac>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6353      	str	r3, [r2, #52]	; 0x34
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_PCD_MspInit+0xac>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_PCD_MspInit+0xac>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_PCD_MspInit+0xac>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 f94e 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USART3_IRQHandler+0x10>)
 80015d6:	f001 fb95 	bl	8002d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000264 	.word	0x20000264

080015e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <UART4_IRQHandler+0x10>)
 80015ea:	f001 fb8b 	bl	8002d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001f0 	.word	0x200001f0

080015f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_kill>:

int _kill(int pid, int sig)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001612:	f003 fbcb 	bl	8004dac <__errno>
 8001616:	4603      	mov	r3, r0
 8001618:	2216      	movs	r2, #22
 800161a:	601a      	str	r2, [r3, #0]
  return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_exit>:

void _exit (int status)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffe7 	bl	8001608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800163a:	e7fe      	b.n	800163a <_exit+0x12>

0800163c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
  }

  return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
  return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:

int _isatty(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f003 fb4c 	bl	8004dac <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20030000 	.word	0x20030000
 8001740:	00000400 	.word	0x00000400
 8001744:	200007e4 	.word	0x200007e4
 8001748:	20000938 	.word	0x20000938

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001776:	490e      	ldr	r1, [pc, #56]	; (80017b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800178c:	4c0b      	ldr	r4, [pc, #44]	; (80017bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179a:	f7ff ffd7 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f003 fb0b 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff fba5 	bl	8000ef0 <main>
  bx  lr    
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017b4:	08006f64 	.word	0x08006f64
  ldr r2, =_sbss
 80017b8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017bc:	20000938 	.word	0x20000938

080017c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f94f 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fdae 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f967 	bl	8001afa <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f000 f92f 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000000 	.word	0x20000000
 8001860:	20000008 	.word	0x20000008
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	200007e8 	.word	0x200007e8

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200007e8 	.word	0x200007e8

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <__NVIC_EnableIRQ+0x38>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff29 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff3e 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff31 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff feb6 	bl	8001890 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d008      	beq.n	8001b44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e052      	b.n	8001bea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0216 	bic.w	r2, r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <HAL_DMA_Abort+0x62>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0208 	bic.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b94:	e013      	b.n	8001bbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b96:	f7ff fe7b 	bl	8001890 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d90c      	bls.n	8001bbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e015      	b.n	8001bea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e4      	bne.n	8001b96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	223f      	movs	r2, #63	; 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d004      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00c      	b.n	8001c2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e177      	b.n	8001f44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8166 	bne.w	8001f3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d005      	beq.n	8001c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d017      	beq.n	8001d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80c0 	beq.w	8001f3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a61      	ldr	r2, [pc, #388]	; (8001f60 <HAL_GPIO_Init+0x328>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_GPIO_Init+0x32c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d037      	beq.n	8001e76 <HAL_GPIO_Init+0x23e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <HAL_GPIO_Init+0x330>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d031      	beq.n	8001e72 <HAL_GPIO_Init+0x23a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d02b      	beq.n	8001e6e <HAL_GPIO_Init+0x236>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a55      	ldr	r2, [pc, #340]	; (8001f70 <HAL_GPIO_Init+0x338>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d025      	beq.n	8001e6a <HAL_GPIO_Init+0x232>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a54      	ldr	r2, [pc, #336]	; (8001f74 <HAL_GPIO_Init+0x33c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <HAL_GPIO_Init+0x22e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a53      	ldr	r2, [pc, #332]	; (8001f78 <HAL_GPIO_Init+0x340>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x22a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_GPIO_Init+0x344>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_GPIO_Init+0x348>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x222>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <HAL_GPIO_Init+0x34c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x21e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_GPIO_Init+0x350>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x21a>
 8001e4e:	2309      	movs	r3, #9
 8001e50:	e012      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e52:	230a      	movs	r3, #10
 8001e54:	e010      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e56:	2308      	movs	r3, #8
 8001e58:	e00e      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00c      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e5e:	2306      	movs	r3, #6
 8001e60:	e00a      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e008      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e66:	2304      	movs	r3, #4
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e004      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e76:	2300      	movs	r3, #0
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	f002 0203 	and.w	r2, r2, #3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4093      	lsls	r3, r2
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e88:	4935      	ldr	r1, [pc, #212]	; (8001f60 <HAL_GPIO_Init+0x328>)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eba:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	f67f ae84 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40021800 	.word	0x40021800
 8001f80:	40021c00 	.word	0x40021c00
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40022400 	.word	0x40022400
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc4:	b08f      	sub	sp, #60	; 0x3c
 8001fc6:	af0a      	add	r7, sp, #40	; 0x28
 8001fc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e10f      	b.n	80021f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fa6a 	bl	80014c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fe7d 	bl	8003d12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	687e      	ldr	r6, [r7, #4]
 8002020:	466d      	mov	r5, sp
 8002022:	f106 0410 	add.w	r4, r6, #16
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002032:	e885 0003 	stmia.w	r5, {r0, r1}
 8002036:	1d33      	adds	r3, r6, #4
 8002038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203a:	6838      	ldr	r0, [r7, #0]
 800203c:	f001 fe08 	bl	8003c50 <USB_CoreInit>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0d0      	b.n	80021f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f001 fe6b 	bl	8003d34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e04a      	b.n	80020fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	333d      	adds	r3, #61	; 0x3d
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	333c      	adds	r3, #60	; 0x3c
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	b298      	uxth	r0, r3
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3344      	adds	r3, #68	; 0x44
 80020a0:	4602      	mov	r2, r0
 80020a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3340      	adds	r3, #64	; 0x40
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3348      	adds	r3, #72	; 0x48
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	334c      	adds	r3, #76	; 0x4c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3354      	adds	r3, #84	; 0x54
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3301      	adds	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d3af      	bcc.n	8002064 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e044      	b.n	8002194 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	3301      	adds	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d3b5      	bcc.n	800210a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	687e      	ldr	r6, [r7, #4]
 80021a6:	466d      	mov	r5, sp
 80021a8:	f106 0410 	add.w	r4, r6, #16
 80021ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021bc:	1d33      	adds	r3, r6, #4
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f001 fe03 	bl	8003dcc <USB_DevInit>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e00d      	b.n	80021f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 ffce 	bl	800418e <USB_DevDisconnect>

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e267      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d075      	beq.n	8002306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221a:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b04      	cmp	r3, #4
 8002224:	d00c      	beq.n	8002240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b85      	ldr	r3, [pc, #532]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800222e:	2b08      	cmp	r3, #8
 8002230:	d112      	bne.n	8002258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223e:	d10b      	bne.n	8002258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	4b7e      	ldr	r3, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d05b      	beq.n	8002304 <HAL_RCC_OscConfig+0x108>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d157      	bne.n	8002304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e242      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002260:	d106      	bne.n	8002270 <HAL_RCC_OscConfig+0x74>
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xb0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x98>
 800227a:	4b70      	ldr	r3, [pc, #448]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6f      	ldr	r2, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6c      	ldr	r2, [pc, #432]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xb0>
 8002294:	4b69      	ldr	r3, [pc, #420]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a68      	ldr	r2, [pc, #416]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b66      	ldr	r3, [pc, #408]	; (800243c <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a65      	ldr	r2, [pc, #404]	; (800243c <HAL_RCC_OscConfig+0x240>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff faec 	bl	8001890 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fae8 	bl	8001890 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e207      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b5b      	ldr	r3, [pc, #364]	; (800243c <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xc0>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fad8 	bl	8001890 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fad4 	bl	8001890 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1f3      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b51      	ldr	r3, [pc, #324]	; (800243c <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0xe8>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b44      	ldr	r3, [pc, #272]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x152>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1c7      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4937      	ldr	r1, [pc, #220]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCC_OscConfig+0x244>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7ff fa8d 	bl	8001890 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237a:	f7ff fa89 	bl	8001890 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1a8      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4925      	ldr	r1, [pc, #148]	; (800243c <HAL_RCC_OscConfig+0x240>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_OscConfig+0x244>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7ff fa6c 	bl	8001890 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff fa68 	bl	8001890 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e187      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d036      	beq.n	8002454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d016      	beq.n	800241c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x248>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7ff fa4c 	bl	8001890 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fa48 	bl	8001890 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e167      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x240>)
 8002410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x200>
 800241a:	e01b      	b.n	8002454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_OscConfig+0x248>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff fa35 	bl	8001890 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	e00e      	b.n	8002448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242a:	f7ff fa31 	bl	8001890 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d907      	bls.n	8002448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e150      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
 800243c:	40023800 	.word	0x40023800
 8002440:	42470000 	.word	0x42470000
 8002444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ea      	bne.n	800242a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8097 	beq.w	8002590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b7d      	ldr	r3, [pc, #500]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a7c      	ldr	r2, [pc, #496]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b7a      	ldr	r3, [pc, #488]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b77      	ldr	r3, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x474>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b74      	ldr	r3, [pc, #464]	; (8002670 <HAL_RCC_OscConfig+0x474>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a73      	ldr	r2, [pc, #460]	; (8002670 <HAL_RCC_OscConfig+0x474>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7ff f9f1 	bl	8001890 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff f9ed 	bl	8001890 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e10c      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x474>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2ea>
 80024d8:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_RCC_OscConfig+0x470>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a63      	ldr	r2, [pc, #396]	; (800266c <HAL_RCC_OscConfig+0x470>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	e01c      	b.n	8002520 <HAL_RCC_OscConfig+0x324>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x30c>
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5e      	ldr	r2, [pc, #376]	; (800266c <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a5b      	ldr	r2, [pc, #364]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0x324>
 8002508:	4b58      	ldr	r3, [pc, #352]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a57      	ldr	r2, [pc, #348]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
 8002514:	4b55      	ldr	r3, [pc, #340]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a54      	ldr	r2, [pc, #336]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 0304 	bic.w	r3, r3, #4
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7ff f9b2 	bl	8001890 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7ff f9ae 	bl	8001890 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0cb      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ee      	beq.n	8002530 <HAL_RCC_OscConfig+0x334>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff f99c 	bl	8001890 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7ff f998 	bl	8001890 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0b5      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ee      	bne.n	800255c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	4a38      	ldr	r2, [pc, #224]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a1 	beq.w	80026dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x470>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d05c      	beq.n	8002660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d141      	bne.n	8002632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_OscConfig+0x478>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff f96c 	bl	8001890 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7ff f968 	bl	8001890 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e087      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x470>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	491b      	ldr	r1, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x478>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7ff f941 	bl	8001890 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7ff f93d 	bl	8001890 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e05c      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x416>
 8002630:	e054      	b.n	80026dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_OscConfig+0x478>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff f92a 	bl	8001890 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff f926 	bl	8001890 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e045      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_OscConfig+0x470>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x444>
 800265e:	e03d      	b.n	80026dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e038      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
 800266c:	40023800 	.word	0x40023800
 8002670:	40007000 	.word	0x40007000
 8002674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x4ec>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d028      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d121      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d11a      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d111      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0cc      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d90c      	bls.n	8002728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0b8      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002740:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a52      	ldr	r2, [pc, #328]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	494d      	ldr	r1, [pc, #308]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d044      	beq.n	800280c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b47      	ldr	r3, [pc, #284]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d119      	bne.n	80027ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e07f      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06f      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e067      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ca:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f023 0203 	bic.w	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4934      	ldr	r1, [pc, #208]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027dc:	f7ff f858 	bl	8001890 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7ff f854 	bl	8001890 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e04f      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 020c 	and.w	r2, r3, #12
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	429a      	cmp	r2, r3
 800280a:	d1eb      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d20c      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e032      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4916      	ldr	r1, [pc, #88]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	490e      	ldr	r1, [pc, #56]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002872:	f000 f821 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002876:	4602      	mov	r2, r0
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	490a      	ldr	r1, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	5ccb      	ldrb	r3, [r1, r3]
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe ffb8 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023c00 	.word	0x40023c00
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08006bc8 	.word	0x08006bc8
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028bc:	b094      	sub	sp, #80	; 0x50
 80028be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
 80028c4:	2300      	movs	r3, #0
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c8:	2300      	movs	r3, #0
 80028ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d00d      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x40>
 80028dc:	2b08      	cmp	r3, #8
 80028de:	f200 80e1 	bhi.w	8002aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x34>
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d003      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ea:	e0db      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b73      	ldr	r3, [pc, #460]	; (8002abc <HAL_RCC_GetSysClockFreq+0x204>)
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028f0:	e0db      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f2:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028f6:	e0d8      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	2200      	movs	r2, #0
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
 8002918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800292a:	4622      	mov	r2, r4
 800292c:	462b      	mov	r3, r5
 800292e:	f04f 0000 	mov.w	r0, #0
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	0159      	lsls	r1, r3, #5
 8002938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293c:	0150      	lsls	r0, r2, #5
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4621      	mov	r1, r4
 8002944:	1a51      	subs	r1, r2, r1
 8002946:	6139      	str	r1, [r7, #16]
 8002948:	4629      	mov	r1, r5
 800294a:	eb63 0301 	sbc.w	r3, r3, r1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800295c:	4659      	mov	r1, fp
 800295e:	018b      	lsls	r3, r1, #6
 8002960:	4651      	mov	r1, sl
 8002962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002966:	4651      	mov	r1, sl
 8002968:	018a      	lsls	r2, r1, #6
 800296a:	4651      	mov	r1, sl
 800296c:	ebb2 0801 	subs.w	r8, r2, r1
 8002970:	4659      	mov	r1, fp
 8002972:	eb63 0901 	sbc.w	r9, r3, r1
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298a:	4690      	mov	r8, r2
 800298c:	4699      	mov	r9, r3
 800298e:	4623      	mov	r3, r4
 8002990:	eb18 0303 	adds.w	r3, r8, r3
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	462b      	mov	r3, r5
 8002998:	eb49 0303 	adc.w	r3, r9, r3
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029aa:	4629      	mov	r1, r5
 80029ac:	024b      	lsls	r3, r1, #9
 80029ae:	4621      	mov	r1, r4
 80029b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b4:	4621      	mov	r1, r4
 80029b6:	024a      	lsls	r2, r1, #9
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029be:	2200      	movs	r2, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029c8:	f7fe f8fe 	bl	8000bc8 <__aeabi_uldivmod>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4613      	mov	r3, r2
 80029d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d4:	e058      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d6:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	099b      	lsrs	r3, r3, #6
 80029dc:	2200      	movs	r2, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	4611      	mov	r1, r2
 80029e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029f0:	4642      	mov	r2, r8
 80029f2:	464b      	mov	r3, r9
 80029f4:	f04f 0000 	mov.w	r0, #0
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	0159      	lsls	r1, r3, #5
 80029fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a02:	0150      	lsls	r0, r2, #5
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a0e:	4649      	mov	r1, r9
 8002a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a28:	ebb2 040a 	subs.w	r4, r2, sl
 8002a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	00eb      	lsls	r3, r5, #3
 8002a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3e:	00e2      	lsls	r2, r4, #3
 8002a40:	4614      	mov	r4, r2
 8002a42:	461d      	mov	r5, r3
 8002a44:	4643      	mov	r3, r8
 8002a46:	18e3      	adds	r3, r4, r3
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	eb45 0303 	adc.w	r3, r5, r3
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a5e:	4629      	mov	r1, r5
 8002a60:	028b      	lsls	r3, r1, #10
 8002a62:	4621      	mov	r1, r4
 8002a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a68:	4621      	mov	r1, r4
 8002a6a:	028a      	lsls	r2, r1, #10
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a72:	2200      	movs	r2, #0
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	61fa      	str	r2, [r7, #28]
 8002a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a7c:	f7fe f8a4 	bl	8000bc8 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4613      	mov	r3, r2
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	3301      	adds	r3, #1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa2:	e002      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetSysClockFreq+0x204>)
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3750      	adds	r7, #80	; 0x50
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0a9b      	lsrs	r3, r3, #10
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08006bd8 	.word	0x08006bd8

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b08:	f7ff ffdc 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0b5b      	lsrs	r3, r3, #13
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08006bd8 	.word	0x08006bd8

08002b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e04a      	b.n	8002bd4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d111      	bne.n	8002b6e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fbc4 	bl	80032e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_UART_Init+0xb0>)
 8002b64:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2224      	movs	r2, #36	; 0x24
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fdee 	bl	8003768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002baa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	080013a9 	.word	0x080013a9

08002be0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d17c      	bne.n	8002cfa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_UART_Transmit+0x2c>
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e075      	b.n	8002cfc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Transmit+0x3e>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e06e      	b.n	8002cfc <HAL_UART_Transmit+0x11c>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2221      	movs	r2, #33	; 0x21
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fe2c 	bl	8001890 <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	d108      	bne.n	8002c62 <HAL_UART_Transmit+0x82>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e003      	b.n	8002c6a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c72:	e02a      	b.n	8002cca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fb66 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e036      	b.n	8002cfc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e007      	b.n	8002cbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1cf      	bne.n	8002c74 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fb36 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e006      	b.n	8002cfc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
  }
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b0ba      	sub	sp, #232	; 0xe8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_UART_IRQHandler+0x66>
 8002d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fc43 	bl	80035ee <UART_Receive_IT>
      return;
 8002d68:	e25b      	b.n	8003222 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80e1 	beq.w	8002f36 <HAL_UART_IRQHandler+0x232>
 8002d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80d4 	beq.w	8002f36 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_UART_IRQHandler+0xae>
 8002d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_UART_IRQHandler+0xd2>
 8002dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_UART_IRQHandler+0xf6>
 8002de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0204 	orr.w	r2, r3, #4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d011      	beq.n	8002e2a <HAL_UART_IRQHandler+0x126>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0208 	orr.w	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 81f2 	beq.w	8003218 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_UART_IRQHandler+0x14e>
 8002e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fbce 	bl	80035ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <HAL_UART_IRQHandler+0x17a>
 8002e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d051      	beq.n	8002f22 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fad4 	bl	800342c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d142      	bne.n	8002f18 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3314      	adds	r3, #20
 8002eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1d9      	bne.n	8002e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d013      	beq.n	8002f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <HAL_UART_IRQHandler+0x3e4>)
 8002eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fe7d 	bl	8001bf2 <HAL_DMA_Abort_IT>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d019      	beq.n	8002f32 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	e011      	b.n	8002f32 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f16:	e00c      	b.n	8002f32 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e007      	b.n	8002f32 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f30:	e172      	b.n	8003218 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f32:	bf00      	nop
    return;
 8002f34:	e170      	b.n	8003218 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	f040 814c 	bne.w	80031d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8145 	beq.w	80031d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 813e 	beq.w	80031d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	f040 80b5 	bne.w	80030ec <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8142 	beq.w	800321c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f080 813b 	bcs.w	800321c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	f000 8088 	beq.w	80030cc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fe8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1d9      	bne.n	8002fbc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800302c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003030:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003034:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800303e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e1      	bne.n	8003008 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3314      	adds	r3, #20
 800304a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003068:	66fa      	str	r2, [r7, #108]	; 0x6c
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800306e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e3      	bne.n	8003044 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	f023 0310 	bic.w	r3, r3, #16
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80030b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fd23 	bl	8001b12 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80030d8:	b292      	uxth	r2, r2
 80030da:	1a8a      	subs	r2, r1, r2
 80030dc:	b292      	uxth	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e4:	e09a      	b.n	800321c <HAL_UART_IRQHandler+0x518>
 80030e6:	bf00      	nop
 80030e8:	080034f3 	.word	0x080034f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 808c 	beq.w	8003220 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8087 	beq.w	8003220 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003136:	647a      	str	r2, [r7, #68]	; 0x44
 8003138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800313c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e3      	bne.n	8003112 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	623b      	str	r3, [r7, #32]
   return(result);
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800316e:	633a      	str	r2, [r7, #48]	; 0x30
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e3      	bne.n	800314a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0310 	bic.w	r3, r3, #16
 80031a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031b4:	61fa      	str	r2, [r7, #28]
 80031b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	617b      	str	r3, [r7, #20]
   return(result);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e3      	bne.n	8003190 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031cc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80031d0:	4611      	mov	r1, r2
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d6:	e023      	b.n	8003220 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_UART_IRQHandler+0x4f4>
 80031e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f993 	bl	800351c <UART_Transmit_IT>
    return;
 80031f6:	e014      	b.n	8003222 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <HAL_UART_IRQHandler+0x51e>
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f9d3 	bl	80035bc <UART_EndTransmit_IT>
    return;
 8003216:	e004      	b.n	8003222 <HAL_UART_IRQHandler+0x51e>
    return;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_UART_IRQHandler+0x51e>
      return;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_UART_IRQHandler+0x51e>
      return;
 8003220:	bf00      	nop
  }
}
 8003222:	37e8      	adds	r7, #232	; 0xe8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <UART_InitCallbacksToDefault+0x4c>)
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <UART_InitCallbacksToDefault+0x50>)
 80032f2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <UART_InitCallbacksToDefault+0x54>)
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <UART_InitCallbacksToDefault+0x58>)
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <UART_InitCallbacksToDefault+0x5c>)
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <UART_InitCallbacksToDefault+0x60>)
 800330a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <UART_InitCallbacksToDefault+0x64>)
 8003310:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <UART_InitCallbacksToDefault+0x68>)
 8003316:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <UART_InitCallbacksToDefault+0x6c>)
 800331c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	0800323d 	.word	0x0800323d
 8003330:	08003229 	.word	0x08003229
 8003334:	08003265 	.word	0x08003265
 8003338:	08003251 	.word	0x08003251
 800333c:	08003279 	.word	0x08003279
 8003340:	0800328d 	.word	0x0800328d
 8003344:	080032a1 	.word	0x080032a1
 8003348:	080032b5 	.word	0x080032b5
 800334c:	080032c9 	.word	0x080032c9

08003350 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b090      	sub	sp, #64	; 0x40
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003360:	e050      	b.n	8003404 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003368:	d04c      	beq.n	8003404 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800336a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x30>
 8003370:	f7fe fa8e 	bl	8001890 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337c:	429a      	cmp	r2, r3
 800337e:	d241      	bcs.n	8003404 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a0:	637a      	str	r2, [r7, #52]	; 0x34
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	613b      	str	r3, [r7, #16]
   return(result);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d4:	623a      	str	r2, [r7, #32]
 80033d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	69f9      	ldr	r1, [r7, #28]
 80033da:	6a3a      	ldr	r2, [r7, #32]
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e00f      	b.n	8003424 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d09f      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3740      	adds	r7, #64	; 0x40
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b095      	sub	sp, #84	; 0x54
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003454:	643a      	str	r2, [r7, #64]	; 0x40
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800345a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3314      	adds	r3, #20
 800346e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	61fb      	str	r3, [r7, #28]
   return(result);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d119      	bne.n	80034d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034c4:	61ba      	str	r2, [r7, #24]
 80034c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6979      	ldr	r1, [r7, #20]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	613b      	str	r3, [r7, #16]
   return(result);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e5      	bne.n	80034a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034e6:	bf00      	nop
 80034e8:	3754      	adds	r7, #84	; 0x54
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b21      	cmp	r3, #33	; 0x21
 800352e:	d13e      	bne.n	80035ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d114      	bne.n	8003564 <UART_Transmit_IT+0x48>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d110      	bne.n	8003564 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003556:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	1c9a      	adds	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	621a      	str	r2, [r3, #32]
 8003562:	e008      	b.n	8003576 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	1c59      	adds	r1, r3, #1
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6211      	str	r1, [r2, #32]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4619      	mov	r1, r3
 8003584:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003598:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b08c      	sub	sp, #48	; 0x30
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b22      	cmp	r3, #34	; 0x22
 8003600:	f040 80ad 	bne.w	800375e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d117      	bne.n	800363e <UART_Receive_IT+0x50>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d113      	bne.n	800363e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362c:	b29a      	uxth	r2, r3
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	1c9a      	adds	r2, r3, #2
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
 800363c:	e026      	b.n	800368c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003650:	d007      	beq.n	8003662 <UART_Receive_IT+0x74>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <UART_Receive_IT+0x82>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e008      	b.n	8003682 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367c:	b2da      	uxtb	r2, r3
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4619      	mov	r1, r3
 800369a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800369c:	2b00      	cmp	r3, #0
 800369e:	d15c      	bne.n	800375a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0220 	bic.w	r2, r2, #32
 80036ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d136      	bne.n	800374e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	613b      	str	r3, [r7, #16]
   return(result);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f023 0310 	bic.w	r3, r3, #16
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003706:	623a      	str	r2, [r7, #32]
 8003708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	69f9      	ldr	r1, [r7, #28]
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	61bb      	str	r3, [r7, #24]
   return(result);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d10a      	bne.n	800373e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003746:	4611      	mov	r1, r2
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
 800374c:	e003      	b.n	8003756 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e002      	b.n	8003760 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3730      	adds	r7, #48	; 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b0c0      	sub	sp, #256	; 0x100
 800376e:	af00      	add	r7, sp, #0
 8003770:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	ea40 0301 	orr.w	r3, r0, r1
 8003790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037c0:	f021 010c 	bic.w	r1, r1, #12
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ce:	430b      	orrs	r3, r1
 80037d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	6999      	ldr	r1, [r3, #24]
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	ea40 0301 	orr.w	r3, r0, r1
 80037ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b8f      	ldr	r3, [pc, #572]	; (8003a34 <UART_SetConfig+0x2cc>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d005      	beq.n	8003808 <UART_SetConfig+0xa0>
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b8d      	ldr	r3, [pc, #564]	; (8003a38 <UART_SetConfig+0x2d0>)
 8003804:	429a      	cmp	r2, r3
 8003806:	d104      	bne.n	8003812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7ff f97c 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 800380c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003810:	e003      	b.n	800381a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003812:	f7ff f963 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8003816:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	f040 810c 	bne.w	8003a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003832:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	1891      	adds	r1, r2, r2
 8003840:	65b9      	str	r1, [r7, #88]	; 0x58
 8003842:	415b      	adcs	r3, r3
 8003844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800384a:	4621      	mov	r1, r4
 800384c:	eb12 0801 	adds.w	r8, r2, r1
 8003850:	4629      	mov	r1, r5
 8003852:	eb43 0901 	adc.w	r9, r3, r1
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386a:	4690      	mov	r8, r2
 800386c:	4699      	mov	r9, r3
 800386e:	4623      	mov	r3, r4
 8003870:	eb18 0303 	adds.w	r3, r8, r3
 8003874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003878:	462b      	mov	r3, r5
 800387a:	eb49 0303 	adc.w	r3, r9, r3
 800387e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800388e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003896:	460b      	mov	r3, r1
 8003898:	18db      	adds	r3, r3, r3
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
 800389c:	4613      	mov	r3, r2
 800389e:	eb42 0303 	adc.w	r3, r2, r3
 80038a2:	657b      	str	r3, [r7, #84]	; 0x54
 80038a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038ac:	f7fd f98c 	bl	8000bc8 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <UART_SetConfig+0x2d4>)
 80038b6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	011c      	lsls	r4, r3, #4
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038d8:	415b      	adcs	r3, r3
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038e0:	4641      	mov	r1, r8
 80038e2:	eb12 0a01 	adds.w	sl, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb43 0b01 	adc.w	fp, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003900:	4692      	mov	sl, r2
 8003902:	469b      	mov	fp, r3
 8003904:	4643      	mov	r3, r8
 8003906:	eb1a 0303 	adds.w	r3, sl, r3
 800390a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800390e:	464b      	mov	r3, r9
 8003910:	eb4b 0303 	adc.w	r3, fp, r3
 8003914:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003924:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800392c:	460b      	mov	r3, r1
 800392e:	18db      	adds	r3, r3, r3
 8003930:	643b      	str	r3, [r7, #64]	; 0x40
 8003932:	4613      	mov	r3, r2
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
 800393a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800393e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003942:	f7fd f941 	bl	8000bc8 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4611      	mov	r1, r2
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <UART_SetConfig+0x2d4>)
 800394e:	fba3 2301 	umull	r2, r3, r3, r1
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2264      	movs	r2, #100	; 0x64
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	1acb      	subs	r3, r1, r3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003964:	fba3 2302 	umull	r2, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003970:	441c      	add	r4, r3
 8003972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003976:	2200      	movs	r2, #0
 8003978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800397c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003984:	4642      	mov	r2, r8
 8003986:	464b      	mov	r3, r9
 8003988:	1891      	adds	r1, r2, r2
 800398a:	63b9      	str	r1, [r7, #56]	; 0x38
 800398c:	415b      	adcs	r3, r3
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003994:	4641      	mov	r1, r8
 8003996:	1851      	adds	r1, r2, r1
 8003998:	6339      	str	r1, [r7, #48]	; 0x30
 800399a:	4649      	mov	r1, r9
 800399c:	414b      	adcs	r3, r1
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039ac:	4659      	mov	r1, fp
 80039ae:	00cb      	lsls	r3, r1, #3
 80039b0:	4651      	mov	r1, sl
 80039b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b6:	4651      	mov	r1, sl
 80039b8:	00ca      	lsls	r2, r1, #3
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	4642      	mov	r2, r8
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c8:	464b      	mov	r3, r9
 80039ca:	460a      	mov	r2, r1
 80039cc:	eb42 0303 	adc.w	r3, r2, r3
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039e8:	460b      	mov	r3, r1
 80039ea:	18db      	adds	r3, r3, r3
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	4613      	mov	r3, r2
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039fe:	f7fd f8e3 	bl	8000bc8 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 0207 	and.w	r2, r3, #7
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4422      	add	r2, r4
 8003a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a30:	e106      	b.n	8003c40 <UART_SetConfig+0x4d8>
 8003a32:	bf00      	nop
 8003a34:	40011000 	.word	0x40011000
 8003a38:	40011400 	.word	0x40011400
 8003a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a52:	4642      	mov	r2, r8
 8003a54:	464b      	mov	r3, r9
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	6239      	str	r1, [r7, #32]
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a62:	4641      	mov	r1, r8
 8003a64:	1854      	adds	r4, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb43 0501 	adc.w	r5, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	00eb      	lsls	r3, r5, #3
 8003a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7a:	00e2      	lsls	r2, r4, #3
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	4643      	mov	r3, r8
 8003a82:	18e3      	adds	r3, r4, r3
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a88:	464b      	mov	r3, r9
 8003a8a:	eb45 0303 	adc.w	r3, r5, r3
 8003a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aae:	4629      	mov	r1, r5
 8003ab0:	008b      	lsls	r3, r1, #2
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab8:	4621      	mov	r1, r4
 8003aba:	008a      	lsls	r2, r1, #2
 8003abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ac0:	f7fd f882 	bl	8000bc8 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	011c      	lsls	r4, r3, #4
 8003ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	61b9      	str	r1, [r7, #24]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6139      	str	r1, [r7, #16]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b28:	464b      	mov	r3, r9
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	008b      	lsls	r3, r1, #2
 8003b50:	4641      	mov	r1, r8
 8003b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b56:	4641      	mov	r1, r8
 8003b58:	008a      	lsls	r2, r1, #2
 8003b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b5e:	f7fd f833 	bl	8000bc8 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	2264      	movs	r2, #100	; 0x64
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	1acb      	subs	r3, r1, r3
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	3332      	adds	r3, #50	; 0x32
 8003b7c:	4a33      	ldr	r2, [pc, #204]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	441c      	add	r4, r3
 8003b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8e:	2200      	movs	r2, #0
 8003b90:	673b      	str	r3, [r7, #112]	; 0x70
 8003b92:	677a      	str	r2, [r7, #116]	; 0x74
 8003b94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba8:	4641      	mov	r1, r8
 8003baa:	1851      	adds	r1, r2, r1
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	4649      	mov	r1, r9
 8003bb0:	414b      	adcs	r3, r1
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	00cb      	lsls	r3, r1, #3
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bca:	4651      	mov	r1, sl
 8003bcc:	00ca      	lsls	r2, r1, #3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bda:	464b      	mov	r3, r9
 8003bdc:	460a      	mov	r2, r1
 8003bde:	eb42 0303 	adc.w	r3, r2, r3
 8003be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
 8003bee:	667a      	str	r2, [r7, #100]	; 0x64
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	008b      	lsls	r3, r1, #2
 8003c00:	4641      	mov	r1, r8
 8003c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c06:	4641      	mov	r1, r8
 8003c08:	008a      	lsls	r2, r1, #2
 8003c0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c0e:	f7fc ffdb 	bl	8000bc8 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003c18:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	2164      	movs	r1, #100	; 0x64
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	3332      	adds	r3, #50	; 0x32
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	f003 020f 	and.w	r2, r3, #15
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4422      	add	r2, r4
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	bf00      	nop
 8003c42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c50:	b084      	sub	sp, #16
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	f107 001c 	add.w	r0, r7, #28
 8003c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d122      	bne.n	8003cae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 faa2 	bl	80041ec <USB_CoreReset>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e01a      	b.n	8003ce4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa96 	bl	80041ec <USB_CoreReset>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd6:	e005      	b.n	8003ce4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10b      	bne.n	8003d02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f043 0206 	orr.w	r2, r3, #6
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d0e:	b004      	add	sp, #16
 8003d10:	4770      	bx	lr

08003d12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d115      	bne.n	8003d82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7fd fda0 	bl	80018a8 <HAL_Delay>
      ms++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fa2e 	bl	80041d0 <USB_GetMode>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d01e      	beq.n	8003db8 <USB_SetCurrentMode+0x84>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b31      	cmp	r3, #49	; 0x31
 8003d7e:	d9f0      	bls.n	8003d62 <USB_SetCurrentMode+0x2e>
 8003d80:	e01a      	b.n	8003db8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d115      	bne.n	8003db4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d94:	2001      	movs	r0, #1
 8003d96:	f7fd fd87 	bl	80018a8 <HAL_Delay>
      ms++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa15 	bl	80041d0 <USB_GetMode>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <USB_SetCurrentMode+0x84>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b31      	cmp	r3, #49	; 0x31
 8003db0:	d9f0      	bls.n	8003d94 <USB_SetCurrentMode+0x60>
 8003db2:	e001      	b.n	8003db8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e005      	b.n	8003dc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b32      	cmp	r3, #50	; 0x32
 8003dbc:	d101      	bne.n	8003dc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dcc:	b084      	sub	sp, #16
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	e009      	b.n	8003e00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3340      	adds	r3, #64	; 0x40
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b0e      	cmp	r3, #14
 8003e04:	d9f2      	bls.n	8003dec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11c      	bne.n	8003e46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
 8003e44:	e00b      	b.n	8003e5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e64:	461a      	mov	r2, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e70:	4619      	mov	r1, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	461a      	mov	r2, r3
 8003e7a:	680b      	ldr	r3, [r1, #0]
 8003e7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10c      	bne.n	8003e9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f965 	bl	800415c <USB_SetDevSpeed>
 8003e92:	e008      	b.n	8003ea6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e94:	2101      	movs	r1, #1
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f960 	bl	800415c <USB_SetDevSpeed>
 8003e9c:	e003      	b.n	8003ea6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f95b 	bl	800415c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ea6:	2110      	movs	r1, #16
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f8f3 	bl	8004094 <USB_FlushTxFifo>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f91f 	bl	80040fc <USB_FlushRxFifo>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	461a      	mov	r2, r3
 8003edc:	2300      	movs	r3, #0
 8003ede:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e043      	b.n	8003f7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f08:	d118      	bne.n	8003f3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e013      	b.n	8003f4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	461a      	mov	r2, r3
 8003f34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e008      	b.n	8003f4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	3301      	adds	r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3b7      	bcc.n	8003ef2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	e043      	b.n	8004010 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9e:	d118      	bne.n	8003fd2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e013      	b.n	8003fe4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e008      	b.n	8003fe4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	461a      	mov	r2, r3
 8004004:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004008:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3301      	adds	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d3b7      	bcc.n	8003f88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004038:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f043 0210 	orr.w	r2, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <USB_DevInit+0x2c4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f043 0208 	orr.w	r2, r3, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800406a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800408c:	b004      	add	sp, #16
 800408e:	4770      	bx	lr
 8004090:	803c3800 	.word	0x803c3800

08004094 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <USB_FlushTxFifo+0x64>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e01b      	b.n	80040ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	daf2      	bge.n	80040a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	019b      	lsls	r3, r3, #6
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <USB_FlushTxFifo+0x64>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e006      	b.n	80040ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d0f0      	beq.n	80040cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	00030d40 	.word	0x00030d40

080040fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a11      	ldr	r2, [pc, #68]	; (8004158 <USB_FlushRxFifo+0x5c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e018      	b.n	800414c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	daf2      	bge.n	8004108 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2210      	movs	r2, #16
 800412a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a08      	ldr	r2, [pc, #32]	; (8004158 <USB_FlushRxFifo+0x5c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e006      	b.n	800414c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b10      	cmp	r3, #16
 8004148:	d0f0      	beq.n	800412c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	00030d40 	.word	0x00030d40

0800415c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041a8:	f023 0303 	bic.w	r3, r3, #3
 80041ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0301 	and.w	r3, r3, #1
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <USB_CoreReset+0x64>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e01b      	b.n	8004242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	daf2      	bge.n	80041f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <USB_CoreReset+0x64>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d0f0      	beq.n	8004222 <USB_CoreReset+0x36>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	00030d40 	.word	0x00030d40

08004254 <__cvt>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	ec55 4b10 	vmov	r4, r5, d0
 800425c:	2d00      	cmp	r5, #0
 800425e:	460e      	mov	r6, r1
 8004260:	4619      	mov	r1, r3
 8004262:	462b      	mov	r3, r5
 8004264:	bfbb      	ittet	lt
 8004266:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800426a:	461d      	movlt	r5, r3
 800426c:	2300      	movge	r3, #0
 800426e:	232d      	movlt	r3, #45	; 0x2d
 8004270:	700b      	strb	r3, [r1, #0]
 8004272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004278:	4691      	mov	r9, r2
 800427a:	f023 0820 	bic.w	r8, r3, #32
 800427e:	bfbc      	itt	lt
 8004280:	4622      	movlt	r2, r4
 8004282:	4614      	movlt	r4, r2
 8004284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004288:	d005      	beq.n	8004296 <__cvt+0x42>
 800428a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800428e:	d100      	bne.n	8004292 <__cvt+0x3e>
 8004290:	3601      	adds	r6, #1
 8004292:	2102      	movs	r1, #2
 8004294:	e000      	b.n	8004298 <__cvt+0x44>
 8004296:	2103      	movs	r1, #3
 8004298:	ab03      	add	r3, sp, #12
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	ab02      	add	r3, sp, #8
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	ec45 4b10 	vmov	d0, r4, r5
 80042a4:	4653      	mov	r3, sl
 80042a6:	4632      	mov	r2, r6
 80042a8:	f000 fe42 	bl	8004f30 <_dtoa_r>
 80042ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042b0:	4607      	mov	r7, r0
 80042b2:	d102      	bne.n	80042ba <__cvt+0x66>
 80042b4:	f019 0f01 	tst.w	r9, #1
 80042b8:	d022      	beq.n	8004300 <__cvt+0xac>
 80042ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042be:	eb07 0906 	add.w	r9, r7, r6
 80042c2:	d110      	bne.n	80042e6 <__cvt+0x92>
 80042c4:	783b      	ldrb	r3, [r7, #0]
 80042c6:	2b30      	cmp	r3, #48	; 0x30
 80042c8:	d10a      	bne.n	80042e0 <__cvt+0x8c>
 80042ca:	2200      	movs	r2, #0
 80042cc:	2300      	movs	r3, #0
 80042ce:	4620      	mov	r0, r4
 80042d0:	4629      	mov	r1, r5
 80042d2:	f7fc fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 80042d6:	b918      	cbnz	r0, 80042e0 <__cvt+0x8c>
 80042d8:	f1c6 0601 	rsb	r6, r6, #1
 80042dc:	f8ca 6000 	str.w	r6, [sl]
 80042e0:	f8da 3000 	ldr.w	r3, [sl]
 80042e4:	4499      	add	r9, r3
 80042e6:	2200      	movs	r2, #0
 80042e8:	2300      	movs	r3, #0
 80042ea:	4620      	mov	r0, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	f7fc fbfb 	bl	8000ae8 <__aeabi_dcmpeq>
 80042f2:	b108      	cbz	r0, 80042f8 <__cvt+0xa4>
 80042f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042f8:	2230      	movs	r2, #48	; 0x30
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	454b      	cmp	r3, r9
 80042fe:	d307      	bcc.n	8004310 <__cvt+0xbc>
 8004300:	9b03      	ldr	r3, [sp, #12]
 8004302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004304:	1bdb      	subs	r3, r3, r7
 8004306:	4638      	mov	r0, r7
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	b004      	add	sp, #16
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	1c59      	adds	r1, r3, #1
 8004312:	9103      	str	r1, [sp, #12]
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e7f0      	b.n	80042fa <__cvt+0xa6>

08004318 <__exponent>:
 8004318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800431a:	4603      	mov	r3, r0
 800431c:	2900      	cmp	r1, #0
 800431e:	bfb8      	it	lt
 8004320:	4249      	neglt	r1, r1
 8004322:	f803 2b02 	strb.w	r2, [r3], #2
 8004326:	bfb4      	ite	lt
 8004328:	222d      	movlt	r2, #45	; 0x2d
 800432a:	222b      	movge	r2, #43	; 0x2b
 800432c:	2909      	cmp	r1, #9
 800432e:	7042      	strb	r2, [r0, #1]
 8004330:	dd2a      	ble.n	8004388 <__exponent+0x70>
 8004332:	f10d 0207 	add.w	r2, sp, #7
 8004336:	4617      	mov	r7, r2
 8004338:	260a      	movs	r6, #10
 800433a:	4694      	mov	ip, r2
 800433c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004340:	fb06 1415 	mls	r4, r6, r5, r1
 8004344:	3430      	adds	r4, #48	; 0x30
 8004346:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800434a:	460c      	mov	r4, r1
 800434c:	2c63      	cmp	r4, #99	; 0x63
 800434e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004352:	4629      	mov	r1, r5
 8004354:	dcf1      	bgt.n	800433a <__exponent+0x22>
 8004356:	3130      	adds	r1, #48	; 0x30
 8004358:	f1ac 0402 	sub.w	r4, ip, #2
 800435c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004360:	1c41      	adds	r1, r0, #1
 8004362:	4622      	mov	r2, r4
 8004364:	42ba      	cmp	r2, r7
 8004366:	d30a      	bcc.n	800437e <__exponent+0x66>
 8004368:	f10d 0209 	add.w	r2, sp, #9
 800436c:	eba2 020c 	sub.w	r2, r2, ip
 8004370:	42bc      	cmp	r4, r7
 8004372:	bf88      	it	hi
 8004374:	2200      	movhi	r2, #0
 8004376:	4413      	add	r3, r2
 8004378:	1a18      	subs	r0, r3, r0
 800437a:	b003      	add	sp, #12
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004382:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004386:	e7ed      	b.n	8004364 <__exponent+0x4c>
 8004388:	2330      	movs	r3, #48	; 0x30
 800438a:	3130      	adds	r1, #48	; 0x30
 800438c:	7083      	strb	r3, [r0, #2]
 800438e:	70c1      	strb	r1, [r0, #3]
 8004390:	1d03      	adds	r3, r0, #4
 8004392:	e7f1      	b.n	8004378 <__exponent+0x60>

08004394 <_printf_float>:
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004398:	ed2d 8b02 	vpush	{d8}
 800439c:	b08d      	sub	sp, #52	; 0x34
 800439e:	460c      	mov	r4, r1
 80043a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043a4:	4616      	mov	r6, r2
 80043a6:	461f      	mov	r7, r3
 80043a8:	4605      	mov	r5, r0
 80043aa:	f000 fcb5 	bl	8004d18 <_localeconv_r>
 80043ae:	f8d0 a000 	ldr.w	sl, [r0]
 80043b2:	4650      	mov	r0, sl
 80043b4:	f7fb ff6c 	bl	8000290 <strlen>
 80043b8:	2300      	movs	r3, #0
 80043ba:	930a      	str	r3, [sp, #40]	; 0x28
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	9305      	str	r3, [sp, #20]
 80043c0:	f8d8 3000 	ldr.w	r3, [r8]
 80043c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043c8:	3307      	adds	r3, #7
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	f103 0208 	add.w	r2, r3, #8
 80043d2:	f8c8 2000 	str.w	r2, [r8]
 80043d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043de:	9307      	str	r3, [sp, #28]
 80043e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80043e4:	ee08 0a10 	vmov	s16, r0
 80043e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80043ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f0:	4b9e      	ldr	r3, [pc, #632]	; (800466c <_printf_float+0x2d8>)
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043f6:	f7fc fba9 	bl	8000b4c <__aeabi_dcmpun>
 80043fa:	bb88      	cbnz	r0, 8004460 <_printf_float+0xcc>
 80043fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004400:	4b9a      	ldr	r3, [pc, #616]	; (800466c <_printf_float+0x2d8>)
 8004402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004406:	f7fc fb83 	bl	8000b10 <__aeabi_dcmple>
 800440a:	bb48      	cbnz	r0, 8004460 <_printf_float+0xcc>
 800440c:	2200      	movs	r2, #0
 800440e:	2300      	movs	r3, #0
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fc fb72 	bl	8000afc <__aeabi_dcmplt>
 8004418:	b110      	cbz	r0, 8004420 <_printf_float+0x8c>
 800441a:	232d      	movs	r3, #45	; 0x2d
 800441c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004420:	4a93      	ldr	r2, [pc, #588]	; (8004670 <_printf_float+0x2dc>)
 8004422:	4b94      	ldr	r3, [pc, #592]	; (8004674 <_printf_float+0x2e0>)
 8004424:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004428:	bf94      	ite	ls
 800442a:	4690      	movls	r8, r2
 800442c:	4698      	movhi	r8, r3
 800442e:	2303      	movs	r3, #3
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	9b05      	ldr	r3, [sp, #20]
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	f04f 0900 	mov.w	r9, #0
 800443e:	9700      	str	r7, [sp, #0]
 8004440:	4633      	mov	r3, r6
 8004442:	aa0b      	add	r2, sp, #44	; 0x2c
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f000 f9da 	bl	8004800 <_printf_common>
 800444c:	3001      	adds	r0, #1
 800444e:	f040 8090 	bne.w	8004572 <_printf_float+0x1de>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004456:	b00d      	add	sp, #52	; 0x34
 8004458:	ecbd 8b02 	vpop	{d8}
 800445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004460:	4642      	mov	r2, r8
 8004462:	464b      	mov	r3, r9
 8004464:	4640      	mov	r0, r8
 8004466:	4649      	mov	r1, r9
 8004468:	f7fc fb70 	bl	8000b4c <__aeabi_dcmpun>
 800446c:	b140      	cbz	r0, 8004480 <_printf_float+0xec>
 800446e:	464b      	mov	r3, r9
 8004470:	2b00      	cmp	r3, #0
 8004472:	bfbc      	itt	lt
 8004474:	232d      	movlt	r3, #45	; 0x2d
 8004476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800447a:	4a7f      	ldr	r2, [pc, #508]	; (8004678 <_printf_float+0x2e4>)
 800447c:	4b7f      	ldr	r3, [pc, #508]	; (800467c <_printf_float+0x2e8>)
 800447e:	e7d1      	b.n	8004424 <_printf_float+0x90>
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004486:	9206      	str	r2, [sp, #24]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	d13f      	bne.n	800450c <_printf_float+0x178>
 800448c:	2306      	movs	r3, #6
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	9b05      	ldr	r3, [sp, #20]
 8004492:	6861      	ldr	r1, [r4, #4]
 8004494:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004498:	2300      	movs	r3, #0
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	ab0a      	add	r3, sp, #40	; 0x28
 800449e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044a2:	ab09      	add	r3, sp, #36	; 0x24
 80044a4:	ec49 8b10 	vmov	d0, r8, r9
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6022      	str	r2, [r4, #0]
 80044ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044b0:	4628      	mov	r0, r5
 80044b2:	f7ff fecf 	bl	8004254 <__cvt>
 80044b6:	9b06      	ldr	r3, [sp, #24]
 80044b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ba:	2b47      	cmp	r3, #71	; 0x47
 80044bc:	4680      	mov	r8, r0
 80044be:	d108      	bne.n	80044d2 <_printf_float+0x13e>
 80044c0:	1cc8      	adds	r0, r1, #3
 80044c2:	db02      	blt.n	80044ca <_printf_float+0x136>
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	4299      	cmp	r1, r3
 80044c8:	dd41      	ble.n	800454e <_printf_float+0x1ba>
 80044ca:	f1ab 0302 	sub.w	r3, fp, #2
 80044ce:	fa5f fb83 	uxtb.w	fp, r3
 80044d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044d6:	d820      	bhi.n	800451a <_printf_float+0x186>
 80044d8:	3901      	subs	r1, #1
 80044da:	465a      	mov	r2, fp
 80044dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044e0:	9109      	str	r1, [sp, #36]	; 0x24
 80044e2:	f7ff ff19 	bl	8004318 <__exponent>
 80044e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e8:	1813      	adds	r3, r2, r0
 80044ea:	2a01      	cmp	r2, #1
 80044ec:	4681      	mov	r9, r0
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	dc02      	bgt.n	80044f8 <_printf_float+0x164>
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	07d2      	lsls	r2, r2, #31
 80044f6:	d501      	bpl.n	80044fc <_printf_float+0x168>
 80044f8:	3301      	adds	r3, #1
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004500:	2b00      	cmp	r3, #0
 8004502:	d09c      	beq.n	800443e <_printf_float+0xaa>
 8004504:	232d      	movs	r3, #45	; 0x2d
 8004506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450a:	e798      	b.n	800443e <_printf_float+0xaa>
 800450c:	9a06      	ldr	r2, [sp, #24]
 800450e:	2a47      	cmp	r2, #71	; 0x47
 8004510:	d1be      	bne.n	8004490 <_printf_float+0xfc>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1bc      	bne.n	8004490 <_printf_float+0xfc>
 8004516:	2301      	movs	r3, #1
 8004518:	e7b9      	b.n	800448e <_printf_float+0xfa>
 800451a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800451e:	d118      	bne.n	8004552 <_printf_float+0x1be>
 8004520:	2900      	cmp	r1, #0
 8004522:	6863      	ldr	r3, [r4, #4]
 8004524:	dd0b      	ble.n	800453e <_printf_float+0x1aa>
 8004526:	6121      	str	r1, [r4, #16]
 8004528:	b913      	cbnz	r3, 8004530 <_printf_float+0x19c>
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	07d0      	lsls	r0, r2, #31
 800452e:	d502      	bpl.n	8004536 <_printf_float+0x1a2>
 8004530:	3301      	adds	r3, #1
 8004532:	440b      	add	r3, r1
 8004534:	6123      	str	r3, [r4, #16]
 8004536:	65a1      	str	r1, [r4, #88]	; 0x58
 8004538:	f04f 0900 	mov.w	r9, #0
 800453c:	e7de      	b.n	80044fc <_printf_float+0x168>
 800453e:	b913      	cbnz	r3, 8004546 <_printf_float+0x1b2>
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	07d2      	lsls	r2, r2, #31
 8004544:	d501      	bpl.n	800454a <_printf_float+0x1b6>
 8004546:	3302      	adds	r3, #2
 8004548:	e7f4      	b.n	8004534 <_printf_float+0x1a0>
 800454a:	2301      	movs	r3, #1
 800454c:	e7f2      	b.n	8004534 <_printf_float+0x1a0>
 800454e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004554:	4299      	cmp	r1, r3
 8004556:	db05      	blt.n	8004564 <_printf_float+0x1d0>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	6121      	str	r1, [r4, #16]
 800455c:	07d8      	lsls	r0, r3, #31
 800455e:	d5ea      	bpl.n	8004536 <_printf_float+0x1a2>
 8004560:	1c4b      	adds	r3, r1, #1
 8004562:	e7e7      	b.n	8004534 <_printf_float+0x1a0>
 8004564:	2900      	cmp	r1, #0
 8004566:	bfd4      	ite	le
 8004568:	f1c1 0202 	rsble	r2, r1, #2
 800456c:	2201      	movgt	r2, #1
 800456e:	4413      	add	r3, r2
 8004570:	e7e0      	b.n	8004534 <_printf_float+0x1a0>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	055a      	lsls	r2, r3, #21
 8004576:	d407      	bmi.n	8004588 <_printf_float+0x1f4>
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	4642      	mov	r2, r8
 800457c:	4631      	mov	r1, r6
 800457e:	4628      	mov	r0, r5
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	d12c      	bne.n	80045e0 <_printf_float+0x24c>
 8004586:	e764      	b.n	8004452 <_printf_float+0xbe>
 8004588:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800458c:	f240 80e0 	bls.w	8004750 <_printf_float+0x3bc>
 8004590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004594:	2200      	movs	r2, #0
 8004596:	2300      	movs	r3, #0
 8004598:	f7fc faa6 	bl	8000ae8 <__aeabi_dcmpeq>
 800459c:	2800      	cmp	r0, #0
 800459e:	d034      	beq.n	800460a <_printf_float+0x276>
 80045a0:	4a37      	ldr	r2, [pc, #220]	; (8004680 <_printf_float+0x2ec>)
 80045a2:	2301      	movs	r3, #1
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f af51 	beq.w	8004452 <_printf_float+0xbe>
 80045b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b4:	429a      	cmp	r2, r3
 80045b6:	db02      	blt.n	80045be <_printf_float+0x22a>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	07d8      	lsls	r0, r3, #31
 80045bc:	d510      	bpl.n	80045e0 <_printf_float+0x24c>
 80045be:	ee18 3a10 	vmov	r3, s16
 80045c2:	4652      	mov	r2, sl
 80045c4:	4631      	mov	r1, r6
 80045c6:	4628      	mov	r0, r5
 80045c8:	47b8      	blx	r7
 80045ca:	3001      	adds	r0, #1
 80045cc:	f43f af41 	beq.w	8004452 <_printf_float+0xbe>
 80045d0:	f04f 0800 	mov.w	r8, #0
 80045d4:	f104 091a 	add.w	r9, r4, #26
 80045d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	4543      	cmp	r3, r8
 80045de:	dc09      	bgt.n	80045f4 <_printf_float+0x260>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	079b      	lsls	r3, r3, #30
 80045e4:	f100 8107 	bmi.w	80047f6 <_printf_float+0x462>
 80045e8:	68e0      	ldr	r0, [r4, #12]
 80045ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ec:	4298      	cmp	r0, r3
 80045ee:	bfb8      	it	lt
 80045f0:	4618      	movlt	r0, r3
 80045f2:	e730      	b.n	8004456 <_printf_float+0xc2>
 80045f4:	2301      	movs	r3, #1
 80045f6:	464a      	mov	r2, r9
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af27 	beq.w	8004452 <_printf_float+0xbe>
 8004604:	f108 0801 	add.w	r8, r8, #1
 8004608:	e7e6      	b.n	80045d8 <_printf_float+0x244>
 800460a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	dc39      	bgt.n	8004684 <_printf_float+0x2f0>
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <_printf_float+0x2ec>)
 8004612:	2301      	movs	r3, #1
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	3001      	adds	r0, #1
 800461c:	f43f af19 	beq.w	8004452 <_printf_float+0xbe>
 8004620:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004624:	4313      	orrs	r3, r2
 8004626:	d102      	bne.n	800462e <_printf_float+0x29a>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07d9      	lsls	r1, r3, #31
 800462c:	d5d8      	bpl.n	80045e0 <_printf_float+0x24c>
 800462e:	ee18 3a10 	vmov	r3, s16
 8004632:	4652      	mov	r2, sl
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	f43f af09 	beq.w	8004452 <_printf_float+0xbe>
 8004640:	f04f 0900 	mov.w	r9, #0
 8004644:	f104 0a1a 	add.w	sl, r4, #26
 8004648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464a:	425b      	negs	r3, r3
 800464c:	454b      	cmp	r3, r9
 800464e:	dc01      	bgt.n	8004654 <_printf_float+0x2c0>
 8004650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004652:	e792      	b.n	800457a <_printf_float+0x1e6>
 8004654:	2301      	movs	r3, #1
 8004656:	4652      	mov	r2, sl
 8004658:	4631      	mov	r1, r6
 800465a:	4628      	mov	r0, r5
 800465c:	47b8      	blx	r7
 800465e:	3001      	adds	r0, #1
 8004660:	f43f aef7 	beq.w	8004452 <_printf_float+0xbe>
 8004664:	f109 0901 	add.w	r9, r9, #1
 8004668:	e7ee      	b.n	8004648 <_printf_float+0x2b4>
 800466a:	bf00      	nop
 800466c:	7fefffff 	.word	0x7fefffff
 8004670:	08006be0 	.word	0x08006be0
 8004674:	08006be4 	.word	0x08006be4
 8004678:	08006be8 	.word	0x08006be8
 800467c:	08006bec 	.word	0x08006bec
 8004680:	08006bf0 	.word	0x08006bf0
 8004684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004688:	429a      	cmp	r2, r3
 800468a:	bfa8      	it	ge
 800468c:	461a      	movge	r2, r3
 800468e:	2a00      	cmp	r2, #0
 8004690:	4691      	mov	r9, r2
 8004692:	dc37      	bgt.n	8004704 <_printf_float+0x370>
 8004694:	f04f 0b00 	mov.w	fp, #0
 8004698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469c:	f104 021a 	add.w	r2, r4, #26
 80046a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046a2:	9305      	str	r3, [sp, #20]
 80046a4:	eba3 0309 	sub.w	r3, r3, r9
 80046a8:	455b      	cmp	r3, fp
 80046aa:	dc33      	bgt.n	8004714 <_printf_float+0x380>
 80046ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b0:	429a      	cmp	r2, r3
 80046b2:	db3b      	blt.n	800472c <_printf_float+0x398>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	07da      	lsls	r2, r3, #31
 80046b8:	d438      	bmi.n	800472c <_printf_float+0x398>
 80046ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80046be:	eba2 0903 	sub.w	r9, r2, r3
 80046c2:	9b05      	ldr	r3, [sp, #20]
 80046c4:	1ad2      	subs	r2, r2, r3
 80046c6:	4591      	cmp	r9, r2
 80046c8:	bfa8      	it	ge
 80046ca:	4691      	movge	r9, r2
 80046cc:	f1b9 0f00 	cmp.w	r9, #0
 80046d0:	dc35      	bgt.n	800473e <_printf_float+0x3aa>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046da:	f104 0a1a 	add.w	sl, r4, #26
 80046de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	eba3 0309 	sub.w	r3, r3, r9
 80046e8:	4543      	cmp	r3, r8
 80046ea:	f77f af79 	ble.w	80045e0 <_printf_float+0x24c>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4652      	mov	r2, sl
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	f43f aeaa 	beq.w	8004452 <_printf_float+0xbe>
 80046fe:	f108 0801 	add.w	r8, r8, #1
 8004702:	e7ec      	b.n	80046de <_printf_float+0x34a>
 8004704:	4613      	mov	r3, r2
 8004706:	4631      	mov	r1, r6
 8004708:	4642      	mov	r2, r8
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1c0      	bne.n	8004694 <_printf_float+0x300>
 8004712:	e69e      	b.n	8004452 <_printf_float+0xbe>
 8004714:	2301      	movs	r3, #1
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	9205      	str	r2, [sp, #20]
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f ae97 	beq.w	8004452 <_printf_float+0xbe>
 8004724:	9a05      	ldr	r2, [sp, #20]
 8004726:	f10b 0b01 	add.w	fp, fp, #1
 800472a:	e7b9      	b.n	80046a0 <_printf_float+0x30c>
 800472c:	ee18 3a10 	vmov	r3, s16
 8004730:	4652      	mov	r2, sl
 8004732:	4631      	mov	r1, r6
 8004734:	4628      	mov	r0, r5
 8004736:	47b8      	blx	r7
 8004738:	3001      	adds	r0, #1
 800473a:	d1be      	bne.n	80046ba <_printf_float+0x326>
 800473c:	e689      	b.n	8004452 <_printf_float+0xbe>
 800473e:	9a05      	ldr	r2, [sp, #20]
 8004740:	464b      	mov	r3, r9
 8004742:	4442      	add	r2, r8
 8004744:	4631      	mov	r1, r6
 8004746:	4628      	mov	r0, r5
 8004748:	47b8      	blx	r7
 800474a:	3001      	adds	r0, #1
 800474c:	d1c1      	bne.n	80046d2 <_printf_float+0x33e>
 800474e:	e680      	b.n	8004452 <_printf_float+0xbe>
 8004750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004752:	2a01      	cmp	r2, #1
 8004754:	dc01      	bgt.n	800475a <_printf_float+0x3c6>
 8004756:	07db      	lsls	r3, r3, #31
 8004758:	d53a      	bpl.n	80047d0 <_printf_float+0x43c>
 800475a:	2301      	movs	r3, #1
 800475c:	4642      	mov	r2, r8
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f ae74 	beq.w	8004452 <_printf_float+0xbe>
 800476a:	ee18 3a10 	vmov	r3, s16
 800476e:	4652      	mov	r2, sl
 8004770:	4631      	mov	r1, r6
 8004772:	4628      	mov	r0, r5
 8004774:	47b8      	blx	r7
 8004776:	3001      	adds	r0, #1
 8004778:	f43f ae6b 	beq.w	8004452 <_printf_float+0xbe>
 800477c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004780:	2200      	movs	r2, #0
 8004782:	2300      	movs	r3, #0
 8004784:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004788:	f7fc f9ae 	bl	8000ae8 <__aeabi_dcmpeq>
 800478c:	b9d8      	cbnz	r0, 80047c6 <_printf_float+0x432>
 800478e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004792:	f108 0201 	add.w	r2, r8, #1
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	d10e      	bne.n	80047be <_printf_float+0x42a>
 80047a0:	e657      	b.n	8004452 <_printf_float+0xbe>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4652      	mov	r2, sl
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f ae50 	beq.w	8004452 <_printf_float+0xbe>
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b8:	3b01      	subs	r3, #1
 80047ba:	4543      	cmp	r3, r8
 80047bc:	dcf1      	bgt.n	80047a2 <_printf_float+0x40e>
 80047be:	464b      	mov	r3, r9
 80047c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047c4:	e6da      	b.n	800457c <_printf_float+0x1e8>
 80047c6:	f04f 0800 	mov.w	r8, #0
 80047ca:	f104 0a1a 	add.w	sl, r4, #26
 80047ce:	e7f2      	b.n	80047b6 <_printf_float+0x422>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4642      	mov	r2, r8
 80047d4:	e7df      	b.n	8004796 <_printf_float+0x402>
 80047d6:	2301      	movs	r3, #1
 80047d8:	464a      	mov	r2, r9
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f ae36 	beq.w	8004452 <_printf_float+0xbe>
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ee:	1a5b      	subs	r3, r3, r1
 80047f0:	4543      	cmp	r3, r8
 80047f2:	dcf0      	bgt.n	80047d6 <_printf_float+0x442>
 80047f4:	e6f8      	b.n	80045e8 <_printf_float+0x254>
 80047f6:	f04f 0800 	mov.w	r8, #0
 80047fa:	f104 0919 	add.w	r9, r4, #25
 80047fe:	e7f4      	b.n	80047ea <_printf_float+0x456>

08004800 <_printf_common>:
 8004800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004804:	4616      	mov	r6, r2
 8004806:	4699      	mov	r9, r3
 8004808:	688a      	ldr	r2, [r1, #8]
 800480a:	690b      	ldr	r3, [r1, #16]
 800480c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004810:	4293      	cmp	r3, r2
 8004812:	bfb8      	it	lt
 8004814:	4613      	movlt	r3, r2
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800481c:	4607      	mov	r7, r0
 800481e:	460c      	mov	r4, r1
 8004820:	b10a      	cbz	r2, 8004826 <_printf_common+0x26>
 8004822:	3301      	adds	r3, #1
 8004824:	6033      	str	r3, [r6, #0]
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	0699      	lsls	r1, r3, #26
 800482a:	bf42      	ittt	mi
 800482c:	6833      	ldrmi	r3, [r6, #0]
 800482e:	3302      	addmi	r3, #2
 8004830:	6033      	strmi	r3, [r6, #0]
 8004832:	6825      	ldr	r5, [r4, #0]
 8004834:	f015 0506 	ands.w	r5, r5, #6
 8004838:	d106      	bne.n	8004848 <_printf_common+0x48>
 800483a:	f104 0a19 	add.w	sl, r4, #25
 800483e:	68e3      	ldr	r3, [r4, #12]
 8004840:	6832      	ldr	r2, [r6, #0]
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	42ab      	cmp	r3, r5
 8004846:	dc26      	bgt.n	8004896 <_printf_common+0x96>
 8004848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800484c:	1e13      	subs	r3, r2, #0
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	bf18      	it	ne
 8004852:	2301      	movne	r3, #1
 8004854:	0692      	lsls	r2, r2, #26
 8004856:	d42b      	bmi.n	80048b0 <_printf_common+0xb0>
 8004858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800485c:	4649      	mov	r1, r9
 800485e:	4638      	mov	r0, r7
 8004860:	47c0      	blx	r8
 8004862:	3001      	adds	r0, #1
 8004864:	d01e      	beq.n	80048a4 <_printf_common+0xa4>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	f003 0306 	and.w	r3, r3, #6
 800486e:	2b04      	cmp	r3, #4
 8004870:	bf02      	ittt	eq
 8004872:	68e5      	ldreq	r5, [r4, #12]
 8004874:	6833      	ldreq	r3, [r6, #0]
 8004876:	1aed      	subeq	r5, r5, r3
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	bf0c      	ite	eq
 800487c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004880:	2500      	movne	r5, #0
 8004882:	4293      	cmp	r3, r2
 8004884:	bfc4      	itt	gt
 8004886:	1a9b      	subgt	r3, r3, r2
 8004888:	18ed      	addgt	r5, r5, r3
 800488a:	2600      	movs	r6, #0
 800488c:	341a      	adds	r4, #26
 800488e:	42b5      	cmp	r5, r6
 8004890:	d11a      	bne.n	80048c8 <_printf_common+0xc8>
 8004892:	2000      	movs	r0, #0
 8004894:	e008      	b.n	80048a8 <_printf_common+0xa8>
 8004896:	2301      	movs	r3, #1
 8004898:	4652      	mov	r2, sl
 800489a:	4649      	mov	r1, r9
 800489c:	4638      	mov	r0, r7
 800489e:	47c0      	blx	r8
 80048a0:	3001      	adds	r0, #1
 80048a2:	d103      	bne.n	80048ac <_printf_common+0xac>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ac:	3501      	adds	r5, #1
 80048ae:	e7c6      	b.n	800483e <_printf_common+0x3e>
 80048b0:	18e1      	adds	r1, r4, r3
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	2030      	movs	r0, #48	; 0x30
 80048b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ba:	4422      	add	r2, r4
 80048bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c4:	3302      	adds	r3, #2
 80048c6:	e7c7      	b.n	8004858 <_printf_common+0x58>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4622      	mov	r2, r4
 80048cc:	4649      	mov	r1, r9
 80048ce:	4638      	mov	r0, r7
 80048d0:	47c0      	blx	r8
 80048d2:	3001      	adds	r0, #1
 80048d4:	d0e6      	beq.n	80048a4 <_printf_common+0xa4>
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7d9      	b.n	800488e <_printf_common+0x8e>
	...

080048dc <_printf_i>:
 80048dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	7e0f      	ldrb	r7, [r1, #24]
 80048e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048e4:	2f78      	cmp	r7, #120	; 0x78
 80048e6:	4691      	mov	r9, r2
 80048e8:	4680      	mov	r8, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	469a      	mov	sl, r3
 80048ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048f2:	d807      	bhi.n	8004904 <_printf_i+0x28>
 80048f4:	2f62      	cmp	r7, #98	; 0x62
 80048f6:	d80a      	bhi.n	800490e <_printf_i+0x32>
 80048f8:	2f00      	cmp	r7, #0
 80048fa:	f000 80d4 	beq.w	8004aa6 <_printf_i+0x1ca>
 80048fe:	2f58      	cmp	r7, #88	; 0x58
 8004900:	f000 80c0 	beq.w	8004a84 <_printf_i+0x1a8>
 8004904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800490c:	e03a      	b.n	8004984 <_printf_i+0xa8>
 800490e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004912:	2b15      	cmp	r3, #21
 8004914:	d8f6      	bhi.n	8004904 <_printf_i+0x28>
 8004916:	a101      	add	r1, pc, #4	; (adr r1, 800491c <_printf_i+0x40>)
 8004918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800491c:	08004975 	.word	0x08004975
 8004920:	08004989 	.word	0x08004989
 8004924:	08004905 	.word	0x08004905
 8004928:	08004905 	.word	0x08004905
 800492c:	08004905 	.word	0x08004905
 8004930:	08004905 	.word	0x08004905
 8004934:	08004989 	.word	0x08004989
 8004938:	08004905 	.word	0x08004905
 800493c:	08004905 	.word	0x08004905
 8004940:	08004905 	.word	0x08004905
 8004944:	08004905 	.word	0x08004905
 8004948:	08004a8d 	.word	0x08004a8d
 800494c:	080049b5 	.word	0x080049b5
 8004950:	08004a47 	.word	0x08004a47
 8004954:	08004905 	.word	0x08004905
 8004958:	08004905 	.word	0x08004905
 800495c:	08004aaf 	.word	0x08004aaf
 8004960:	08004905 	.word	0x08004905
 8004964:	080049b5 	.word	0x080049b5
 8004968:	08004905 	.word	0x08004905
 800496c:	08004905 	.word	0x08004905
 8004970:	08004a4f 	.word	0x08004a4f
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	1d1a      	adds	r2, r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	602a      	str	r2, [r5, #0]
 800497c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004984:	2301      	movs	r3, #1
 8004986:	e09f      	b.n	8004ac8 <_printf_i+0x1ec>
 8004988:	6820      	ldr	r0, [r4, #0]
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	0607      	lsls	r7, r0, #24
 800498e:	f103 0104 	add.w	r1, r3, #4
 8004992:	6029      	str	r1, [r5, #0]
 8004994:	d501      	bpl.n	800499a <_printf_i+0xbe>
 8004996:	681e      	ldr	r6, [r3, #0]
 8004998:	e003      	b.n	80049a2 <_printf_i+0xc6>
 800499a:	0646      	lsls	r6, r0, #25
 800499c:	d5fb      	bpl.n	8004996 <_printf_i+0xba>
 800499e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	da03      	bge.n	80049ae <_printf_i+0xd2>
 80049a6:	232d      	movs	r3, #45	; 0x2d
 80049a8:	4276      	negs	r6, r6
 80049aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ae:	485a      	ldr	r0, [pc, #360]	; (8004b18 <_printf_i+0x23c>)
 80049b0:	230a      	movs	r3, #10
 80049b2:	e012      	b.n	80049da <_printf_i+0xfe>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	1d19      	adds	r1, r3, #4
 80049ba:	6029      	str	r1, [r5, #0]
 80049bc:	0605      	lsls	r5, r0, #24
 80049be:	d501      	bpl.n	80049c4 <_printf_i+0xe8>
 80049c0:	681e      	ldr	r6, [r3, #0]
 80049c2:	e002      	b.n	80049ca <_printf_i+0xee>
 80049c4:	0641      	lsls	r1, r0, #25
 80049c6:	d5fb      	bpl.n	80049c0 <_printf_i+0xe4>
 80049c8:	881e      	ldrh	r6, [r3, #0]
 80049ca:	4853      	ldr	r0, [pc, #332]	; (8004b18 <_printf_i+0x23c>)
 80049cc:	2f6f      	cmp	r7, #111	; 0x6f
 80049ce:	bf0c      	ite	eq
 80049d0:	2308      	moveq	r3, #8
 80049d2:	230a      	movne	r3, #10
 80049d4:	2100      	movs	r1, #0
 80049d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049da:	6865      	ldr	r5, [r4, #4]
 80049dc:	60a5      	str	r5, [r4, #8]
 80049de:	2d00      	cmp	r5, #0
 80049e0:	bfa2      	ittt	ge
 80049e2:	6821      	ldrge	r1, [r4, #0]
 80049e4:	f021 0104 	bicge.w	r1, r1, #4
 80049e8:	6021      	strge	r1, [r4, #0]
 80049ea:	b90e      	cbnz	r6, 80049f0 <_printf_i+0x114>
 80049ec:	2d00      	cmp	r5, #0
 80049ee:	d04b      	beq.n	8004a88 <_printf_i+0x1ac>
 80049f0:	4615      	mov	r5, r2
 80049f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80049f6:	fb03 6711 	mls	r7, r3, r1, r6
 80049fa:	5dc7      	ldrb	r7, [r0, r7]
 80049fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a00:	4637      	mov	r7, r6
 8004a02:	42bb      	cmp	r3, r7
 8004a04:	460e      	mov	r6, r1
 8004a06:	d9f4      	bls.n	80049f2 <_printf_i+0x116>
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d10b      	bne.n	8004a24 <_printf_i+0x148>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	07de      	lsls	r6, r3, #31
 8004a10:	d508      	bpl.n	8004a24 <_printf_i+0x148>
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	6861      	ldr	r1, [r4, #4]
 8004a16:	4299      	cmp	r1, r3
 8004a18:	bfde      	ittt	le
 8004a1a:	2330      	movle	r3, #48	; 0x30
 8004a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a24:	1b52      	subs	r2, r2, r5
 8004a26:	6122      	str	r2, [r4, #16]
 8004a28:	f8cd a000 	str.w	sl, [sp]
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	aa03      	add	r2, sp, #12
 8004a30:	4621      	mov	r1, r4
 8004a32:	4640      	mov	r0, r8
 8004a34:	f7ff fee4 	bl	8004800 <_printf_common>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d14a      	bne.n	8004ad2 <_printf_i+0x1f6>
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a40:	b004      	add	sp, #16
 8004a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	f043 0320 	orr.w	r3, r3, #32
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	4833      	ldr	r0, [pc, #204]	; (8004b1c <_printf_i+0x240>)
 8004a50:	2778      	movs	r7, #120	; 0x78
 8004a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	6829      	ldr	r1, [r5, #0]
 8004a5a:	061f      	lsls	r7, r3, #24
 8004a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a60:	d402      	bmi.n	8004a68 <_printf_i+0x18c>
 8004a62:	065f      	lsls	r7, r3, #25
 8004a64:	bf48      	it	mi
 8004a66:	b2b6      	uxthmi	r6, r6
 8004a68:	07df      	lsls	r7, r3, #31
 8004a6a:	bf48      	it	mi
 8004a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a70:	6029      	str	r1, [r5, #0]
 8004a72:	bf48      	it	mi
 8004a74:	6023      	strmi	r3, [r4, #0]
 8004a76:	b91e      	cbnz	r6, 8004a80 <_printf_i+0x1a4>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	f023 0320 	bic.w	r3, r3, #32
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	2310      	movs	r3, #16
 8004a82:	e7a7      	b.n	80049d4 <_printf_i+0xf8>
 8004a84:	4824      	ldr	r0, [pc, #144]	; (8004b18 <_printf_i+0x23c>)
 8004a86:	e7e4      	b.n	8004a52 <_printf_i+0x176>
 8004a88:	4615      	mov	r5, r2
 8004a8a:	e7bd      	b.n	8004a08 <_printf_i+0x12c>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	6826      	ldr	r6, [r4, #0]
 8004a90:	6961      	ldr	r1, [r4, #20]
 8004a92:	1d18      	adds	r0, r3, #4
 8004a94:	6028      	str	r0, [r5, #0]
 8004a96:	0635      	lsls	r5, r6, #24
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	d501      	bpl.n	8004aa0 <_printf_i+0x1c4>
 8004a9c:	6019      	str	r1, [r3, #0]
 8004a9e:	e002      	b.n	8004aa6 <_printf_i+0x1ca>
 8004aa0:	0670      	lsls	r0, r6, #25
 8004aa2:	d5fb      	bpl.n	8004a9c <_printf_i+0x1c0>
 8004aa4:	8019      	strh	r1, [r3, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	4615      	mov	r5, r2
 8004aac:	e7bc      	b.n	8004a28 <_printf_i+0x14c>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	1d1a      	adds	r2, r3, #4
 8004ab2:	602a      	str	r2, [r5, #0]
 8004ab4:	681d      	ldr	r5, [r3, #0]
 8004ab6:	6862      	ldr	r2, [r4, #4]
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4628      	mov	r0, r5
 8004abc:	f7fb fb98 	bl	80001f0 <memchr>
 8004ac0:	b108      	cbz	r0, 8004ac6 <_printf_i+0x1ea>
 8004ac2:	1b40      	subs	r0, r0, r5
 8004ac4:	6060      	str	r0, [r4, #4]
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	2300      	movs	r3, #0
 8004acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad0:	e7aa      	b.n	8004a28 <_printf_i+0x14c>
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	4640      	mov	r0, r8
 8004ada:	47d0      	blx	sl
 8004adc:	3001      	adds	r0, #1
 8004ade:	d0ad      	beq.n	8004a3c <_printf_i+0x160>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	079b      	lsls	r3, r3, #30
 8004ae4:	d413      	bmi.n	8004b0e <_printf_i+0x232>
 8004ae6:	68e0      	ldr	r0, [r4, #12]
 8004ae8:	9b03      	ldr	r3, [sp, #12]
 8004aea:	4298      	cmp	r0, r3
 8004aec:	bfb8      	it	lt
 8004aee:	4618      	movlt	r0, r3
 8004af0:	e7a6      	b.n	8004a40 <_printf_i+0x164>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4632      	mov	r2, r6
 8004af6:	4649      	mov	r1, r9
 8004af8:	4640      	mov	r0, r8
 8004afa:	47d0      	blx	sl
 8004afc:	3001      	adds	r0, #1
 8004afe:	d09d      	beq.n	8004a3c <_printf_i+0x160>
 8004b00:	3501      	adds	r5, #1
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	9903      	ldr	r1, [sp, #12]
 8004b06:	1a5b      	subs	r3, r3, r1
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dcf2      	bgt.n	8004af2 <_printf_i+0x216>
 8004b0c:	e7eb      	b.n	8004ae6 <_printf_i+0x20a>
 8004b0e:	2500      	movs	r5, #0
 8004b10:	f104 0619 	add.w	r6, r4, #25
 8004b14:	e7f5      	b.n	8004b02 <_printf_i+0x226>
 8004b16:	bf00      	nop
 8004b18:	08006bf2 	.word	0x08006bf2
 8004b1c:	08006c03 	.word	0x08006c03

08004b20 <std>:
 8004b20:	2300      	movs	r3, #0
 8004b22:	b510      	push	{r4, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	e9c0 3300 	strd	r3, r3, [r0]
 8004b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2e:	6083      	str	r3, [r0, #8]
 8004b30:	8181      	strh	r1, [r0, #12]
 8004b32:	6643      	str	r3, [r0, #100]	; 0x64
 8004b34:	81c2      	strh	r2, [r0, #14]
 8004b36:	6183      	str	r3, [r0, #24]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	305c      	adds	r0, #92	; 0x5c
 8004b3e:	f000 f8e2 	bl	8004d06 <memset>
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x38>)
 8004b44:	6263      	str	r3, [r4, #36]	; 0x24
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x3c>)
 8004b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <std+0x40>)
 8004b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <std+0x44>)
 8004b50:	6224      	str	r4, [r4, #32]
 8004b52:	6323      	str	r3, [r4, #48]	; 0x30
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	08004c81 	.word	0x08004c81
 8004b5c:	08004ca3 	.word	0x08004ca3
 8004b60:	08004cdb 	.word	0x08004cdb
 8004b64:	08004cff 	.word	0x08004cff

08004b68 <stdio_exit_handler>:
 8004b68:	4a02      	ldr	r2, [pc, #8]	; (8004b74 <stdio_exit_handler+0xc>)
 8004b6a:	4903      	ldr	r1, [pc, #12]	; (8004b78 <stdio_exit_handler+0x10>)
 8004b6c:	4803      	ldr	r0, [pc, #12]	; (8004b7c <stdio_exit_handler+0x14>)
 8004b6e:	f000 b869 	b.w	8004c44 <_fwalk_sglue>
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
 8004b78:	08006519 	.word	0x08006519
 8004b7c:	20000018 	.word	0x20000018

08004b80 <cleanup_stdio>:
 8004b80:	6841      	ldr	r1, [r0, #4]
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <cleanup_stdio+0x34>)
 8004b84:	4299      	cmp	r1, r3
 8004b86:	b510      	push	{r4, lr}
 8004b88:	4604      	mov	r4, r0
 8004b8a:	d001      	beq.n	8004b90 <cleanup_stdio+0x10>
 8004b8c:	f001 fcc4 	bl	8006518 <_fflush_r>
 8004b90:	68a1      	ldr	r1, [r4, #8]
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <cleanup_stdio+0x38>)
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d002      	beq.n	8004b9e <cleanup_stdio+0x1e>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f001 fcbd 	bl	8006518 <_fflush_r>
 8004b9e:	68e1      	ldr	r1, [r4, #12]
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <cleanup_stdio+0x3c>)
 8004ba2:	4299      	cmp	r1, r3
 8004ba4:	d004      	beq.n	8004bb0 <cleanup_stdio+0x30>
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bac:	f001 bcb4 	b.w	8006518 <_fflush_r>
 8004bb0:	bd10      	pop	{r4, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200007ec 	.word	0x200007ec
 8004bb8:	20000854 	.word	0x20000854
 8004bbc:	200008bc 	.word	0x200008bc

08004bc0 <global_stdio_init.part.0>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <global_stdio_init.part.0+0x30>)
 8004bc4:	4c0b      	ldr	r4, [pc, #44]	; (8004bf4 <global_stdio_init.part.0+0x34>)
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <global_stdio_init.part.0+0x38>)
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2104      	movs	r1, #4
 8004bd0:	f7ff ffa6 	bl	8004b20 <std>
 8004bd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bd8:	2201      	movs	r2, #1
 8004bda:	2109      	movs	r1, #9
 8004bdc:	f7ff ffa0 	bl	8004b20 <std>
 8004be0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004be4:	2202      	movs	r2, #2
 8004be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bea:	2112      	movs	r1, #18
 8004bec:	f7ff bf98 	b.w	8004b20 <std>
 8004bf0:	20000924 	.word	0x20000924
 8004bf4:	200007ec 	.word	0x200007ec
 8004bf8:	08004b69 	.word	0x08004b69

08004bfc <__sfp_lock_acquire>:
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <__sfp_lock_acquire+0x8>)
 8004bfe:	f000 b8ff 	b.w	8004e00 <__retarget_lock_acquire_recursive>
 8004c02:	bf00      	nop
 8004c04:	2000092d 	.word	0x2000092d

08004c08 <__sfp_lock_release>:
 8004c08:	4801      	ldr	r0, [pc, #4]	; (8004c10 <__sfp_lock_release+0x8>)
 8004c0a:	f000 b8fa 	b.w	8004e02 <__retarget_lock_release_recursive>
 8004c0e:	bf00      	nop
 8004c10:	2000092d 	.word	0x2000092d

08004c14 <__sinit>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	4604      	mov	r4, r0
 8004c18:	f7ff fff0 	bl	8004bfc <__sfp_lock_acquire>
 8004c1c:	6a23      	ldr	r3, [r4, #32]
 8004c1e:	b11b      	cbz	r3, 8004c28 <__sinit+0x14>
 8004c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c24:	f7ff bff0 	b.w	8004c08 <__sfp_lock_release>
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <__sinit+0x28>)
 8004c2a:	6223      	str	r3, [r4, #32]
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <__sinit+0x2c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f5      	bne.n	8004c20 <__sinit+0xc>
 8004c34:	f7ff ffc4 	bl	8004bc0 <global_stdio_init.part.0>
 8004c38:	e7f2      	b.n	8004c20 <__sinit+0xc>
 8004c3a:	bf00      	nop
 8004c3c:	08004b81 	.word	0x08004b81
 8004c40:	20000924 	.word	0x20000924

08004c44 <_fwalk_sglue>:
 8004c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c48:	4607      	mov	r7, r0
 8004c4a:	4688      	mov	r8, r1
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	2600      	movs	r6, #0
 8004c50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c54:	f1b9 0901 	subs.w	r9, r9, #1
 8004c58:	d505      	bpl.n	8004c66 <_fwalk_sglue+0x22>
 8004c5a:	6824      	ldr	r4, [r4, #0]
 8004c5c:	2c00      	cmp	r4, #0
 8004c5e:	d1f7      	bne.n	8004c50 <_fwalk_sglue+0xc>
 8004c60:	4630      	mov	r0, r6
 8004c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d907      	bls.n	8004c7c <_fwalk_sglue+0x38>
 8004c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c70:	3301      	adds	r3, #1
 8004c72:	d003      	beq.n	8004c7c <_fwalk_sglue+0x38>
 8004c74:	4629      	mov	r1, r5
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c0      	blx	r8
 8004c7a:	4306      	orrs	r6, r0
 8004c7c:	3568      	adds	r5, #104	; 0x68
 8004c7e:	e7e9      	b.n	8004c54 <_fwalk_sglue+0x10>

08004c80 <__sread>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	460c      	mov	r4, r1
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	f000 f86c 	bl	8004d64 <_read_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	bfab      	itete	ge
 8004c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c92:	89a3      	ldrhlt	r3, [r4, #12]
 8004c94:	181b      	addge	r3, r3, r0
 8004c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c9a:	bfac      	ite	ge
 8004c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c9e:	81a3      	strhlt	r3, [r4, #12]
 8004ca0:	bd10      	pop	{r4, pc}

08004ca2 <__swrite>:
 8004ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	461f      	mov	r7, r3
 8004ca8:	898b      	ldrh	r3, [r1, #12]
 8004caa:	05db      	lsls	r3, r3, #23
 8004cac:	4605      	mov	r5, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	d505      	bpl.n	8004cc0 <__swrite+0x1e>
 8004cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f000 f840 	bl	8004d40 <_lseek_r>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	4632      	mov	r2, r6
 8004cce:	463b      	mov	r3, r7
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	f000 b857 	b.w	8004d88 <_write_r>

08004cda <__sseek>:
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	460c      	mov	r4, r1
 8004cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce2:	f000 f82d 	bl	8004d40 <_lseek_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	bf15      	itete	ne
 8004cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cf6:	81a3      	strheq	r3, [r4, #12]
 8004cf8:	bf18      	it	ne
 8004cfa:	81a3      	strhne	r3, [r4, #12]
 8004cfc:	bd10      	pop	{r4, pc}

08004cfe <__sclose>:
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	f000 b80d 	b.w	8004d20 <_close_r>

08004d06 <memset>:
 8004d06:	4402      	add	r2, r0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d100      	bne.n	8004d10 <memset+0xa>
 8004d0e:	4770      	bx	lr
 8004d10:	f803 1b01 	strb.w	r1, [r3], #1
 8004d14:	e7f9      	b.n	8004d0a <memset+0x4>
	...

08004d18 <_localeconv_r>:
 8004d18:	4800      	ldr	r0, [pc, #0]	; (8004d1c <_localeconv_r+0x4>)
 8004d1a:	4770      	bx	lr
 8004d1c:	20000158 	.word	0x20000158

08004d20 <_close_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d06      	ldr	r5, [pc, #24]	; (8004d3c <_close_r+0x1c>)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc fca3 	bl	8001676 <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_close_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_close_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20000928 	.word	0x20000928

08004d40 <_lseek_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	; (8004d60 <_lseek_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc fcb8 	bl	80016c4 <_lseek>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_lseek_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_lseek_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000928 	.word	0x20000928

08004d64 <_read_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	; (8004d84 <_read_r+0x20>)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fc62 	bl	800163c <_read>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_read_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_read_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20000928 	.word	0x20000928

08004d88 <_write_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	; (8004da8 <_write_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc f894 	bl	8000ec4 <_write>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_write_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_write_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000928 	.word	0x20000928

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	; (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000064 	.word	0x20000064

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4d0d      	ldr	r5, [pc, #52]	; (8004df0 <__libc_init_array+0x38>)
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	; (8004df4 <__libc_init_array+0x3c>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4d0b      	ldr	r5, [pc, #44]	; (8004df8 <__libc_init_array+0x40>)
 8004dca:	4c0c      	ldr	r4, [pc, #48]	; (8004dfc <__libc_init_array+0x44>)
 8004dcc:	f001 feea 	bl	8006ba4 <_init>
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08006f5c 	.word	0x08006f5c
 8004df4:	08006f5c 	.word	0x08006f5c
 8004df8:	08006f5c 	.word	0x08006f5c
 8004dfc:	08006f60 	.word	0x08006f60

08004e00 <__retarget_lock_acquire_recursive>:
 8004e00:	4770      	bx	lr

08004e02 <__retarget_lock_release_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <memcpy>:
 8004e04:	440a      	add	r2, r1
 8004e06:	4291      	cmp	r1, r2
 8004e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	4770      	bx	lr
 8004e10:	b510      	push	{r4, lr}
 8004e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	d1f9      	bne.n	8004e12 <memcpy+0xe>
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <quorem>:
 8004e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	6903      	ldr	r3, [r0, #16]
 8004e26:	690c      	ldr	r4, [r1, #16]
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	db7e      	blt.n	8004f2c <quorem+0x10c>
 8004e2e:	3c01      	subs	r4, #1
 8004e30:	f101 0814 	add.w	r8, r1, #20
 8004e34:	f100 0514 	add.w	r5, r0, #20
 8004e38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e46:	3301      	adds	r3, #1
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e52:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e56:	d331      	bcc.n	8004ebc <quorem+0x9c>
 8004e58:	f04f 0e00 	mov.w	lr, #0
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	46ac      	mov	ip, r5
 8004e60:	46f2      	mov	sl, lr
 8004e62:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e66:	b293      	uxth	r3, r2
 8004e68:	fb06 e303 	mla	r3, r6, r3, lr
 8004e6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e70:	0c1a      	lsrs	r2, r3, #16
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	ebaa 0303 	sub.w	r3, sl, r3
 8004e78:	f8dc a000 	ldr.w	sl, [ip]
 8004e7c:	fa13 f38a 	uxtah	r3, r3, sl
 8004e80:	fb06 220e 	mla	r2, r6, lr, r2
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	9b00      	ldr	r3, [sp, #0]
 8004e88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e8c:	b292      	uxth	r2, r2
 8004e8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e96:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e9a:	4581      	cmp	r9, r0
 8004e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ea0:	f84c 3b04 	str.w	r3, [ip], #4
 8004ea4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ea8:	d2db      	bcs.n	8004e62 <quorem+0x42>
 8004eaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8004eae:	b92b      	cbnz	r3, 8004ebc <quorem+0x9c>
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	3b04      	subs	r3, #4
 8004eb4:	429d      	cmp	r5, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	d32c      	bcc.n	8004f14 <quorem+0xf4>
 8004eba:	613c      	str	r4, [r7, #16]
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f001 f9a5 	bl	800620c <__mcmp>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	db22      	blt.n	8004f0c <quorem+0xec>
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ed0:	f8d1 c000 	ldr.w	ip, [r1]
 8004ed4:	b293      	uxth	r3, r2
 8004ed6:	1ac3      	subs	r3, r0, r3
 8004ed8:	0c12      	lsrs	r2, r2, #16
 8004eda:	fa13 f38c 	uxtah	r3, r3, ip
 8004ede:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004ee2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eec:	45c1      	cmp	r9, r8
 8004eee:	f841 3b04 	str.w	r3, [r1], #4
 8004ef2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ef6:	d2e9      	bcs.n	8004ecc <quorem+0xac>
 8004ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004efc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f00:	b922      	cbnz	r2, 8004f0c <quorem+0xec>
 8004f02:	3b04      	subs	r3, #4
 8004f04:	429d      	cmp	r5, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	d30a      	bcc.n	8004f20 <quorem+0x100>
 8004f0a:	613c      	str	r4, [r7, #16]
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	b003      	add	sp, #12
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	3b04      	subs	r3, #4
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d1ce      	bne.n	8004eba <quorem+0x9a>
 8004f1c:	3c01      	subs	r4, #1
 8004f1e:	e7c9      	b.n	8004eb4 <quorem+0x94>
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	3b04      	subs	r3, #4
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	d1f0      	bne.n	8004f0a <quorem+0xea>
 8004f28:	3c01      	subs	r4, #1
 8004f2a:	e7eb      	b.n	8004f04 <quorem+0xe4>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e7ee      	b.n	8004f0e <quorem+0xee>

08004f30 <_dtoa_r>:
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	ed2d 8b04 	vpush	{d8-d9}
 8004f38:	69c5      	ldr	r5, [r0, #28]
 8004f3a:	b093      	sub	sp, #76	; 0x4c
 8004f3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f40:	ec57 6b10 	vmov	r6, r7, d0
 8004f44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f48:	9107      	str	r1, [sp, #28]
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8004f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004f50:	b975      	cbnz	r5, 8004f70 <_dtoa_r+0x40>
 8004f52:	2010      	movs	r0, #16
 8004f54:	f000 fe2a 	bl	8005bac <malloc>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	61e0      	str	r0, [r4, #28]
 8004f5c:	b920      	cbnz	r0, 8004f68 <_dtoa_r+0x38>
 8004f5e:	4bae      	ldr	r3, [pc, #696]	; (8005218 <_dtoa_r+0x2e8>)
 8004f60:	21ef      	movs	r1, #239	; 0xef
 8004f62:	48ae      	ldr	r0, [pc, #696]	; (800521c <_dtoa_r+0x2ec>)
 8004f64:	f001 fb10 	bl	8006588 <__assert_func>
 8004f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f6c:	6005      	str	r5, [r0, #0]
 8004f6e:	60c5      	str	r5, [r0, #12]
 8004f70:	69e3      	ldr	r3, [r4, #28]
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	b151      	cbz	r1, 8004f8c <_dtoa_r+0x5c>
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	604a      	str	r2, [r1, #4]
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4093      	lsls	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 ff07 	bl	8005d94 <_Bfree>
 8004f86:	69e3      	ldr	r3, [r4, #28]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	1e3b      	subs	r3, r7, #0
 8004f8e:	bfbb      	ittet	lt
 8004f90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	9303      	strlt	r3, [sp, #12]
 8004f96:	2300      	movge	r3, #0
 8004f98:	2201      	movlt	r2, #1
 8004f9a:	bfac      	ite	ge
 8004f9c:	f8c8 3000 	strge.w	r3, [r8]
 8004fa0:	f8c8 2000 	strlt.w	r2, [r8]
 8004fa4:	4b9e      	ldr	r3, [pc, #632]	; (8005220 <_dtoa_r+0x2f0>)
 8004fa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004faa:	ea33 0308 	bics.w	r3, r3, r8
 8004fae:	d11b      	bne.n	8004fe8 <_dtoa_r+0xb8>
 8004fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fbc:	4333      	orrs	r3, r6
 8004fbe:	f000 8593 	beq.w	8005ae8 <_dtoa_r+0xbb8>
 8004fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc4:	b963      	cbnz	r3, 8004fe0 <_dtoa_r+0xb0>
 8004fc6:	4b97      	ldr	r3, [pc, #604]	; (8005224 <_dtoa_r+0x2f4>)
 8004fc8:	e027      	b.n	800501a <_dtoa_r+0xea>
 8004fca:	4b97      	ldr	r3, [pc, #604]	; (8005228 <_dtoa_r+0x2f8>)
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	9800      	ldr	r0, [sp, #0]
 8004fd6:	b013      	add	sp, #76	; 0x4c
 8004fd8:	ecbd 8b04 	vpop	{d8-d9}
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	4b90      	ldr	r3, [pc, #576]	; (8005224 <_dtoa_r+0x2f4>)
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	e7f3      	b.n	8004fd0 <_dtoa_r+0xa0>
 8004fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fec:	2200      	movs	r2, #0
 8004fee:	ec51 0b17 	vmov	r0, r1, d7
 8004ff2:	eeb0 8a47 	vmov.f32	s16, s14
 8004ff6:	eef0 8a67 	vmov.f32	s17, s15
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f7fb fd74 	bl	8000ae8 <__aeabi_dcmpeq>
 8005000:	4681      	mov	r9, r0
 8005002:	b160      	cbz	r0, 800501e <_dtoa_r+0xee>
 8005004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005006:	2301      	movs	r3, #1
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8568 	beq.w	8005ae2 <_dtoa_r+0xbb2>
 8005012:	4b86      	ldr	r3, [pc, #536]	; (800522c <_dtoa_r+0x2fc>)
 8005014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	3b01      	subs	r3, #1
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	e7da      	b.n	8004fd4 <_dtoa_r+0xa4>
 800501e:	aa10      	add	r2, sp, #64	; 0x40
 8005020:	a911      	add	r1, sp, #68	; 0x44
 8005022:	4620      	mov	r0, r4
 8005024:	eeb0 0a48 	vmov.f32	s0, s16
 8005028:	eef0 0a68 	vmov.f32	s1, s17
 800502c:	f001 f994 	bl	8006358 <__d2b>
 8005030:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005034:	4682      	mov	sl, r0
 8005036:	2d00      	cmp	r5, #0
 8005038:	d07f      	beq.n	800513a <_dtoa_r+0x20a>
 800503a:	ee18 3a90 	vmov	r3, s17
 800503e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005042:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005046:	ec51 0b18 	vmov	r0, r1, d8
 800504a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800504e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005052:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005056:	4619      	mov	r1, r3
 8005058:	2200      	movs	r2, #0
 800505a:	4b75      	ldr	r3, [pc, #468]	; (8005230 <_dtoa_r+0x300>)
 800505c:	f7fb f924 	bl	80002a8 <__aeabi_dsub>
 8005060:	a367      	add	r3, pc, #412	; (adr r3, 8005200 <_dtoa_r+0x2d0>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb fad7 	bl	8000618 <__aeabi_dmul>
 800506a:	a367      	add	r3, pc, #412	; (adr r3, 8005208 <_dtoa_r+0x2d8>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb f91c 	bl	80002ac <__adddf3>
 8005074:	4606      	mov	r6, r0
 8005076:	4628      	mov	r0, r5
 8005078:	460f      	mov	r7, r1
 800507a:	f7fb fa63 	bl	8000544 <__aeabi_i2d>
 800507e:	a364      	add	r3, pc, #400	; (adr r3, 8005210 <_dtoa_r+0x2e0>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f7fb fac8 	bl	8000618 <__aeabi_dmul>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	f7fb f90c 	bl	80002ac <__adddf3>
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	f7fb fd6e 	bl	8000b78 <__aeabi_d2iz>
 800509c:	2200      	movs	r2, #0
 800509e:	4683      	mov	fp, r0
 80050a0:	2300      	movs	r3, #0
 80050a2:	4630      	mov	r0, r6
 80050a4:	4639      	mov	r1, r7
 80050a6:	f7fb fd29 	bl	8000afc <__aeabi_dcmplt>
 80050aa:	b148      	cbz	r0, 80050c0 <_dtoa_r+0x190>
 80050ac:	4658      	mov	r0, fp
 80050ae:	f7fb fa49 	bl	8000544 <__aeabi_i2d>
 80050b2:	4632      	mov	r2, r6
 80050b4:	463b      	mov	r3, r7
 80050b6:	f7fb fd17 	bl	8000ae8 <__aeabi_dcmpeq>
 80050ba:	b908      	cbnz	r0, 80050c0 <_dtoa_r+0x190>
 80050bc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80050c0:	f1bb 0f16 	cmp.w	fp, #22
 80050c4:	d857      	bhi.n	8005176 <_dtoa_r+0x246>
 80050c6:	4b5b      	ldr	r3, [pc, #364]	; (8005234 <_dtoa_r+0x304>)
 80050c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	ec51 0b18 	vmov	r0, r1, d8
 80050d4:	f7fb fd12 	bl	8000afc <__aeabi_dcmplt>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d04e      	beq.n	800517a <_dtoa_r+0x24a>
 80050dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80050e0:	2300      	movs	r3, #0
 80050e2:	930c      	str	r3, [sp, #48]	; 0x30
 80050e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050e6:	1b5b      	subs	r3, r3, r5
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	bf45      	ittet	mi
 80050ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80050f0:	9305      	strmi	r3, [sp, #20]
 80050f2:	2300      	movpl	r3, #0
 80050f4:	2300      	movmi	r3, #0
 80050f6:	9206      	str	r2, [sp, #24]
 80050f8:	bf54      	ite	pl
 80050fa:	9305      	strpl	r3, [sp, #20]
 80050fc:	9306      	strmi	r3, [sp, #24]
 80050fe:	f1bb 0f00 	cmp.w	fp, #0
 8005102:	db3c      	blt.n	800517e <_dtoa_r+0x24e>
 8005104:	9b06      	ldr	r3, [sp, #24]
 8005106:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800510a:	445b      	add	r3, fp
 800510c:	9306      	str	r3, [sp, #24]
 800510e:	2300      	movs	r3, #0
 8005110:	9308      	str	r3, [sp, #32]
 8005112:	9b07      	ldr	r3, [sp, #28]
 8005114:	2b09      	cmp	r3, #9
 8005116:	d868      	bhi.n	80051ea <_dtoa_r+0x2ba>
 8005118:	2b05      	cmp	r3, #5
 800511a:	bfc4      	itt	gt
 800511c:	3b04      	subgt	r3, #4
 800511e:	9307      	strgt	r3, [sp, #28]
 8005120:	9b07      	ldr	r3, [sp, #28]
 8005122:	f1a3 0302 	sub.w	r3, r3, #2
 8005126:	bfcc      	ite	gt
 8005128:	2500      	movgt	r5, #0
 800512a:	2501      	movle	r5, #1
 800512c:	2b03      	cmp	r3, #3
 800512e:	f200 8085 	bhi.w	800523c <_dtoa_r+0x30c>
 8005132:	e8df f003 	tbb	[pc, r3]
 8005136:	3b2e      	.short	0x3b2e
 8005138:	5839      	.short	0x5839
 800513a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800513e:	441d      	add	r5, r3
 8005140:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005144:	2b20      	cmp	r3, #32
 8005146:	bfc1      	itttt	gt
 8005148:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800514c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005150:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005154:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005158:	bfd6      	itet	le
 800515a:	f1c3 0320 	rsble	r3, r3, #32
 800515e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005162:	fa06 f003 	lslle.w	r0, r6, r3
 8005166:	f7fb f9dd 	bl	8000524 <__aeabi_ui2d>
 800516a:	2201      	movs	r2, #1
 800516c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005170:	3d01      	subs	r5, #1
 8005172:	920e      	str	r2, [sp, #56]	; 0x38
 8005174:	e76f      	b.n	8005056 <_dtoa_r+0x126>
 8005176:	2301      	movs	r3, #1
 8005178:	e7b3      	b.n	80050e2 <_dtoa_r+0x1b2>
 800517a:	900c      	str	r0, [sp, #48]	; 0x30
 800517c:	e7b2      	b.n	80050e4 <_dtoa_r+0x1b4>
 800517e:	9b05      	ldr	r3, [sp, #20]
 8005180:	eba3 030b 	sub.w	r3, r3, fp
 8005184:	9305      	str	r3, [sp, #20]
 8005186:	f1cb 0300 	rsb	r3, fp, #0
 800518a:	9308      	str	r3, [sp, #32]
 800518c:	2300      	movs	r3, #0
 800518e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005190:	e7bf      	b.n	8005112 <_dtoa_r+0x1e2>
 8005192:	2300      	movs	r3, #0
 8005194:	9309      	str	r3, [sp, #36]	; 0x24
 8005196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc52      	bgt.n	8005242 <_dtoa_r+0x312>
 800519c:	2301      	movs	r3, #1
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	9304      	str	r3, [sp, #16]
 80051a2:	461a      	mov	r2, r3
 80051a4:	920a      	str	r2, [sp, #40]	; 0x28
 80051a6:	e00b      	b.n	80051c0 <_dtoa_r+0x290>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e7f3      	b.n	8005194 <_dtoa_r+0x264>
 80051ac:	2300      	movs	r3, #0
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b2:	445b      	add	r3, fp
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	3301      	adds	r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	bfb8      	it	lt
 80051be:	2301      	movlt	r3, #1
 80051c0:	69e0      	ldr	r0, [r4, #28]
 80051c2:	2100      	movs	r1, #0
 80051c4:	2204      	movs	r2, #4
 80051c6:	f102 0614 	add.w	r6, r2, #20
 80051ca:	429e      	cmp	r6, r3
 80051cc:	d93d      	bls.n	800524a <_dtoa_r+0x31a>
 80051ce:	6041      	str	r1, [r0, #4]
 80051d0:	4620      	mov	r0, r4
 80051d2:	f000 fd9f 	bl	8005d14 <_Balloc>
 80051d6:	9000      	str	r0, [sp, #0]
 80051d8:	2800      	cmp	r0, #0
 80051da:	d139      	bne.n	8005250 <_dtoa_r+0x320>
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <_dtoa_r+0x308>)
 80051de:	4602      	mov	r2, r0
 80051e0:	f240 11af 	movw	r1, #431	; 0x1af
 80051e4:	e6bd      	b.n	8004f62 <_dtoa_r+0x32>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e7e1      	b.n	80051ae <_dtoa_r+0x27e>
 80051ea:	2501      	movs	r5, #1
 80051ec:	2300      	movs	r3, #0
 80051ee:	9307      	str	r3, [sp, #28]
 80051f0:	9509      	str	r5, [sp, #36]	; 0x24
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	2200      	movs	r2, #0
 80051fc:	2312      	movs	r3, #18
 80051fe:	e7d1      	b.n	80051a4 <_dtoa_r+0x274>
 8005200:	636f4361 	.word	0x636f4361
 8005204:	3fd287a7 	.word	0x3fd287a7
 8005208:	8b60c8b3 	.word	0x8b60c8b3
 800520c:	3fc68a28 	.word	0x3fc68a28
 8005210:	509f79fb 	.word	0x509f79fb
 8005214:	3fd34413 	.word	0x3fd34413
 8005218:	08006c21 	.word	0x08006c21
 800521c:	08006c38 	.word	0x08006c38
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	08006c1d 	.word	0x08006c1d
 8005228:	08006c14 	.word	0x08006c14
 800522c:	08006bf1 	.word	0x08006bf1
 8005230:	3ff80000 	.word	0x3ff80000
 8005234:	08006d28 	.word	0x08006d28
 8005238:	08006c90 	.word	0x08006c90
 800523c:	2301      	movs	r3, #1
 800523e:	9309      	str	r3, [sp, #36]	; 0x24
 8005240:	e7d7      	b.n	80051f2 <_dtoa_r+0x2c2>
 8005242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	e7ba      	b.n	80051c0 <_dtoa_r+0x290>
 800524a:	3101      	adds	r1, #1
 800524c:	0052      	lsls	r2, r2, #1
 800524e:	e7ba      	b.n	80051c6 <_dtoa_r+0x296>
 8005250:	69e3      	ldr	r3, [r4, #28]
 8005252:	9a00      	ldr	r2, [sp, #0]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	9b04      	ldr	r3, [sp, #16]
 8005258:	2b0e      	cmp	r3, #14
 800525a:	f200 80a8 	bhi.w	80053ae <_dtoa_r+0x47e>
 800525e:	2d00      	cmp	r5, #0
 8005260:	f000 80a5 	beq.w	80053ae <_dtoa_r+0x47e>
 8005264:	f1bb 0f00 	cmp.w	fp, #0
 8005268:	dd38      	ble.n	80052dc <_dtoa_r+0x3ac>
 800526a:	4bc0      	ldr	r3, [pc, #768]	; (800556c <_dtoa_r+0x63c>)
 800526c:	f00b 020f 	and.w	r2, fp, #15
 8005270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005274:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005278:	e9d3 6700 	ldrd	r6, r7, [r3]
 800527c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005280:	d019      	beq.n	80052b6 <_dtoa_r+0x386>
 8005282:	4bbb      	ldr	r3, [pc, #748]	; (8005570 <_dtoa_r+0x640>)
 8005284:	ec51 0b18 	vmov	r0, r1, d8
 8005288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800528c:	f7fb faee 	bl	800086c <__aeabi_ddiv>
 8005290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005294:	f008 080f 	and.w	r8, r8, #15
 8005298:	2503      	movs	r5, #3
 800529a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005570 <_dtoa_r+0x640>
 800529e:	f1b8 0f00 	cmp.w	r8, #0
 80052a2:	d10a      	bne.n	80052ba <_dtoa_r+0x38a>
 80052a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a8:	4632      	mov	r2, r6
 80052aa:	463b      	mov	r3, r7
 80052ac:	f7fb fade 	bl	800086c <__aeabi_ddiv>
 80052b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b4:	e02b      	b.n	800530e <_dtoa_r+0x3de>
 80052b6:	2502      	movs	r5, #2
 80052b8:	e7ef      	b.n	800529a <_dtoa_r+0x36a>
 80052ba:	f018 0f01 	tst.w	r8, #1
 80052be:	d008      	beq.n	80052d2 <_dtoa_r+0x3a2>
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80052c8:	f7fb f9a6 	bl	8000618 <__aeabi_dmul>
 80052cc:	3501      	adds	r5, #1
 80052ce:	4606      	mov	r6, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80052d6:	f109 0908 	add.w	r9, r9, #8
 80052da:	e7e0      	b.n	800529e <_dtoa_r+0x36e>
 80052dc:	f000 809f 	beq.w	800541e <_dtoa_r+0x4ee>
 80052e0:	f1cb 0600 	rsb	r6, fp, #0
 80052e4:	4ba1      	ldr	r3, [pc, #644]	; (800556c <_dtoa_r+0x63c>)
 80052e6:	4fa2      	ldr	r7, [pc, #648]	; (8005570 <_dtoa_r+0x640>)
 80052e8:	f006 020f 	and.w	r2, r6, #15
 80052ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	ec51 0b18 	vmov	r0, r1, d8
 80052f8:	f7fb f98e 	bl	8000618 <__aeabi_dmul>
 80052fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005300:	1136      	asrs	r6, r6, #4
 8005302:	2300      	movs	r3, #0
 8005304:	2502      	movs	r5, #2
 8005306:	2e00      	cmp	r6, #0
 8005308:	d17e      	bne.n	8005408 <_dtoa_r+0x4d8>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d0      	bne.n	80052b0 <_dtoa_r+0x380>
 800530e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005310:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8084 	beq.w	8005422 <_dtoa_r+0x4f2>
 800531a:	4b96      	ldr	r3, [pc, #600]	; (8005574 <_dtoa_r+0x644>)
 800531c:	2200      	movs	r2, #0
 800531e:	4640      	mov	r0, r8
 8005320:	4649      	mov	r1, r9
 8005322:	f7fb fbeb 	bl	8000afc <__aeabi_dcmplt>
 8005326:	2800      	cmp	r0, #0
 8005328:	d07b      	beq.n	8005422 <_dtoa_r+0x4f2>
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d078      	beq.n	8005422 <_dtoa_r+0x4f2>
 8005330:	9b01      	ldr	r3, [sp, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	dd39      	ble.n	80053aa <_dtoa_r+0x47a>
 8005336:	4b90      	ldr	r3, [pc, #576]	; (8005578 <_dtoa_r+0x648>)
 8005338:	2200      	movs	r2, #0
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fb f96b 	bl	8000618 <__aeabi_dmul>
 8005342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005346:	9e01      	ldr	r6, [sp, #4]
 8005348:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800534c:	3501      	adds	r5, #1
 800534e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005352:	4628      	mov	r0, r5
 8005354:	f7fb f8f6 	bl	8000544 <__aeabi_i2d>
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	f7fb f95c 	bl	8000618 <__aeabi_dmul>
 8005360:	4b86      	ldr	r3, [pc, #536]	; (800557c <_dtoa_r+0x64c>)
 8005362:	2200      	movs	r2, #0
 8005364:	f7fa ffa2 	bl	80002ac <__adddf3>
 8005368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800536c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	2e00      	cmp	r6, #0
 8005374:	d158      	bne.n	8005428 <_dtoa_r+0x4f8>
 8005376:	4b82      	ldr	r3, [pc, #520]	; (8005580 <_dtoa_r+0x650>)
 8005378:	2200      	movs	r2, #0
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f7fa ff93 	bl	80002a8 <__aeabi_dsub>
 8005382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005386:	4680      	mov	r8, r0
 8005388:	4689      	mov	r9, r1
 800538a:	f7fb fbd5 	bl	8000b38 <__aeabi_dcmpgt>
 800538e:	2800      	cmp	r0, #0
 8005390:	f040 8296 	bne.w	80058c0 <_dtoa_r+0x990>
 8005394:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005398:	4640      	mov	r0, r8
 800539a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fb fbac 	bl	8000afc <__aeabi_dcmplt>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f040 8289 	bne.w	80058bc <_dtoa_r+0x98c>
 80053aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80053ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f2c0 814e 	blt.w	8005652 <_dtoa_r+0x722>
 80053b6:	f1bb 0f0e 	cmp.w	fp, #14
 80053ba:	f300 814a 	bgt.w	8005652 <_dtoa_r+0x722>
 80053be:	4b6b      	ldr	r3, [pc, #428]	; (800556c <_dtoa_r+0x63c>)
 80053c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f280 80dc 	bge.w	8005588 <_dtoa_r+0x658>
 80053d0:	9b04      	ldr	r3, [sp, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f300 80d8 	bgt.w	8005588 <_dtoa_r+0x658>
 80053d8:	f040 826f 	bne.w	80058ba <_dtoa_r+0x98a>
 80053dc:	4b68      	ldr	r3, [pc, #416]	; (8005580 <_dtoa_r+0x650>)
 80053de:	2200      	movs	r2, #0
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fb f918 	bl	8000618 <__aeabi_dmul>
 80053e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ec:	f7fb fb9a 	bl	8000b24 <__aeabi_dcmpge>
 80053f0:	9e04      	ldr	r6, [sp, #16]
 80053f2:	4637      	mov	r7, r6
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 8245 	bne.w	8005884 <_dtoa_r+0x954>
 80053fa:	9d00      	ldr	r5, [sp, #0]
 80053fc:	2331      	movs	r3, #49	; 0x31
 80053fe:	f805 3b01 	strb.w	r3, [r5], #1
 8005402:	f10b 0b01 	add.w	fp, fp, #1
 8005406:	e241      	b.n	800588c <_dtoa_r+0x95c>
 8005408:	07f2      	lsls	r2, r6, #31
 800540a:	d505      	bpl.n	8005418 <_dtoa_r+0x4e8>
 800540c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005410:	f7fb f902 	bl	8000618 <__aeabi_dmul>
 8005414:	3501      	adds	r5, #1
 8005416:	2301      	movs	r3, #1
 8005418:	1076      	asrs	r6, r6, #1
 800541a:	3708      	adds	r7, #8
 800541c:	e773      	b.n	8005306 <_dtoa_r+0x3d6>
 800541e:	2502      	movs	r5, #2
 8005420:	e775      	b.n	800530e <_dtoa_r+0x3de>
 8005422:	9e04      	ldr	r6, [sp, #16]
 8005424:	465f      	mov	r7, fp
 8005426:	e792      	b.n	800534e <_dtoa_r+0x41e>
 8005428:	9900      	ldr	r1, [sp, #0]
 800542a:	4b50      	ldr	r3, [pc, #320]	; (800556c <_dtoa_r+0x63c>)
 800542c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005430:	4431      	add	r1, r6
 8005432:	9102      	str	r1, [sp, #8]
 8005434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005436:	eeb0 9a47 	vmov.f32	s18, s14
 800543a:	eef0 9a67 	vmov.f32	s19, s15
 800543e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005446:	2900      	cmp	r1, #0
 8005448:	d044      	beq.n	80054d4 <_dtoa_r+0x5a4>
 800544a:	494e      	ldr	r1, [pc, #312]	; (8005584 <_dtoa_r+0x654>)
 800544c:	2000      	movs	r0, #0
 800544e:	f7fb fa0d 	bl	800086c <__aeabi_ddiv>
 8005452:	ec53 2b19 	vmov	r2, r3, d9
 8005456:	f7fa ff27 	bl	80002a8 <__aeabi_dsub>
 800545a:	9d00      	ldr	r5, [sp, #0]
 800545c:	ec41 0b19 	vmov	d9, r0, r1
 8005460:	4649      	mov	r1, r9
 8005462:	4640      	mov	r0, r8
 8005464:	f7fb fb88 	bl	8000b78 <__aeabi_d2iz>
 8005468:	4606      	mov	r6, r0
 800546a:	f7fb f86b 	bl	8000544 <__aeabi_i2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	f7fa ff17 	bl	80002a8 <__aeabi_dsub>
 800547a:	3630      	adds	r6, #48	; 0x30
 800547c:	f805 6b01 	strb.w	r6, [r5], #1
 8005480:	ec53 2b19 	vmov	r2, r3, d9
 8005484:	4680      	mov	r8, r0
 8005486:	4689      	mov	r9, r1
 8005488:	f7fb fb38 	bl	8000afc <__aeabi_dcmplt>
 800548c:	2800      	cmp	r0, #0
 800548e:	d164      	bne.n	800555a <_dtoa_r+0x62a>
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	4937      	ldr	r1, [pc, #220]	; (8005574 <_dtoa_r+0x644>)
 8005496:	2000      	movs	r0, #0
 8005498:	f7fa ff06 	bl	80002a8 <__aeabi_dsub>
 800549c:	ec53 2b19 	vmov	r2, r3, d9
 80054a0:	f7fb fb2c 	bl	8000afc <__aeabi_dcmplt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 80b6 	bne.w	8005616 <_dtoa_r+0x6e6>
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	429d      	cmp	r5, r3
 80054ae:	f43f af7c 	beq.w	80053aa <_dtoa_r+0x47a>
 80054b2:	4b31      	ldr	r3, [pc, #196]	; (8005578 <_dtoa_r+0x648>)
 80054b4:	ec51 0b19 	vmov	r0, r1, d9
 80054b8:	2200      	movs	r2, #0
 80054ba:	f7fb f8ad 	bl	8000618 <__aeabi_dmul>
 80054be:	4b2e      	ldr	r3, [pc, #184]	; (8005578 <_dtoa_r+0x648>)
 80054c0:	ec41 0b19 	vmov	d9, r0, r1
 80054c4:	2200      	movs	r2, #0
 80054c6:	4640      	mov	r0, r8
 80054c8:	4649      	mov	r1, r9
 80054ca:	f7fb f8a5 	bl	8000618 <__aeabi_dmul>
 80054ce:	4680      	mov	r8, r0
 80054d0:	4689      	mov	r9, r1
 80054d2:	e7c5      	b.n	8005460 <_dtoa_r+0x530>
 80054d4:	ec51 0b17 	vmov	r0, r1, d7
 80054d8:	f7fb f89e 	bl	8000618 <__aeabi_dmul>
 80054dc:	9b02      	ldr	r3, [sp, #8]
 80054de:	9d00      	ldr	r5, [sp, #0]
 80054e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054e2:	ec41 0b19 	vmov	d9, r0, r1
 80054e6:	4649      	mov	r1, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	f7fb fb45 	bl	8000b78 <__aeabi_d2iz>
 80054ee:	4606      	mov	r6, r0
 80054f0:	f7fb f828 	bl	8000544 <__aeabi_i2d>
 80054f4:	3630      	adds	r6, #48	; 0x30
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fa fed3 	bl	80002a8 <__aeabi_dsub>
 8005502:	f805 6b01 	strb.w	r6, [r5], #1
 8005506:	9b02      	ldr	r3, [sp, #8]
 8005508:	429d      	cmp	r5, r3
 800550a:	4680      	mov	r8, r0
 800550c:	4689      	mov	r9, r1
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	d124      	bne.n	800555e <_dtoa_r+0x62e>
 8005514:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <_dtoa_r+0x654>)
 8005516:	ec51 0b19 	vmov	r0, r1, d9
 800551a:	f7fa fec7 	bl	80002ac <__adddf3>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f7fb fb07 	bl	8000b38 <__aeabi_dcmpgt>
 800552a:	2800      	cmp	r0, #0
 800552c:	d173      	bne.n	8005616 <_dtoa_r+0x6e6>
 800552e:	ec53 2b19 	vmov	r2, r3, d9
 8005532:	4914      	ldr	r1, [pc, #80]	; (8005584 <_dtoa_r+0x654>)
 8005534:	2000      	movs	r0, #0
 8005536:	f7fa feb7 	bl	80002a8 <__aeabi_dsub>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4640      	mov	r0, r8
 8005540:	4649      	mov	r1, r9
 8005542:	f7fb fadb 	bl	8000afc <__aeabi_dcmplt>
 8005546:	2800      	cmp	r0, #0
 8005548:	f43f af2f 	beq.w	80053aa <_dtoa_r+0x47a>
 800554c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800554e:	1e6b      	subs	r3, r5, #1
 8005550:	930f      	str	r3, [sp, #60]	; 0x3c
 8005552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005556:	2b30      	cmp	r3, #48	; 0x30
 8005558:	d0f8      	beq.n	800554c <_dtoa_r+0x61c>
 800555a:	46bb      	mov	fp, r7
 800555c:	e04a      	b.n	80055f4 <_dtoa_r+0x6c4>
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <_dtoa_r+0x648>)
 8005560:	f7fb f85a 	bl	8000618 <__aeabi_dmul>
 8005564:	4680      	mov	r8, r0
 8005566:	4689      	mov	r9, r1
 8005568:	e7bd      	b.n	80054e6 <_dtoa_r+0x5b6>
 800556a:	bf00      	nop
 800556c:	08006d28 	.word	0x08006d28
 8005570:	08006d00 	.word	0x08006d00
 8005574:	3ff00000 	.word	0x3ff00000
 8005578:	40240000 	.word	0x40240000
 800557c:	401c0000 	.word	0x401c0000
 8005580:	40140000 	.word	0x40140000
 8005584:	3fe00000 	.word	0x3fe00000
 8005588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800558c:	9d00      	ldr	r5, [sp, #0]
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	4630      	mov	r0, r6
 8005594:	4639      	mov	r1, r7
 8005596:	f7fb f969 	bl	800086c <__aeabi_ddiv>
 800559a:	f7fb faed 	bl	8000b78 <__aeabi_d2iz>
 800559e:	9001      	str	r0, [sp, #4]
 80055a0:	f7fa ffd0 	bl	8000544 <__aeabi_i2d>
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	f7fb f836 	bl	8000618 <__aeabi_dmul>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4630      	mov	r0, r6
 80055b2:	4639      	mov	r1, r7
 80055b4:	f7fa fe78 	bl	80002a8 <__aeabi_dsub>
 80055b8:	9e01      	ldr	r6, [sp, #4]
 80055ba:	9f04      	ldr	r7, [sp, #16]
 80055bc:	3630      	adds	r6, #48	; 0x30
 80055be:	f805 6b01 	strb.w	r6, [r5], #1
 80055c2:	9e00      	ldr	r6, [sp, #0]
 80055c4:	1bae      	subs	r6, r5, r6
 80055c6:	42b7      	cmp	r7, r6
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	d134      	bne.n	8005638 <_dtoa_r+0x708>
 80055ce:	f7fa fe6d 	bl	80002ac <__adddf3>
 80055d2:	4642      	mov	r2, r8
 80055d4:	464b      	mov	r3, r9
 80055d6:	4606      	mov	r6, r0
 80055d8:	460f      	mov	r7, r1
 80055da:	f7fb faad 	bl	8000b38 <__aeabi_dcmpgt>
 80055de:	b9c8      	cbnz	r0, 8005614 <_dtoa_r+0x6e4>
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	4630      	mov	r0, r6
 80055e6:	4639      	mov	r1, r7
 80055e8:	f7fb fa7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80055ec:	b110      	cbz	r0, 80055f4 <_dtoa_r+0x6c4>
 80055ee:	9b01      	ldr	r3, [sp, #4]
 80055f0:	07db      	lsls	r3, r3, #31
 80055f2:	d40f      	bmi.n	8005614 <_dtoa_r+0x6e4>
 80055f4:	4651      	mov	r1, sl
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 fbcc 	bl	8005d94 <_Bfree>
 80055fc:	2300      	movs	r3, #0
 80055fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005600:	702b      	strb	r3, [r5, #0]
 8005602:	f10b 0301 	add.w	r3, fp, #1
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800560a:	2b00      	cmp	r3, #0
 800560c:	f43f ace2 	beq.w	8004fd4 <_dtoa_r+0xa4>
 8005610:	601d      	str	r5, [r3, #0]
 8005612:	e4df      	b.n	8004fd4 <_dtoa_r+0xa4>
 8005614:	465f      	mov	r7, fp
 8005616:	462b      	mov	r3, r5
 8005618:	461d      	mov	r5, r3
 800561a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800561e:	2a39      	cmp	r2, #57	; 0x39
 8005620:	d106      	bne.n	8005630 <_dtoa_r+0x700>
 8005622:	9a00      	ldr	r2, [sp, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d1f7      	bne.n	8005618 <_dtoa_r+0x6e8>
 8005628:	9900      	ldr	r1, [sp, #0]
 800562a:	2230      	movs	r2, #48	; 0x30
 800562c:	3701      	adds	r7, #1
 800562e:	700a      	strb	r2, [r1, #0]
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	3201      	adds	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e790      	b.n	800555a <_dtoa_r+0x62a>
 8005638:	4ba3      	ldr	r3, [pc, #652]	; (80058c8 <_dtoa_r+0x998>)
 800563a:	2200      	movs	r2, #0
 800563c:	f7fa ffec 	bl	8000618 <__aeabi_dmul>
 8005640:	2200      	movs	r2, #0
 8005642:	2300      	movs	r3, #0
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	f7fb fa4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800564c:	2800      	cmp	r0, #0
 800564e:	d09e      	beq.n	800558e <_dtoa_r+0x65e>
 8005650:	e7d0      	b.n	80055f4 <_dtoa_r+0x6c4>
 8005652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005654:	2a00      	cmp	r2, #0
 8005656:	f000 80ca 	beq.w	80057ee <_dtoa_r+0x8be>
 800565a:	9a07      	ldr	r2, [sp, #28]
 800565c:	2a01      	cmp	r2, #1
 800565e:	f300 80ad 	bgt.w	80057bc <_dtoa_r+0x88c>
 8005662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005664:	2a00      	cmp	r2, #0
 8005666:	f000 80a5 	beq.w	80057b4 <_dtoa_r+0x884>
 800566a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800566e:	9e08      	ldr	r6, [sp, #32]
 8005670:	9d05      	ldr	r5, [sp, #20]
 8005672:	9a05      	ldr	r2, [sp, #20]
 8005674:	441a      	add	r2, r3
 8005676:	9205      	str	r2, [sp, #20]
 8005678:	9a06      	ldr	r2, [sp, #24]
 800567a:	2101      	movs	r1, #1
 800567c:	441a      	add	r2, r3
 800567e:	4620      	mov	r0, r4
 8005680:	9206      	str	r2, [sp, #24]
 8005682:	f000 fc3d 	bl	8005f00 <__i2b>
 8005686:	4607      	mov	r7, r0
 8005688:	b165      	cbz	r5, 80056a4 <_dtoa_r+0x774>
 800568a:	9b06      	ldr	r3, [sp, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dd09      	ble.n	80056a4 <_dtoa_r+0x774>
 8005690:	42ab      	cmp	r3, r5
 8005692:	9a05      	ldr	r2, [sp, #20]
 8005694:	bfa8      	it	ge
 8005696:	462b      	movge	r3, r5
 8005698:	1ad2      	subs	r2, r2, r3
 800569a:	9205      	str	r2, [sp, #20]
 800569c:	9a06      	ldr	r2, [sp, #24]
 800569e:	1aed      	subs	r5, r5, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	9306      	str	r3, [sp, #24]
 80056a4:	9b08      	ldr	r3, [sp, #32]
 80056a6:	b1f3      	cbz	r3, 80056e6 <_dtoa_r+0x7b6>
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a3 	beq.w	80057f6 <_dtoa_r+0x8c6>
 80056b0:	2e00      	cmp	r6, #0
 80056b2:	dd10      	ble.n	80056d6 <_dtoa_r+0x7a6>
 80056b4:	4639      	mov	r1, r7
 80056b6:	4632      	mov	r2, r6
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fce1 	bl	8006080 <__pow5mult>
 80056be:	4652      	mov	r2, sl
 80056c0:	4601      	mov	r1, r0
 80056c2:	4607      	mov	r7, r0
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fc31 	bl	8005f2c <__multiply>
 80056ca:	4651      	mov	r1, sl
 80056cc:	4680      	mov	r8, r0
 80056ce:	4620      	mov	r0, r4
 80056d0:	f000 fb60 	bl	8005d94 <_Bfree>
 80056d4:	46c2      	mov	sl, r8
 80056d6:	9b08      	ldr	r3, [sp, #32]
 80056d8:	1b9a      	subs	r2, r3, r6
 80056da:	d004      	beq.n	80056e6 <_dtoa_r+0x7b6>
 80056dc:	4651      	mov	r1, sl
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 fcce 	bl	8006080 <__pow5mult>
 80056e4:	4682      	mov	sl, r0
 80056e6:	2101      	movs	r1, #1
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 fc09 	bl	8005f00 <__i2b>
 80056ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	4606      	mov	r6, r0
 80056f4:	f340 8081 	ble.w	80057fa <_dtoa_r+0x8ca>
 80056f8:	461a      	mov	r2, r3
 80056fa:	4601      	mov	r1, r0
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fcbf 	bl	8006080 <__pow5mult>
 8005702:	9b07      	ldr	r3, [sp, #28]
 8005704:	2b01      	cmp	r3, #1
 8005706:	4606      	mov	r6, r0
 8005708:	dd7a      	ble.n	8005800 <_dtoa_r+0x8d0>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	6933      	ldr	r3, [r6, #16]
 8005710:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005714:	6918      	ldr	r0, [r3, #16]
 8005716:	f000 fba5 	bl	8005e64 <__hi0bits>
 800571a:	f1c0 0020 	rsb	r0, r0, #32
 800571e:	9b06      	ldr	r3, [sp, #24]
 8005720:	4418      	add	r0, r3
 8005722:	f010 001f 	ands.w	r0, r0, #31
 8005726:	f000 8094 	beq.w	8005852 <_dtoa_r+0x922>
 800572a:	f1c0 0320 	rsb	r3, r0, #32
 800572e:	2b04      	cmp	r3, #4
 8005730:	f340 8085 	ble.w	800583e <_dtoa_r+0x90e>
 8005734:	9b05      	ldr	r3, [sp, #20]
 8005736:	f1c0 001c 	rsb	r0, r0, #28
 800573a:	4403      	add	r3, r0
 800573c:	9305      	str	r3, [sp, #20]
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	4403      	add	r3, r0
 8005742:	4405      	add	r5, r0
 8005744:	9306      	str	r3, [sp, #24]
 8005746:	9b05      	ldr	r3, [sp, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dd05      	ble.n	8005758 <_dtoa_r+0x828>
 800574c:	4651      	mov	r1, sl
 800574e:	461a      	mov	r2, r3
 8005750:	4620      	mov	r0, r4
 8005752:	f000 fcef 	bl	8006134 <__lshift>
 8005756:	4682      	mov	sl, r0
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	dd05      	ble.n	800576a <_dtoa_r+0x83a>
 800575e:	4631      	mov	r1, r6
 8005760:	461a      	mov	r2, r3
 8005762:	4620      	mov	r0, r4
 8005764:	f000 fce6 	bl	8006134 <__lshift>
 8005768:	4606      	mov	r6, r0
 800576a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800576c:	2b00      	cmp	r3, #0
 800576e:	d072      	beq.n	8005856 <_dtoa_r+0x926>
 8005770:	4631      	mov	r1, r6
 8005772:	4650      	mov	r0, sl
 8005774:	f000 fd4a 	bl	800620c <__mcmp>
 8005778:	2800      	cmp	r0, #0
 800577a:	da6c      	bge.n	8005856 <_dtoa_r+0x926>
 800577c:	2300      	movs	r3, #0
 800577e:	4651      	mov	r1, sl
 8005780:	220a      	movs	r2, #10
 8005782:	4620      	mov	r0, r4
 8005784:	f000 fb28 	bl	8005dd8 <__multadd>
 8005788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800578e:	4682      	mov	sl, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 81b0 	beq.w	8005af6 <_dtoa_r+0xbc6>
 8005796:	2300      	movs	r3, #0
 8005798:	4639      	mov	r1, r7
 800579a:	220a      	movs	r2, #10
 800579c:	4620      	mov	r0, r4
 800579e:	f000 fb1b 	bl	8005dd8 <__multadd>
 80057a2:	9b01      	ldr	r3, [sp, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	4607      	mov	r7, r0
 80057a8:	f300 8096 	bgt.w	80058d8 <_dtoa_r+0x9a8>
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	dc59      	bgt.n	8005866 <_dtoa_r+0x936>
 80057b2:	e091      	b.n	80058d8 <_dtoa_r+0x9a8>
 80057b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057ba:	e758      	b.n	800566e <_dtoa_r+0x73e>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	1e5e      	subs	r6, r3, #1
 80057c0:	9b08      	ldr	r3, [sp, #32]
 80057c2:	42b3      	cmp	r3, r6
 80057c4:	bfbf      	itttt	lt
 80057c6:	9b08      	ldrlt	r3, [sp, #32]
 80057c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80057ca:	9608      	strlt	r6, [sp, #32]
 80057cc:	1af3      	sublt	r3, r6, r3
 80057ce:	bfb4      	ite	lt
 80057d0:	18d2      	addlt	r2, r2, r3
 80057d2:	1b9e      	subge	r6, r3, r6
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	bfbc      	itt	lt
 80057d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80057da:	2600      	movlt	r6, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfb7      	itett	lt
 80057e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80057e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80057e8:	1a9d      	sublt	r5, r3, r2
 80057ea:	2300      	movlt	r3, #0
 80057ec:	e741      	b.n	8005672 <_dtoa_r+0x742>
 80057ee:	9e08      	ldr	r6, [sp, #32]
 80057f0:	9d05      	ldr	r5, [sp, #20]
 80057f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057f4:	e748      	b.n	8005688 <_dtoa_r+0x758>
 80057f6:	9a08      	ldr	r2, [sp, #32]
 80057f8:	e770      	b.n	80056dc <_dtoa_r+0x7ac>
 80057fa:	9b07      	ldr	r3, [sp, #28]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	dc19      	bgt.n	8005834 <_dtoa_r+0x904>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	b9bb      	cbnz	r3, 8005834 <_dtoa_r+0x904>
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800580a:	b99b      	cbnz	r3, 8005834 <_dtoa_r+0x904>
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005812:	0d1b      	lsrs	r3, r3, #20
 8005814:	051b      	lsls	r3, r3, #20
 8005816:	b183      	cbz	r3, 800583a <_dtoa_r+0x90a>
 8005818:	9b05      	ldr	r3, [sp, #20]
 800581a:	3301      	adds	r3, #1
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	9b06      	ldr	r3, [sp, #24]
 8005820:	3301      	adds	r3, #1
 8005822:	9306      	str	r3, [sp, #24]
 8005824:	f04f 0801 	mov.w	r8, #1
 8005828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	f47f af6f 	bne.w	800570e <_dtoa_r+0x7de>
 8005830:	2001      	movs	r0, #1
 8005832:	e774      	b.n	800571e <_dtoa_r+0x7ee>
 8005834:	f04f 0800 	mov.w	r8, #0
 8005838:	e7f6      	b.n	8005828 <_dtoa_r+0x8f8>
 800583a:	4698      	mov	r8, r3
 800583c:	e7f4      	b.n	8005828 <_dtoa_r+0x8f8>
 800583e:	d082      	beq.n	8005746 <_dtoa_r+0x816>
 8005840:	9a05      	ldr	r2, [sp, #20]
 8005842:	331c      	adds	r3, #28
 8005844:	441a      	add	r2, r3
 8005846:	9205      	str	r2, [sp, #20]
 8005848:	9a06      	ldr	r2, [sp, #24]
 800584a:	441a      	add	r2, r3
 800584c:	441d      	add	r5, r3
 800584e:	9206      	str	r2, [sp, #24]
 8005850:	e779      	b.n	8005746 <_dtoa_r+0x816>
 8005852:	4603      	mov	r3, r0
 8005854:	e7f4      	b.n	8005840 <_dtoa_r+0x910>
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc37      	bgt.n	80058cc <_dtoa_r+0x99c>
 800585c:	9b07      	ldr	r3, [sp, #28]
 800585e:	2b02      	cmp	r3, #2
 8005860:	dd34      	ble.n	80058cc <_dtoa_r+0x99c>
 8005862:	9b04      	ldr	r3, [sp, #16]
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	9b01      	ldr	r3, [sp, #4]
 8005868:	b963      	cbnz	r3, 8005884 <_dtoa_r+0x954>
 800586a:	4631      	mov	r1, r6
 800586c:	2205      	movs	r2, #5
 800586e:	4620      	mov	r0, r4
 8005870:	f000 fab2 	bl	8005dd8 <__multadd>
 8005874:	4601      	mov	r1, r0
 8005876:	4606      	mov	r6, r0
 8005878:	4650      	mov	r0, sl
 800587a:	f000 fcc7 	bl	800620c <__mcmp>
 800587e:	2800      	cmp	r0, #0
 8005880:	f73f adbb 	bgt.w	80053fa <_dtoa_r+0x4ca>
 8005884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005886:	9d00      	ldr	r5, [sp, #0]
 8005888:	ea6f 0b03 	mvn.w	fp, r3
 800588c:	f04f 0800 	mov.w	r8, #0
 8005890:	4631      	mov	r1, r6
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fa7e 	bl	8005d94 <_Bfree>
 8005898:	2f00      	cmp	r7, #0
 800589a:	f43f aeab 	beq.w	80055f4 <_dtoa_r+0x6c4>
 800589e:	f1b8 0f00 	cmp.w	r8, #0
 80058a2:	d005      	beq.n	80058b0 <_dtoa_r+0x980>
 80058a4:	45b8      	cmp	r8, r7
 80058a6:	d003      	beq.n	80058b0 <_dtoa_r+0x980>
 80058a8:	4641      	mov	r1, r8
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fa72 	bl	8005d94 <_Bfree>
 80058b0:	4639      	mov	r1, r7
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 fa6e 	bl	8005d94 <_Bfree>
 80058b8:	e69c      	b.n	80055f4 <_dtoa_r+0x6c4>
 80058ba:	2600      	movs	r6, #0
 80058bc:	4637      	mov	r7, r6
 80058be:	e7e1      	b.n	8005884 <_dtoa_r+0x954>
 80058c0:	46bb      	mov	fp, r7
 80058c2:	4637      	mov	r7, r6
 80058c4:	e599      	b.n	80053fa <_dtoa_r+0x4ca>
 80058c6:	bf00      	nop
 80058c8:	40240000 	.word	0x40240000
 80058cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80c8 	beq.w	8005a64 <_dtoa_r+0xb34>
 80058d4:	9b04      	ldr	r3, [sp, #16]
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	2d00      	cmp	r5, #0
 80058da:	dd05      	ble.n	80058e8 <_dtoa_r+0x9b8>
 80058dc:	4639      	mov	r1, r7
 80058de:	462a      	mov	r2, r5
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 fc27 	bl	8006134 <__lshift>
 80058e6:	4607      	mov	r7, r0
 80058e8:	f1b8 0f00 	cmp.w	r8, #0
 80058ec:	d05b      	beq.n	80059a6 <_dtoa_r+0xa76>
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fa0f 	bl	8005d14 <_Balloc>
 80058f6:	4605      	mov	r5, r0
 80058f8:	b928      	cbnz	r0, 8005906 <_dtoa_r+0x9d6>
 80058fa:	4b83      	ldr	r3, [pc, #524]	; (8005b08 <_dtoa_r+0xbd8>)
 80058fc:	4602      	mov	r2, r0
 80058fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005902:	f7ff bb2e 	b.w	8004f62 <_dtoa_r+0x32>
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	3202      	adds	r2, #2
 800590a:	0092      	lsls	r2, r2, #2
 800590c:	f107 010c 	add.w	r1, r7, #12
 8005910:	300c      	adds	r0, #12
 8005912:	f7ff fa77 	bl	8004e04 <memcpy>
 8005916:	2201      	movs	r2, #1
 8005918:	4629      	mov	r1, r5
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fc0a 	bl	8006134 <__lshift>
 8005920:	9b00      	ldr	r3, [sp, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800592a:	4413      	add	r3, r2
 800592c:	9308      	str	r3, [sp, #32]
 800592e:	9b02      	ldr	r3, [sp, #8]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	46b8      	mov	r8, r7
 8005936:	9306      	str	r3, [sp, #24]
 8005938:	4607      	mov	r7, r0
 800593a:	9b04      	ldr	r3, [sp, #16]
 800593c:	4631      	mov	r1, r6
 800593e:	3b01      	subs	r3, #1
 8005940:	4650      	mov	r0, sl
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	f7ff fa6c 	bl	8004e20 <quorem>
 8005948:	4641      	mov	r1, r8
 800594a:	9002      	str	r0, [sp, #8]
 800594c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005950:	4650      	mov	r0, sl
 8005952:	f000 fc5b 	bl	800620c <__mcmp>
 8005956:	463a      	mov	r2, r7
 8005958:	9005      	str	r0, [sp, #20]
 800595a:	4631      	mov	r1, r6
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fc71 	bl	8006244 <__mdiff>
 8005962:	68c2      	ldr	r2, [r0, #12]
 8005964:	4605      	mov	r5, r0
 8005966:	bb02      	cbnz	r2, 80059aa <_dtoa_r+0xa7a>
 8005968:	4601      	mov	r1, r0
 800596a:	4650      	mov	r0, sl
 800596c:	f000 fc4e 	bl	800620c <__mcmp>
 8005970:	4602      	mov	r2, r0
 8005972:	4629      	mov	r1, r5
 8005974:	4620      	mov	r0, r4
 8005976:	9209      	str	r2, [sp, #36]	; 0x24
 8005978:	f000 fa0c 	bl	8005d94 <_Bfree>
 800597c:	9b07      	ldr	r3, [sp, #28]
 800597e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005980:	9d04      	ldr	r5, [sp, #16]
 8005982:	ea43 0102 	orr.w	r1, r3, r2
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	4319      	orrs	r1, r3
 800598a:	d110      	bne.n	80059ae <_dtoa_r+0xa7e>
 800598c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005990:	d029      	beq.n	80059e6 <_dtoa_r+0xab6>
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	dd02      	ble.n	800599e <_dtoa_r+0xa6e>
 8005998:	9b02      	ldr	r3, [sp, #8]
 800599a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	f883 9000 	strb.w	r9, [r3]
 80059a4:	e774      	b.n	8005890 <_dtoa_r+0x960>
 80059a6:	4638      	mov	r0, r7
 80059a8:	e7ba      	b.n	8005920 <_dtoa_r+0x9f0>
 80059aa:	2201      	movs	r2, #1
 80059ac:	e7e1      	b.n	8005972 <_dtoa_r+0xa42>
 80059ae:	9b05      	ldr	r3, [sp, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db04      	blt.n	80059be <_dtoa_r+0xa8e>
 80059b4:	9907      	ldr	r1, [sp, #28]
 80059b6:	430b      	orrs	r3, r1
 80059b8:	9906      	ldr	r1, [sp, #24]
 80059ba:	430b      	orrs	r3, r1
 80059bc:	d120      	bne.n	8005a00 <_dtoa_r+0xad0>
 80059be:	2a00      	cmp	r2, #0
 80059c0:	dded      	ble.n	800599e <_dtoa_r+0xa6e>
 80059c2:	4651      	mov	r1, sl
 80059c4:	2201      	movs	r2, #1
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 fbb4 	bl	8006134 <__lshift>
 80059cc:	4631      	mov	r1, r6
 80059ce:	4682      	mov	sl, r0
 80059d0:	f000 fc1c 	bl	800620c <__mcmp>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	dc03      	bgt.n	80059e0 <_dtoa_r+0xab0>
 80059d8:	d1e1      	bne.n	800599e <_dtoa_r+0xa6e>
 80059da:	f019 0f01 	tst.w	r9, #1
 80059de:	d0de      	beq.n	800599e <_dtoa_r+0xa6e>
 80059e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059e4:	d1d8      	bne.n	8005998 <_dtoa_r+0xa68>
 80059e6:	9a01      	ldr	r2, [sp, #4]
 80059e8:	2339      	movs	r3, #57	; 0x39
 80059ea:	7013      	strb	r3, [r2, #0]
 80059ec:	462b      	mov	r3, r5
 80059ee:	461d      	mov	r5, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059f6:	2a39      	cmp	r2, #57	; 0x39
 80059f8:	d06c      	beq.n	8005ad4 <_dtoa_r+0xba4>
 80059fa:	3201      	adds	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e747      	b.n	8005890 <_dtoa_r+0x960>
 8005a00:	2a00      	cmp	r2, #0
 8005a02:	dd07      	ble.n	8005a14 <_dtoa_r+0xae4>
 8005a04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a08:	d0ed      	beq.n	80059e6 <_dtoa_r+0xab6>
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	f109 0301 	add.w	r3, r9, #1
 8005a10:	7013      	strb	r3, [r2, #0]
 8005a12:	e73d      	b.n	8005890 <_dtoa_r+0x960>
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	9a08      	ldr	r2, [sp, #32]
 8005a18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d043      	beq.n	8005aa8 <_dtoa_r+0xb78>
 8005a20:	4651      	mov	r1, sl
 8005a22:	2300      	movs	r3, #0
 8005a24:	220a      	movs	r2, #10
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f9d6 	bl	8005dd8 <__multadd>
 8005a2c:	45b8      	cmp	r8, r7
 8005a2e:	4682      	mov	sl, r0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	f04f 020a 	mov.w	r2, #10
 8005a38:	4641      	mov	r1, r8
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	d107      	bne.n	8005a4e <_dtoa_r+0xb1e>
 8005a3e:	f000 f9cb 	bl	8005dd8 <__multadd>
 8005a42:	4680      	mov	r8, r0
 8005a44:	4607      	mov	r7, r0
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	9304      	str	r3, [sp, #16]
 8005a4c:	e775      	b.n	800593a <_dtoa_r+0xa0a>
 8005a4e:	f000 f9c3 	bl	8005dd8 <__multadd>
 8005a52:	4639      	mov	r1, r7
 8005a54:	4680      	mov	r8, r0
 8005a56:	2300      	movs	r3, #0
 8005a58:	220a      	movs	r2, #10
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f9bc 	bl	8005dd8 <__multadd>
 8005a60:	4607      	mov	r7, r0
 8005a62:	e7f0      	b.n	8005a46 <_dtoa_r+0xb16>
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	9d00      	ldr	r5, [sp, #0]
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4650      	mov	r0, sl
 8005a6e:	f7ff f9d7 	bl	8004e20 <quorem>
 8005a72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a76:	9b00      	ldr	r3, [sp, #0]
 8005a78:	f805 9b01 	strb.w	r9, [r5], #1
 8005a7c:	1aea      	subs	r2, r5, r3
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	dd07      	ble.n	8005a94 <_dtoa_r+0xb64>
 8005a84:	4651      	mov	r1, sl
 8005a86:	2300      	movs	r3, #0
 8005a88:	220a      	movs	r2, #10
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f9a4 	bl	8005dd8 <__multadd>
 8005a90:	4682      	mov	sl, r0
 8005a92:	e7ea      	b.n	8005a6a <_dtoa_r+0xb3a>
 8005a94:	9b01      	ldr	r3, [sp, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfc8      	it	gt
 8005a9a:	461d      	movgt	r5, r3
 8005a9c:	9b00      	ldr	r3, [sp, #0]
 8005a9e:	bfd8      	it	le
 8005aa0:	2501      	movle	r5, #1
 8005aa2:	441d      	add	r5, r3
 8005aa4:	f04f 0800 	mov.w	r8, #0
 8005aa8:	4651      	mov	r1, sl
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fb41 	bl	8006134 <__lshift>
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4682      	mov	sl, r0
 8005ab6:	f000 fba9 	bl	800620c <__mcmp>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	dc96      	bgt.n	80059ec <_dtoa_r+0xabc>
 8005abe:	d102      	bne.n	8005ac6 <_dtoa_r+0xb96>
 8005ac0:	f019 0f01 	tst.w	r9, #1
 8005ac4:	d192      	bne.n	80059ec <_dtoa_r+0xabc>
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	461d      	mov	r5, r3
 8005aca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ace:	2a30      	cmp	r2, #48	; 0x30
 8005ad0:	d0fa      	beq.n	8005ac8 <_dtoa_r+0xb98>
 8005ad2:	e6dd      	b.n	8005890 <_dtoa_r+0x960>
 8005ad4:	9a00      	ldr	r2, [sp, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d189      	bne.n	80059ee <_dtoa_r+0xabe>
 8005ada:	f10b 0b01 	add.w	fp, fp, #1
 8005ade:	2331      	movs	r3, #49	; 0x31
 8005ae0:	e796      	b.n	8005a10 <_dtoa_r+0xae0>
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <_dtoa_r+0xbdc>)
 8005ae4:	f7ff ba99 	b.w	800501a <_dtoa_r+0xea>
 8005ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f47f aa6d 	bne.w	8004fca <_dtoa_r+0x9a>
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <_dtoa_r+0xbe0>)
 8005af2:	f7ff ba92 	b.w	800501a <_dtoa_r+0xea>
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dcb5      	bgt.n	8005a68 <_dtoa_r+0xb38>
 8005afc:	9b07      	ldr	r3, [sp, #28]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	f73f aeb1 	bgt.w	8005866 <_dtoa_r+0x936>
 8005b04:	e7b0      	b.n	8005a68 <_dtoa_r+0xb38>
 8005b06:	bf00      	nop
 8005b08:	08006c90 	.word	0x08006c90
 8005b0c:	08006bf0 	.word	0x08006bf0
 8005b10:	08006c14 	.word	0x08006c14

08005b14 <_free_r>:
 8005b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d044      	beq.n	8005ba4 <_free_r+0x90>
 8005b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1e:	9001      	str	r0, [sp, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f1a1 0404 	sub.w	r4, r1, #4
 8005b26:	bfb8      	it	lt
 8005b28:	18e4      	addlt	r4, r4, r3
 8005b2a:	f000 f8e7 	bl	8005cfc <__malloc_lock>
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <_free_r+0x94>)
 8005b30:	9801      	ldr	r0, [sp, #4]
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	b933      	cbnz	r3, 8005b44 <_free_r+0x30>
 8005b36:	6063      	str	r3, [r4, #4]
 8005b38:	6014      	str	r4, [r2, #0]
 8005b3a:	b003      	add	sp, #12
 8005b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b40:	f000 b8e2 	b.w	8005d08 <__malloc_unlock>
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d908      	bls.n	8005b5a <_free_r+0x46>
 8005b48:	6825      	ldr	r5, [r4, #0]
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf01      	itttt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	1949      	addeq	r1, r1, r5
 8005b56:	6021      	streq	r1, [r4, #0]
 8005b58:	e7ed      	b.n	8005b36 <_free_r+0x22>
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	b10b      	cbz	r3, 8005b64 <_free_r+0x50>
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	d9fa      	bls.n	8005b5a <_free_r+0x46>
 8005b64:	6811      	ldr	r1, [r2, #0]
 8005b66:	1855      	adds	r5, r2, r1
 8005b68:	42a5      	cmp	r5, r4
 8005b6a:	d10b      	bne.n	8005b84 <_free_r+0x70>
 8005b6c:	6824      	ldr	r4, [r4, #0]
 8005b6e:	4421      	add	r1, r4
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	d1e0      	bne.n	8005b3a <_free_r+0x26>
 8005b78:	681c      	ldr	r4, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	6053      	str	r3, [r2, #4]
 8005b7e:	440c      	add	r4, r1
 8005b80:	6014      	str	r4, [r2, #0]
 8005b82:	e7da      	b.n	8005b3a <_free_r+0x26>
 8005b84:	d902      	bls.n	8005b8c <_free_r+0x78>
 8005b86:	230c      	movs	r3, #12
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	e7d6      	b.n	8005b3a <_free_r+0x26>
 8005b8c:	6825      	ldr	r5, [r4, #0]
 8005b8e:	1961      	adds	r1, r4, r5
 8005b90:	428b      	cmp	r3, r1
 8005b92:	bf04      	itt	eq
 8005b94:	6819      	ldreq	r1, [r3, #0]
 8005b96:	685b      	ldreq	r3, [r3, #4]
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	bf04      	itt	eq
 8005b9c:	1949      	addeq	r1, r1, r5
 8005b9e:	6021      	streq	r1, [r4, #0]
 8005ba0:	6054      	str	r4, [r2, #4]
 8005ba2:	e7ca      	b.n	8005b3a <_free_r+0x26>
 8005ba4:	b003      	add	sp, #12
 8005ba6:	bd30      	pop	{r4, r5, pc}
 8005ba8:	20000930 	.word	0x20000930

08005bac <malloc>:
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <malloc+0xc>)
 8005bae:	4601      	mov	r1, r0
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	f000 b823 	b.w	8005bfc <_malloc_r>
 8005bb6:	bf00      	nop
 8005bb8:	20000064 	.word	0x20000064

08005bbc <sbrk_aligned>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	4e0e      	ldr	r6, [pc, #56]	; (8005bf8 <sbrk_aligned+0x3c>)
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	6831      	ldr	r1, [r6, #0]
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	b911      	cbnz	r1, 8005bce <sbrk_aligned+0x12>
 8005bc8:	f000 fcce 	bl	8006568 <_sbrk_r>
 8005bcc:	6030      	str	r0, [r6, #0]
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 fcc9 	bl	8006568 <_sbrk_r>
 8005bd6:	1c43      	adds	r3, r0, #1
 8005bd8:	d00a      	beq.n	8005bf0 <sbrk_aligned+0x34>
 8005bda:	1cc4      	adds	r4, r0, #3
 8005bdc:	f024 0403 	bic.w	r4, r4, #3
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d007      	beq.n	8005bf4 <sbrk_aligned+0x38>
 8005be4:	1a21      	subs	r1, r4, r0
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fcbe 	bl	8006568 <_sbrk_r>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d101      	bne.n	8005bf4 <sbrk_aligned+0x38>
 8005bf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	20000934 	.word	0x20000934

08005bfc <_malloc_r>:
 8005bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	1ccd      	adds	r5, r1, #3
 8005c02:	f025 0503 	bic.w	r5, r5, #3
 8005c06:	3508      	adds	r5, #8
 8005c08:	2d0c      	cmp	r5, #12
 8005c0a:	bf38      	it	cc
 8005c0c:	250c      	movcc	r5, #12
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	4607      	mov	r7, r0
 8005c12:	db01      	blt.n	8005c18 <_malloc_r+0x1c>
 8005c14:	42a9      	cmp	r1, r5
 8005c16:	d905      	bls.n	8005c24 <_malloc_r+0x28>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	4630      	mov	r0, r6
 8005c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cf8 <_malloc_r+0xfc>
 8005c28:	f000 f868 	bl	8005cfc <__malloc_lock>
 8005c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c30:	461c      	mov	r4, r3
 8005c32:	bb5c      	cbnz	r4, 8005c8c <_malloc_r+0x90>
 8005c34:	4629      	mov	r1, r5
 8005c36:	4638      	mov	r0, r7
 8005c38:	f7ff ffc0 	bl	8005bbc <sbrk_aligned>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	4604      	mov	r4, r0
 8005c40:	d155      	bne.n	8005cee <_malloc_r+0xf2>
 8005c42:	f8d8 4000 	ldr.w	r4, [r8]
 8005c46:	4626      	mov	r6, r4
 8005c48:	2e00      	cmp	r6, #0
 8005c4a:	d145      	bne.n	8005cd8 <_malloc_r+0xdc>
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	d048      	beq.n	8005ce2 <_malloc_r+0xe6>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	4631      	mov	r1, r6
 8005c54:	4638      	mov	r0, r7
 8005c56:	eb04 0903 	add.w	r9, r4, r3
 8005c5a:	f000 fc85 	bl	8006568 <_sbrk_r>
 8005c5e:	4581      	cmp	r9, r0
 8005c60:	d13f      	bne.n	8005ce2 <_malloc_r+0xe6>
 8005c62:	6821      	ldr	r1, [r4, #0]
 8005c64:	1a6d      	subs	r5, r5, r1
 8005c66:	4629      	mov	r1, r5
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff ffa7 	bl	8005bbc <sbrk_aligned>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d037      	beq.n	8005ce2 <_malloc_r+0xe6>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	442b      	add	r3, r5
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d038      	beq.n	8005cf2 <_malloc_r+0xf6>
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	42a2      	cmp	r2, r4
 8005c84:	d12b      	bne.n	8005cde <_malloc_r+0xe2>
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	e00f      	b.n	8005cac <_malloc_r+0xb0>
 8005c8c:	6822      	ldr	r2, [r4, #0]
 8005c8e:	1b52      	subs	r2, r2, r5
 8005c90:	d41f      	bmi.n	8005cd2 <_malloc_r+0xd6>
 8005c92:	2a0b      	cmp	r2, #11
 8005c94:	d917      	bls.n	8005cc6 <_malloc_r+0xca>
 8005c96:	1961      	adds	r1, r4, r5
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	6025      	str	r5, [r4, #0]
 8005c9c:	bf18      	it	ne
 8005c9e:	6059      	strne	r1, [r3, #4]
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	bf08      	it	eq
 8005ca4:	f8c8 1000 	streq.w	r1, [r8]
 8005ca8:	5162      	str	r2, [r4, r5]
 8005caa:	604b      	str	r3, [r1, #4]
 8005cac:	4638      	mov	r0, r7
 8005cae:	f104 060b 	add.w	r6, r4, #11
 8005cb2:	f000 f829 	bl	8005d08 <__malloc_unlock>
 8005cb6:	f026 0607 	bic.w	r6, r6, #7
 8005cba:	1d23      	adds	r3, r4, #4
 8005cbc:	1af2      	subs	r2, r6, r3
 8005cbe:	d0ae      	beq.n	8005c1e <_malloc_r+0x22>
 8005cc0:	1b9b      	subs	r3, r3, r6
 8005cc2:	50a3      	str	r3, [r4, r2]
 8005cc4:	e7ab      	b.n	8005c1e <_malloc_r+0x22>
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	6862      	ldr	r2, [r4, #4]
 8005cca:	d1dd      	bne.n	8005c88 <_malloc_r+0x8c>
 8005ccc:	f8c8 2000 	str.w	r2, [r8]
 8005cd0:	e7ec      	b.n	8005cac <_malloc_r+0xb0>
 8005cd2:	4623      	mov	r3, r4
 8005cd4:	6864      	ldr	r4, [r4, #4]
 8005cd6:	e7ac      	b.n	8005c32 <_malloc_r+0x36>
 8005cd8:	4634      	mov	r4, r6
 8005cda:	6876      	ldr	r6, [r6, #4]
 8005cdc:	e7b4      	b.n	8005c48 <_malloc_r+0x4c>
 8005cde:	4613      	mov	r3, r2
 8005ce0:	e7cc      	b.n	8005c7c <_malloc_r+0x80>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f000 f80e 	bl	8005d08 <__malloc_unlock>
 8005cec:	e797      	b.n	8005c1e <_malloc_r+0x22>
 8005cee:	6025      	str	r5, [r4, #0]
 8005cf0:	e7dc      	b.n	8005cac <_malloc_r+0xb0>
 8005cf2:	605b      	str	r3, [r3, #4]
 8005cf4:	deff      	udf	#255	; 0xff
 8005cf6:	bf00      	nop
 8005cf8:	20000930 	.word	0x20000930

08005cfc <__malloc_lock>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	; (8005d04 <__malloc_lock+0x8>)
 8005cfe:	f7ff b87f 	b.w	8004e00 <__retarget_lock_acquire_recursive>
 8005d02:	bf00      	nop
 8005d04:	2000092c 	.word	0x2000092c

08005d08 <__malloc_unlock>:
 8005d08:	4801      	ldr	r0, [pc, #4]	; (8005d10 <__malloc_unlock+0x8>)
 8005d0a:	f7ff b87a 	b.w	8004e02 <__retarget_lock_release_recursive>
 8005d0e:	bf00      	nop
 8005d10:	2000092c 	.word	0x2000092c

08005d14 <_Balloc>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	69c6      	ldr	r6, [r0, #28]
 8005d18:	4604      	mov	r4, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	b976      	cbnz	r6, 8005d3c <_Balloc+0x28>
 8005d1e:	2010      	movs	r0, #16
 8005d20:	f7ff ff44 	bl	8005bac <malloc>
 8005d24:	4602      	mov	r2, r0
 8005d26:	61e0      	str	r0, [r4, #28]
 8005d28:	b920      	cbnz	r0, 8005d34 <_Balloc+0x20>
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <_Balloc+0x78>)
 8005d2c:	4818      	ldr	r0, [pc, #96]	; (8005d90 <_Balloc+0x7c>)
 8005d2e:	216b      	movs	r1, #107	; 0x6b
 8005d30:	f000 fc2a 	bl	8006588 <__assert_func>
 8005d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d38:	6006      	str	r6, [r0, #0]
 8005d3a:	60c6      	str	r6, [r0, #12]
 8005d3c:	69e6      	ldr	r6, [r4, #28]
 8005d3e:	68f3      	ldr	r3, [r6, #12]
 8005d40:	b183      	cbz	r3, 8005d64 <_Balloc+0x50>
 8005d42:	69e3      	ldr	r3, [r4, #28]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d4a:	b9b8      	cbnz	r0, 8005d7c <_Balloc+0x68>
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d52:	1d72      	adds	r2, r6, #5
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 fc34 	bl	80065c4 <_calloc_r>
 8005d5c:	b160      	cbz	r0, 8005d78 <_Balloc+0x64>
 8005d5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d62:	e00e      	b.n	8005d82 <_Balloc+0x6e>
 8005d64:	2221      	movs	r2, #33	; 0x21
 8005d66:	2104      	movs	r1, #4
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fc2b 	bl	80065c4 <_calloc_r>
 8005d6e:	69e3      	ldr	r3, [r4, #28]
 8005d70:	60f0      	str	r0, [r6, #12]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e4      	bne.n	8005d42 <_Balloc+0x2e>
 8005d78:	2000      	movs	r0, #0
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	6802      	ldr	r2, [r0, #0]
 8005d7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d82:	2300      	movs	r3, #0
 8005d84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d88:	e7f7      	b.n	8005d7a <_Balloc+0x66>
 8005d8a:	bf00      	nop
 8005d8c:	08006c21 	.word	0x08006c21
 8005d90:	08006ca1 	.word	0x08006ca1

08005d94 <_Bfree>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	69c6      	ldr	r6, [r0, #28]
 8005d98:	4605      	mov	r5, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	b976      	cbnz	r6, 8005dbc <_Bfree+0x28>
 8005d9e:	2010      	movs	r0, #16
 8005da0:	f7ff ff04 	bl	8005bac <malloc>
 8005da4:	4602      	mov	r2, r0
 8005da6:	61e8      	str	r0, [r5, #28]
 8005da8:	b920      	cbnz	r0, 8005db4 <_Bfree+0x20>
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <_Bfree+0x3c>)
 8005dac:	4809      	ldr	r0, [pc, #36]	; (8005dd4 <_Bfree+0x40>)
 8005dae:	218f      	movs	r1, #143	; 0x8f
 8005db0:	f000 fbea 	bl	8006588 <__assert_func>
 8005db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005db8:	6006      	str	r6, [r0, #0]
 8005dba:	60c6      	str	r6, [r0, #12]
 8005dbc:	b13c      	cbz	r4, 8005dce <_Bfree+0x3a>
 8005dbe:	69eb      	ldr	r3, [r5, #28]
 8005dc0:	6862      	ldr	r2, [r4, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dc8:	6021      	str	r1, [r4, #0]
 8005dca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	08006c21 	.word	0x08006c21
 8005dd4:	08006ca1 	.word	0x08006ca1

08005dd8 <__multadd>:
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	690d      	ldr	r5, [r1, #16]
 8005dde:	4607      	mov	r7, r0
 8005de0:	460c      	mov	r4, r1
 8005de2:	461e      	mov	r6, r3
 8005de4:	f101 0c14 	add.w	ip, r1, #20
 8005de8:	2000      	movs	r0, #0
 8005dea:	f8dc 3000 	ldr.w	r3, [ip]
 8005dee:	b299      	uxth	r1, r3
 8005df0:	fb02 6101 	mla	r1, r2, r1, r6
 8005df4:	0c1e      	lsrs	r6, r3, #16
 8005df6:	0c0b      	lsrs	r3, r1, #16
 8005df8:	fb02 3306 	mla	r3, r2, r6, r3
 8005dfc:	b289      	uxth	r1, r1
 8005dfe:	3001      	adds	r0, #1
 8005e00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e04:	4285      	cmp	r5, r0
 8005e06:	f84c 1b04 	str.w	r1, [ip], #4
 8005e0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e0e:	dcec      	bgt.n	8005dea <__multadd+0x12>
 8005e10:	b30e      	cbz	r6, 8005e56 <__multadd+0x7e>
 8005e12:	68a3      	ldr	r3, [r4, #8]
 8005e14:	42ab      	cmp	r3, r5
 8005e16:	dc19      	bgt.n	8005e4c <__multadd+0x74>
 8005e18:	6861      	ldr	r1, [r4, #4]
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	3101      	adds	r1, #1
 8005e1e:	f7ff ff79 	bl	8005d14 <_Balloc>
 8005e22:	4680      	mov	r8, r0
 8005e24:	b928      	cbnz	r0, 8005e32 <__multadd+0x5a>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <__multadd+0x84>)
 8005e2a:	480d      	ldr	r0, [pc, #52]	; (8005e60 <__multadd+0x88>)
 8005e2c:	21ba      	movs	r1, #186	; 0xba
 8005e2e:	f000 fbab 	bl	8006588 <__assert_func>
 8005e32:	6922      	ldr	r2, [r4, #16]
 8005e34:	3202      	adds	r2, #2
 8005e36:	f104 010c 	add.w	r1, r4, #12
 8005e3a:	0092      	lsls	r2, r2, #2
 8005e3c:	300c      	adds	r0, #12
 8005e3e:	f7fe ffe1 	bl	8004e04 <memcpy>
 8005e42:	4621      	mov	r1, r4
 8005e44:	4638      	mov	r0, r7
 8005e46:	f7ff ffa5 	bl	8005d94 <_Bfree>
 8005e4a:	4644      	mov	r4, r8
 8005e4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e50:	3501      	adds	r5, #1
 8005e52:	615e      	str	r6, [r3, #20]
 8005e54:	6125      	str	r5, [r4, #16]
 8005e56:	4620      	mov	r0, r4
 8005e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e5c:	08006c90 	.word	0x08006c90
 8005e60:	08006ca1 	.word	0x08006ca1

08005e64 <__hi0bits>:
 8005e64:	0c03      	lsrs	r3, r0, #16
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	b9d3      	cbnz	r3, 8005ea0 <__hi0bits+0x3c>
 8005e6a:	0400      	lsls	r0, r0, #16
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e72:	bf04      	itt	eq
 8005e74:	0200      	lsleq	r0, r0, #8
 8005e76:	3308      	addeq	r3, #8
 8005e78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e7c:	bf04      	itt	eq
 8005e7e:	0100      	lsleq	r0, r0, #4
 8005e80:	3304      	addeq	r3, #4
 8005e82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e86:	bf04      	itt	eq
 8005e88:	0080      	lsleq	r0, r0, #2
 8005e8a:	3302      	addeq	r3, #2
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	db05      	blt.n	8005e9c <__hi0bits+0x38>
 8005e90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e94:	f103 0301 	add.w	r3, r3, #1
 8005e98:	bf08      	it	eq
 8005e9a:	2320      	moveq	r3, #32
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	4770      	bx	lr
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e7e4      	b.n	8005e6e <__hi0bits+0xa>

08005ea4 <__lo0bits>:
 8005ea4:	6803      	ldr	r3, [r0, #0]
 8005ea6:	f013 0207 	ands.w	r2, r3, #7
 8005eaa:	d00c      	beq.n	8005ec6 <__lo0bits+0x22>
 8005eac:	07d9      	lsls	r1, r3, #31
 8005eae:	d422      	bmi.n	8005ef6 <__lo0bits+0x52>
 8005eb0:	079a      	lsls	r2, r3, #30
 8005eb2:	bf49      	itett	mi
 8005eb4:	085b      	lsrmi	r3, r3, #1
 8005eb6:	089b      	lsrpl	r3, r3, #2
 8005eb8:	6003      	strmi	r3, [r0, #0]
 8005eba:	2201      	movmi	r2, #1
 8005ebc:	bf5c      	itt	pl
 8005ebe:	6003      	strpl	r3, [r0, #0]
 8005ec0:	2202      	movpl	r2, #2
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4770      	bx	lr
 8005ec6:	b299      	uxth	r1, r3
 8005ec8:	b909      	cbnz	r1, 8005ece <__lo0bits+0x2a>
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	2210      	movs	r2, #16
 8005ece:	b2d9      	uxtb	r1, r3
 8005ed0:	b909      	cbnz	r1, 8005ed6 <__lo0bits+0x32>
 8005ed2:	3208      	adds	r2, #8
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	0719      	lsls	r1, r3, #28
 8005ed8:	bf04      	itt	eq
 8005eda:	091b      	lsreq	r3, r3, #4
 8005edc:	3204      	addeq	r2, #4
 8005ede:	0799      	lsls	r1, r3, #30
 8005ee0:	bf04      	itt	eq
 8005ee2:	089b      	lsreq	r3, r3, #2
 8005ee4:	3202      	addeq	r2, #2
 8005ee6:	07d9      	lsls	r1, r3, #31
 8005ee8:	d403      	bmi.n	8005ef2 <__lo0bits+0x4e>
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	f102 0201 	add.w	r2, r2, #1
 8005ef0:	d003      	beq.n	8005efa <__lo0bits+0x56>
 8005ef2:	6003      	str	r3, [r0, #0]
 8005ef4:	e7e5      	b.n	8005ec2 <__lo0bits+0x1e>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	e7e3      	b.n	8005ec2 <__lo0bits+0x1e>
 8005efa:	2220      	movs	r2, #32
 8005efc:	e7e1      	b.n	8005ec2 <__lo0bits+0x1e>
	...

08005f00 <__i2b>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	460c      	mov	r4, r1
 8005f04:	2101      	movs	r1, #1
 8005f06:	f7ff ff05 	bl	8005d14 <_Balloc>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	b928      	cbnz	r0, 8005f1a <__i2b+0x1a>
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <__i2b+0x24>)
 8005f10:	4805      	ldr	r0, [pc, #20]	; (8005f28 <__i2b+0x28>)
 8005f12:	f240 1145 	movw	r1, #325	; 0x145
 8005f16:	f000 fb37 	bl	8006588 <__assert_func>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	6144      	str	r4, [r0, #20]
 8005f1e:	6103      	str	r3, [r0, #16]
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	08006c90 	.word	0x08006c90
 8005f28:	08006ca1 	.word	0x08006ca1

08005f2c <__multiply>:
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	4691      	mov	r9, r2
 8005f32:	690a      	ldr	r2, [r1, #16]
 8005f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	bfb8      	it	lt
 8005f3c:	460b      	movlt	r3, r1
 8005f3e:	460c      	mov	r4, r1
 8005f40:	bfbc      	itt	lt
 8005f42:	464c      	movlt	r4, r9
 8005f44:	4699      	movlt	r9, r3
 8005f46:	6927      	ldr	r7, [r4, #16]
 8005f48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f4c:	68a3      	ldr	r3, [r4, #8]
 8005f4e:	6861      	ldr	r1, [r4, #4]
 8005f50:	eb07 060a 	add.w	r6, r7, sl
 8005f54:	42b3      	cmp	r3, r6
 8005f56:	b085      	sub	sp, #20
 8005f58:	bfb8      	it	lt
 8005f5a:	3101      	addlt	r1, #1
 8005f5c:	f7ff feda 	bl	8005d14 <_Balloc>
 8005f60:	b930      	cbnz	r0, 8005f70 <__multiply+0x44>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b44      	ldr	r3, [pc, #272]	; (8006078 <__multiply+0x14c>)
 8005f66:	4845      	ldr	r0, [pc, #276]	; (800607c <__multiply+0x150>)
 8005f68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f6c:	f000 fb0c 	bl	8006588 <__assert_func>
 8005f70:	f100 0514 	add.w	r5, r0, #20
 8005f74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f78:	462b      	mov	r3, r5
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4543      	cmp	r3, r8
 8005f7e:	d321      	bcc.n	8005fc4 <__multiply+0x98>
 8005f80:	f104 0314 	add.w	r3, r4, #20
 8005f84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f88:	f109 0314 	add.w	r3, r9, #20
 8005f8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f90:	9202      	str	r2, [sp, #8]
 8005f92:	1b3a      	subs	r2, r7, r4
 8005f94:	3a15      	subs	r2, #21
 8005f96:	f022 0203 	bic.w	r2, r2, #3
 8005f9a:	3204      	adds	r2, #4
 8005f9c:	f104 0115 	add.w	r1, r4, #21
 8005fa0:	428f      	cmp	r7, r1
 8005fa2:	bf38      	it	cc
 8005fa4:	2204      	movcc	r2, #4
 8005fa6:	9201      	str	r2, [sp, #4]
 8005fa8:	9a02      	ldr	r2, [sp, #8]
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d80c      	bhi.n	8005fca <__multiply+0x9e>
 8005fb0:	2e00      	cmp	r6, #0
 8005fb2:	dd03      	ble.n	8005fbc <__multiply+0x90>
 8005fb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05b      	beq.n	8006074 <__multiply+0x148>
 8005fbc:	6106      	str	r6, [r0, #16]
 8005fbe:	b005      	add	sp, #20
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	f843 2b04 	str.w	r2, [r3], #4
 8005fc8:	e7d8      	b.n	8005f7c <__multiply+0x50>
 8005fca:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fce:	f1ba 0f00 	cmp.w	sl, #0
 8005fd2:	d024      	beq.n	800601e <__multiply+0xf2>
 8005fd4:	f104 0e14 	add.w	lr, r4, #20
 8005fd8:	46a9      	mov	r9, r5
 8005fda:	f04f 0c00 	mov.w	ip, #0
 8005fde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fe2:	f8d9 1000 	ldr.w	r1, [r9]
 8005fe6:	fa1f fb82 	uxth.w	fp, r2
 8005fea:	b289      	uxth	r1, r1
 8005fec:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ff0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ff8:	4461      	add	r1, ip
 8005ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ffe:	fb0a c20b 	mla	r2, sl, fp, ip
 8006002:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006006:	b289      	uxth	r1, r1
 8006008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800600c:	4577      	cmp	r7, lr
 800600e:	f849 1b04 	str.w	r1, [r9], #4
 8006012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006016:	d8e2      	bhi.n	8005fde <__multiply+0xb2>
 8006018:	9a01      	ldr	r2, [sp, #4]
 800601a:	f845 c002 	str.w	ip, [r5, r2]
 800601e:	9a03      	ldr	r2, [sp, #12]
 8006020:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006024:	3304      	adds	r3, #4
 8006026:	f1b9 0f00 	cmp.w	r9, #0
 800602a:	d021      	beq.n	8006070 <__multiply+0x144>
 800602c:	6829      	ldr	r1, [r5, #0]
 800602e:	f104 0c14 	add.w	ip, r4, #20
 8006032:	46ae      	mov	lr, r5
 8006034:	f04f 0a00 	mov.w	sl, #0
 8006038:	f8bc b000 	ldrh.w	fp, [ip]
 800603c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006040:	fb09 220b 	mla	r2, r9, fp, r2
 8006044:	4452      	add	r2, sl
 8006046:	b289      	uxth	r1, r1
 8006048:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800604c:	f84e 1b04 	str.w	r1, [lr], #4
 8006050:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006054:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006058:	f8be 1000 	ldrh.w	r1, [lr]
 800605c:	fb09 110a 	mla	r1, r9, sl, r1
 8006060:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006064:	4567      	cmp	r7, ip
 8006066:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800606a:	d8e5      	bhi.n	8006038 <__multiply+0x10c>
 800606c:	9a01      	ldr	r2, [sp, #4]
 800606e:	50a9      	str	r1, [r5, r2]
 8006070:	3504      	adds	r5, #4
 8006072:	e799      	b.n	8005fa8 <__multiply+0x7c>
 8006074:	3e01      	subs	r6, #1
 8006076:	e79b      	b.n	8005fb0 <__multiply+0x84>
 8006078:	08006c90 	.word	0x08006c90
 800607c:	08006ca1 	.word	0x08006ca1

08006080 <__pow5mult>:
 8006080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006084:	4615      	mov	r5, r2
 8006086:	f012 0203 	ands.w	r2, r2, #3
 800608a:	4606      	mov	r6, r0
 800608c:	460f      	mov	r7, r1
 800608e:	d007      	beq.n	80060a0 <__pow5mult+0x20>
 8006090:	4c25      	ldr	r4, [pc, #148]	; (8006128 <__pow5mult+0xa8>)
 8006092:	3a01      	subs	r2, #1
 8006094:	2300      	movs	r3, #0
 8006096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800609a:	f7ff fe9d 	bl	8005dd8 <__multadd>
 800609e:	4607      	mov	r7, r0
 80060a0:	10ad      	asrs	r5, r5, #2
 80060a2:	d03d      	beq.n	8006120 <__pow5mult+0xa0>
 80060a4:	69f4      	ldr	r4, [r6, #28]
 80060a6:	b97c      	cbnz	r4, 80060c8 <__pow5mult+0x48>
 80060a8:	2010      	movs	r0, #16
 80060aa:	f7ff fd7f 	bl	8005bac <malloc>
 80060ae:	4602      	mov	r2, r0
 80060b0:	61f0      	str	r0, [r6, #28]
 80060b2:	b928      	cbnz	r0, 80060c0 <__pow5mult+0x40>
 80060b4:	4b1d      	ldr	r3, [pc, #116]	; (800612c <__pow5mult+0xac>)
 80060b6:	481e      	ldr	r0, [pc, #120]	; (8006130 <__pow5mult+0xb0>)
 80060b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80060bc:	f000 fa64 	bl	8006588 <__assert_func>
 80060c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060c4:	6004      	str	r4, [r0, #0]
 80060c6:	60c4      	str	r4, [r0, #12]
 80060c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060d0:	b94c      	cbnz	r4, 80060e6 <__pow5mult+0x66>
 80060d2:	f240 2171 	movw	r1, #625	; 0x271
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff12 	bl	8005f00 <__i2b>
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c8 0008 	str.w	r0, [r8, #8]
 80060e2:	4604      	mov	r4, r0
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	f04f 0900 	mov.w	r9, #0
 80060ea:	07eb      	lsls	r3, r5, #31
 80060ec:	d50a      	bpl.n	8006104 <__pow5mult+0x84>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4622      	mov	r2, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff1a 	bl	8005f2c <__multiply>
 80060f8:	4639      	mov	r1, r7
 80060fa:	4680      	mov	r8, r0
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff fe49 	bl	8005d94 <_Bfree>
 8006102:	4647      	mov	r7, r8
 8006104:	106d      	asrs	r5, r5, #1
 8006106:	d00b      	beq.n	8006120 <__pow5mult+0xa0>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	b938      	cbnz	r0, 800611c <__pow5mult+0x9c>
 800610c:	4622      	mov	r2, r4
 800610e:	4621      	mov	r1, r4
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ff0b 	bl	8005f2c <__multiply>
 8006116:	6020      	str	r0, [r4, #0]
 8006118:	f8c0 9000 	str.w	r9, [r0]
 800611c:	4604      	mov	r4, r0
 800611e:	e7e4      	b.n	80060ea <__pow5mult+0x6a>
 8006120:	4638      	mov	r0, r7
 8006122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006126:	bf00      	nop
 8006128:	08006df0 	.word	0x08006df0
 800612c:	08006c21 	.word	0x08006c21
 8006130:	08006ca1 	.word	0x08006ca1

08006134 <__lshift>:
 8006134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	460c      	mov	r4, r1
 800613a:	6849      	ldr	r1, [r1, #4]
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	4607      	mov	r7, r0
 8006146:	4691      	mov	r9, r2
 8006148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800614c:	f108 0601 	add.w	r6, r8, #1
 8006150:	42b3      	cmp	r3, r6
 8006152:	db0b      	blt.n	800616c <__lshift+0x38>
 8006154:	4638      	mov	r0, r7
 8006156:	f7ff fddd 	bl	8005d14 <_Balloc>
 800615a:	4605      	mov	r5, r0
 800615c:	b948      	cbnz	r0, 8006172 <__lshift+0x3e>
 800615e:	4602      	mov	r2, r0
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <__lshift+0xd0>)
 8006162:	4829      	ldr	r0, [pc, #164]	; (8006208 <__lshift+0xd4>)
 8006164:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006168:	f000 fa0e 	bl	8006588 <__assert_func>
 800616c:	3101      	adds	r1, #1
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	e7ee      	b.n	8006150 <__lshift+0x1c>
 8006172:	2300      	movs	r3, #0
 8006174:	f100 0114 	add.w	r1, r0, #20
 8006178:	f100 0210 	add.w	r2, r0, #16
 800617c:	4618      	mov	r0, r3
 800617e:	4553      	cmp	r3, sl
 8006180:	db33      	blt.n	80061ea <__lshift+0xb6>
 8006182:	6920      	ldr	r0, [r4, #16]
 8006184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006188:	f104 0314 	add.w	r3, r4, #20
 800618c:	f019 091f 	ands.w	r9, r9, #31
 8006190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006198:	d02b      	beq.n	80061f2 <__lshift+0xbe>
 800619a:	f1c9 0e20 	rsb	lr, r9, #32
 800619e:	468a      	mov	sl, r1
 80061a0:	2200      	movs	r2, #0
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	fa00 f009 	lsl.w	r0, r0, r9
 80061a8:	4310      	orrs	r0, r2
 80061aa:	f84a 0b04 	str.w	r0, [sl], #4
 80061ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b2:	459c      	cmp	ip, r3
 80061b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80061b8:	d8f3      	bhi.n	80061a2 <__lshift+0x6e>
 80061ba:	ebac 0304 	sub.w	r3, ip, r4
 80061be:	3b15      	subs	r3, #21
 80061c0:	f023 0303 	bic.w	r3, r3, #3
 80061c4:	3304      	adds	r3, #4
 80061c6:	f104 0015 	add.w	r0, r4, #21
 80061ca:	4584      	cmp	ip, r0
 80061cc:	bf38      	it	cc
 80061ce:	2304      	movcc	r3, #4
 80061d0:	50ca      	str	r2, [r1, r3]
 80061d2:	b10a      	cbz	r2, 80061d8 <__lshift+0xa4>
 80061d4:	f108 0602 	add.w	r6, r8, #2
 80061d8:	3e01      	subs	r6, #1
 80061da:	4638      	mov	r0, r7
 80061dc:	612e      	str	r6, [r5, #16]
 80061de:	4621      	mov	r1, r4
 80061e0:	f7ff fdd8 	bl	8005d94 <_Bfree>
 80061e4:	4628      	mov	r0, r5
 80061e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80061ee:	3301      	adds	r3, #1
 80061f0:	e7c5      	b.n	800617e <__lshift+0x4a>
 80061f2:	3904      	subs	r1, #4
 80061f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80061fc:	459c      	cmp	ip, r3
 80061fe:	d8f9      	bhi.n	80061f4 <__lshift+0xc0>
 8006200:	e7ea      	b.n	80061d8 <__lshift+0xa4>
 8006202:	bf00      	nop
 8006204:	08006c90 	.word	0x08006c90
 8006208:	08006ca1 	.word	0x08006ca1

0800620c <__mcmp>:
 800620c:	b530      	push	{r4, r5, lr}
 800620e:	6902      	ldr	r2, [r0, #16]
 8006210:	690c      	ldr	r4, [r1, #16]
 8006212:	1b12      	subs	r2, r2, r4
 8006214:	d10e      	bne.n	8006234 <__mcmp+0x28>
 8006216:	f100 0314 	add.w	r3, r0, #20
 800621a:	3114      	adds	r1, #20
 800621c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006220:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006224:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006228:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800622c:	42a5      	cmp	r5, r4
 800622e:	d003      	beq.n	8006238 <__mcmp+0x2c>
 8006230:	d305      	bcc.n	800623e <__mcmp+0x32>
 8006232:	2201      	movs	r2, #1
 8006234:	4610      	mov	r0, r2
 8006236:	bd30      	pop	{r4, r5, pc}
 8006238:	4283      	cmp	r3, r0
 800623a:	d3f3      	bcc.n	8006224 <__mcmp+0x18>
 800623c:	e7fa      	b.n	8006234 <__mcmp+0x28>
 800623e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006242:	e7f7      	b.n	8006234 <__mcmp+0x28>

08006244 <__mdiff>:
 8006244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	460c      	mov	r4, r1
 800624a:	4606      	mov	r6, r0
 800624c:	4611      	mov	r1, r2
 800624e:	4620      	mov	r0, r4
 8006250:	4690      	mov	r8, r2
 8006252:	f7ff ffdb 	bl	800620c <__mcmp>
 8006256:	1e05      	subs	r5, r0, #0
 8006258:	d110      	bne.n	800627c <__mdiff+0x38>
 800625a:	4629      	mov	r1, r5
 800625c:	4630      	mov	r0, r6
 800625e:	f7ff fd59 	bl	8005d14 <_Balloc>
 8006262:	b930      	cbnz	r0, 8006272 <__mdiff+0x2e>
 8006264:	4b3a      	ldr	r3, [pc, #232]	; (8006350 <__mdiff+0x10c>)
 8006266:	4602      	mov	r2, r0
 8006268:	f240 2137 	movw	r1, #567	; 0x237
 800626c:	4839      	ldr	r0, [pc, #228]	; (8006354 <__mdiff+0x110>)
 800626e:	f000 f98b 	bl	8006588 <__assert_func>
 8006272:	2301      	movs	r3, #1
 8006274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	bfa4      	itt	ge
 800627e:	4643      	movge	r3, r8
 8006280:	46a0      	movge	r8, r4
 8006282:	4630      	mov	r0, r6
 8006284:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006288:	bfa6      	itte	ge
 800628a:	461c      	movge	r4, r3
 800628c:	2500      	movge	r5, #0
 800628e:	2501      	movlt	r5, #1
 8006290:	f7ff fd40 	bl	8005d14 <_Balloc>
 8006294:	b920      	cbnz	r0, 80062a0 <__mdiff+0x5c>
 8006296:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <__mdiff+0x10c>)
 8006298:	4602      	mov	r2, r0
 800629a:	f240 2145 	movw	r1, #581	; 0x245
 800629e:	e7e5      	b.n	800626c <__mdiff+0x28>
 80062a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062a4:	6926      	ldr	r6, [r4, #16]
 80062a6:	60c5      	str	r5, [r0, #12]
 80062a8:	f104 0914 	add.w	r9, r4, #20
 80062ac:	f108 0514 	add.w	r5, r8, #20
 80062b0:	f100 0e14 	add.w	lr, r0, #20
 80062b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062bc:	f108 0210 	add.w	r2, r8, #16
 80062c0:	46f2      	mov	sl, lr
 80062c2:	2100      	movs	r1, #0
 80062c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80062c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062cc:	fa11 f88b 	uxtah	r8, r1, fp
 80062d0:	b299      	uxth	r1, r3
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	eba8 0801 	sub.w	r8, r8, r1
 80062d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062e0:	fa1f f888 	uxth.w	r8, r8
 80062e4:	1419      	asrs	r1, r3, #16
 80062e6:	454e      	cmp	r6, r9
 80062e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062ec:	f84a 3b04 	str.w	r3, [sl], #4
 80062f0:	d8e8      	bhi.n	80062c4 <__mdiff+0x80>
 80062f2:	1b33      	subs	r3, r6, r4
 80062f4:	3b15      	subs	r3, #21
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	3304      	adds	r3, #4
 80062fc:	3415      	adds	r4, #21
 80062fe:	42a6      	cmp	r6, r4
 8006300:	bf38      	it	cc
 8006302:	2304      	movcc	r3, #4
 8006304:	441d      	add	r5, r3
 8006306:	4473      	add	r3, lr
 8006308:	469e      	mov	lr, r3
 800630a:	462e      	mov	r6, r5
 800630c:	4566      	cmp	r6, ip
 800630e:	d30e      	bcc.n	800632e <__mdiff+0xea>
 8006310:	f10c 0203 	add.w	r2, ip, #3
 8006314:	1b52      	subs	r2, r2, r5
 8006316:	f022 0203 	bic.w	r2, r2, #3
 800631a:	3d03      	subs	r5, #3
 800631c:	45ac      	cmp	ip, r5
 800631e:	bf38      	it	cc
 8006320:	2200      	movcc	r2, #0
 8006322:	4413      	add	r3, r2
 8006324:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006328:	b17a      	cbz	r2, 800634a <__mdiff+0x106>
 800632a:	6107      	str	r7, [r0, #16]
 800632c:	e7a4      	b.n	8006278 <__mdiff+0x34>
 800632e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006332:	fa11 f288 	uxtah	r2, r1, r8
 8006336:	1414      	asrs	r4, r2, #16
 8006338:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800633c:	b292      	uxth	r2, r2
 800633e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006342:	f84e 2b04 	str.w	r2, [lr], #4
 8006346:	1421      	asrs	r1, r4, #16
 8006348:	e7e0      	b.n	800630c <__mdiff+0xc8>
 800634a:	3f01      	subs	r7, #1
 800634c:	e7ea      	b.n	8006324 <__mdiff+0xe0>
 800634e:	bf00      	nop
 8006350:	08006c90 	.word	0x08006c90
 8006354:	08006ca1 	.word	0x08006ca1

08006358 <__d2b>:
 8006358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800635c:	460f      	mov	r7, r1
 800635e:	2101      	movs	r1, #1
 8006360:	ec59 8b10 	vmov	r8, r9, d0
 8006364:	4616      	mov	r6, r2
 8006366:	f7ff fcd5 	bl	8005d14 <_Balloc>
 800636a:	4604      	mov	r4, r0
 800636c:	b930      	cbnz	r0, 800637c <__d2b+0x24>
 800636e:	4602      	mov	r2, r0
 8006370:	4b24      	ldr	r3, [pc, #144]	; (8006404 <__d2b+0xac>)
 8006372:	4825      	ldr	r0, [pc, #148]	; (8006408 <__d2b+0xb0>)
 8006374:	f240 310f 	movw	r1, #783	; 0x30f
 8006378:	f000 f906 	bl	8006588 <__assert_func>
 800637c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006384:	bb2d      	cbnz	r5, 80063d2 <__d2b+0x7a>
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	f1b8 0300 	subs.w	r3, r8, #0
 800638c:	d026      	beq.n	80063dc <__d2b+0x84>
 800638e:	4668      	mov	r0, sp
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	f7ff fd87 	bl	8005ea4 <__lo0bits>
 8006396:	e9dd 1200 	ldrd	r1, r2, [sp]
 800639a:	b1e8      	cbz	r0, 80063d8 <__d2b+0x80>
 800639c:	f1c0 0320 	rsb	r3, r0, #32
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	430b      	orrs	r3, r1
 80063a6:	40c2      	lsrs	r2, r0
 80063a8:	6163      	str	r3, [r4, #20]
 80063aa:	9201      	str	r2, [sp, #4]
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	61a3      	str	r3, [r4, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf14      	ite	ne
 80063b4:	2202      	movne	r2, #2
 80063b6:	2201      	moveq	r2, #1
 80063b8:	6122      	str	r2, [r4, #16]
 80063ba:	b1bd      	cbz	r5, 80063ec <__d2b+0x94>
 80063bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063c0:	4405      	add	r5, r0
 80063c2:	603d      	str	r5, [r7, #0]
 80063c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063c8:	6030      	str	r0, [r6, #0]
 80063ca:	4620      	mov	r0, r4
 80063cc:	b003      	add	sp, #12
 80063ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d6:	e7d6      	b.n	8006386 <__d2b+0x2e>
 80063d8:	6161      	str	r1, [r4, #20]
 80063da:	e7e7      	b.n	80063ac <__d2b+0x54>
 80063dc:	a801      	add	r0, sp, #4
 80063de:	f7ff fd61 	bl	8005ea4 <__lo0bits>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	6163      	str	r3, [r4, #20]
 80063e6:	3020      	adds	r0, #32
 80063e8:	2201      	movs	r2, #1
 80063ea:	e7e5      	b.n	80063b8 <__d2b+0x60>
 80063ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063f4:	6038      	str	r0, [r7, #0]
 80063f6:	6918      	ldr	r0, [r3, #16]
 80063f8:	f7ff fd34 	bl	8005e64 <__hi0bits>
 80063fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006400:	e7e2      	b.n	80063c8 <__d2b+0x70>
 8006402:	bf00      	nop
 8006404:	08006c90 	.word	0x08006c90
 8006408:	08006ca1 	.word	0x08006ca1

0800640c <__sflush_r>:
 800640c:	898a      	ldrh	r2, [r1, #12]
 800640e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	0710      	lsls	r0, r2, #28
 8006416:	460c      	mov	r4, r1
 8006418:	d458      	bmi.n	80064cc <__sflush_r+0xc0>
 800641a:	684b      	ldr	r3, [r1, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dc05      	bgt.n	800642c <__sflush_r+0x20>
 8006420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	dc02      	bgt.n	800642c <__sflush_r+0x20>
 8006426:	2000      	movs	r0, #0
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800642e:	2e00      	cmp	r6, #0
 8006430:	d0f9      	beq.n	8006426 <__sflush_r+0x1a>
 8006432:	2300      	movs	r3, #0
 8006434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006438:	682f      	ldr	r7, [r5, #0]
 800643a:	6a21      	ldr	r1, [r4, #32]
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	d032      	beq.n	80064a6 <__sflush_r+0x9a>
 8006440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	075a      	lsls	r2, r3, #29
 8006446:	d505      	bpl.n	8006454 <__sflush_r+0x48>
 8006448:	6863      	ldr	r3, [r4, #4]
 800644a:	1ac0      	subs	r0, r0, r3
 800644c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800644e:	b10b      	cbz	r3, 8006454 <__sflush_r+0x48>
 8006450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006452:	1ac0      	subs	r0, r0, r3
 8006454:	2300      	movs	r3, #0
 8006456:	4602      	mov	r2, r0
 8006458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800645a:	6a21      	ldr	r1, [r4, #32]
 800645c:	4628      	mov	r0, r5
 800645e:	47b0      	blx	r6
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	d106      	bne.n	8006474 <__sflush_r+0x68>
 8006466:	6829      	ldr	r1, [r5, #0]
 8006468:	291d      	cmp	r1, #29
 800646a:	d82b      	bhi.n	80064c4 <__sflush_r+0xb8>
 800646c:	4a29      	ldr	r2, [pc, #164]	; (8006514 <__sflush_r+0x108>)
 800646e:	410a      	asrs	r2, r1
 8006470:	07d6      	lsls	r6, r2, #31
 8006472:	d427      	bmi.n	80064c4 <__sflush_r+0xb8>
 8006474:	2200      	movs	r2, #0
 8006476:	6062      	str	r2, [r4, #4]
 8006478:	04d9      	lsls	r1, r3, #19
 800647a:	6922      	ldr	r2, [r4, #16]
 800647c:	6022      	str	r2, [r4, #0]
 800647e:	d504      	bpl.n	800648a <__sflush_r+0x7e>
 8006480:	1c42      	adds	r2, r0, #1
 8006482:	d101      	bne.n	8006488 <__sflush_r+0x7c>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b903      	cbnz	r3, 800648a <__sflush_r+0x7e>
 8006488:	6560      	str	r0, [r4, #84]	; 0x54
 800648a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648c:	602f      	str	r7, [r5, #0]
 800648e:	2900      	cmp	r1, #0
 8006490:	d0c9      	beq.n	8006426 <__sflush_r+0x1a>
 8006492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006496:	4299      	cmp	r1, r3
 8006498:	d002      	beq.n	80064a0 <__sflush_r+0x94>
 800649a:	4628      	mov	r0, r5
 800649c:	f7ff fb3a 	bl	8005b14 <_free_r>
 80064a0:	2000      	movs	r0, #0
 80064a2:	6360      	str	r0, [r4, #52]	; 0x34
 80064a4:	e7c0      	b.n	8006428 <__sflush_r+0x1c>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b0      	blx	r6
 80064ac:	1c41      	adds	r1, r0, #1
 80064ae:	d1c8      	bne.n	8006442 <__sflush_r+0x36>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c5      	beq.n	8006442 <__sflush_r+0x36>
 80064b6:	2b1d      	cmp	r3, #29
 80064b8:	d001      	beq.n	80064be <__sflush_r+0xb2>
 80064ba:	2b16      	cmp	r3, #22
 80064bc:	d101      	bne.n	80064c2 <__sflush_r+0xb6>
 80064be:	602f      	str	r7, [r5, #0]
 80064c0:	e7b1      	b.n	8006426 <__sflush_r+0x1a>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	e7ad      	b.n	8006428 <__sflush_r+0x1c>
 80064cc:	690f      	ldr	r7, [r1, #16]
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	d0a9      	beq.n	8006426 <__sflush_r+0x1a>
 80064d2:	0793      	lsls	r3, r2, #30
 80064d4:	680e      	ldr	r6, [r1, #0]
 80064d6:	bf08      	it	eq
 80064d8:	694b      	ldreq	r3, [r1, #20]
 80064da:	600f      	str	r7, [r1, #0]
 80064dc:	bf18      	it	ne
 80064de:	2300      	movne	r3, #0
 80064e0:	eba6 0807 	sub.w	r8, r6, r7
 80064e4:	608b      	str	r3, [r1, #8]
 80064e6:	f1b8 0f00 	cmp.w	r8, #0
 80064ea:	dd9c      	ble.n	8006426 <__sflush_r+0x1a>
 80064ec:	6a21      	ldr	r1, [r4, #32]
 80064ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f0:	4643      	mov	r3, r8
 80064f2:	463a      	mov	r2, r7
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b0      	blx	r6
 80064f8:	2800      	cmp	r0, #0
 80064fa:	dc06      	bgt.n	800650a <__sflush_r+0xfe>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006508:	e78e      	b.n	8006428 <__sflush_r+0x1c>
 800650a:	4407      	add	r7, r0
 800650c:	eba8 0800 	sub.w	r8, r8, r0
 8006510:	e7e9      	b.n	80064e6 <__sflush_r+0xda>
 8006512:	bf00      	nop
 8006514:	dfbffffe 	.word	0xdfbffffe

08006518 <_fflush_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b913      	cbnz	r3, 8006528 <_fflush_r+0x10>
 8006522:	2500      	movs	r5, #0
 8006524:	4628      	mov	r0, r5
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	b118      	cbz	r0, 8006532 <_fflush_r+0x1a>
 800652a:	6a03      	ldr	r3, [r0, #32]
 800652c:	b90b      	cbnz	r3, 8006532 <_fflush_r+0x1a>
 800652e:	f7fe fb71 	bl	8004c14 <__sinit>
 8006532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f3      	beq.n	8006522 <_fflush_r+0xa>
 800653a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800653c:	07d0      	lsls	r0, r2, #31
 800653e:	d404      	bmi.n	800654a <_fflush_r+0x32>
 8006540:	0599      	lsls	r1, r3, #22
 8006542:	d402      	bmi.n	800654a <_fflush_r+0x32>
 8006544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006546:	f7fe fc5b 	bl	8004e00 <__retarget_lock_acquire_recursive>
 800654a:	4628      	mov	r0, r5
 800654c:	4621      	mov	r1, r4
 800654e:	f7ff ff5d 	bl	800640c <__sflush_r>
 8006552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006554:	07da      	lsls	r2, r3, #31
 8006556:	4605      	mov	r5, r0
 8006558:	d4e4      	bmi.n	8006524 <_fflush_r+0xc>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	059b      	lsls	r3, r3, #22
 800655e:	d4e1      	bmi.n	8006524 <_fflush_r+0xc>
 8006560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006562:	f7fe fc4e 	bl	8004e02 <__retarget_lock_release_recursive>
 8006566:	e7dd      	b.n	8006524 <_fflush_r+0xc>

08006568 <_sbrk_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_sbrk_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fb f8b4 	bl	80016e0 <_sbrk>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_sbrk_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_sbrk_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000928 	.word	0x20000928

08006588 <__assert_func>:
 8006588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800658a:	4614      	mov	r4, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <__assert_func+0x2c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4605      	mov	r5, r0
 8006594:	68d8      	ldr	r0, [r3, #12]
 8006596:	b14c      	cbz	r4, 80065ac <__assert_func+0x24>
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <__assert_func+0x30>)
 800659a:	9100      	str	r1, [sp, #0]
 800659c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065a0:	4906      	ldr	r1, [pc, #24]	; (80065bc <__assert_func+0x34>)
 80065a2:	462b      	mov	r3, r5
 80065a4:	f000 f844 	bl	8006630 <fiprintf>
 80065a8:	f000 f854 	bl	8006654 <abort>
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <__assert_func+0x38>)
 80065ae:	461c      	mov	r4, r3
 80065b0:	e7f3      	b.n	800659a <__assert_func+0x12>
 80065b2:	bf00      	nop
 80065b4:	20000064 	.word	0x20000064
 80065b8:	08006e06 	.word	0x08006e06
 80065bc:	08006e13 	.word	0x08006e13
 80065c0:	08006e41 	.word	0x08006e41

080065c4 <_calloc_r>:
 80065c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065c6:	fba1 2402 	umull	r2, r4, r1, r2
 80065ca:	b94c      	cbnz	r4, 80065e0 <_calloc_r+0x1c>
 80065cc:	4611      	mov	r1, r2
 80065ce:	9201      	str	r2, [sp, #4]
 80065d0:	f7ff fb14 	bl	8005bfc <_malloc_r>
 80065d4:	9a01      	ldr	r2, [sp, #4]
 80065d6:	4605      	mov	r5, r0
 80065d8:	b930      	cbnz	r0, 80065e8 <_calloc_r+0x24>
 80065da:	4628      	mov	r0, r5
 80065dc:	b003      	add	sp, #12
 80065de:	bd30      	pop	{r4, r5, pc}
 80065e0:	220c      	movs	r2, #12
 80065e2:	6002      	str	r2, [r0, #0]
 80065e4:	2500      	movs	r5, #0
 80065e6:	e7f8      	b.n	80065da <_calloc_r+0x16>
 80065e8:	4621      	mov	r1, r4
 80065ea:	f7fe fb8c 	bl	8004d06 <memset>
 80065ee:	e7f4      	b.n	80065da <_calloc_r+0x16>

080065f0 <__ascii_mbtowc>:
 80065f0:	b082      	sub	sp, #8
 80065f2:	b901      	cbnz	r1, 80065f6 <__ascii_mbtowc+0x6>
 80065f4:	a901      	add	r1, sp, #4
 80065f6:	b142      	cbz	r2, 800660a <__ascii_mbtowc+0x1a>
 80065f8:	b14b      	cbz	r3, 800660e <__ascii_mbtowc+0x1e>
 80065fa:	7813      	ldrb	r3, [r2, #0]
 80065fc:	600b      	str	r3, [r1, #0]
 80065fe:	7812      	ldrb	r2, [r2, #0]
 8006600:	1e10      	subs	r0, r2, #0
 8006602:	bf18      	it	ne
 8006604:	2001      	movne	r0, #1
 8006606:	b002      	add	sp, #8
 8006608:	4770      	bx	lr
 800660a:	4610      	mov	r0, r2
 800660c:	e7fb      	b.n	8006606 <__ascii_mbtowc+0x16>
 800660e:	f06f 0001 	mvn.w	r0, #1
 8006612:	e7f8      	b.n	8006606 <__ascii_mbtowc+0x16>

08006614 <__ascii_wctomb>:
 8006614:	b149      	cbz	r1, 800662a <__ascii_wctomb+0x16>
 8006616:	2aff      	cmp	r2, #255	; 0xff
 8006618:	bf85      	ittet	hi
 800661a:	238a      	movhi	r3, #138	; 0x8a
 800661c:	6003      	strhi	r3, [r0, #0]
 800661e:	700a      	strbls	r2, [r1, #0]
 8006620:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006624:	bf98      	it	ls
 8006626:	2001      	movls	r0, #1
 8006628:	4770      	bx	lr
 800662a:	4608      	mov	r0, r1
 800662c:	4770      	bx	lr
	...

08006630 <fiprintf>:
 8006630:	b40e      	push	{r1, r2, r3}
 8006632:	b503      	push	{r0, r1, lr}
 8006634:	4601      	mov	r1, r0
 8006636:	ab03      	add	r3, sp, #12
 8006638:	4805      	ldr	r0, [pc, #20]	; (8006650 <fiprintf+0x20>)
 800663a:	f853 2b04 	ldr.w	r2, [r3], #4
 800663e:	6800      	ldr	r0, [r0, #0]
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	f000 f837 	bl	80066b4 <_vfiprintf_r>
 8006646:	b002      	add	sp, #8
 8006648:	f85d eb04 	ldr.w	lr, [sp], #4
 800664c:	b003      	add	sp, #12
 800664e:	4770      	bx	lr
 8006650:	20000064 	.word	0x20000064

08006654 <abort>:
 8006654:	b508      	push	{r3, lr}
 8006656:	2006      	movs	r0, #6
 8006658:	f000 fa04 	bl	8006a64 <raise>
 800665c:	2001      	movs	r0, #1
 800665e:	f7fa ffe3 	bl	8001628 <_exit>

08006662 <__sfputc_r>:
 8006662:	6893      	ldr	r3, [r2, #8]
 8006664:	3b01      	subs	r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	b410      	push	{r4}
 800666a:	6093      	str	r3, [r2, #8]
 800666c:	da08      	bge.n	8006680 <__sfputc_r+0x1e>
 800666e:	6994      	ldr	r4, [r2, #24]
 8006670:	42a3      	cmp	r3, r4
 8006672:	db01      	blt.n	8006678 <__sfputc_r+0x16>
 8006674:	290a      	cmp	r1, #10
 8006676:	d103      	bne.n	8006680 <__sfputc_r+0x1e>
 8006678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800667c:	f000 b934 	b.w	80068e8 <__swbuf_r>
 8006680:	6813      	ldr	r3, [r2, #0]
 8006682:	1c58      	adds	r0, r3, #1
 8006684:	6010      	str	r0, [r2, #0]
 8006686:	7019      	strb	r1, [r3, #0]
 8006688:	4608      	mov	r0, r1
 800668a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800668e:	4770      	bx	lr

08006690 <__sfputs_r>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	4606      	mov	r6, r0
 8006694:	460f      	mov	r7, r1
 8006696:	4614      	mov	r4, r2
 8006698:	18d5      	adds	r5, r2, r3
 800669a:	42ac      	cmp	r4, r5
 800669c:	d101      	bne.n	80066a2 <__sfputs_r+0x12>
 800669e:	2000      	movs	r0, #0
 80066a0:	e007      	b.n	80066b2 <__sfputs_r+0x22>
 80066a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a6:	463a      	mov	r2, r7
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff ffda 	bl	8006662 <__sfputc_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d1f3      	bne.n	800669a <__sfputs_r+0xa>
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066b4 <_vfiprintf_r>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	460d      	mov	r5, r1
 80066ba:	b09d      	sub	sp, #116	; 0x74
 80066bc:	4614      	mov	r4, r2
 80066be:	4698      	mov	r8, r3
 80066c0:	4606      	mov	r6, r0
 80066c2:	b118      	cbz	r0, 80066cc <_vfiprintf_r+0x18>
 80066c4:	6a03      	ldr	r3, [r0, #32]
 80066c6:	b90b      	cbnz	r3, 80066cc <_vfiprintf_r+0x18>
 80066c8:	f7fe faa4 	bl	8004c14 <__sinit>
 80066cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	d405      	bmi.n	80066de <_vfiprintf_r+0x2a>
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	059a      	lsls	r2, r3, #22
 80066d6:	d402      	bmi.n	80066de <_vfiprintf_r+0x2a>
 80066d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066da:	f7fe fb91 	bl	8004e00 <__retarget_lock_acquire_recursive>
 80066de:	89ab      	ldrh	r3, [r5, #12]
 80066e0:	071b      	lsls	r3, r3, #28
 80066e2:	d501      	bpl.n	80066e8 <_vfiprintf_r+0x34>
 80066e4:	692b      	ldr	r3, [r5, #16]
 80066e6:	b99b      	cbnz	r3, 8006710 <_vfiprintf_r+0x5c>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 f93a 	bl	8006964 <__swsetup_r>
 80066f0:	b170      	cbz	r0, 8006710 <_vfiprintf_r+0x5c>
 80066f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066f4:	07dc      	lsls	r4, r3, #31
 80066f6:	d504      	bpl.n	8006702 <_vfiprintf_r+0x4e>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066fc:	b01d      	add	sp, #116	; 0x74
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	89ab      	ldrh	r3, [r5, #12]
 8006704:	0598      	lsls	r0, r3, #22
 8006706:	d4f7      	bmi.n	80066f8 <_vfiprintf_r+0x44>
 8006708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800670a:	f7fe fb7a 	bl	8004e02 <__retarget_lock_release_recursive>
 800670e:	e7f3      	b.n	80066f8 <_vfiprintf_r+0x44>
 8006710:	2300      	movs	r3, #0
 8006712:	9309      	str	r3, [sp, #36]	; 0x24
 8006714:	2320      	movs	r3, #32
 8006716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800671a:	f8cd 800c 	str.w	r8, [sp, #12]
 800671e:	2330      	movs	r3, #48	; 0x30
 8006720:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80068d4 <_vfiprintf_r+0x220>
 8006724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006728:	f04f 0901 	mov.w	r9, #1
 800672c:	4623      	mov	r3, r4
 800672e:	469a      	mov	sl, r3
 8006730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006734:	b10a      	cbz	r2, 800673a <_vfiprintf_r+0x86>
 8006736:	2a25      	cmp	r2, #37	; 0x25
 8006738:	d1f9      	bne.n	800672e <_vfiprintf_r+0x7a>
 800673a:	ebba 0b04 	subs.w	fp, sl, r4
 800673e:	d00b      	beq.n	8006758 <_vfiprintf_r+0xa4>
 8006740:	465b      	mov	r3, fp
 8006742:	4622      	mov	r2, r4
 8006744:	4629      	mov	r1, r5
 8006746:	4630      	mov	r0, r6
 8006748:	f7ff ffa2 	bl	8006690 <__sfputs_r>
 800674c:	3001      	adds	r0, #1
 800674e:	f000 80a9 	beq.w	80068a4 <_vfiprintf_r+0x1f0>
 8006752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006754:	445a      	add	r2, fp
 8006756:	9209      	str	r2, [sp, #36]	; 0x24
 8006758:	f89a 3000 	ldrb.w	r3, [sl]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80a1 	beq.w	80068a4 <_vfiprintf_r+0x1f0>
 8006762:	2300      	movs	r3, #0
 8006764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800676c:	f10a 0a01 	add.w	sl, sl, #1
 8006770:	9304      	str	r3, [sp, #16]
 8006772:	9307      	str	r3, [sp, #28]
 8006774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006778:	931a      	str	r3, [sp, #104]	; 0x68
 800677a:	4654      	mov	r4, sl
 800677c:	2205      	movs	r2, #5
 800677e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006782:	4854      	ldr	r0, [pc, #336]	; (80068d4 <_vfiprintf_r+0x220>)
 8006784:	f7f9 fd34 	bl	80001f0 <memchr>
 8006788:	9a04      	ldr	r2, [sp, #16]
 800678a:	b9d8      	cbnz	r0, 80067c4 <_vfiprintf_r+0x110>
 800678c:	06d1      	lsls	r1, r2, #27
 800678e:	bf44      	itt	mi
 8006790:	2320      	movmi	r3, #32
 8006792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006796:	0713      	lsls	r3, r2, #28
 8006798:	bf44      	itt	mi
 800679a:	232b      	movmi	r3, #43	; 0x2b
 800679c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067a0:	f89a 3000 	ldrb.w	r3, [sl]
 80067a4:	2b2a      	cmp	r3, #42	; 0x2a
 80067a6:	d015      	beq.n	80067d4 <_vfiprintf_r+0x120>
 80067a8:	9a07      	ldr	r2, [sp, #28]
 80067aa:	4654      	mov	r4, sl
 80067ac:	2000      	movs	r0, #0
 80067ae:	f04f 0c0a 	mov.w	ip, #10
 80067b2:	4621      	mov	r1, r4
 80067b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b8:	3b30      	subs	r3, #48	; 0x30
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d94d      	bls.n	800685a <_vfiprintf_r+0x1a6>
 80067be:	b1b0      	cbz	r0, 80067ee <_vfiprintf_r+0x13a>
 80067c0:	9207      	str	r2, [sp, #28]
 80067c2:	e014      	b.n	80067ee <_vfiprintf_r+0x13a>
 80067c4:	eba0 0308 	sub.w	r3, r0, r8
 80067c8:	fa09 f303 	lsl.w	r3, r9, r3
 80067cc:	4313      	orrs	r3, r2
 80067ce:	9304      	str	r3, [sp, #16]
 80067d0:	46a2      	mov	sl, r4
 80067d2:	e7d2      	b.n	800677a <_vfiprintf_r+0xc6>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	1d19      	adds	r1, r3, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	9103      	str	r1, [sp, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bfbb      	ittet	lt
 80067e0:	425b      	neglt	r3, r3
 80067e2:	f042 0202 	orrlt.w	r2, r2, #2
 80067e6:	9307      	strge	r3, [sp, #28]
 80067e8:	9307      	strlt	r3, [sp, #28]
 80067ea:	bfb8      	it	lt
 80067ec:	9204      	strlt	r2, [sp, #16]
 80067ee:	7823      	ldrb	r3, [r4, #0]
 80067f0:	2b2e      	cmp	r3, #46	; 0x2e
 80067f2:	d10c      	bne.n	800680e <_vfiprintf_r+0x15a>
 80067f4:	7863      	ldrb	r3, [r4, #1]
 80067f6:	2b2a      	cmp	r3, #42	; 0x2a
 80067f8:	d134      	bne.n	8006864 <_vfiprintf_r+0x1b0>
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	1d1a      	adds	r2, r3, #4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	9203      	str	r2, [sp, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	bfb8      	it	lt
 8006806:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800680a:	3402      	adds	r4, #2
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80068e4 <_vfiprintf_r+0x230>
 8006812:	7821      	ldrb	r1, [r4, #0]
 8006814:	2203      	movs	r2, #3
 8006816:	4650      	mov	r0, sl
 8006818:	f7f9 fcea 	bl	80001f0 <memchr>
 800681c:	b138      	cbz	r0, 800682e <_vfiprintf_r+0x17a>
 800681e:	9b04      	ldr	r3, [sp, #16]
 8006820:	eba0 000a 	sub.w	r0, r0, sl
 8006824:	2240      	movs	r2, #64	; 0x40
 8006826:	4082      	lsls	r2, r0
 8006828:	4313      	orrs	r3, r2
 800682a:	3401      	adds	r4, #1
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006832:	4829      	ldr	r0, [pc, #164]	; (80068d8 <_vfiprintf_r+0x224>)
 8006834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006838:	2206      	movs	r2, #6
 800683a:	f7f9 fcd9 	bl	80001f0 <memchr>
 800683e:	2800      	cmp	r0, #0
 8006840:	d03f      	beq.n	80068c2 <_vfiprintf_r+0x20e>
 8006842:	4b26      	ldr	r3, [pc, #152]	; (80068dc <_vfiprintf_r+0x228>)
 8006844:	bb1b      	cbnz	r3, 800688e <_vfiprintf_r+0x1da>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	3307      	adds	r3, #7
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	3308      	adds	r3, #8
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006854:	443b      	add	r3, r7
 8006856:	9309      	str	r3, [sp, #36]	; 0x24
 8006858:	e768      	b.n	800672c <_vfiprintf_r+0x78>
 800685a:	fb0c 3202 	mla	r2, ip, r2, r3
 800685e:	460c      	mov	r4, r1
 8006860:	2001      	movs	r0, #1
 8006862:	e7a6      	b.n	80067b2 <_vfiprintf_r+0xfe>
 8006864:	2300      	movs	r3, #0
 8006866:	3401      	adds	r4, #1
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	4619      	mov	r1, r3
 800686c:	f04f 0c0a 	mov.w	ip, #10
 8006870:	4620      	mov	r0, r4
 8006872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006876:	3a30      	subs	r2, #48	; 0x30
 8006878:	2a09      	cmp	r2, #9
 800687a:	d903      	bls.n	8006884 <_vfiprintf_r+0x1d0>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0c6      	beq.n	800680e <_vfiprintf_r+0x15a>
 8006880:	9105      	str	r1, [sp, #20]
 8006882:	e7c4      	b.n	800680e <_vfiprintf_r+0x15a>
 8006884:	fb0c 2101 	mla	r1, ip, r1, r2
 8006888:	4604      	mov	r4, r0
 800688a:	2301      	movs	r3, #1
 800688c:	e7f0      	b.n	8006870 <_vfiprintf_r+0x1bc>
 800688e:	ab03      	add	r3, sp, #12
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	462a      	mov	r2, r5
 8006894:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <_vfiprintf_r+0x22c>)
 8006896:	a904      	add	r1, sp, #16
 8006898:	4630      	mov	r0, r6
 800689a:	f7fd fd7b 	bl	8004394 <_printf_float>
 800689e:	4607      	mov	r7, r0
 80068a0:	1c78      	adds	r0, r7, #1
 80068a2:	d1d6      	bne.n	8006852 <_vfiprintf_r+0x19e>
 80068a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a6:	07d9      	lsls	r1, r3, #31
 80068a8:	d405      	bmi.n	80068b6 <_vfiprintf_r+0x202>
 80068aa:	89ab      	ldrh	r3, [r5, #12]
 80068ac:	059a      	lsls	r2, r3, #22
 80068ae:	d402      	bmi.n	80068b6 <_vfiprintf_r+0x202>
 80068b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068b2:	f7fe faa6 	bl	8004e02 <__retarget_lock_release_recursive>
 80068b6:	89ab      	ldrh	r3, [r5, #12]
 80068b8:	065b      	lsls	r3, r3, #25
 80068ba:	f53f af1d 	bmi.w	80066f8 <_vfiprintf_r+0x44>
 80068be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068c0:	e71c      	b.n	80066fc <_vfiprintf_r+0x48>
 80068c2:	ab03      	add	r3, sp, #12
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	462a      	mov	r2, r5
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <_vfiprintf_r+0x22c>)
 80068ca:	a904      	add	r1, sp, #16
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7fe f805 	bl	80048dc <_printf_i>
 80068d2:	e7e4      	b.n	800689e <_vfiprintf_r+0x1ea>
 80068d4:	08006f43 	.word	0x08006f43
 80068d8:	08006f4d 	.word	0x08006f4d
 80068dc:	08004395 	.word	0x08004395
 80068e0:	08006691 	.word	0x08006691
 80068e4:	08006f49 	.word	0x08006f49

080068e8 <__swbuf_r>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	460e      	mov	r6, r1
 80068ec:	4614      	mov	r4, r2
 80068ee:	4605      	mov	r5, r0
 80068f0:	b118      	cbz	r0, 80068fa <__swbuf_r+0x12>
 80068f2:	6a03      	ldr	r3, [r0, #32]
 80068f4:	b90b      	cbnz	r3, 80068fa <__swbuf_r+0x12>
 80068f6:	f7fe f98d 	bl	8004c14 <__sinit>
 80068fa:	69a3      	ldr	r3, [r4, #24]
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	071a      	lsls	r2, r3, #28
 8006902:	d525      	bpl.n	8006950 <__swbuf_r+0x68>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	b31b      	cbz	r3, 8006950 <__swbuf_r+0x68>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	6922      	ldr	r2, [r4, #16]
 800690c:	1a98      	subs	r0, r3, r2
 800690e:	6963      	ldr	r3, [r4, #20]
 8006910:	b2f6      	uxtb	r6, r6
 8006912:	4283      	cmp	r3, r0
 8006914:	4637      	mov	r7, r6
 8006916:	dc04      	bgt.n	8006922 <__swbuf_r+0x3a>
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f7ff fdfc 	bl	8006518 <_fflush_r>
 8006920:	b9e0      	cbnz	r0, 800695c <__swbuf_r+0x74>
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	3b01      	subs	r3, #1
 8006926:	60a3      	str	r3, [r4, #8]
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	6022      	str	r2, [r4, #0]
 800692e:	701e      	strb	r6, [r3, #0]
 8006930:	6962      	ldr	r2, [r4, #20]
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	429a      	cmp	r2, r3
 8006936:	d004      	beq.n	8006942 <__swbuf_r+0x5a>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d506      	bpl.n	800694c <__swbuf_r+0x64>
 800693e:	2e0a      	cmp	r6, #10
 8006940:	d104      	bne.n	800694c <__swbuf_r+0x64>
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f7ff fde7 	bl	8006518 <_fflush_r>
 800694a:	b938      	cbnz	r0, 800695c <__swbuf_r+0x74>
 800694c:	4638      	mov	r0, r7
 800694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f806 	bl	8006964 <__swsetup_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	d0d5      	beq.n	8006908 <__swbuf_r+0x20>
 800695c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006960:	e7f4      	b.n	800694c <__swbuf_r+0x64>
	...

08006964 <__swsetup_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <__swsetup_r+0xac>)
 8006968:	4605      	mov	r5, r0
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	460c      	mov	r4, r1
 800696e:	b118      	cbz	r0, 8006978 <__swsetup_r+0x14>
 8006970:	6a03      	ldr	r3, [r0, #32]
 8006972:	b90b      	cbnz	r3, 8006978 <__swsetup_r+0x14>
 8006974:	f7fe f94e 	bl	8004c14 <__sinit>
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800697e:	0718      	lsls	r0, r3, #28
 8006980:	d422      	bmi.n	80069c8 <__swsetup_r+0x64>
 8006982:	06d9      	lsls	r1, r3, #27
 8006984:	d407      	bmi.n	8006996 <__swsetup_r+0x32>
 8006986:	2309      	movs	r3, #9
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006994:	e034      	b.n	8006a00 <__swsetup_r+0x9c>
 8006996:	0758      	lsls	r0, r3, #29
 8006998:	d512      	bpl.n	80069c0 <__swsetup_r+0x5c>
 800699a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699c:	b141      	cbz	r1, 80069b0 <__swsetup_r+0x4c>
 800699e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d002      	beq.n	80069ac <__swsetup_r+0x48>
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7ff f8b4 	bl	8005b14 <_free_r>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6363      	str	r3, [r4, #52]	; 0x34
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	2300      	movs	r3, #0
 80069ba:	6063      	str	r3, [r4, #4]
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	f043 0308 	orr.w	r3, r3, #8
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	b94b      	cbnz	r3, 80069e0 <__swsetup_r+0x7c>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d6:	d003      	beq.n	80069e0 <__swsetup_r+0x7c>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f884 	bl	8006ae8 <__smakebuf_r>
 80069e0:	89a0      	ldrh	r0, [r4, #12]
 80069e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e6:	f010 0301 	ands.w	r3, r0, #1
 80069ea:	d00a      	beq.n	8006a02 <__swsetup_r+0x9e>
 80069ec:	2300      	movs	r3, #0
 80069ee:	60a3      	str	r3, [r4, #8]
 80069f0:	6963      	ldr	r3, [r4, #20]
 80069f2:	425b      	negs	r3, r3
 80069f4:	61a3      	str	r3, [r4, #24]
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	b943      	cbnz	r3, 8006a0c <__swsetup_r+0xa8>
 80069fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069fe:	d1c4      	bne.n	800698a <__swsetup_r+0x26>
 8006a00:	bd38      	pop	{r3, r4, r5, pc}
 8006a02:	0781      	lsls	r1, r0, #30
 8006a04:	bf58      	it	pl
 8006a06:	6963      	ldrpl	r3, [r4, #20]
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	e7f4      	b.n	80069f6 <__swsetup_r+0x92>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e7f7      	b.n	8006a00 <__swsetup_r+0x9c>
 8006a10:	20000064 	.word	0x20000064

08006a14 <_raise_r>:
 8006a14:	291f      	cmp	r1, #31
 8006a16:	b538      	push	{r3, r4, r5, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	d904      	bls.n	8006a28 <_raise_r+0x14>
 8006a1e:	2316      	movs	r3, #22
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a2a:	b112      	cbz	r2, 8006a32 <_raise_r+0x1e>
 8006a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a30:	b94b      	cbnz	r3, 8006a46 <_raise_r+0x32>
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 f830 	bl	8006a98 <_getpid_r>
 8006a38:	462a      	mov	r2, r5
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a42:	f000 b817 	b.w	8006a74 <_kill_r>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d00a      	beq.n	8006a60 <_raise_r+0x4c>
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	d103      	bne.n	8006a56 <_raise_r+0x42>
 8006a4e:	2316      	movs	r3, #22
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	2001      	movs	r0, #1
 8006a54:	e7e7      	b.n	8006a26 <_raise_r+0x12>
 8006a56:	2400      	movs	r4, #0
 8006a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	4798      	blx	r3
 8006a60:	2000      	movs	r0, #0
 8006a62:	e7e0      	b.n	8006a26 <_raise_r+0x12>

08006a64 <raise>:
 8006a64:	4b02      	ldr	r3, [pc, #8]	; (8006a70 <raise+0xc>)
 8006a66:	4601      	mov	r1, r0
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f7ff bfd3 	b.w	8006a14 <_raise_r>
 8006a6e:	bf00      	nop
 8006a70:	20000064 	.word	0x20000064

08006a74 <_kill_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	; (8006a94 <_kill_r+0x20>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f7fa fdc1 	bl	8001608 <_kill>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d102      	bne.n	8006a90 <_kill_r+0x1c>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	b103      	cbz	r3, 8006a90 <_kill_r+0x1c>
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	20000928 	.word	0x20000928

08006a98 <_getpid_r>:
 8006a98:	f7fa bdae 	b.w	80015f8 <_getpid>

08006a9c <__swhatbuf_r>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	b096      	sub	sp, #88	; 0x58
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	461e      	mov	r6, r3
 8006aac:	da0d      	bge.n	8006aca <__swhatbuf_r+0x2e>
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ab4:	f04f 0100 	mov.w	r1, #0
 8006ab8:	bf0c      	ite	eq
 8006aba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006abe:	2340      	movne	r3, #64	; 0x40
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	6031      	str	r1, [r6, #0]
 8006ac4:	602b      	str	r3, [r5, #0]
 8006ac6:	b016      	add	sp, #88	; 0x58
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	466a      	mov	r2, sp
 8006acc:	f000 f848 	bl	8006b60 <_fstat_r>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	dbec      	blt.n	8006aae <__swhatbuf_r+0x12>
 8006ad4:	9901      	ldr	r1, [sp, #4]
 8006ad6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ada:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ade:	4259      	negs	r1, r3
 8006ae0:	4159      	adcs	r1, r3
 8006ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae6:	e7eb      	b.n	8006ac0 <__swhatbuf_r+0x24>

08006ae8 <__smakebuf_r>:
 8006ae8:	898b      	ldrh	r3, [r1, #12]
 8006aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aec:	079d      	lsls	r5, r3, #30
 8006aee:	4606      	mov	r6, r0
 8006af0:	460c      	mov	r4, r1
 8006af2:	d507      	bpl.n	8006b04 <__smakebuf_r+0x1c>
 8006af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	2301      	movs	r3, #1
 8006afe:	6163      	str	r3, [r4, #20]
 8006b00:	b002      	add	sp, #8
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	ab01      	add	r3, sp, #4
 8006b06:	466a      	mov	r2, sp
 8006b08:	f7ff ffc8 	bl	8006a9c <__swhatbuf_r>
 8006b0c:	9900      	ldr	r1, [sp, #0]
 8006b0e:	4605      	mov	r5, r0
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff f873 	bl	8005bfc <_malloc_r>
 8006b16:	b948      	cbnz	r0, 8006b2c <__smakebuf_r+0x44>
 8006b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b1c:	059a      	lsls	r2, r3, #22
 8006b1e:	d4ef      	bmi.n	8006b00 <__smakebuf_r+0x18>
 8006b20:	f023 0303 	bic.w	r3, r3, #3
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	e7e3      	b.n	8006af4 <__smakebuf_r+0xc>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	6020      	str	r0, [r4, #0]
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	9b00      	ldr	r3, [sp, #0]
 8006b38:	6163      	str	r3, [r4, #20]
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	6120      	str	r0, [r4, #16]
 8006b3e:	b15b      	cbz	r3, 8006b58 <__smakebuf_r+0x70>
 8006b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f81d 	bl	8006b84 <_isatty_r>
 8006b4a:	b128      	cbz	r0, 8006b58 <__smakebuf_r+0x70>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	431d      	orrs	r5, r3
 8006b5c:	81a5      	strh	r5, [r4, #12]
 8006b5e:	e7cf      	b.n	8006b00 <__smakebuf_r+0x18>

08006b60 <_fstat_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d07      	ldr	r5, [pc, #28]	; (8006b80 <_fstat_r+0x20>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	f7fa fd8e 	bl	800168e <_fstat>
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d102      	bne.n	8006b7c <_fstat_r+0x1c>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	b103      	cbz	r3, 8006b7c <_fstat_r+0x1c>
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000928 	.word	0x20000928

08006b84 <_isatty_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d06      	ldr	r5, [pc, #24]	; (8006ba0 <_isatty_r+0x1c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	f7fa fd8d 	bl	80016ae <_isatty>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_isatty_r+0x1a>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_isatty_r+0x1a>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000928 	.word	0x20000928

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
