
SALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  0800d078  0800d078  0001d078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b4  0800d7b4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7b4  0800d7b4  0001d7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7bc  0800d7bc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7bc  0800d7bc  0001d7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7c0  0800d7c0  0001d7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d7c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00000de4  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fe0  20000fe0  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000165b3  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003511  00000000  00000000  00036822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013c8  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f51  00000000  00000000  0003b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029497  00000000  00000000  0003c051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001afbe  00000000  00000000  000654e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000edadb  00000000  00000000  000804a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000674c  00000000  00000000  0016df84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001746d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d060 	.word	0x0800d060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	0800d060 	.word	0x0800d060

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <parse_GPRMC>:
#include <string.h>
#include "gps.h"

void
parse_GPRMC(const char *line, struct GPRMC *data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b092      	sub	sp, #72	; 0x48
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	int fieldStart = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
	int count = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	643b      	str	r3, [r7, #64]	; 0x40
	char temp_buff[MAX_FIELD_LENGTH + 1];

	// fieldize the input line
	for (int i = 0; line[i] != '\0'; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001026:	e19f      	b.n	8001368 <parse_GPRMC+0x358>
		if (line[i] == ',' || line[i + 1] == '\0') {
 8001028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b2c      	cmp	r3, #44	; 0x2c
 8001032:	d007      	beq.n	8001044 <parse_GPRMC+0x34>
 8001034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001036:	3301      	adds	r3, #1
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 818f 	bne.w	8001362 <parse_GPRMC+0x352>
			int fieldLength = i - fieldStart;
 8001044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
			char field[MAX_FIELD_LENGTH + 1];

			strncpy(field, line + fieldStart, fieldLength);
 800104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	18d1      	adds	r1, r2, r3
 8001052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f009 faff 	bl	800a65c <strncpy>
			field[fieldLength] = '\0';
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	4413      	add	r3, r2
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
			//printf("count %i field %s\r\n", count, field);

			switch (count) {
 800106a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800106c:	3b01      	subs	r3, #1
 800106e:	2b0c      	cmp	r3, #12
 8001070:	f200 8171 	bhi.w	8001356 <parse_GPRMC+0x346>
 8001074:	a201      	add	r2, pc, #4	; (adr r2, 800107c <parse_GPRMC+0x6c>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	080010b1 	.word	0x080010b1
 8001080:	080010c9 	.word	0x080010c9
 8001084:	0800114d 	.word	0x0800114d
 8001088:	08001157 	.word	0x08001157
 800108c:	080011db 	.word	0x080011db
 8001090:	080011f1 	.word	0x080011f1
 8001094:	08001275 	.word	0x08001275
 8001098:	08001289 	.word	0x08001289
 800109c:	08001357 	.word	0x08001357
 80010a0:	080012a7 	.word	0x080012a7
 80010a4:	08001357 	.word	0x08001357
 80010a8:	08001357 	.word	0x08001357
 80010ac:	0800132b 	.word	0x0800132b
			case 1:
				strncpy(data->log_header,
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	3301      	adds	r3, #1
 80010b8:	2205      	movs	r2, #5
 80010ba:	4619      	mov	r1, r3
 80010bc:	f009 face 	bl	800a65c <strncpy>
				        field + 1,
				        LOG_HEADER_LENGTH);
				data->log_header[LOG_HEADER_LENGTH] = '\0';
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	715a      	strb	r2, [r3, #5]
				break;
 80010c6:	e146      	b.n	8001356 <parse_GPRMC+0x346>
			case 2:
				strncpy(temp_buff, field, UTC_HOURS_LENGTH);
 80010c8:	f107 0108 	add.w	r1, r7, #8
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	2202      	movs	r2, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f009 fac2 	bl	800a65c <strncpy>
				temp_buff[UTC_HOURS_LENGTH] = '\0';
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.hours = atoi(temp_buff);
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4618      	mov	r0, r3
 80010e4:	f007 fd7a 	bl	8008bdc <atoi>
 80010e8:	4602      	mov	r2, r0
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	615a      	str	r2, [r3, #20]

				strncpy(temp_buff,
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	3302      	adds	r3, #2
 80010f4:	f107 0020 	add.w	r0, r7, #32
 80010f8:	2202      	movs	r2, #2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f009 faae 	bl	800a65c <strncpy>
				        field + UTC_HOURS_LENGTH,
				        UTC_MINUTES_LENGTH);
				temp_buff[2] = '\0';
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.minutes = atoi(temp_buff);
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f007 fd66 	bl	8008bdc <atoi>
 8001110:	4602      	mov	r2, r0
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	619a      	str	r2, [r3, #24]

				strncpy(temp_buff,
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	3304      	adds	r3, #4
 800111c:	f107 0020 	add.w	r0, r7, #32
 8001120:	2205      	movs	r2, #5
 8001122:	4619      	mov	r1, r3
 8001124:	f009 fa9a 	bl	800a65c <strncpy>
				        field + UTC_HOURS_LENGTH +
				                UTC_MINUTES_LENGTH,
				        UTC_SECOND_LENGTH);
				temp_buff[UTC_SECOND_LENGTH] = '\0';
 8001128:	2300      	movs	r3, #0
 800112a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				data->datetime.seconds = atof(temp_buff);
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fd4f 	bl	8008bd6 <atof>
 8001138:	ec53 2b10 	vmov	r2, r3, d0
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd62 	bl	8000c08 <__aeabi_d2f>
 8001144:	4602      	mov	r2, r0
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	61da      	str	r2, [r3, #28]
				break;
 800114a:	e104      	b.n	8001356 <parse_GPRMC+0x346>
			case 3:
				data->status = field[0];
 800114c:	7a3a      	ldrb	r2, [r7, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f883 2020 	strb.w	r2, [r3, #32]
				break;
 8001154:	e0ff      	b.n	8001356 <parse_GPRMC+0x346>
			case 4:
				if (data->status == 'A') {
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115c:	2b41      	cmp	r3, #65	; 0x41
 800115e:	f040 80f3 	bne.w	8001348 <parse_GPRMC+0x338>
					strncpy(temp_buff,
 8001162:	f107 0108 	add.w	r1, r7, #8
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2202      	movs	r2, #2
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fa75 	bl	800a65c <strncpy>
					        field,
					        LATITUDE_DEGREES_LENGTH);
					temp_buff[LATITUDE_DEGREES_LENGTH] = '\0';
 8001172:	2300      	movs	r3, #0
 8001174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->latitude.degrees = atoi(temp_buff);
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f007 fd2d 	bl	8008bdc <atoi>
 8001182:	4602      	mov	r2, r0
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

					strncpy(temp_buff,
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	3302      	adds	r3, #2
 800118e:	f107 0020 	add.w	r0, r7, #32
 8001192:	2202      	movs	r2, #2
 8001194:	4619      	mov	r1, r3
 8001196:	f009 fa61 	bl	800a65c <strncpy>
					        field + LATITUDE_DEGREES_LENGTH,
					        LATITUDE_MINUTES_LENGTH);
					temp_buff[LATITUDE_MINUTES_LENGTH] = '\0';
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->latitude.minutes = atoi(temp_buff);
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 fd19 	bl	8008bdc <atoi>
 80011aa:	4602      	mov	r2, r0
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28

					strncpy(temp_buff,
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	3305      	adds	r3, #5
 80011b6:	f107 0020 	add.w	r0, r7, #32
 80011ba:	220b      	movs	r2, #11
 80011bc:	4619      	mov	r1, r3
 80011be:	f009 fa4d 	bl	800a65c <strncpy>
					        field + LATITUDE_DEGREES_LENGTH +
					                LATITUDE_MINUTES_LENGTH + 1,
					        LATITUDE_SECONDS_LENGTH);
					temp_buff[LATITUDE_SECONDS_LENGTH] = '\0';
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					data->latitude.seconds = atoi(temp_buff);
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fd05 	bl	8008bdc <atoi>
 80011d2:	4602      	mov	r2, r0
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				break;
 80011d8:	e0b6      	b.n	8001348 <parse_GPRMC+0x338>
			case 5:
				if (data->status == 'A') {
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	2b41      	cmp	r3, #65	; 0x41
 80011e2:	f040 80b3 	bne.w	800134c <parse_GPRMC+0x33c>
					data->latitude.direction = field[0];
 80011e6:	7a3a      	ldrb	r2, [r7, #8]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
				break;
 80011ee:	e0ad      	b.n	800134c <parse_GPRMC+0x33c>
			case 6:
				if (data->status == 'A') {
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	2b41      	cmp	r3, #65	; 0x41
 80011f8:	f040 80aa 	bne.w	8001350 <parse_GPRMC+0x340>
					strncpy(temp_buff,
 80011fc:	f107 0108 	add.w	r1, r7, #8
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	2202      	movs	r2, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f009 fa28 	bl	800a65c <strncpy>
					        field,
					        LONGITUDE_DEGREES_LENGTH);
					temp_buff[LONGITUDE_DEGREES_LENGTH] = '\0';
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->longitude.degrees = atoi(temp_buff);
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fce0 	bl	8008bdc <atoi>
 800121c:	4602      	mov	r2, r0
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34

					strncpy(temp_buff,
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	3302      	adds	r3, #2
 8001228:	f107 0020 	add.w	r0, r7, #32
 800122c:	2202      	movs	r2, #2
 800122e:	4619      	mov	r1, r3
 8001230:	f009 fa14 	bl	800a65c <strncpy>
					        field + LONGITUDE_DEGREES_LENGTH,
					        LONGITUDE_MINUTES_LENGTH);
					temp_buff[2] = '\0';
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					data->longitude.minutes = atoi(temp_buff);
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4618      	mov	r0, r3
 8001240:	f007 fccc 	bl	8008bdc <atoi>
 8001244:	4602      	mov	r2, r0
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	639a      	str	r2, [r3, #56]	; 0x38

					strncpy(temp_buff,
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	3305      	adds	r3, #5
 8001250:	f107 0020 	add.w	r0, r7, #32
 8001254:	220b      	movs	r2, #11
 8001256:	4619      	mov	r1, r3
 8001258:	f009 fa00 	bl	800a65c <strncpy>
					        field + LONGITUDE_DEGREES_LENGTH +
					                LONGITUDE_MINUTES_LENGTH +
					                1,
					        LONGITUDE_SECONDS_LENGTH);
					temp_buff[LONGITUDE_SECONDS_LENGTH] = '\0';
 800125c:	2300      	movs	r3, #0
 800125e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					data->longitude.seconds = atoi(temp_buff);
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	4618      	mov	r0, r3
 8001268:	f007 fcb8 	bl	8008bdc <atoi>
 800126c:	4602      	mov	r2, r0
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c
				}
				break;
 8001272:	e06d      	b.n	8001350 <parse_GPRMC+0x340>
			case 7:
				if (data->status == 'A') {
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127a:	2b41      	cmp	r3, #65	; 0x41
 800127c:	d16a      	bne.n	8001354 <parse_GPRMC+0x344>
					data->longitude.direction = field[0];
 800127e:	7a3a      	ldrb	r2, [r7, #8]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				}
				break;
 8001286:	e065      	b.n	8001354 <parse_GPRMC+0x344>
			case 8:
				data->speed = atof(field);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f007 fca2 	bl	8008bd6 <atof>
 8001292:	ec53 2b10 	vmov	r2, r3, d0
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fcb5 	bl	8000c08 <__aeabi_d2f>
 800129e:	4602      	mov	r2, r0
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
				break;
 80012a4:	e057      	b.n	8001356 <parse_GPRMC+0x346>
			case 10:
				strncpy(temp_buff, field, DAYS_LENGTH);
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2202      	movs	r2, #2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 f9d3 	bl	800a65c <strncpy>
				temp_buff[DAYS_LENGTH] = '\0';
 80012b6:	2300      	movs	r3, #0
 80012b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.day = atoi(temp_buff);
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 fc8b 	bl	8008bdc <atoi>
 80012c6:	4602      	mov	r2, r0
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	611a      	str	r2, [r3, #16]

				strncpy(temp_buff,
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	3302      	adds	r3, #2
 80012d2:	f107 0020 	add.w	r0, r7, #32
 80012d6:	2202      	movs	r2, #2
 80012d8:	4619      	mov	r1, r3
 80012da:	f009 f9bf 	bl	800a65c <strncpy>
				        field + DAYS_LENGTH,
				        MONTHS_LENGTH);
				temp_buff[MONTHS_LENGTH] = '\0';
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.month = atoi(temp_buff);
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 fc77 	bl	8008bdc <atoi>
 80012ee:	4602      	mov	r2, r0
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	60da      	str	r2, [r3, #12]

				strncpy(temp_buff,
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	3304      	adds	r3, #4
 80012fa:	f107 0020 	add.w	r0, r7, #32
 80012fe:	2202      	movs	r2, #2
 8001300:	4619      	mov	r1, r3
 8001302:	f009 f9ab 	bl	800a65c <strncpy>
				        field + DAYS_LENGTH + MONTHS_LENGTH,
				        YEARS_LENGTH);
				temp_buff[YEARS_LENGTH] = '\0';
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				data->datetime.year = atof(temp_buff);
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f007 fc60 	bl	8008bd6 <atof>
 8001316:	ec53 2b10 	vmov	r2, r3, d0
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc2b 	bl	8000b78 <__aeabi_d2iz>
 8001322:	4602      	mov	r2, r0
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	609a      	str	r2, [r3, #8]
				break;
 8001328:	e015      	b.n	8001356 <parse_GPRMC+0x346>
			case 13:
				strncpy(data->checksum, field + 2, CHECKSUM_LENGTH);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	3302      	adds	r3, #2
 8001336:	2202      	movs	r2, #2
 8001338:	4619      	mov	r1, r3
 800133a:	f009 f98f 	bl	800a65c <strncpy>
				data->checksum[CHECKSUM_LENGTH] = '\0';
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				break;
 8001346:	e006      	b.n	8001356 <parse_GPRMC+0x346>
				break;
 8001348:	bf00      	nop
 800134a:	e004      	b.n	8001356 <parse_GPRMC+0x346>
				break;
 800134c:	bf00      	nop
 800134e:	e002      	b.n	8001356 <parse_GPRMC+0x346>
				break;
 8001350:	bf00      	nop
 8001352:	e000      	b.n	8001356 <parse_GPRMC+0x346>
				break;
 8001354:	bf00      	nop
			}

			count++;
 8001356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001358:	3301      	adds	r3, #1
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
			fieldStart = i + 1;
 800135c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135e:	3301      	adds	r3, #1
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; line[i] != '\0'; i++) {
 8001362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001364:	3301      	adds	r3, #1
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f47f ae59 	bne.w	8001028 <parse_GPRMC+0x18>
		}
	}
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3748      	adds	r7, #72	; 0x48
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <print_GPRMC>:

void
print_GPRMC(struct GPRMC *data)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	// Access the struct members and do something with them
	printf("log_header: %s\r\n", data->log_header);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4619      	mov	r1, r3
 800138c:	4840      	ldr	r0, [pc, #256]	; (8001490 <print_GPRMC+0x110>)
 800138e:	f008 ffe5 	bl	800a35c <iprintf>
	printf("status:     %c\r\n", data->status);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001398:	4619      	mov	r1, r3
 800139a:	483e      	ldr	r0, [pc, #248]	; (8001494 <print_GPRMC+0x114>)
 800139c:	f008 ffde 	bl	800a35c <iprintf>

	printf("LATITUDE\r\n");
 80013a0:	483d      	ldr	r0, [pc, #244]	; (8001498 <print_GPRMC+0x118>)
 80013a2:	f009 f841 	bl	800a428 <puts>
	printf("   deg:     %i\r\n", data->latitude.degrees);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	483b      	ldr	r0, [pc, #236]	; (800149c <print_GPRMC+0x11c>)
 80013ae:	f008 ffd5 	bl	800a35c <iprintf>
	printf("   min:     %i\r\n", data->latitude.minutes);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <print_GPRMC+0x120>)
 80013ba:	f008 ffcf 	bl	800a35c <iprintf>
	printf("   sec:     %i\r\n", data->latitude.seconds);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	4619      	mov	r1, r3
 80013c4:	4837      	ldr	r0, [pc, #220]	; (80014a4 <print_GPRMC+0x124>)
 80013c6:	f008 ffc9 	bl	800a35c <iprintf>
	printf("   dir:     %c\r\n", data->latitude.direction);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d0:	4619      	mov	r1, r3
 80013d2:	4835      	ldr	r0, [pc, #212]	; (80014a8 <print_GPRMC+0x128>)
 80013d4:	f008 ffc2 	bl	800a35c <iprintf>

	printf("LATITUDE\r\n");
 80013d8:	482f      	ldr	r0, [pc, #188]	; (8001498 <print_GPRMC+0x118>)
 80013da:	f009 f825 	bl	800a428 <puts>
	printf("   deg:     %i\r\n", data->longitude.degrees);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e2:	4619      	mov	r1, r3
 80013e4:	482d      	ldr	r0, [pc, #180]	; (800149c <print_GPRMC+0x11c>)
 80013e6:	f008 ffb9 	bl	800a35c <iprintf>
	printf("   min:     %i\r\n", data->longitude.minutes);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ee:	4619      	mov	r1, r3
 80013f0:	482b      	ldr	r0, [pc, #172]	; (80014a0 <print_GPRMC+0x120>)
 80013f2:	f008 ffb3 	bl	800a35c <iprintf>
	printf("   sec:     %i\r\n", data->longitude.seconds);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	4619      	mov	r1, r3
 80013fc:	4829      	ldr	r0, [pc, #164]	; (80014a4 <print_GPRMC+0x124>)
 80013fe:	f008 ffad 	bl	800a35c <iprintf>
	printf("   dir:     %c\r\n", data->longitude.direction);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001408:	4619      	mov	r1, r3
 800140a:	4827      	ldr	r0, [pc, #156]	; (80014a8 <print_GPRMC+0x128>)
 800140c:	f008 ffa6 	bl	800a35c <iprintf>

	printf("DATETIME\r\n");
 8001410:	4826      	ldr	r0, [pc, #152]	; (80014ac <print_GPRMC+0x12c>)
 8001412:	f009 f809 	bl	800a428 <puts>
	printf("   year:    %i\r\n", data->datetime.year);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4619      	mov	r1, r3
 800141c:	4824      	ldr	r0, [pc, #144]	; (80014b0 <print_GPRMC+0x130>)
 800141e:	f008 ff9d 	bl	800a35c <iprintf>
	printf("   month:   %i\r\n", data->datetime.month);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	4619      	mov	r1, r3
 8001428:	4822      	ldr	r0, [pc, #136]	; (80014b4 <print_GPRMC+0x134>)
 800142a:	f008 ff97 	bl	800a35c <iprintf>
	printf("   day:     %i\r\n", data->datetime.day);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	4619      	mov	r1, r3
 8001434:	4820      	ldr	r0, [pc, #128]	; (80014b8 <print_GPRMC+0x138>)
 8001436:	f008 ff91 	bl	800a35c <iprintf>
	printf("   hrs:     %i\r\n", data->datetime.hours);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4619      	mov	r1, r3
 8001440:	481e      	ldr	r0, [pc, #120]	; (80014bc <print_GPRMC+0x13c>)
 8001442:	f008 ff8b 	bl	800a35c <iprintf>
	printf("   min:     %i\r\n", data->datetime.minutes);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4619      	mov	r1, r3
 800144c:	4814      	ldr	r0, [pc, #80]	; (80014a0 <print_GPRMC+0x120>)
 800144e:	f008 ff85 	bl	800a35c <iprintf>
	printf("   sec:     %f\r\n", data->datetime.seconds);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f886 	bl	8000568 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4817      	ldr	r0, [pc, #92]	; (80014c0 <print_GPRMC+0x140>)
 8001462:	f008 ff7b 	bl	800a35c <iprintf>


	printf("speed:      %f\r\n", data->speed);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f87c 	bl	8000568 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <print_GPRMC+0x144>)
 8001476:	f008 ff71 	bl	800a35c <iprintf>
	printf("checksum:   %s\r\n", data->checksum);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3348      	adds	r3, #72	; 0x48
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <print_GPRMC+0x148>)
 8001482:	f008 ff6b 	bl	800a35c <iprintf>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	0800d078 	.word	0x0800d078
 8001494:	0800d08c 	.word	0x0800d08c
 8001498:	0800d0a0 	.word	0x0800d0a0
 800149c:	0800d0ac 	.word	0x0800d0ac
 80014a0:	0800d0c0 	.word	0x0800d0c0
 80014a4:	0800d0d4 	.word	0x0800d0d4
 80014a8:	0800d0e8 	.word	0x0800d0e8
 80014ac:	0800d0fc 	.word	0x0800d0fc
 80014b0:	0800d108 	.word	0x0800d108
 80014b4:	0800d11c 	.word	0x0800d11c
 80014b8:	0800d130 	.word	0x0800d130
 80014bc:	0800d144 	.word	0x0800d144
 80014c0:	0800d158 	.word	0x0800d158
 80014c4:	0800d16c 	.word	0x0800d16c
 80014c8:	0800d180 	.word	0x0800d180

080014cc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirect printf to uart debug
int _write(int file, char *ptr, int len) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <_write+0x28>)
 80014e4:	f005 f8b4 	bl	8006650 <HAL_UART_Transmit>
    return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000055c 	.word	0x2000055c

080014f8 <GPS_UART_Callback>:

void GPS_UART_Callback(UART_HandleTypeDef *huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	  if (GPScharRead == '$' || GPSidx == 100){
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <GPS_UART_Callback+0xe4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b24      	cmp	r3, #36	; 0x24
 8001506:	d003      	beq.n	8001510 <GPS_UART_Callback+0x18>
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <GPS_UART_Callback+0xe8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d10d      	bne.n	800152c <GPS_UART_Callback+0x34>
		  GPSidx = 0;
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
		  GPSrxBuff[GPSidx++] = '$';
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	b2d1      	uxtb	r1, r2
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001520:	7011      	strb	r1, [r2, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <GPS_UART_Callback+0xec>)
 8001526:	2124      	movs	r1, #36	; 0x24
 8001528:	5499      	strb	r1, [r3, r2]
 800152a:	e04e      	b.n	80015ca <GPS_UART_Callback+0xd2>
	  } else if (GPScharRead == '\r' || GPScharRead == '\n'){
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <GPS_UART_Callback+0xe4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0d      	cmp	r3, #13
 8001532:	d003      	beq.n	800153c <GPS_UART_Callback+0x44>
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <GPS_UART_Callback+0xe4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b0a      	cmp	r3, #10
 800153a:	d13b      	bne.n	80015b4 <GPS_UART_Callback+0xbc>

		  if (strncmp((char *)GPSrxBuff, GPSsentence, strlen(GPSsentence)) == 0){
 800153c:	482a      	ldr	r0, [pc, #168]	; (80015e8 <GPS_UART_Callback+0xf0>)
 800153e:	f7fe fea7 	bl	8000290 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <GPS_UART_Callback+0xf0>)
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <GPS_UART_Callback+0xec>)
 800154a:	f009 f875 	bl	800a638 <strncmp>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d12b      	bne.n	80015ac <GPS_UART_Callback+0xb4>
			  GPSrxBuff[GPSidx++] = '\r';
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	b2d1      	uxtb	r1, r2
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <GPS_UART_Callback+0xe8>)
 800155e:	7011      	strb	r1, [r2, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <GPS_UART_Callback+0xec>)
 8001564:	210d      	movs	r1, #13
 8001566:	5499      	strb	r1, [r3, r2]
			  GPSrxBuff[GPSidx++] = '\n';
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <GPS_UART_Callback+0xe8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	b2d1      	uxtb	r1, r2
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001572:	7011      	strb	r1, [r2, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <GPS_UART_Callback+0xec>)
 8001578:	210a      	movs	r1, #10
 800157a:	5499      	strb	r1, [r3, r2]
			  GPSrxBuff[GPSidx++] = '\0';
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <GPS_UART_Callback+0xe8>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	b2d1      	uxtb	r1, r2
 8001584:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001586:	7011      	strb	r1, [r2, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <GPS_UART_Callback+0xec>)
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]
			  memcpy(GPSline, GPSrxBuff, GPSidx);
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <GPS_UART_Callback+0xe8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4913      	ldr	r1, [pc, #76]	; (80015e4 <GPS_UART_Callback+0xec>)
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <GPS_UART_Callback+0xf4>)
 800159a:	f009 f8e9 	bl	800a770 <memcpy>
			  GPSnew_line = 1;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <GPS_UART_Callback+0xf8>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
			  GPSrxBuff[0] = 0;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <GPS_UART_Callback+0xec>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
		  if (strncmp((char *)GPSrxBuff, GPSsentence, strlen(GPSsentence)) == 0){
 80015aa:	e00e      	b.n	80015ca <GPS_UART_Callback+0xd2>
		  } else {
			  GPSidx = 0;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <GPS_UART_Callback+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
		  if (strncmp((char *)GPSrxBuff, GPSsentence, strlen(GPSsentence)) == 0){
 80015b2:	e00a      	b.n	80015ca <GPS_UART_Callback+0xd2>
		  }
	  } else {
		  GPSrxBuff[GPSidx++] = GPScharRead;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <GPS_UART_Callback+0xe8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	b2d1      	uxtb	r1, r2
 80015bc:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <GPS_UART_Callback+0xe8>)
 80015be:	7011      	strb	r1, [r2, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <GPS_UART_Callback+0xe4>)
 80015c4:	7819      	ldrb	r1, [r3, #0]
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <GPS_UART_Callback+0xec>)
 80015c8:	5499      	strb	r1, [r3, r2]
	  }


	  HAL_UART_Receive_IT(&GPS_UART_HANDLE, &GPScharRead, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <GPS_UART_Callback+0xe4>)
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <GPS_UART_Callback+0xfc>)
 80015d0:	f005 f8d0 	bl	8006774 <HAL_UART_Receive_IT>

}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000768 	.word	0x20000768
 80015e0:	20000769 	.word	0x20000769
 80015e4:	200006a0 	.word	0x200006a0
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000704 	.word	0x20000704
 80015f0:	2000076a 	.word	0x2000076a
 80015f4:	20000400 	.word	0x20000400

080015f8 <WIFI_UART_Callback>:

void WIFI_UART_Callback(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	  if (WIFIcharRead == '\r' || WIFIcharRead == '\n'){
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <WIFI_UART_Callback+0xa0>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b0d      	cmp	r3, #13
 8001606:	d003      	beq.n	8001610 <WIFI_UART_Callback+0x18>
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <WIFI_UART_Callback+0xa0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d12e      	bne.n	800166e <WIFI_UART_Callback+0x76>
		  if (WIFIidx > 0){
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d035      	beq.n	8001684 <WIFI_UART_Callback+0x8c>
			  memcpy(WIFIline, WIFIrxBuff, WIFIidx);
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <WIFI_UART_Callback+0xa4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4920      	ldr	r1, [pc, #128]	; (80016a0 <WIFI_UART_Callback+0xa8>)
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <WIFI_UART_Callback+0xac>)
 8001622:	f009 f8a5 	bl	800a770 <memcpy>
			  WIFIline[WIFIidx++] = '\r';
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	b2d1      	uxtb	r1, r2
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001630:	7011      	strb	r1, [r2, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <WIFI_UART_Callback+0xac>)
 8001636:	210d      	movs	r1, #13
 8001638:	5499      	strb	r1, [r3, r2]
			  WIFIline[WIFIidx++] = '\n';
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <WIFI_UART_Callback+0xa4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	b2d1      	uxtb	r1, r2
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001644:	7011      	strb	r1, [r2, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <WIFI_UART_Callback+0xac>)
 800164a:	210a      	movs	r1, #10
 800164c:	5499      	strb	r1, [r3, r2]
			  WIFIline[WIFIidx] = '\0';
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <WIFI_UART_Callback+0xac>)
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
			  WIFInew_line = 1;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <WIFI_UART_Callback+0xb0>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			  WIFIrxBuff[0] = '\0';
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <WIFI_UART_Callback+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
			  WIFIidx = 0;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		  if (WIFIidx > 0){
 800166c:	e00a      	b.n	8001684 <WIFI_UART_Callback+0x8c>
		  }
	  } else {
		  WIFIrxBuff[WIFIidx++] = WIFIcharRead;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	b2d1      	uxtb	r1, r2
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <WIFI_UART_Callback+0xa4>)
 8001678:	7011      	strb	r1, [r2, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <WIFI_UART_Callback+0xa0>)
 800167e:	7819      	ldrb	r1, [r3, #0]
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <WIFI_UART_Callback+0xa8>)
 8001682:	5499      	strb	r1, [r3, r2]
	  }

	HAL_UART_Receive_IT(&WIFI_UART_HANDLE, &WIFIcharRead, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	4904      	ldr	r1, [pc, #16]	; (8001698 <WIFI_UART_Callback+0xa0>)
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <WIFI_UART_Callback+0xb4>)
 800168a:	f005 f873 	bl	8006774 <HAL_UART_Receive_IT>

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000069c 	.word	0x2000069c
 800169c:	2000069d 	.word	0x2000069d
 80016a0:	200005d4 	.word	0x200005d4
 80016a4:	20000638 	.word	0x20000638
 80016a8:	2000069e 	.word	0x2000069e
 80016ac:	2000038c 	.word	0x2000038c

080016b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d108      	bne.n	80016d4 <HAL_ADC_ConvCpltCallback+0x24>
    {
    	ADC_ConvCplt = 1;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_ADC_ConvCpltCallback+0x30>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
    	HAL_ADC_Start_DMA(&ADC_HANDLE, (uint32_t*) adc_results_dma, adcChannelCount);
 80016c8:	230a      	movs	r3, #10
 80016ca:	461a      	mov	r2, r3
 80016cc:	4905      	ldr	r1, [pc, #20]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x34>)
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x38>)
 80016d0:	f001 fd60 	bl	8003194 <HAL_ADC_Start_DMA>
    }
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40012200 	.word	0x40012200
 80016e0:	200009fc 	.word	0x200009fc
 80016e4:	200009e8 	.word	0x200009e8
 80016e8:	20000218 	.word	0x20000218

080016ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
	if (salt_mode == MODO_LIMITADO){
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_GPIO_EXTI_Callback+0x68>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d126      	bne.n	800174c <HAL_GPIO_EXTI_Callback+0x60>
		currentMillis = HAL_GetTick();
 80016fe:	f001 fcd5 	bl	80030ac <HAL_GetTick>
 8001702:	4603      	mov	r3, r0
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001706:	6013      	str	r3, [r2, #0]
			if (GPIO_PIN == CHOP_SEL_Pin && currentMillis - previousMillis > BTN_DEBOUNCE_MS){
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b40      	cmp	r3, #64	; 0x40
 800170c:	d11e      	bne.n	800174c <HAL_GPIO_EXTI_Callback+0x60>
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_GPIO_EXTI_Callback+0x70>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b32      	cmp	r3, #50	; 0x32
 800171a:	d917      	bls.n	800174c <HAL_GPIO_EXTI_Callback+0x60>
				if (chop_profile == CHOP_PROFILE_4) {
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_GPIO_EXTI_Callback+0x74>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d103      	bne.n	800172c <HAL_GPIO_EXTI_Callback+0x40>
					chop_profile = CHOP_PROFILE_0;
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_GPIO_EXTI_Callback+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e005      	b.n	8001738 <HAL_GPIO_EXTI_Callback+0x4c>
				} else {
					chop_profile++;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_GPIO_EXTI_Callback+0x74>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_GPIO_EXTI_Callback+0x74>)
 8001736:	701a      	strb	r2, [r3, #0]
				}
				printf("Chop profile changed to n %d! \n", chop_profile);
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_GPIO_EXTI_Callback+0x74>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <HAL_GPIO_EXTI_Callback+0x78>)
 8001740:	f008 fe0c 	bl	800a35c <iprintf>
				previousMillis = currentMillis;
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_GPIO_EXTI_Callback+0x70>)
 800174a:	6013      	str	r3, [r2, #0]
			}
	}
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200005d0 	.word	0x200005d0
 8001758:	20000e38 	.word	0x20000e38
 800175c:	20000e3c 	.word	0x20000e3c
 8001760:	20000e40 	.word	0x20000e40
 8001764:	0800d1b8 	.word	0x0800d1b8

08001768 <Read_SystemStatus>:

void Read_SystemStatus(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    Read_Speed();
 800176c:	f000 f80c 	bl	8001788 <Read_Speed>
    Read_CurrentZone();
 8001770:	f000 f8b2 	bl	80018d8 <Read_CurrentZone>
    Read_GPSStatus();
 8001774:	f000 f8bc 	bl	80018f0 <Read_GPSStatus>
    Read_SISStatus();
 8001778:	f000 f8d2 	bl	8001920 <Read_SISStatus>
    Read_ActivationSwitchState();	
 800177c:	f000 f912 	bl	80019a4 <Read_ActivationSwitchState>
    Read_LocalCommand();
 8001780:	f000 f9a0 	bl	8001ac4 <Read_LocalCommand>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <Read_Speed>:

void Read_Speed(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    Read_HaslerSpeed();
 800178c:	f000 f84e 	bl	800182c <Read_HaslerSpeed>
    Read_PulseGeneratorSpeed();
 8001790:	f000 f85a 	bl	8001848 <Read_PulseGeneratorSpeed>
    Read_GPSSpeed();
 8001794:	f000 f866 	bl	8001864 <Read_GPSSpeed>

    if (hasler_speed != -1){
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <Read_Speed+0x8c>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017a2:	eef4 7a47 	vcmp.f32	s15, s14
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	d007      	beq.n	80017bc <Read_Speed+0x34>
        speed = hasler_speed;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <Read_Speed+0x8c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <Read_Speed+0x90>)
 80017b2:	6013      	str	r3, [r2, #0]
        speed_source = HASLER;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <Read_Speed+0x94>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
        speed_source = GPS;
    } else {
        speed = -1;
        speed_source = SPEED_NONE;
    }
}
 80017ba:	e029      	b.n	8001810 <Read_Speed+0x88>
    } else if (pulse_generator_speed != -1){
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <Read_Speed+0x98>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017c6:	eef4 7a47 	vcmp.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d007      	beq.n	80017e0 <Read_Speed+0x58>
        speed = pulse_generator_speed;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <Read_Speed+0x98>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <Read_Speed+0x90>)
 80017d6:	6013      	str	r3, [r2, #0]
        speed_source = PULSE_GENERATOR;
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <Read_Speed+0x94>)
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
}
 80017de:	e017      	b.n	8001810 <Read_Speed+0x88>
    } else if (gps_speed != -1){
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <Read_Speed+0x9c>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017ea:	eef4 7a47 	vcmp.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	d007      	beq.n	8001804 <Read_Speed+0x7c>
        speed = gps_speed;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <Read_Speed+0x9c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <Read_Speed+0x90>)
 80017fa:	6013      	str	r3, [r2, #0]
        speed_source = GPS;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <Read_Speed+0x94>)
 80017fe:	2203      	movs	r2, #3
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	e005      	b.n	8001810 <Read_Speed+0x88>
        speed = -1;
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <Read_Speed+0x90>)
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <Read_Speed+0xa0>)
 8001808:	601a      	str	r2, [r3, #0]
        speed_source = SPEED_NONE;
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <Read_Speed+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000a04 	.word	0x20000a04
 8001818:	20000a00 	.word	0x20000a00
 800181c:	20000a10 	.word	0x20000a10
 8001820:	20000a08 	.word	0x20000a08
 8001824:	20000a0c 	.word	0x20000a0c
 8001828:	bf800000 	.word	0xbf800000

0800182c <Read_HaslerSpeed>:

void Read_HaslerSpeed(void){
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
    // TO BE IMPLEMENTED
    hasler_speed = 14.1;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <Read_HaslerSpeed+0x14>)
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <Read_HaslerSpeed+0x18>)
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000a04 	.word	0x20000a04
 8001844:	4161999a 	.word	0x4161999a

08001848 <Read_PulseGeneratorSpeed>:

void Read_PulseGeneratorSpeed(void){
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
    // TO BE IMPLEMENTED
    pulse_generator_speed = 15.2;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <Read_PulseGeneratorSpeed+0x14>)
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <Read_PulseGeneratorSpeed+0x18>)
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000a08 	.word	0x20000a08
 8001860:	41733333 	.word	0x41733333

08001864 <Read_GPSSpeed>:

void Read_GPSSpeed(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	if (GPSnew_line){
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <Read_GPSSpeed+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <Read_GPSSpeed+0x4e>
		  printf(GPSline);
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <Read_GPSSpeed+0x5c>)
 8001872:	f008 fd73 	bl	800a35c <iprintf>
		  parse_GPRMC((char*)GPSline, &gprms);
 8001876:	4913      	ldr	r1, [pc, #76]	; (80018c4 <Read_GPSSpeed+0x60>)
 8001878:	4811      	ldr	r0, [pc, #68]	; (80018c0 <Read_GPSSpeed+0x5c>)
 800187a:	f7ff fbc9 	bl	8001010 <parse_GPRMC>
		  if (gprms.status == 'A' ){
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <Read_GPSSpeed+0x60>)
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	2b41      	cmp	r3, #65	; 0x41
 8001886:	d10a      	bne.n	800189e <Read_GPSSpeed+0x3a>
			  printf("GPS IS ACTIVE \r\n");
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <Read_GPSSpeed+0x64>)
 800188a:	f008 fdcd 	bl	800a428 <puts>
			  print_GPRMC(&gprms);
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <Read_GPSSpeed+0x60>)
 8001890:	f7ff fd76 	bl	8001380 <print_GPRMC>
			  gps_speed  = gprms.speed;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <Read_GPSSpeed+0x60>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <Read_GPSSpeed+0x68>)
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e005      	b.n	80018aa <Read_GPSSpeed+0x46>
		  }else{
			  printf("GPS IS NOT ACTIVE\r\n");
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <Read_GPSSpeed+0x6c>)
 80018a0:	f008 fdc2 	bl	800a428 <puts>
			  gps_speed = -1;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <Read_GPSSpeed+0x68>)
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <Read_GPSSpeed+0x70>)
 80018a8:	601a      	str	r2, [r3, #0]
		  }
		  GPSnew_line = 0;
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <Read_GPSSpeed+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	}else {
		gps_speed = -1;
	}
}
 80018b0:	e002      	b.n	80018b8 <Read_GPSSpeed+0x54>
		gps_speed = -1;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <Read_GPSSpeed+0x68>)
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <Read_GPSSpeed+0x70>)
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000076a 	.word	0x2000076a
 80018c0:	20000704 	.word	0x20000704
 80018c4:	2000076c 	.word	0x2000076c
 80018c8:	0800d1d8 	.word	0x0800d1d8
 80018cc:	20000a0c 	.word	0x20000a0c
 80018d0:	0800d1e8 	.word	0x0800d1e8
 80018d4:	bf800000 	.word	0xbf800000

080018d8 <Read_CurrentZone>:

void Read_CurrentZone(void){
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED
	// using gprms.latitude  gprms.longitude to calculate distance from origin point
	current_zone = ZONE_1;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <Read_CurrentZone+0x14>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000a11 	.word	0x20000a11

080018f0 <Read_GPSStatus>:

void Read_GPSStatus(void){  
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  if (gprms.status == 'A' ){
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <Read_GPSStatus+0x28>)
 80018f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fa:	2b41      	cmp	r3, #65	; 0x41
 80018fc:	d103      	bne.n	8001906 <Read_GPSStatus+0x16>
    gps_status = STATUS_OK;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <Read_GPSStatus+0x2c>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
  }  else {
    gps_status = STATUS_ERROR;
  }
	
}
 8001904:	e002      	b.n	800190c <Read_GPSStatus+0x1c>
    gps_status = STATUS_ERROR;
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <Read_GPSStatus+0x2c>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000076c 	.word	0x2000076c
 800191c:	20000a12 	.word	0x20000a12

08001920 <Read_SISStatus>:

void Read_SISStatus(void){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0

	for (int i=0; i<5;i++){
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e02d      	b.n	8001988 <Read_SISStatus+0x68>
		if (adc_results_dma[2*i] > SIS_FAIL_THRESHOLD){
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <Read_SISStatus+0x7c>)
 8001932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001936:	b29b      	uxth	r3, r3
 8001938:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800193c:	d905      	bls.n	800194a <Read_SISStatus+0x2a>
			SIS_state[i].FE_state = RELAY_OPEN;
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <Read_SISStatus+0x80>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2100      	movs	r1, #0
 8001944:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
 8001948:	e004      	b.n	8001954 <Read_SISStatus+0x34>
		} else {
			SIS_state[i].FE_state = RELAY_CLOSED;
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <Read_SISStatus+0x80>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2101      	movs	r1, #1
 8001950:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		}
		if (adc_results_dma[2*i+1] > SIS_FAIL_THRESHOLD){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	3301      	adds	r3, #1
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <Read_SISStatus+0x7c>)
 800195c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001960:	b29b      	uxth	r3, r3
 8001962:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001966:	d906      	bls.n	8001976 <Read_SISStatus+0x56>
			SIS_state[i].CT_state = RELAY_OPEN;
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <Read_SISStatus+0x80>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	2200      	movs	r2, #0
 8001972:	705a      	strb	r2, [r3, #1]
 8001974:	e005      	b.n	8001982 <Read_SISStatus+0x62>
		} else {
			SIS_state[i].CT_state = RELAY_CLOSED;
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <Read_SISStatus+0x80>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	2201      	movs	r2, #1
 8001980:	705a      	strb	r2, [r3, #1]
	for (int i=0; i<5;i++){
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3301      	adds	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b04      	cmp	r3, #4
 800198c:	ddce      	ble.n	800192c <Read_SISStatus+0xc>
		}
	}
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	200009e8 	.word	0x200009e8
 80019a0:	20000a14 	.word	0x20000a14

080019a4 <Read_ActivationSwitchState>:

void Read_ActivationSwitchState(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    Read_MALSwitchState();
 80019a8:	f000 f82a 	bl	8001a00 <Read_MALSwitchState>
	Read_MATSwitchState();
 80019ac:	f000 f846 	bl	8001a3c <Read_MATSwitchState>

	if (MAT_switch_state_1 && MAT_switch_state_2){
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <Read_ActivationSwitchState+0x48>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <Read_ActivationSwitchState+0x24>
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <Read_ActivationSwitchState+0x4c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <Read_ActivationSwitchState+0x24>
		salt_mode = MODO_TOTAL;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <Read_ActivationSwitchState+0x50>)
 80019c2:	2202      	movs	r2, #2
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e00f      	b.n	80019e8 <Read_ActivationSwitchState+0x44>
	} else if (MAL_switch_state_1 && MAL_switch_state_2){
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <Read_ActivationSwitchState+0x54>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <Read_ActivationSwitchState+0x3c>
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <Read_ActivationSwitchState+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <Read_ActivationSwitchState+0x3c>
		salt_mode = MODO_LIMITADO;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <Read_ActivationSwitchState+0x50>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e003      	b.n	80019e8 <Read_ActivationSwitchState+0x44>
	}else {
		salt_mode = MODO_NORMAL;
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <Read_ActivationSwitchState+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	}
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000a20 	.word	0x20000a20
 80019f0:	20000a21 	.word	0x20000a21
 80019f4:	200005d0 	.word	0x200005d0
 80019f8:	20000a1e 	.word	0x20000a1e
 80019fc:	20000a1f 	.word	0x20000a1f

08001a00 <Read_MALSwitchState>:

void Read_MALSwitchState(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

	MAL_switch_state_1 = HAL_GPIO_ReadPin(ON_SW_MAL_1_GPIO_Port, ON_SW_MAL_1_Pin );
 8001a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <Read_MALSwitchState+0x2c>)
 8001a0a:	f002 fe57 	bl	80046bc <HAL_GPIO_ReadPin>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <Read_MALSwitchState+0x30>)
 8001a14:	701a      	strb	r2, [r3, #0]
	// MAL_switch_state_1 = SWITCH_ON;

	MAL_switch_state_2 = HAL_GPIO_ReadPin(ON_SW_MAL_2_GPIO_Port, ON_SW_MAL_2_Pin );
 8001a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <Read_MALSwitchState+0x34>)
 8001a1c:	f002 fe4e 	bl	80046bc <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <Read_MALSwitchState+0x38>)
 8001a26:	701a      	strb	r2, [r3, #0]
    //MAL_switch_state_2 = SWITCH_ON;
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	20000a1e 	.word	0x20000a1e
 8001a34:	40021000 	.word	0x40021000
 8001a38:	20000a1f 	.word	0x20000a1f

08001a3c <Read_MATSwitchState>:

void Read_MATSwitchState(void){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	MAT_switch_state_1 = HAL_GPIO_ReadPin(ON_SW_MAT_1_GPIO_Port, ON_SW_MAT_1_Pin );
 8001a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <Read_MATSwitchState+0x2c>)
 8001a46:	f002 fe39 	bl	80046bc <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <Read_MATSwitchState+0x30>)
 8001a50:	701a      	strb	r2, [r3, #0]
	// MAT_switch_state_1 = SWITCH_ON;

	MAT_switch_state_2 = HAL_GPIO_ReadPin(ON_SW_MAT_2_GPIO_Port, ON_SW_MAT_2_Pin );
 8001a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a56:	4804      	ldr	r0, [pc, #16]	; (8001a68 <Read_MATSwitchState+0x2c>)
 8001a58:	f002 fe30 	bl	80046bc <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <Read_MATSwitchState+0x34>)
 8001a62:	701a      	strb	r2, [r3, #0]
	//MAT_switch_state_2 = SWITCH_ON;
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	20000a20 	.word	0x20000a20
 8001a70:	20000a21 	.word	0x20000a21

08001a74 <Read_RemoteCommand>:

void Read_RemoteCommand(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	if (WIFInew_line){
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <Read_RemoteCommand+0x3c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00d      	beq.n	8001a9c <Read_RemoteCommand+0x28>
		  printf(WIFIline);
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <Read_RemoteCommand+0x40>)
 8001a82:	f008 fc6b 	bl	800a35c <iprintf>
		  remote_command_active = COMMAND_ACTIVE;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <Read_RemoteCommand+0x44>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
		  sprintf(remote_command_buffer, WIFIline);
 8001a8c:	4909      	ldr	r1, [pc, #36]	; (8001ab4 <Read_RemoteCommand+0x40>)
 8001a8e:	480b      	ldr	r0, [pc, #44]	; (8001abc <Read_RemoteCommand+0x48>)
 8001a90:	f008 fcd2 	bl	800a438 <siprintf>
		  WIFInew_line = 0;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <Read_RemoteCommand+0x3c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
	}else {
		remote_command_active = COMMAND_INACTIVE;
		sprintf(remote_command_buffer, "NO COMM");
	}
}
 8001a9a:	e006      	b.n	8001aaa <Read_RemoteCommand+0x36>
		remote_command_active = COMMAND_INACTIVE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <Read_RemoteCommand+0x44>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
		sprintf(remote_command_buffer, "NO COMM");
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <Read_RemoteCommand+0x4c>)
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <Read_RemoteCommand+0x48>)
 8001aa6:	f008 fcc7 	bl	800a438 <siprintf>
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000069e 	.word	0x2000069e
 8001ab4:	20000638 	.word	0x20000638
 8001ab8:	20000b24 	.word	0x20000b24
 8001abc:	20000a24 	.word	0x20000a24
 8001ac0:	0800d1fc 	.word	0x0800d1fc

08001ac4 <Read_LocalCommand>:

void Read_LocalCommand(void){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	local_command_active = COMMAND_ACTIVE;
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <Read_LocalCommand+0x18>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
	sprintf(local_command_buffer, "myLocCom");
 8001ace:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <Read_LocalCommand+0x1c>)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <Read_LocalCommand+0x20>)
 8001ad2:	f008 fcb1 	bl	800a438 <siprintf>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000c28 	.word	0x20000c28
 8001ae0:	0800d204 	.word	0x0800d204
 8001ae4:	20000b28 	.word	0x20000b28

08001ae8 <Display_SystemStatus>:

void Display_SystemStatus(void){    
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    Build_SystemStatus();
 8001aec:	f000 f804 	bl	8001af8 <Build_SystemStatus>
    Send_SystemStatus();
 8001af0:	f000 f898 	bl	8001c24 <Send_SystemStatus>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <Build_SystemStatus>:

void Build_SystemStatus(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    // TO BE IMPLEMENTED
    Build_SpeedDisplay();
 8001afc:	f000 f802 	bl	8001b04 <Build_SpeedDisplay>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Build_SpeedDisplay>:

void Build_SpeedDisplay(void){
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
    int integer_part = (int) speed;
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <Build_SpeedDisplay+0x10c>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
 8001b18:	60bb      	str	r3, [r7, #8]
    int decimal_part = (int)((speed - integer_part) *10);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <Build_SpeedDisplay+0x10c>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	607b      	str	r3, [r7, #4]
    if (speed_source == SPEED_NONE){
 8001b40:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <Build_SpeedDisplay+0x110>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d114      	bne.n	8001b72 <Build_SpeedDisplay+0x6e>
        for (int i=0; i<4;i++){
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e00d      	b.n	8001b6a <Build_SpeedDisplay+0x66>
            speed_display[i].digit = DASH;
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	210a      	movs	r1, #10
 8001b54:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            speed_display[i].decimal_point = 0;
 8001b58:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	2200      	movs	r2, #0
 8001b62:	705a      	strb	r2, [r3, #1]
        for (int i=0; i<4;i++){
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	ddee      	ble.n	8001b4e <Build_SpeedDisplay+0x4a>
        speed_display[2].decimal_point = 1;

        speed_display[3].digit = decimal_part;
        speed_display[3].decimal_point = 0;
    }
}
 8001b70:	e048      	b.n	8001c04 <Build_SpeedDisplay+0x100>
        speed_display[0].digit = (integer_part / 100) % 10;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <Build_SpeedDisplay+0x118>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	1152      	asrs	r2, r2, #5
 8001b7c:	17db      	asrs	r3, r3, #31
 8001b7e:	1ad2      	subs	r2, r2, r3
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <Build_SpeedDisplay+0x11c>)
 8001b82:	fb83 1302 	smull	r1, r3, r3, r2
 8001b86:	1099      	asrs	r1, r3, #2
 8001b88:	17d3      	asrs	r3, r2, #31
 8001b8a:	1ac9      	subs	r1, r1, r3
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	1ad1      	subs	r1, r2, r3
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001b9a:	701a      	strb	r2, [r3, #0]
        speed_display[0].decimal_point = 0;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	705a      	strb	r2, [r3, #1]
        speed_display[1].digit = (integer_part / 10 ) % 10;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <Build_SpeedDisplay+0x11c>)
 8001ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8001baa:	1092      	asrs	r2, r2, #2
 8001bac:	17db      	asrs	r3, r3, #31
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <Build_SpeedDisplay+0x11c>)
 8001bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8001bb6:	1099      	asrs	r1, r3, #2
 8001bb8:	17d3      	asrs	r3, r2, #31
 8001bba:	1ac9      	subs	r1, r1, r3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	1ad1      	subs	r1, r2, r3
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001bca:	709a      	strb	r2, [r3, #2]
        speed_display[1].decimal_point = 0;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	70da      	strb	r2, [r3, #3]
        speed_display[2].digit = integer_part % 10;
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <Build_SpeedDisplay+0x11c>)
 8001bd6:	fb83 1302 	smull	r1, r3, r3, r2
 8001bda:	1099      	asrs	r1, r3, #2
 8001bdc:	17d3      	asrs	r3, r2, #31
 8001bde:	1ac9      	subs	r1, r1, r3
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	1ad1      	subs	r1, r2, r3
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001bee:	711a      	strb	r2, [r3, #4]
        speed_display[2].decimal_point = 1;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	715a      	strb	r2, [r3, #5]
        speed_display[3].digit = decimal_part;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001bfc:	719a      	strb	r2, [r3, #6]
        speed_display[3].decimal_point = 0;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <Build_SpeedDisplay+0x114>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	71da      	strb	r2, [r3, #7]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000a00 	.word	0x20000a00
 8001c14:	20000a10 	.word	0x20000a10
 8001c18:	20000c2c 	.word	0x20000c2c
 8001c1c:	51eb851f 	.word	0x51eb851f
 8001c20:	66666667 	.word	0x66666667

08001c24 <Send_SystemStatus>:

void Send_SystemStatus(void){
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	// I2C transmit all status
  // TO BE IMPLEMENTED
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <Activate_ZoneRelay>:


void Activate_ZoneRelay(void){
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
    if (current_zone == ZONE_3){
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <Activate_ZoneRelay+0x1c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d102      	bne.n	8001c46 <Activate_ZoneRelay+0x12>
    	zone_relay = RELAY_CLOSED;
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <Activate_ZoneRelay+0x20>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
    }
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	20000a11 	.word	0x20000a11
 8001c54:	20000c34 	.word	0x20000c34

08001c58 <Save_LocalLogs>:


void Save_LocalLogs(void){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  // TO BE IMPLEMENTED
  // What should I log here? 
	sprintf(local_log_buffer, "this is my local log");
 8001c5c:	4906      	ldr	r1, [pc, #24]	; (8001c78 <Save_LocalLogs+0x20>)
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <Save_LocalLogs+0x24>)
 8001c60:	f008 fbea 	bl	800a438 <siprintf>
	//log_event(local_log_file_name, log_timestamp, local_log_buffer);
	printf("%s: %s wrote in file: %s\r\n", log_timestamp, local_log_buffer, local_log_file_name);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <Save_LocalLogs+0x28>)
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <Save_LocalLogs+0x2c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <Save_LocalLogs+0x24>)
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <Save_LocalLogs+0x30>)
 8001c70:	f008 fb74 	bl	800a35c <iprintf>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800d210 	.word	0x0800d210
 8001c7c:	20000c38 	.word	0x20000c38
 8001c80:	2000000c 	.word	0x2000000c
 8001c84:	20000008 	.word	0x20000008
 8001c88:	0800d228 	.word	0x0800d228

08001c8c <Transmit_RemoteEvents>:


void Transmit_RemoteEvents(void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  // TO BE IMPLEMENTED
  // What should I send here? 
	sprintf(remote_events_buffer, "This is my event\n");
 8001c90:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <Transmit_RemoteEvents+0x28>)
 8001c92:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <Transmit_RemoteEvents+0x2c>)
 8001c94:	f008 fbd0 	bl	800a438 <siprintf>
	HAL_UART_Transmit(&WIFI_UART_HANDLE, (uint8_t*)remote_events_buffer, strlen(remote_events_buffer), HAL_MAX_DELAY);
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <Transmit_RemoteEvents+0x2c>)
 8001c9a:	f7fe faf9 	bl	8000290 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca6:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <Transmit_RemoteEvents+0x2c>)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <Transmit_RemoteEvents+0x30>)
 8001caa:	f004 fcd1 	bl	8006650 <HAL_UART_Transmit>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	0800d244 	.word	0x0800d244
 8001cb8:	20000d38 	.word	0x20000d38
 8001cbc:	2000038c 	.word	0x2000038c

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc4:	f001 f98c 	bl	8002fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc8:	f000 f876 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ccc:	f000 fb7a 	bl	80023c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd0:	f000 fb58 	bl	8002384 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001cd4:	f000 fb24 	bl	8002320 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001cd8:	f000 f8da 	bl	8001e90 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001cdc:	f000 f9a8 	bl	8002030 <MX_I2C1_Init>
  MX_RTC_Init();
 8001ce0:	f000 f9e6 	bl	80020b0 <MX_RTC_Init>
  MX_SPI4_Init();
 8001ce4:	f000 fa3e 	bl	8002164 <MX_SPI4_Init>
  MX_UART4_Init();
 8001ce8:	f000 fa72 	bl	80021d0 <MX_UART4_Init>
  MX_UART5_Init();
 8001cec:	f000 fa9a 	bl	8002224 <MX_UART5_Init>
  MX_UART7_Init();
 8001cf0:	f000 fac2 	bl	8002278 <MX_UART7_Init>
  MX_UART8_Init();
 8001cf4:	f000 faea 	bl	80022cc <MX_UART8_Init>
  MX_USB_OTG_FS_USB_Init();
 8001cf8:	f000 fb3c 	bl	8002374 <MX_USB_OTG_FS_USB_Init>
  MX_FATFS_Init();
 8001cfc:	f005 fd4e 	bl	800779c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  mount_filesystem(&fs);
 8001d00:	481f      	ldr	r0, [pc, #124]	; (8001d80 <main+0xc0>)
 8001d02:	f000 fd3d 	bl	8002780 <mount_filesystem>
  //log_event(local_log_file_name, log_timestamp, "SD started OK");
  printf("%s: %s wrote in file: %s\r\n", log_timestamp, "SD started OK", local_log_file_name);
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <main+0xc4>)
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <main+0xc8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <main+0xcc>)
 8001d10:	481f      	ldr	r0, [pc, #124]	; (8001d90 <main+0xd0>)
 8001d12:	f008 fb23 	bl	800a35c <iprintf>

  // Start GPS Callback
  HAL_UART_RegisterCallback(&GPS_UART_HANDLE, HAL_UART_RX_COMPLETE_CB_ID, GPS_UART_Callback);
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <main+0xd4>)
 8001d18:	2103      	movs	r1, #3
 8001d1a:	481f      	ldr	r0, [pc, #124]	; (8001d98 <main+0xd8>)
 8001d1c:	f004 fbf0 	bl	8006500 <HAL_UART_RegisterCallback>
  HAL_UART_Receive_IT(&GPS_UART_HANDLE, &GPScharRead, 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	491e      	ldr	r1, [pc, #120]	; (8001d9c <main+0xdc>)
 8001d24:	481c      	ldr	r0, [pc, #112]	; (8001d98 <main+0xd8>)
 8001d26:	f004 fd25 	bl	8006774 <HAL_UART_Receive_IT>

  // Start WIFI Callback
    HAL_UART_RegisterCallback(&WIFI_UART_HANDLE, HAL_UART_RX_COMPLETE_CB_ID, WIFI_UART_Callback);
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <main+0xe0>)
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	481d      	ldr	r0, [pc, #116]	; (8001da4 <main+0xe4>)
 8001d30:	f004 fbe6 	bl	8006500 <HAL_UART_RegisterCallback>
    HAL_UART_Receive_IT(&WIFI_UART_HANDLE, &WIFIcharRead, 1);
 8001d34:	2201      	movs	r2, #1
 8001d36:	491c      	ldr	r1, [pc, #112]	; (8001da8 <main+0xe8>)
 8001d38:	481a      	ldr	r0, [pc, #104]	; (8001da4 <main+0xe4>)
 8001d3a:	f004 fd1b 	bl	8006774 <HAL_UART_Receive_IT>

  // Start first ADC conversion
    HAL_ADC_Start_DMA(&ADC_HANDLE, (uint32_t*) adc_results_dma, adcChannelCount);
 8001d3e:	230a      	movs	r3, #10
 8001d40:	461a      	mov	r2, r3
 8001d42:	491a      	ldr	r1, [pc, #104]	; (8001dac <main+0xec>)
 8001d44:	481a      	ldr	r0, [pc, #104]	; (8001db0 <main+0xf0>)
 8001d46:	f001 fa25 	bl	8003194 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (salt_mode == MODO_NORMAL){
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <main+0xf4>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <main+0xa8>
    // Deactivate_SISBypass();
    // Deactivate_MQTTCommands();
    // Release_CriticalSignals();


		Read_SystemStatus();
 8001d52:	f7ff fd09 	bl	8001768 <Read_SystemStatus>
		Display_SystemStatus();
 8001d56:	f7ff fec7 	bl	8001ae8 <Display_SystemStatus>
		Activate_ZoneRelay();
 8001d5a:	f7ff ff6b 	bl	8001c34 <Activate_ZoneRelay>
		Transmit_RemoteEvents();
 8001d5e:	f7ff ff95 	bl	8001c8c <Transmit_RemoteEvents>
		Save_LocalLogs();
 8001d62:	f7ff ff79 	bl	8001c58 <Save_LocalLogs>
 8001d66:	e005      	b.n	8001d74 <main+0xb4>
	} else if (salt_mode == MODO_LIMITADO){
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <main+0xf4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <main+0xb4>
		// TO BE IMPLEMENTED
		// Transaction btw mode should be configured
		// Activate_Buzzer();
    // Activate_SISBypass();
    
    Read_RemoteCommand(); 
 8001d70:	f7ff fe80 	bl	8001a74 <Read_RemoteCommand>
    // Release_CriticalSignals();

		;
	}

	HAL_Delay(1000);
 8001d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d78:	f001 f9a4 	bl	80030c4 <HAL_Delay>
	if (salt_mode == MODO_NORMAL){
 8001d7c:	e7e5      	b.n	8001d4a <main+0x8a>
 8001d7e:	bf00      	nop
 8001d80:	200007b8 	.word	0x200007b8
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	0800d258 	.word	0x0800d258
 8001d90:	0800d228 	.word	0x0800d228
 8001d94:	080014f9 	.word	0x080014f9
 8001d98:	20000400 	.word	0x20000400
 8001d9c:	20000768 	.word	0x20000768
 8001da0:	080015f9 	.word	0x080015f9
 8001da4:	2000038c 	.word	0x2000038c
 8001da8:	2000069c 	.word	0x2000069c
 8001dac:	200009e8 	.word	0x200009e8
 8001db0:	20000218 	.word	0x20000218
 8001db4:	200005d0 	.word	0x200005d0

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b094      	sub	sp, #80	; 0x50
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0320 	add.w	r3, r7, #32
 8001dc2:	2230      	movs	r2, #48	; 0x30
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 fc2e 	bl	800a628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <SystemClock_Config+0xd0>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <SystemClock_Config+0xd0>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <SystemClock_Config+0xd0>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <SystemClock_Config+0xd4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <SystemClock_Config+0xd4>)
 8001e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <SystemClock_Config+0xd4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e14:	2305      	movs	r3, #5
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e22:	2302      	movs	r3, #2
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e30:	23a8      	movs	r3, #168	; 0xa8
 8001e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fe45 	bl	8004ad0 <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e4c:	f000 fc92 	bl	8002774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f8a6 	bl	8004fc0 <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e7a:	f000 fc7b 	bl	8002774 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3750      	adds	r7, #80	; 0x50
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e96:	463b      	mov	r3, r7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ea4:	4a60      	ldr	r2, [pc, #384]	; (8002028 <MX_ADC3_Init+0x198>)
 8001ea6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	; (8002024 <MX_ADC3_Init+0x194>)
 8001eaa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001eae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001eb0:	4b5c      	ldr	r3, [pc, #368]	; (8002024 <MX_ADC3_Init+0x194>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	; (8002024 <MX_ADC3_Init+0x194>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ec2:	4b58      	ldr	r3, [pc, #352]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eca:	4b56      	ldr	r3, [pc, #344]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ed0:	4b54      	ldr	r3, [pc, #336]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ed2:	4a56      	ldr	r2, [pc, #344]	; (800202c <MX_ADC3_Init+0x19c>)
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 10;
 8001edc:	4b51      	ldr	r3, [pc, #324]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ede:	220a      	movs	r2, #10
 8001ee0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001ee2:	4b50      	ldr	r3, [pc, #320]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001eea:	4b4e      	ldr	r3, [pc, #312]	; (8002024 <MX_ADC3_Init+0x194>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ef0:	484c      	ldr	r0, [pc, #304]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ef2:	f001 f90b 	bl	800310c <HAL_ADC_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001efc:	f000 fc3a 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f00:	230f      	movs	r3, #15
 8001f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4844      	ldr	r0, [pc, #272]	; (8002024 <MX_ADC3_Init+0x194>)
 8001f12:	f001 fa63 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f1c:	f000 fc2a 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001f20:	230e      	movs	r3, #14
 8001f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f24:	2302      	movs	r3, #2
 8001f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	483d      	ldr	r0, [pc, #244]	; (8002024 <MX_ADC3_Init+0x194>)
 8001f2e:	f001 fa55 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8001f38:	f000 fc1c 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f40:	2303      	movs	r3, #3
 8001f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	4619      	mov	r1, r3
 8001f48:	4836      	ldr	r0, [pc, #216]	; (8002024 <MX_ADC3_Init+0x194>)
 8001f4a:	f001 fa47 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001f54:	f000 fc0e 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f58:	230a      	movs	r3, #10
 8001f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	482f      	ldr	r0, [pc, #188]	; (8002024 <MX_ADC3_Init+0x194>)
 8001f66:	f001 fa39 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8001f70:	f000 fc00 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f74:	230d      	movs	r3, #13
 8001f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f78:	2305      	movs	r3, #5
 8001f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4828      	ldr	r0, [pc, #160]	; (8002024 <MX_ADC3_Init+0x194>)
 8001f82:	f001 fa2b 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8001f8c:	f000 fbf2 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f90:	2306      	movs	r3, #6
 8001f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001f94:	2306      	movs	r3, #6
 8001f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4821      	ldr	r0, [pc, #132]	; (8002024 <MX_ADC3_Init+0x194>)
 8001f9e:	f001 fa1d 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001fa8:	f000 fbe4 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001fac:	2307      	movs	r3, #7
 8001fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481a      	ldr	r0, [pc, #104]	; (8002024 <MX_ADC3_Init+0x194>)
 8001fba:	f001 fa0f 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8001fc4:	f000 fbd6 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <MX_ADC3_Init+0x194>)
 8001fd6:	f001 fa01 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8001fe0:	f000 fbc8 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001fe8:	2309      	movs	r3, #9
 8001fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_ADC3_Init+0x194>)
 8001ff2:	f001 f9f3 	bl	80033dc <HAL_ADC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC3_Init+0x170>
  {
    Error_Handler();
 8001ffc:	f000 fbba 	bl	8002774 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002000:	2309      	movs	r3, #9
 8002002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002004:	230a      	movs	r3, #10
 8002006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_ADC3_Init+0x194>)
 800200e:	f001 f9e5 	bl	80033dc <HAL_ADC_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC3_Init+0x18c>
  {
    Error_Handler();
 8002018:	f000 fbac 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000218 	.word	0x20000218
 8002028:	40012200 	.word	0x40012200
 800202c:	0f000001 	.word	0x0f000001

08002030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <MX_I2C1_Init+0x78>)
 8002038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_I2C1_Init+0x74>)
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <MX_I2C1_Init+0x7c>)
 800203e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_I2C1_Init+0x74>)
 800204e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_I2C1_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <MX_I2C1_Init+0x74>)
 800206e:	f002 fb6f 	bl	8004750 <HAL_I2C_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002078:	f000 fb7c 	bl	8002774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4809      	ldr	r0, [pc, #36]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002080:	f002 fcaa 	bl	80049d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800208a:	f000 fb73 	bl	8002774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800208e:	2100      	movs	r1, #0
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002092:	f002 fcdd 	bl	8004a50 <HAL_I2CEx_ConfigDigitalFilter>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800209c:	f000 fb6a 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200002c0 	.word	0x200002c0
 80020a8:	40005400 	.word	0x40005400
 80020ac:	000186a0 	.word	0x000186a0

080020b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <MX_RTC_Init+0xac>)
 80020ca:	4a25      	ldr	r2, [pc, #148]	; (8002160 <MX_RTC_Init+0xb0>)
 80020cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <MX_RTC_Init+0xac>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_RTC_Init+0xac>)
 80020d6:	227f      	movs	r2, #127	; 0x7f
 80020d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <MX_RTC_Init+0xac>)
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_RTC_Init+0xac>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_RTC_Init+0xac>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_RTC_Init+0xac>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020f2:	481a      	ldr	r0, [pc, #104]	; (800215c <MX_RTC_Init+0xac>)
 80020f4:	f003 fb44 	bl	8005780 <HAL_RTC_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80020fe:	f000 fb39 	bl	8002774 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002102:	2300      	movs	r3, #0
 8002104:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002106:	2300      	movs	r3, #0
 8002108:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800210a:	2300      	movs	r3, #0
 800210c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <MX_RTC_Init+0xac>)
 800211e:	f003 fba5 	bl	800586c <HAL_RTC_SetTime>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002128:	f000 fb24 	bl	8002774 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800212c:	2301      	movs	r3, #1
 800212e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002130:	2301      	movs	r3, #1
 8002132:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002134:	2301      	movs	r3, #1
 8002136:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002138:	2300      	movs	r3, #0
 800213a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800213c:	463b      	mov	r3, r7
 800213e:	2201      	movs	r2, #1
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <MX_RTC_Init+0xac>)
 8002144:	f003 fc2c 	bl	80059a0 <HAL_RTC_SetDate>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800214e:	f000 fb11 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000314 	.word	0x20000314
 8002160:	40002800 	.word	0x40002800

08002164 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <MX_SPI4_Init+0x64>)
 800216a:	4a18      	ldr	r2, [pc, #96]	; (80021cc <MX_SPI4_Init+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <MX_SPI4_Init+0x64>)
 8002170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002174:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_SPI4_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_SPI4_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_SPI4_Init+0x64>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_SPI4_Init+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_SPI4_Init+0x64>)
 8002190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002194:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_SPI4_Init+0x64>)
 8002198:	2238      	movs	r2, #56	; 0x38
 800219a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <MX_SPI4_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_SPI4_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <MX_SPI4_Init+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_SPI4_Init+0x64>)
 80021b0:	220a      	movs	r2, #10
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <MX_SPI4_Init+0x64>)
 80021b6:	f003 fd18 	bl	8005bea <HAL_SPI_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80021c0:	f000 fad8 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000334 	.word	0x20000334
 80021cc:	40013400 	.word	0x40013400

080021d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_UART4_Init+0x4c>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <MX_UART4_Init+0x50>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <MX_UART4_Init+0x4c>)
 80021dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_UART4_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_UART4_Init+0x4c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_UART4_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_UART4_Init+0x4c>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_UART4_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_UART4_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_UART4_Init+0x4c>)
 8002208:	f004 f920 	bl	800644c <HAL_UART_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002212:	f000 faaf 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2000038c 	.word	0x2000038c
 8002220:	40004c00 	.word	0x40004c00

08002224 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_UART5_Init+0x4c>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <MX_UART5_Init+0x50>)
 800222c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_UART5_Init+0x4c>)
 8002230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002234:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_UART5_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_UART5_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_UART5_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_UART5_Init+0x4c>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_UART5_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_UART5_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_UART5_Init+0x4c>)
 800225c:	f004 f8f6 	bl	800644c <HAL_UART_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002266:	f000 fa85 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000400 	.word	0x20000400
 8002274:	40005000 	.word	0x40005000

08002278 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_UART7_Init+0x4c>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <MX_UART7_Init+0x50>)
 8002280:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <MX_UART7_Init+0x4c>)
 8002284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002288:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_UART7_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_UART7_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_UART7_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_UART7_Init+0x4c>)
 800229e:	220c      	movs	r2, #12
 80022a0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_UART7_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_UART7_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_UART7_Init+0x4c>)
 80022b0:	f004 f8cc 	bl	800644c <HAL_UART_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80022ba:	f000 fa5b 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000474 	.word	0x20000474
 80022c8:	40007800 	.word	0x40007800

080022cc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_UART8_Init+0x4c>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <MX_UART8_Init+0x50>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <MX_UART8_Init+0x4c>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_UART8_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_UART8_Init+0x4c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_UART8_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_UART8_Init+0x4c>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_UART8_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_UART8_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_UART8_Init+0x4c>)
 8002304:	f004 f8a2 	bl	800644c <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800230e:	f000 fa31 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200004e8 	.word	0x200004e8
 800231c:	40007c00 	.word	0x40007c00

08002320 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_USART3_UART_Init+0x4c>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_USART3_UART_Init+0x50>)
 8002328:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_USART3_UART_Init+0x4c>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_USART3_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_USART3_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_USART3_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_USART3_UART_Init+0x4c>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_USART3_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_USART3_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_USART3_UART_Init+0x4c>)
 8002358:	f004 f878 	bl	800644c <HAL_UART_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002362:	f000 fa07 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000055c 	.word	0x2000055c
 8002370:	40004800 	.word	0x40004800

08002374 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_DMA_Init+0x3c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <MX_DMA_Init+0x3c>)
 8002394:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_DMA_Init+0x3c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2038      	movs	r0, #56	; 0x38
 80023ac:	f001 fba1 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023b0:	2038      	movs	r0, #56	; 0x38
 80023b2:	f001 fbba 	bl	8003b2a <HAL_NVIC_EnableIRQ>

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800

080023c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	4bb4      	ldr	r3, [pc, #720]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4ab3      	ldr	r2, [pc, #716]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80023e4:	f043 0310 	orr.w	r3, r3, #16
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4bb1      	ldr	r3, [pc, #708]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	4bad      	ldr	r3, [pc, #692]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4aac      	ldr	r2, [pc, #688]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4baa      	ldr	r3, [pc, #680]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	4ba6      	ldr	r3, [pc, #664]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4aa5      	ldr	r2, [pc, #660]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4ba3      	ldr	r3, [pc, #652]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	4b9f      	ldr	r3, [pc, #636]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a9e      	ldr	r2, [pc, #632]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b9c      	ldr	r3, [pc, #624]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b98      	ldr	r3, [pc, #608]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a97      	ldr	r2, [pc, #604]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b95      	ldr	r3, [pc, #596]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a90      	ldr	r2, [pc, #576]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b8a      	ldr	r3, [pc, #552]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a89      	ldr	r2, [pc, #548]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 800248c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a82      	ldr	r2, [pc, #520]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b80      	ldr	r3, [pc, #512]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SIS_2_CT_BP_C_Pin|SIS_3_CT_BP_C_Pin|RS485_2_DIR_Pin|REG_2_C_Pin
 80024ba:	2200      	movs	r2, #0
 80024bc:	f640 11d4 	movw	r1, #2516	; 0x9d4
 80024c0:	487c      	ldr	r0, [pc, #496]	; (80026b4 <MX_GPIO_Init+0x2f0>)
 80024c2:	f002 f913 	bl	80046ec <HAL_GPIO_WritePin>
                          |ZONA_C_Pin|SPI4_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_PW_ON_Pin|RS485_1_DIR_Pin|BUZZER_C_Pin|ESP_EN_Pin, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f248 0131 	movw	r1, #32817	; 0x8031
 80024cc:	487a      	ldr	r0, [pc, #488]	; (80026b8 <MX_GPIO_Init+0x2f4>)
 80024ce:	f002 f90d 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80024d8:	4878      	ldr	r0, [pc, #480]	; (80026bc <MX_GPIO_Init+0x2f8>)
 80024da:	f002 f907 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CT_C_GPIO_Port, CT_C_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e4:	4876      	ldr	r0, [pc, #472]	; (80026c0 <MX_GPIO_Init+0x2fc>)
 80024e6:	f002 f901 	bl	80046ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SIS_5_CT_BP_C_Pin|SIS_5_FE_BP_C_Pin|SIS_1_CT_BP_C_Pin|FE_DES_2_Pin
 80024ea:	2200      	movs	r2, #0
 80024ec:	f244 116b 	movw	r1, #16747	; 0x416b
 80024f0:	4874      	ldr	r0, [pc, #464]	; (80026c4 <MX_GPIO_Init+0x300>)
 80024f2:	f002 f8fb 	bl	80046ec <HAL_GPIO_WritePin>
                          |FE_DES_1_Pin|CT_DES_1_Pin|CT_DES_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FE_C_Pin|REG_1_C_Pin|REG_3_C_Pin|REG_4_C_Pin
 80024f6:	2200      	movs	r2, #0
 80024f8:	f643 41e3 	movw	r1, #15587	; 0x3ce3
 80024fc:	4872      	ldr	r0, [pc, #456]	; (80026c8 <MX_GPIO_Init+0x304>)
 80024fe:	f002 f8f5 	bl	80046ec <HAL_GPIO_WritePin>
                          |SIS_4_CT_BP_C_Pin|SIS_4_FE_BP_C_Pin|SIS_1_FE_BP_C_Pin|SIS_2_FE_BP_C_Pin
                          |SIS_3_FE_BP_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SIS_2_CT_BP_C_Pin SIS_3_CT_BP_C_Pin RS485_2_DIR_Pin REG_2_C_Pin
                           ZONA_C_Pin SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SIS_2_CT_BP_C_Pin|SIS_3_CT_BP_C_Pin|RS485_2_DIR_Pin|REG_2_C_Pin
 8002502:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
                          |ZONA_C_Pin|SPI4_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	4866      	ldr	r0, [pc, #408]	; (80026b4 <MX_GPIO_Init+0x2f0>)
 800251c:	f001 ff22 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIS_2_CT_BP_M_Pin SIS_3_FE_BP_M_Pin ON_SW_MAL_2_Pin FE_M_Pin
                           SD_CD_Pin */
  GPIO_InitStruct.Pin = SIS_2_CT_BP_M_Pin|SIS_3_FE_BP_M_Pin|ON_SW_MAL_2_Pin|FE_M_Pin
 8002520:	f248 6328 	movw	r3, #34344	; 0x8628
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
                          |SD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	485f      	ldr	r0, [pc, #380]	; (80026b4 <MX_GPIO_Init+0x2f0>)
 8002536:	f001 ff15 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800253a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002540:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254e:	4619      	mov	r1, r3
 8002550:	485e      	ldr	r0, [pc, #376]	; (80026cc <MX_GPIO_Init+0x308>)
 8002552:	f001 ff07 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIS_4_CT_BP_M_Pin SIS_4_FE_BP_M_Pin SIS_3_CT_BP_M_Pin CT_EN_1_M_Pin
                           CT_M_Pin ON_SW_MAL_1_Pin CT_EN_2_M_Pin */
  GPIO_InitStruct.Pin = SIS_4_CT_BP_M_Pin|SIS_4_FE_BP_M_Pin|SIS_3_CT_BP_M_Pin|CT_EN_1_M_Pin
 8002556:	f24f 0307 	movw	r3, #61447	; 0xf007
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
                          |CT_M_Pin|ON_SW_MAL_1_Pin|CT_EN_2_M_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	4619      	mov	r1, r3
 800256a:	4855      	ldr	r0, [pc, #340]	; (80026c0 <MX_GPIO_Init+0x2fc>)
 800256c:	f001 fefa 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002570:	2332      	movs	r3, #50	; 0x32
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002580:	230b      	movs	r3, #11
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002588:	4619      	mov	r1, r3
 800258a:	4850      	ldr	r0, [pc, #320]	; (80026cc <MX_GPIO_Init+0x308>)
 800258c:	f001 feea 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_PW_ON_Pin RS485_1_DIR_Pin BUZZER_C_Pin ESP_EN_Pin */
  GPIO_InitStruct.Pin = GPS_PW_ON_Pin|RS485_1_DIR_Pin|BUZZER_C_Pin|ESP_EN_Pin;
 8002590:	f248 0331 	movw	r3, #32817	; 0x8031
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4843      	ldr	r0, [pc, #268]	; (80026b8 <MX_GPIO_Init+0x2f4>)
 80025aa:	f001 fedb 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025ae:	2386      	movs	r3, #134	; 0x86
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025be:	230b      	movs	r3, #11
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c6:	4619      	mov	r1, r3
 80025c8:	483b      	ldr	r0, [pc, #236]	; (80026b8 <MX_GPIO_Init+0x2f4>)
 80025ca:	f001 fecb 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHOP_SEL_Pin */
  GPIO_InitStruct.Pin = CHOP_SEL_Pin;
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHOP_SEL_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4835      	ldr	r0, [pc, #212]	; (80026b8 <MX_GPIO_Init+0x2f4>)
 80025e4:	f001 febe 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ee:	2301      	movs	r3, #1
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fe:	4619      	mov	r1, r3
 8002600:	482e      	ldr	r0, [pc, #184]	; (80026bc <MX_GPIO_Init+0x2f8>)
 8002602:	f001 feaf 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : CT_C_Pin */
  GPIO_InitStruct.Pin = CT_C_Pin;
 8002606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CT_C_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4828      	ldr	r0, [pc, #160]	; (80026c0 <MX_GPIO_Init+0x2fc>)
 8002620:	f001 fea0 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIS_5_CT_BP_C_Pin SIS_5_FE_BP_C_Pin SIS_1_CT_BP_C_Pin FE_DES_2_Pin
                           FE_DES_1_Pin CT_DES_1_Pin CT_DES_2_Pin */
  GPIO_InitStruct.Pin = SIS_5_CT_BP_C_Pin|SIS_5_FE_BP_C_Pin|SIS_1_CT_BP_C_Pin|FE_DES_2_Pin
 8002624:	f244 136b 	movw	r3, #16747	; 0x416b
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
                          |FE_DES_1_Pin|CT_DES_1_Pin|CT_DES_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262a:	2301      	movs	r3, #1
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263a:	4619      	mov	r1, r3
 800263c:	4821      	ldr	r0, [pc, #132]	; (80026c4 <MX_GPIO_Init+0x300>)
 800263e:	f001 fe91 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_SW_MAT_2_Pin ON_SW_MAT_1_Pin REG_2_M_Pin REG_3_M_Pin */
  GPIO_InitStruct.Pin = ON_SW_MAT_2_Pin|ON_SW_MAT_1_Pin|REG_2_M_Pin|REG_3_M_Pin;
 8002642:	f641 0328 	movw	r3, #6184	; 0x1828
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	4619      	mov	r1, r3
 8002656:	4819      	ldr	r0, [pc, #100]	; (80026bc <MX_GPIO_Init+0x2f8>)
 8002658:	f001 fe84 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800265c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800266e:	230b      	movs	r3, #11
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002676:	4619      	mov	r1, r3
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <MX_GPIO_Init+0x2f8>)
 800267a:	f001 fe73 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_C_Pin REG_1_C_Pin REG_3_C_Pin REG_4_C_Pin
                           SIS_4_CT_BP_C_Pin SIS_4_FE_BP_C_Pin SIS_1_FE_BP_C_Pin SIS_2_FE_BP_C_Pin
                           SIS_3_FE_BP_C_Pin */
  GPIO_InitStruct.Pin = FE_C_Pin|REG_1_C_Pin|REG_3_C_Pin|REG_4_C_Pin
 800267e:	f643 43e3 	movw	r3, #15587	; 0x3ce3
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
                          |SIS_4_CT_BP_C_Pin|SIS_4_FE_BP_C_Pin|SIS_1_FE_BP_C_Pin|SIS_2_FE_BP_C_Pin
                          |SIS_3_FE_BP_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	480c      	ldr	r0, [pc, #48]	; (80026c8 <MX_GPIO_Init+0x304>)
 8002698:	f001 fe64 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : REG_1_M_Pin FE_EN_2_M_Pin SIS_1_FE_BP_M_Pin SIS_1_CT_BP_M_Pin */
  GPIO_InitStruct.Pin = REG_1_M_Pin|FE_EN_2_M_Pin|SIS_1_FE_BP_M_Pin|SIS_1_CT_BP_M_Pin;
 800269c:	f24c 0318 	movw	r3, #49176	; 0xc018
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a2:	2300      	movs	r3, #0
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	e00f      	b.n	80026d0 <MX_GPIO_Init+0x30c>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	40020800 	.word	0x40020800
 80026d0:	4619      	mov	r1, r3
 80026d2:	4825      	ldr	r0, [pc, #148]	; (8002768 <MX_GPIO_Init+0x3a4>)
 80026d4:	f001 fe46 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIS_2_FE_BP_M_Pin FE_EN_1_M_Pin USB_OverCurrent_Pin SIS_5_FE_BP_M_Pin
                           REG_4_M_Pin ZONA_M_Pin SIS_5_CT_BP_M_Pin */
  GPIO_InitStruct.Pin = SIS_2_FE_BP_M_Pin|FE_EN_1_M_Pin|USB_OverCurrent_Pin|SIS_5_FE_BP_M_Pin
 80026d8:	f249 6394 	movw	r3, #38548	; 0x9694
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |REG_4_M_Pin|ZONA_M_Pin|SIS_5_CT_BP_M_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	4619      	mov	r1, r3
 80026ec:	481f      	ldr	r0, [pc, #124]	; (800276c <MX_GPIO_Init+0x3a8>)
 80026ee:	f001 fe39 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002704:	230a      	movs	r3, #10
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	4818      	ldr	r0, [pc, #96]	; (8002770 <MX_GPIO_Init+0x3ac>)
 8002710:	f001 fe28 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4811      	ldr	r0, [pc, #68]	; (8002770 <MX_GPIO_Init+0x3ac>)
 800272a:	f001 fe1b 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800272e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002740:	230b      	movs	r3, #11
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	4619      	mov	r1, r3
 800274a:	4808      	ldr	r0, [pc, #32]	; (800276c <MX_GPIO_Init+0x3a8>)
 800274c:	f001 fe0a 	bl	8004364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2017      	movs	r0, #23
 8002756:	f001 f9cc 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800275a:	2017      	movs	r0, #23
 800275c:	f001 f9e5 	bl	8003b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002760:	bf00      	nop
 8002762:	3738      	adds	r7, #56	; 0x38
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021800 	.word	0x40021800
 8002770:	40020000 	.word	0x40020000

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800277c:	e7fe      	b.n	800277c <Error_Handler+0x8>
	...

08002780 <mount_filesystem>:
 */
#include <string.h>
#include <stdio.h>
#include "ff.h"

void mount_filesystem(FATFS *fs) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	if (f_mount(fs, "", 0) != FR_OK) {
 8002788:	2200      	movs	r2, #0
 800278a:	4907      	ldr	r1, [pc, #28]	; (80027a8 <mount_filesystem+0x28>)
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f006 f981 	bl	8008a94 <f_mount>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <mount_filesystem+0x1e>
	  printf("Failed to mount filesystem\n");
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <mount_filesystem+0x2c>)
 800279a:	f007 fe45 	bl	800a428 <puts>
	}
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	0800d268 	.word	0x0800d268
 80027ac:	0800d26c 	.word	0x0800d26c

080027b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_MspInit+0x4c>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_MspInit+0x4c>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_MspInit+0x4c>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_MspInit+0x4c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_MspInit+0x4c>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_MspInit+0x4c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_ADC_MspInit+0x148>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f040 808d 	bne.w	800293e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <HAL_ADC_MspInit+0x14c>)
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	4a47      	ldr	r2, [pc, #284]	; (800294c <HAL_ADC_MspInit+0x14c>)
 800282e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002832:	6453      	str	r3, [r2, #68]	; 0x44
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <HAL_ADC_MspInit+0x14c>)
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_ADC_MspInit+0x14c>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a40      	ldr	r2, [pc, #256]	; (800294c <HAL_ADC_MspInit+0x14c>)
 800284a:	f043 0320 	orr.w	r3, r3, #32
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b3e      	ldr	r3, [pc, #248]	; (800294c <HAL_ADC_MspInit+0x14c>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_ADC_MspInit+0x14c>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a39      	ldr	r2, [pc, #228]	; (800294c <HAL_ADC_MspInit+0x14c>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_ADC_MspInit+0x14c>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_ADC_MspInit+0x14c>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_ADC_MspInit+0x14c>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6313      	str	r3, [r2, #48]	; 0x30
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_ADC_MspInit+0x14c>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_IN10
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8002894:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8002898:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4829      	ldr	r0, [pc, #164]	; (8002950 <HAL_ADC_MspInit+0x150>)
 80028aa:	f001 fd5b 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80028ae:	230d      	movs	r3, #13
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b2:	2303      	movs	r3, #3
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	4824      	ldr	r0, [pc, #144]	; (8002954 <HAL_ADC_MspInit+0x154>)
 80028c2:	f001 fd4f 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028c6:	2308      	movs	r3, #8
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ca:	2303      	movs	r3, #3
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	481f      	ldr	r0, [pc, #124]	; (8002958 <HAL_ADC_MspInit+0x158>)
 80028da:	f001 fd43 	bl	8004364 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_ADC_MspInit+0x15c>)
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_ADC_MspInit+0x160>)
 80028e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_ADC_MspInit+0x15c>)
 80028e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028ea:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_ADC_MspInit+0x15c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_ADC_MspInit+0x15c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_ADC_MspInit+0x15c>)
 80028fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_ADC_MspInit+0x15c>)
 8002902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002906:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_ADC_MspInit+0x15c>)
 800290a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800290e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_ADC_MspInit+0x15c>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_ADC_MspInit+0x15c>)
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_ADC_MspInit+0x15c>)
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002922:	480e      	ldr	r0, [pc, #56]	; (800295c <HAL_ADC_MspInit+0x15c>)
 8002924:	f001 f91c 	bl	8003b60 <HAL_DMA_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800292e:	f7ff ff21 	bl	8002774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_ADC_MspInit+0x15c>)
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
 8002938:	4a08      	ldr	r2, [pc, #32]	; (800295c <HAL_ADC_MspInit+0x15c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3730      	adds	r7, #48	; 0x30
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40012200 	.word	0x40012200
 800294c:	40023800 	.word	0x40023800
 8002950:	40021400 	.word	0x40021400
 8002954:	40020800 	.word	0x40020800
 8002958:	40020000 	.word	0x40020000
 800295c:	20000260 	.word	0x20000260
 8002960:	40026410 	.word	0x40026410

08002964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_I2C_MspInit+0x84>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12c      	bne.n	80029e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_I2C_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a17      	ldr	r2, [pc, #92]	; (80029ec <HAL_I2C_MspInit+0x88>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_I2C_MspInit+0x88>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a8:	2312      	movs	r3, #18
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029b4:	2304      	movs	r3, #4
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	480c      	ldr	r0, [pc, #48]	; (80029f0 <HAL_I2C_MspInit+0x8c>)
 80029c0:	f001 fcd0 	bl	8004364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_I2C_MspInit+0x88>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_I2C_MspInit+0x88>)
 80029ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_I2C_MspInit+0x88>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40005400 	.word	0x40005400
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020400 	.word	0x40020400

080029f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	; 0x38
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	2230      	movs	r2, #48	; 0x30
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f007 fe0f 	bl	800a628 <memset>
  if(hrtc->Instance==RTC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_RTC_MspInit+0x4c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a14:	2320      	movs	r3, #32
 8002a16:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fcec 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a2e:	f7ff fea1 	bl	8002774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RTC_MspInit+0x50>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a38:	bf00      	nop
 8002a3a:	3738      	adds	r7, #56	; 0x38
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40002800 	.word	0x40002800
 8002a44:	42470e3c 	.word	0x42470e3c

08002a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_SPI_MspInit+0x84>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d12c      	bne.n	8002ac4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_SPI_MspInit+0x88>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_SPI_MspInit+0x88>)
 8002a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_SPI_MspInit+0x88>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_SPI_MspInit+0x88>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <HAL_SPI_MspInit+0x88>)
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_SPI_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002aa2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <HAL_SPI_MspInit+0x8c>)
 8002ac0:	f001 fc50 	bl	8004364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3728      	adds	r7, #40	; 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013400 	.word	0x40013400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b092      	sub	sp, #72	; 0x48
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a95      	ldr	r2, [pc, #596]	; (8002d4c <HAL_UART_MspInit+0x274>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d135      	bne.n	8002b66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
 8002afe:	4b94      	ldr	r3, [pc, #592]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a93      	ldr	r2, [pc, #588]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b91      	ldr	r3, [pc, #580]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	4b8d      	ldr	r3, [pc, #564]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a8c      	ldr	r2, [pc, #560]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b8a      	ldr	r3, [pc, #552]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b44:	2308      	movs	r3, #8
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4881      	ldr	r0, [pc, #516]	; (8002d54 <HAL_UART_MspInit+0x27c>)
 8002b50:	f001 fc08 	bl	8004364 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	2034      	movs	r0, #52	; 0x34
 8002b5a:	f000 ffca 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b5e:	2034      	movs	r0, #52	; 0x34
 8002b60:	f000 ffe3 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b64:	e0ee      	b.n	8002d44 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==UART5)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7b      	ldr	r2, [pc, #492]	; (8002d58 <HAL_UART_MspInit+0x280>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d153      	bne.n	8002c18 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b74:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b80:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a6e      	ldr	r2, [pc, #440]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a67      	ldr	r2, [pc, #412]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb8:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bde:	4619      	mov	r1, r3
 8002be0:	485c      	ldr	r0, [pc, #368]	; (8002d54 <HAL_UART_MspInit+0x27c>)
 8002be2:	f001 fbbf 	bl	8004364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002be6:	2304      	movs	r3, #4
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4856      	ldr	r0, [pc, #344]	; (8002d5c <HAL_UART_MspInit+0x284>)
 8002c02:	f001 fbaf 	bl	8004364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2035      	movs	r0, #53	; 0x35
 8002c0c:	f000 ff71 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002c10:	2035      	movs	r0, #53	; 0x35
 8002c12:	f000 ff8a 	bl	8003b2a <HAL_NVIC_EnableIRQ>
}
 8002c16:	e095      	b.n	8002d44 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==UART7)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_UART_MspInit+0x288>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d12c      	bne.n	8002c7c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a49      	ldr	r2, [pc, #292]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c48:	f043 0320 	orr.w	r3, r3, #32
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c5a:	23c0      	movs	r3, #192	; 0xc0
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c72:	4619      	mov	r1, r3
 8002c74:	483b      	ldr	r0, [pc, #236]	; (8002d64 <HAL_UART_MspInit+0x28c>)
 8002c76:	f001 fb75 	bl	8004364 <HAL_GPIO_Init>
}
 8002c7a:	e063      	b.n	8002d44 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==UART8)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_UART_MspInit+0x290>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12c      	bne.n	8002ce0 <HAL_UART_MspInit+0x208>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002cac:	f043 0310 	orr.w	r3, r3, #16
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cce:	2308      	movs	r3, #8
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4824      	ldr	r0, [pc, #144]	; (8002d6c <HAL_UART_MspInit+0x294>)
 8002cda:	f001 fb43 	bl	8004364 <HAL_GPIO_Init>
}
 8002cde:	e031      	b.n	8002d44 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_UART_MspInit+0x298>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d12c      	bne.n	8002d44 <HAL_UART_MspInit+0x26c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_UART_MspInit+0x278>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d34:	2307      	movs	r3, #7
 8002d36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4807      	ldr	r0, [pc, #28]	; (8002d5c <HAL_UART_MspInit+0x284>)
 8002d40:	f001 fb10 	bl	8004364 <HAL_GPIO_Init>
}
 8002d44:	bf00      	nop
 8002d46:	3748      	adds	r7, #72	; 0x48
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40004c00 	.word	0x40004c00
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40005000 	.word	0x40005000
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40007800 	.word	0x40007800
 8002d64:	40021400 	.word	0x40021400
 8002d68:	40007c00 	.word	0x40007c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40004800 	.word	0x40004800

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 f960 	bl	8003084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHOP_SEL_Pin);
 8002dcc:	2040      	movs	r0, #64	; 0x40
 8002dce:	f001 fca7 	bl	8004720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <UART4_IRQHandler+0x10>)
 8002dde:	f003 fcf9 	bl	80067d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000038c 	.word	0x2000038c

08002dec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <UART5_IRQHandler+0x10>)
 8002df2:	f003 fcef 	bl	80067d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000400 	.word	0x20000400

08002e00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <DMA2_Stream0_IRQHandler+0x10>)
 8002e06:	f001 f843 	bl	8003e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000260 	.word	0x20000260

08002e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_kill>:

int _kill(int pid, int sig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e2e:	f007 fc73 	bl	800a718 <__errno>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2216      	movs	r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
  return -1;
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_exit>:

void _exit (int status)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ffe7 	bl	8002e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e56:	e7fe      	b.n	8002e56 <_exit+0x12>

08002e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e00a      	b.n	8002e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e6a:	f3af 8000 	nop.w
 8002e6e:	4601      	mov	r1, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	60ba      	str	r2, [r7, #8]
 8002e76:	b2ca      	uxtb	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dbf0      	blt.n	8002e6a <_read+0x12>
  }

  return len;
 8002e88:	687b      	ldr	r3, [r7, #4]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eba:	605a      	str	r2, [r3, #4]
  return 0;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_isatty>:

int _isatty(int file)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <_sbrk+0x5c>)
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <_sbrk+0x60>)
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <_sbrk+0x64>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <_sbrk+0x68>)
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d207      	bcs.n	8002f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f2c:	f007 fbf4 	bl	800a718 <__errno>
 8002f30:	4603      	mov	r3, r0
 8002f32:	220c      	movs	r2, #12
 8002f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3a:	e009      	b.n	8002f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <_sbrk+0x64>)
 8002f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20030000 	.word	0x20030000
 8002f5c:	00000400 	.word	0x00000400
 8002f60:	20000e44 	.word	0x20000e44
 8002f64:	20000fe0 	.word	0x20000fe0

08002f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <SystemInit+0x20>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <SystemInit+0x20>)
 8002f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f90:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f92:	490e      	ldr	r1, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f94:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f98:	e002      	b.n	8002fa0 <LoopCopyDataInit>

08002f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9e:	3304      	adds	r3, #4

08002fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa4:	d3f9      	bcc.n	8002f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa8:	4c0b      	ldr	r4, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fac:	e001      	b.n	8002fb2 <LoopFillZerobss>

08002fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb0:	3204      	adds	r2, #4

08002fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb4:	d3fb      	bcc.n	8002fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fb6:	f7ff ffd7 	bl	8002f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fba:	f007 fbb3 	bl	800a724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fbe:	f7fe fe7f 	bl	8001cc0 <main>
  bx  lr    
 8002fc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002fc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002fd0:	0800d7c4 	.word	0x0800d7c4
  ldr r2, =_sbss
 8002fd4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002fd8:	20000fe0 	.word	0x20000fe0

08002fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC_IRQHandler>
	...

08002fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_Init+0x40>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_Init+0x40>)
 8002fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_Init+0x40>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_Init+0x40>)
 8002ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_Init+0x40>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_Init+0x40>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003008:	2003      	movs	r0, #3
 800300a:	f000 fd67 	bl	8003adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300e:	2000      	movs	r0, #0
 8003010:	f000 f808 	bl	8003024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003014:	f7ff fbcc 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00

08003024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_InitTick+0x54>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_InitTick+0x58>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4619      	mov	r1, r3
 8003036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303a:	fbb3 f3f1 	udiv	r3, r3, r1
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fd7f 	bl	8003b46 <HAL_SYSTICK_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e00e      	b.n	8003070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d80a      	bhi.n	800306e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003058:	2200      	movs	r2, #0
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003060:	f000 fd47 	bl	8003af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003064:	4a06      	ldr	r2, [pc, #24]	; (8003080 <HAL_InitTick+0x5c>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000010 	.word	0x20000010
 800307c:	20000018 	.word	0x20000018
 8003080:	20000014 	.word	0x20000014

08003084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x20>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x24>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4413      	add	r3, r2
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_IncTick+0x24>)
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000018 	.word	0x20000018
 80030a8:	20000e48 	.word	0x20000e48

080030ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return uwTick;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_GetTick+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000e48 	.word	0x20000e48

080030c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff ffee 	bl	80030ac <HAL_GetTick>
 80030d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030dc:	d005      	beq.n	80030ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_Delay+0x44>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ea:	bf00      	nop
 80030ec:	f7ff ffde 	bl	80030ac <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d8f7      	bhi.n	80030ec <HAL_Delay+0x28>
  {
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000018 	.word	0x20000018

0800310c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e033      	b.n	800318a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fb68 	bl	8002800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003152:	f023 0302 	bic.w	r3, r3, #2
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa6e 	bl	8003640 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
 800317a:	e001      	b.n	8003180 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Start_DMA+0x1e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0e9      	b.n	8003386 <HAL_ADC_Start_DMA+0x1f2>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d018      	beq.n	80031fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_ADC_Start_DMA+0x1fc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6d      	ldr	r2, [pc, #436]	; (8003394 <HAL_ADC_Start_DMA+0x200>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0c9a      	lsrs	r2, r3, #18
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031ec:	e002      	b.n	80031f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f9      	bne.n	80031ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003208:	d107      	bne.n	800321a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003218:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 80a1 	bne.w	800336c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003254:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d106      	bne.n	8003278 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f023 0206 	bic.w	r2, r3, #6
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
 8003276:	e002      	b.n	800327e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003286:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_ADC_Start_DMA+0x204>)
 8003288:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	4a43      	ldr	r2, [pc, #268]	; (800339c <HAL_ADC_Start_DMA+0x208>)
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	4a42      	ldr	r2, [pc, #264]	; (80033a0 <HAL_ADC_Start_DMA+0x20c>)
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	4a41      	ldr	r2, [pc, #260]	; (80033a4 <HAL_ADC_Start_DMA+0x210>)
 80032a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	334c      	adds	r3, #76	; 0x4c
 80032d6:	4619      	mov	r1, r3
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f000 fcee 	bl	8003cbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d12a      	bne.n	8003342 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2d      	ldr	r2, [pc, #180]	; (80033a8 <HAL_ADC_Start_DMA+0x214>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d015      	beq.n	8003322 <HAL_ADC_Start_DMA+0x18e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <HAL_ADC_Start_DMA+0x218>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d105      	bne.n	800330c <HAL_ADC_Start_DMA+0x178>
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_ADC_Start_DMA+0x204>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <HAL_ADC_Start_DMA+0x21c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d136      	bne.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_ADC_Start_DMA+0x204>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d130      	bne.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d129      	bne.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	e020      	b.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <HAL_ADC_Start_DMA+0x214>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d11b      	bne.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d114      	bne.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	e00b      	b.n	8003384 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f043 0210 	orr.w	r2, r3, #16
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000010 	.word	0x20000010
 8003394:	431bde83 	.word	0x431bde83
 8003398:	40012300 	.word	0x40012300
 800339c:	08003839 	.word	0x08003839
 80033a0:	080038f3 	.word	0x080038f3
 80033a4:	0800390f 	.word	0x0800390f
 80033a8:	40012000 	.word	0x40012000
 80033ac:	40012100 	.word	0x40012100
 80033b0:	40012200 	.word	0x40012200

080033b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1c>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e113      	b.n	8003620 <HAL_ADC_ConfigChannel+0x244>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b09      	cmp	r3, #9
 8003406:	d925      	bls.n	8003454 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68d9      	ldr	r1, [r3, #12]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	2207      	movs	r2, #7
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43da      	mvns	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	400a      	ands	r2, r1
 800342c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68d9      	ldr	r1, [r3, #12]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	4603      	mov	r3, r0
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4403      	add	r3, r0
 8003446:	3b1e      	subs	r3, #30
 8003448:	409a      	lsls	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	e022      	b.n	800349a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	2207      	movs	r2, #7
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	400a      	ands	r2, r1
 8003476:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	4603      	mov	r3, r0
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4403      	add	r3, r0
 8003490:	409a      	lsls	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d824      	bhi.n	80034ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	3b05      	subs	r3, #5
 80034b4:	221f      	movs	r2, #31
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	400a      	ands	r2, r1
 80034c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4618      	mov	r0, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	3b05      	subs	r3, #5
 80034de:	fa00 f203 	lsl.w	r2, r0, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ea:	e04c      	b.n	8003586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d824      	bhi.n	800353e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b23      	subs	r3, #35	; 0x23
 8003506:	221f      	movs	r2, #31
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43da      	mvns	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	400a      	ands	r2, r1
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	4618      	mov	r0, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	3b23      	subs	r3, #35	; 0x23
 8003530:	fa00 f203 	lsl.w	r2, r0, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
 800353c:	e023      	b.n	8003586 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b41      	subs	r3, #65	; 0x41
 8003550:	221f      	movs	r2, #31
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	400a      	ands	r2, r1
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b41      	subs	r3, #65	; 0x41
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_ADC_ConfigChannel+0x250>)
 8003588:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a28      	ldr	r2, [pc, #160]	; (8003630 <HAL_ADC_ConfigChannel+0x254>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10f      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x1d8>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b12      	cmp	r3, #18
 800359a:	d10b      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_ADC_ConfigChannel+0x254>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d12b      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x23a>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_ADC_ConfigChannel+0x258>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x1f4>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b11      	cmp	r3, #17
 80035ce:	d122      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_ADC_ConfigChannel+0x258>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_ADC_ConfigChannel+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_ADC_ConfigChannel+0x260>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	0c9a      	lsrs	r2, r3, #18
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003608:	e002      	b.n	8003610 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3b01      	subs	r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f9      	bne.n	800360a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40012300 	.word	0x40012300
 8003630:	40012000 	.word	0x40012000
 8003634:	10000012 	.word	0x10000012
 8003638:	20000010 	.word	0x20000010
 800363c:	431bde83 	.word	0x431bde83

08003640 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003648:	4b79      	ldr	r3, [pc, #484]	; (8003830 <ADC_Init+0x1f0>)
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	4a58      	ldr	r2, [pc, #352]	; (8003834 <ADC_Init+0x1f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	e00f      	b.n	800373e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800372c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800373c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0202 	bic.w	r2, r2, #2
 800374c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e1b      	ldrb	r3, [r3, #24]
 8003758:	005a      	lsls	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800378a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	3b01      	subs	r3, #1
 8003798:	035a      	lsls	r2, r3, #13
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e007      	b.n	80037b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	051a      	lsls	r2, r3, #20
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6899      	ldr	r1, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037f6:	025a      	lsls	r2, r3, #9
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	029a      	lsls	r2, r3, #10
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40012300 	.word	0x40012300
 8003834:	0f000001 	.word	0x0f000001

08003838 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d13c      	bne.n	80038cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d12b      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003870:	2b00      	cmp	r3, #0
 8003872:	d127      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800388c:	2b00      	cmp	r3, #0
 800388e:	d119      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0220 	bic.w	r2, r2, #32
 800389e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7fd fef3 	bl	80016b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038ca:	e00e      	b.n	80038ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fd75 	bl	80033c8 <HAL_ADC_ErrorCallback>
}
 80038de:	e004      	b.n	80038ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fd57 	bl	80033b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fd4a 	bl	80033c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa8:	d301      	bcc.n	8003aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00f      	b.n	8003ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <SysTick_Config+0x40>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab6:	210f      	movs	r1, #15
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003abc:	f7ff ff8e 	bl	80039dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <SysTick_Config+0x40>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac6:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <SysTick_Config+0x40>)
 8003ac8:	2207      	movs	r2, #7
 8003aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000e010 	.word	0xe000e010

08003adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff29 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b04:	f7ff ff3e 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7ff ff8e 	bl	8003a30 <NVIC_EncodePriority>
 8003b14:	4602      	mov	r2, r0
 8003b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff5d 	bl	80039dc <__NVIC_SetPriority>
}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff31 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ffa2 	bl	8003a98 <SysTick_Config>
 8003b54:	4603      	mov	r3, r0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b6c:	f7ff fa9e 	bl	80030ac <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e099      	b.n	8003cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9c:	e00f      	b.n	8003bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b9e:	f7ff fa85 	bl	80030ac <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d908      	bls.n	8003bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e078      	b.n	8003cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e8      	bne.n	8003b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <HAL_DMA_Init+0x158>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4313      	orrs	r3, r2
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0307 	bic.w	r3, r3, #7
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d117      	bne.n	8003c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fb01 	bl	800426c <DMA_CheckFifoParam>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e016      	b.n	8003cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fab8 	bl	8004200 <DMA_CalcBaseAndBitshift>
 8003c90:	4603      	mov	r3, r0
 8003c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	223f      	movs	r2, #63	; 0x3f
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	f010803f 	.word	0xf010803f

08003cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_Start_IT+0x26>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e040      	b.n	8003d64 <HAL_DMA_Start_IT+0xa8>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d12f      	bne.n	8003d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fa4a 	bl	80041a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	223f      	movs	r2, #63	; 0x3f
 8003d16:	409a      	lsls	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0216 	orr.w	r2, r2, #22
 8003d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e005      	b.n	8003d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d7a:	f7ff f997 	bl	80030ac <HAL_GetTick>
 8003d7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d008      	beq.n	8003d9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e052      	b.n	8003e44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0216 	bic.w	r2, r2, #22
 8003dac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <HAL_DMA_Abort+0x62>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0208 	bic.w	r2, r2, #8
 8003ddc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dee:	e013      	b.n	8003e18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df0:	f7ff f95c 	bl	80030ac <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d90c      	bls.n	8003e18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2203      	movs	r2, #3
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e015      	b.n	8003e44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e4      	bne.n	8003df0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	223f      	movs	r2, #63	; 0x3f
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d004      	beq.n	8003e6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00c      	b.n	8003e84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	; (80040d8 <HAL_DMA_IRQHandler+0x248>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a8e      	ldr	r2, [pc, #568]	; (80040dc <HAL_DMA_IRQHandler+0x24c>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	2208      	movs	r2, #8
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01a      	beq.n	8003efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0204 	bic.w	r2, r2, #4
 8003ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	2208      	movs	r2, #8
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	2201      	movs	r2, #1
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2201      	movs	r2, #1
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	2204      	movs	r2, #4
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d012      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00b      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	2204      	movs	r2, #4
 8003f56:	409a      	lsls	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d043      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03c      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d108      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d024      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
 8003fbe:	e01f      	b.n	8004000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01b      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e016      	b.n	8004000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0208 	bic.w	r2, r2, #8
 8003fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	2220      	movs	r2, #32
 8004006:	409a      	lsls	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 808f 	beq.w	8004130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8087 	beq.w	8004130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	2220      	movs	r2, #32
 8004028:	409a      	lsls	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b05      	cmp	r3, #5
 8004038:	d136      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0216 	bic.w	r2, r2, #22
 8004048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_DMA_IRQHandler+0x1da>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	223f      	movs	r2, #63	; 0x3f
 8004080:	409a      	lsls	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d07e      	beq.n	800419c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
        }
        return;
 80040a6:	e079      	b.n	800419c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10d      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d031      	beq.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
 80040d4:	e02c      	b.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
 80040d6:	bf00      	nop
 80040d8:	20000010 	.word	0x20000010
 80040dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d023      	beq.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	e01e      	b.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10f      	bne.n	8004120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	2b00      	cmp	r3, #0
 8004136:	d032      	beq.n	800419e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2205      	movs	r2, #5
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3301      	adds	r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	d307      	bcc.n	8004178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f2      	bne.n	800415c <HAL_DMA_IRQHandler+0x2cc>
 8004176:	e000      	b.n	800417a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
 800419a:	e000      	b.n	800419e <HAL_DMA_IRQHandler+0x30e>
        return;
 800419c:	bf00      	nop
    }
  }
}
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d108      	bne.n	80041e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041e2:	e007      	b.n	80041f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	3b10      	subs	r3, #16
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <DMA_CalcBaseAndBitshift+0x64>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <DMA_CalcBaseAndBitshift+0x68>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d909      	bls.n	8004242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	659a      	str	r2, [r3, #88]	; 0x58
 8004240:	e007      	b.n	8004252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	aaaaaaab 	.word	0xaaaaaaab
 8004268:	0800d384 	.word	0x0800d384

0800426c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11f      	bne.n	80042c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d856      	bhi.n	800433a <DMA_CheckFifoParam+0xce>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <DMA_CheckFifoParam+0x28>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042b7 	.word	0x080042b7
 800429c:	080042a5 	.word	0x080042a5
 80042a0:	0800433b 	.word	0x0800433b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d046      	beq.n	800433e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e043      	b.n	800433e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042be:	d140      	bne.n	8004342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c4:	e03d      	b.n	8004342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	d121      	bne.n	8004314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d837      	bhi.n	8004346 <DMA_CheckFifoParam+0xda>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <DMA_CheckFifoParam+0x70>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042f3 	.word	0x080042f3
 80042e4:	080042ed 	.word	0x080042ed
 80042e8:	08004305 	.word	0x08004305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e030      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d025      	beq.n	800434a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004302:	e022      	b.n	800434a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800430c:	d11f      	bne.n	800434e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004312:	e01c      	b.n	800434e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d903      	bls.n	8004322 <DMA_CheckFifoParam+0xb6>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d003      	beq.n	8004328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004320:	e018      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
      break;
 8004326:	e015      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e00b      	b.n	8004352 <DMA_CheckFifoParam+0xe6>
      break;
 800433a:	bf00      	nop
 800433c:	e00a      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 800433e:	bf00      	nop
 8004340:	e008      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e006      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e004      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;   
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 8004352:	bf00      	nop
    }
  } 
  
  return status; 
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	e177      	b.n	8004670 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	f040 8166 	bne.w	800466a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d005      	beq.n	80043b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d130      	bne.n	8004418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043ec:	2201      	movs	r2, #1
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 0201 	and.w	r2, r3, #1
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b03      	cmp	r3, #3
 8004422:	d017      	beq.n	8004454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d123      	bne.n	80044a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	220f      	movs	r2, #15
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	08da      	lsrs	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3208      	adds	r2, #8
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0203 	and.w	r2, r3, #3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80c0 	beq.w	800466a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b66      	ldr	r3, [pc, #408]	; (8004688 <HAL_GPIO_Init+0x324>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	4a65      	ldr	r2, [pc, #404]	; (8004688 <HAL_GPIO_Init+0x324>)
 80044f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f8:	6453      	str	r3, [r2, #68]	; 0x44
 80044fa:	4b63      	ldr	r3, [pc, #396]	; (8004688 <HAL_GPIO_Init+0x324>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004506:	4a61      	ldr	r2, [pc, #388]	; (800468c <HAL_GPIO_Init+0x328>)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	3302      	adds	r3, #2
 800450e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	220f      	movs	r2, #15
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a58      	ldr	r2, [pc, #352]	; (8004690 <HAL_GPIO_Init+0x32c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d037      	beq.n	80045a2 <HAL_GPIO_Init+0x23e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a57      	ldr	r2, [pc, #348]	; (8004694 <HAL_GPIO_Init+0x330>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_GPIO_Init+0x23a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a56      	ldr	r2, [pc, #344]	; (8004698 <HAL_GPIO_Init+0x334>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02b      	beq.n	800459a <HAL_GPIO_Init+0x236>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a55      	ldr	r2, [pc, #340]	; (800469c <HAL_GPIO_Init+0x338>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d025      	beq.n	8004596 <HAL_GPIO_Init+0x232>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a54      	ldr	r2, [pc, #336]	; (80046a0 <HAL_GPIO_Init+0x33c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01f      	beq.n	8004592 <HAL_GPIO_Init+0x22e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a53      	ldr	r2, [pc, #332]	; (80046a4 <HAL_GPIO_Init+0x340>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d019      	beq.n	800458e <HAL_GPIO_Init+0x22a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a52      	ldr	r2, [pc, #328]	; (80046a8 <HAL_GPIO_Init+0x344>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_GPIO_Init+0x226>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a51      	ldr	r2, [pc, #324]	; (80046ac <HAL_GPIO_Init+0x348>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00d      	beq.n	8004586 <HAL_GPIO_Init+0x222>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a50      	ldr	r2, [pc, #320]	; (80046b0 <HAL_GPIO_Init+0x34c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <HAL_GPIO_Init+0x21e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a4f      	ldr	r2, [pc, #316]	; (80046b4 <HAL_GPIO_Init+0x350>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_GPIO_Init+0x21a>
 800457a:	2309      	movs	r3, #9
 800457c:	e012      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 800457e:	230a      	movs	r3, #10
 8004580:	e010      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 8004582:	2308      	movs	r3, #8
 8004584:	e00e      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 8004586:	2307      	movs	r3, #7
 8004588:	e00c      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 800458a:	2306      	movs	r3, #6
 800458c:	e00a      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 800458e:	2305      	movs	r3, #5
 8004590:	e008      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 8004592:	2304      	movs	r3, #4
 8004594:	e006      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 8004596:	2303      	movs	r3, #3
 8004598:	e004      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 800459a:	2302      	movs	r3, #2
 800459c:	e002      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_GPIO_Init+0x240>
 80045a2:	2300      	movs	r3, #0
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	f002 0203 	and.w	r2, r2, #3
 80045aa:	0092      	lsls	r2, r2, #2
 80045ac:	4093      	lsls	r3, r2
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b4:	4935      	ldr	r1, [pc, #212]	; (800468c <HAL_GPIO_Init+0x328>)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3302      	adds	r3, #2
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045c2:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_GPIO_Init+0x354>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <HAL_GPIO_Init+0x354>)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045ec:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <HAL_GPIO_Init+0x354>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004610:	4a29      	ldr	r2, [pc, #164]	; (80046b8 <HAL_GPIO_Init+0x354>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <HAL_GPIO_Init+0x354>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800463a:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_GPIO_Init+0x354>)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_GPIO_Init+0x354>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <HAL_GPIO_Init+0x354>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3301      	adds	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	f67f ae84 	bls.w	8004380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3724      	adds	r7, #36	; 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800
 800468c:	40013800 	.word	0x40013800
 8004690:	40020000 	.word	0x40020000
 8004694:	40020400 	.word	0x40020400
 8004698:	40020800 	.word	0x40020800
 800469c:	40020c00 	.word	0x40020c00
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40021400 	.word	0x40021400
 80046a8:	40021800 	.word	0x40021800
 80046ac:	40021c00 	.word	0x40021c00
 80046b0:	40022000 	.word	0x40022000
 80046b4:	40022400 	.word	0x40022400
 80046b8:	40013c00 	.word	0x40013c00

080046bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e001      	b.n	80046de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
 80046f8:	4613      	mov	r3, r2
 80046fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046fc:	787b      	ldrb	r3, [r7, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004708:	e003      	b.n	8004712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800470a:	887b      	ldrh	r3, [r7, #2]
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	619a      	str	r2, [r3, #24]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004736:	4a05      	ldr	r2, [pc, #20]	; (800474c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fc ffd4 	bl	80016ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40013c00 	.word	0x40013c00

08004750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e12b      	b.n	80049ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fe f8f4 	bl	8002964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b4:	f000 fdfc 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 80047b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a81      	ldr	r2, [pc, #516]	; (80049c4 <HAL_I2C_Init+0x274>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d807      	bhi.n	80047d4 <HAL_I2C_Init+0x84>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a80      	ldr	r2, [pc, #512]	; (80049c8 <HAL_I2C_Init+0x278>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bf94      	ite	ls
 80047cc:	2301      	movls	r3, #1
 80047ce:	2300      	movhi	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e006      	b.n	80047e2 <HAL_I2C_Init+0x92>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a7d      	ldr	r2, [pc, #500]	; (80049cc <HAL_I2C_Init+0x27c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	bf94      	ite	ls
 80047dc:	2301      	movls	r3, #1
 80047de:	2300      	movhi	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0e7      	b.n	80049ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a78      	ldr	r2, [pc, #480]	; (80049d0 <HAL_I2C_Init+0x280>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	0c9b      	lsrs	r3, r3, #18
 80047f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a6a      	ldr	r2, [pc, #424]	; (80049c4 <HAL_I2C_Init+0x274>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d802      	bhi.n	8004824 <HAL_I2C_Init+0xd4>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	e009      	b.n	8004838 <HAL_I2C_Init+0xe8>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	4a69      	ldr	r2, [pc, #420]	; (80049d4 <HAL_I2C_Init+0x284>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	3301      	adds	r3, #1
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	430b      	orrs	r3, r1
 800483e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800484a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	495c      	ldr	r1, [pc, #368]	; (80049c4 <HAL_I2C_Init+0x274>)
 8004854:	428b      	cmp	r3, r1
 8004856:	d819      	bhi.n	800488c <HAL_I2C_Init+0x13c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e59      	subs	r1, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fbb1 f3f3 	udiv	r3, r1, r3
 8004866:	1c59      	adds	r1, r3, #1
 8004868:	f640 73fc 	movw	r3, #4092	; 0xffc
 800486c:	400b      	ands	r3, r1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_I2C_Init+0x138>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1e59      	subs	r1, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004880:	3301      	adds	r3, #1
 8004882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004886:	e051      	b.n	800492c <HAL_I2C_Init+0x1dc>
 8004888:	2304      	movs	r3, #4
 800488a:	e04f      	b.n	800492c <HAL_I2C_Init+0x1dc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d111      	bne.n	80048b8 <HAL_I2C_Init+0x168>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1e58      	subs	r0, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e012      	b.n	80048de <HAL_I2C_Init+0x18e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	0099      	lsls	r1, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Init+0x196>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e022      	b.n	800492c <HAL_I2C_Init+0x1dc>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10e      	bne.n	800490c <HAL_I2C_Init+0x1bc>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e58      	subs	r0, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	440b      	add	r3, r1
 80048fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490a:	e00f      	b.n	800492c <HAL_I2C_Init+0x1dc>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e58      	subs	r0, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	0099      	lsls	r1, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	6809      	ldr	r1, [r1, #0]
 8004930:	4313      	orrs	r3, r2
 8004932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800495a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6911      	ldr	r1, [r2, #16]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68d2      	ldr	r2, [r2, #12]
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	430b      	orrs	r3, r1
 800496e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	000186a0 	.word	0x000186a0
 80049c8:	001e847f 	.word	0x001e847f
 80049cc:	003d08ff 	.word	0x003d08ff
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	10624dd3 	.word	0x10624dd3

080049d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d129      	bne.n	8004a42 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2224      	movs	r2, #36	; 0x24
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0210 	bic.w	r2, r2, #16
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d12a      	bne.n	8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2224      	movs	r2, #36	; 0x24
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	89fa      	ldrh	r2, [r7, #14]
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e267      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d075      	beq.n	8004bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aee:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d00c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afa:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d112      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b06:	4b82      	ldr	r3, [pc, #520]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b12:	d10b      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	4b7e      	ldr	r3, [pc, #504]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d05b      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x108>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d157      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e242      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_OscConfig+0x74>
 8004b36:	4b76      	ldr	r3, [pc, #472]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a75      	ldr	r2, [pc, #468]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e01d      	b.n	8004b80 <HAL_RCC_OscConfig+0xb0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x98>
 8004b4e:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6f      	ldr	r2, [pc, #444]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b6d      	ldr	r3, [pc, #436]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6c      	ldr	r2, [pc, #432]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0xb0>
 8004b68:	4b69      	ldr	r3, [pc, #420]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a68      	ldr	r2, [pc, #416]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a65      	ldr	r2, [pc, #404]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fe fa90 	bl	80030ac <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fe fa8c 	bl	80030ac <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e207      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0xc0>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fe fa7c 	bl	80030ac <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fe fa78 	bl	80030ac <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e1f3      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0xe8>
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be6:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d11c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfe:	4b44      	ldr	r3, [pc, #272]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_RCC_OscConfig+0x152>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e1c7      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c22:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4937      	ldr	r1, [pc, #220]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	e03a      	b.n	8004cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_RCC_OscConfig+0x244>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fe fa31 	bl	80030ac <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fe fa2d 	bl	80030ac <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e1a8      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4925      	ldr	r1, [pc, #148]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
 8004c80:	e015      	b.n	8004cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <HAL_RCC_OscConfig+0x244>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fe fa10 	bl	80030ac <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fe fa0c 	bl	80030ac <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e187      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d036      	beq.n	8004d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <HAL_RCC_OscConfig+0x248>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fe f9f0 	bl	80030ac <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fe f9ec 	bl	80030ac <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e167      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x200>
 8004cee:	e01b      	b.n	8004d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <HAL_RCC_OscConfig+0x248>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fe f9d9 	bl	80030ac <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	e00e      	b.n	8004d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfe:	f7fe f9d5 	bl	80030ac <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d907      	bls.n	8004d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e150      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
 8004d10:	40023800 	.word	0x40023800
 8004d14:	42470000 	.word	0x42470000
 8004d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1c:	4b88      	ldr	r3, [pc, #544]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ea      	bne.n	8004cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8097 	beq.w	8004e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b81      	ldr	r3, [pc, #516]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10f      	bne.n	8004d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	4b7d      	ldr	r3, [pc, #500]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a7c      	ldr	r2, [pc, #496]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b7a      	ldr	r3, [pc, #488]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d66:	4b77      	ldr	r3, [pc, #476]	; (8004f44 <HAL_RCC_OscConfig+0x474>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d118      	bne.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d72:	4b74      	ldr	r3, [pc, #464]	; (8004f44 <HAL_RCC_OscConfig+0x474>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a73      	ldr	r2, [pc, #460]	; (8004f44 <HAL_RCC_OscConfig+0x474>)
 8004d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7e:	f7fe f995 	bl	80030ac <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d86:	f7fe f991 	bl	80030ac <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e10c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	4b6a      	ldr	r3, [pc, #424]	; (8004f44 <HAL_RCC_OscConfig+0x474>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x2ea>
 8004dac:	4b64      	ldr	r3, [pc, #400]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a63      	ldr	r2, [pc, #396]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	e01c      	b.n	8004df4 <HAL_RCC_OscConfig+0x324>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x30c>
 8004dc2:	4b5f      	ldr	r3, [pc, #380]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a5e      	ldr	r2, [pc, #376]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	f043 0304 	orr.w	r3, r3, #4
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dce:	4b5c      	ldr	r3, [pc, #368]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a5b      	ldr	r2, [pc, #364]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	e00b      	b.n	8004df4 <HAL_RCC_OscConfig+0x324>
 8004ddc:	4b58      	ldr	r3, [pc, #352]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a57      	ldr	r2, [pc, #348]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a54      	ldr	r2, [pc, #336]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004dee:	f023 0304 	bic.w	r3, r3, #4
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe f956 	bl	80030ac <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e04:	f7fe f952 	bl	80030ac <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e0cb      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1a:	4b49      	ldr	r3, [pc, #292]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ee      	beq.n	8004e04 <HAL_RCC_OscConfig+0x334>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e28:	f7fe f940 	bl	80030ac <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e30:	f7fe f93c 	bl	80030ac <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e0b5      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e46:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ee      	bne.n	8004e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d105      	bne.n	8004e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e58:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80a1 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6e:	4b34      	ldr	r3, [pc, #208]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d05c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d141      	bne.n	8004f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCC_OscConfig+0x478>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fe f910 	bl	80030ac <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe f90c 	bl	80030ac <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e087      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	019b      	lsls	r3, r3, #6
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	491b      	ldr	r1, [pc, #108]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <HAL_RCC_OscConfig+0x478>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7fe f8e5 	bl	80030ac <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fe f8e1 	bl	80030ac <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e05c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x416>
 8004f04:	e054      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x478>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fe f8ce 	bl	80030ac <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f14:	f7fe f8ca 	bl	80030ac <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e045      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCC_OscConfig+0x470>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x444>
 8004f32:	e03d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e038      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40007000 	.word	0x40007000
 8004f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_RCC_OscConfig+0x4ec>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d028      	beq.n	8004fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d121      	bne.n	8004fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d11a      	bne.n	8004fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d111      	bne.n	8004fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	3b01      	subs	r3, #1
 8004f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800

08004fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0cc      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b68      	ldr	r3, [pc, #416]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d90c      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0b8      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a58      	ldr	r2, [pc, #352]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800501e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800502c:	4b53      	ldr	r3, [pc, #332]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4a52      	ldr	r2, [pc, #328]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	494d      	ldr	r1, [pc, #308]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d044      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b47      	ldr	r3, [pc, #284]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d119      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e07f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d003      	beq.n	800507e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507a:	2b03      	cmp	r3, #3
 800507c:	d107      	bne.n	800508e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e06f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508e:	4b3b      	ldr	r3, [pc, #236]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e067      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509e:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4934      	ldr	r1, [pc, #208]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b0:	f7fd fffc 	bl	80030ac <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b8:	f7fd fff8 	bl	80030ac <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e04f      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	4b2b      	ldr	r3, [pc, #172]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 020c 	and.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	429a      	cmp	r2, r3
 80050de:	d1eb      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d20c      	bcs.n	8005108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e032      	b.n	800516e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4916      	ldr	r1, [pc, #88]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	490e      	ldr	r1, [pc, #56]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005146:	f000 f821 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800514a:	4602      	mov	r2, r0
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	490a      	ldr	r1, [pc, #40]	; (8005180 <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	fa22 f303 	lsr.w	r3, r2, r3
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_ClockConfig+0x1c8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd ff5c 	bl	8003024 <HAL_InitTick>

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023c00 	.word	0x40023c00
 800517c:	40023800 	.word	0x40023800
 8005180:	0800d36c 	.word	0x0800d36c
 8005184:	20000010 	.word	0x20000010
 8005188:	20000014 	.word	0x20000014

0800518c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800518c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005190:	b094      	sub	sp, #80	; 0x50
 8005192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	647b      	str	r3, [r7, #68]	; 0x44
 8005198:	2300      	movs	r3, #0
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	2300      	movs	r3, #0
 800519e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a4:	4b79      	ldr	r3, [pc, #484]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d00d      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x40>
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	f200 80e1 	bhi.w	8005378 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d003      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051be:	e0db      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b73      	ldr	r3, [pc, #460]	; (8005390 <HAL_RCC_GetSysClockFreq+0x204>)
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051c4:	e0db      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c6:	4b73      	ldr	r3, [pc, #460]	; (8005394 <HAL_RCC_GetSysClockFreq+0x208>)
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ca:	e0d8      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051cc:	4b6f      	ldr	r3, [pc, #444]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d6:	4b6d      	ldr	r3, [pc, #436]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d063      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	4b6a      	ldr	r3, [pc, #424]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	2200      	movs	r2, #0
 80051ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
 80051fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051fe:	4622      	mov	r2, r4
 8005200:	462b      	mov	r3, r5
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	0159      	lsls	r1, r3, #5
 800520c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005210:	0150      	lsls	r0, r2, #5
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4621      	mov	r1, r4
 8005218:	1a51      	subs	r1, r2, r1
 800521a:	6139      	str	r1, [r7, #16]
 800521c:	4629      	mov	r1, r5
 800521e:	eb63 0301 	sbc.w	r3, r3, r1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005230:	4659      	mov	r1, fp
 8005232:	018b      	lsls	r3, r1, #6
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800523a:	4651      	mov	r1, sl
 800523c:	018a      	lsls	r2, r1, #6
 800523e:	4651      	mov	r1, sl
 8005240:	ebb2 0801 	subs.w	r8, r2, r1
 8005244:	4659      	mov	r1, fp
 8005246:	eb63 0901 	sbc.w	r9, r3, r1
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800525a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525e:	4690      	mov	r8, r2
 8005260:	4699      	mov	r9, r3
 8005262:	4623      	mov	r3, r4
 8005264:	eb18 0303 	adds.w	r3, r8, r3
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	462b      	mov	r3, r5
 800526c:	eb49 0303 	adc.w	r3, r9, r3
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800527e:	4629      	mov	r1, r5
 8005280:	024b      	lsls	r3, r1, #9
 8005282:	4621      	mov	r1, r4
 8005284:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005288:	4621      	mov	r1, r4
 800528a:	024a      	lsls	r2, r1, #9
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005292:	2200      	movs	r2, #0
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
 8005296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800529c:	f7fb fd04 	bl	8000ca8 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a8:	e058      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052aa:	4b38      	ldr	r3, [pc, #224]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	099b      	lsrs	r3, r3, #6
 80052b0:	2200      	movs	r2, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	4611      	mov	r1, r2
 80052b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	2300      	movs	r3, #0
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	f04f 0000 	mov.w	r0, #0
 80052cc:	f04f 0100 	mov.w	r1, #0
 80052d0:	0159      	lsls	r1, r3, #5
 80052d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d6:	0150      	lsls	r0, r2, #5
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4641      	mov	r1, r8
 80052de:	ebb2 0a01 	subs.w	sl, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005300:	eb63 050b 	sbc.w	r5, r3, fp
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	00eb      	lsls	r3, r5, #3
 800530e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005312:	00e2      	lsls	r2, r4, #3
 8005314:	4614      	mov	r4, r2
 8005316:	461d      	mov	r5, r3
 8005318:	4643      	mov	r3, r8
 800531a:	18e3      	adds	r3, r4, r3
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	464b      	mov	r3, r9
 8005320:	eb45 0303 	adc.w	r3, r5, r3
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005332:	4629      	mov	r1, r5
 8005334:	028b      	lsls	r3, r1, #10
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800533c:	4621      	mov	r1, r4
 800533e:	028a      	lsls	r2, r1, #10
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005346:	2200      	movs	r2, #0
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	61fa      	str	r2, [r7, #28]
 800534c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005350:	f7fb fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_RCC_GetSysClockFreq+0x200>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	3301      	adds	r3, #1
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800536c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005376:	e002      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_RCC_GetSysClockFreq+0x204>)
 800537a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800537c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005380:	4618      	mov	r0, r3
 8005382:	3750      	adds	r7, #80	; 0x50
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	00f42400 	.word	0x00f42400
 8005394:	007a1200 	.word	0x007a1200

08005398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_RCC_GetHCLKFreq+0x14>)
 800539e:	681b      	ldr	r3, [r3, #0]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000010 	.word	0x20000010

080053b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053b4:	f7ff fff0 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	0a9b      	lsrs	r3, r3, #10
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4903      	ldr	r1, [pc, #12]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023800 	.word	0x40023800
 80053d4:	0800d37c 	.word	0x0800d37c

080053d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053dc:	f7ff ffdc 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0b5b      	lsrs	r3, r3, #13
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800d37c 	.word	0x0800d37c

08005400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005430:	2b00      	cmp	r3, #0
 8005432:	d075      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005434:	4b91      	ldr	r3, [pc, #580]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800543a:	f7fd fe37 	bl	80030ac <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005442:	f7fd fe33 	bl	80030ac <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e189      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005454:	4b8a      	ldr	r3, [pc, #552]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	019a      	lsls	r2, r3, #6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	071b      	lsls	r3, r3, #28
 8005478:	4981      	ldr	r1, [pc, #516]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01f      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800548c:	4b7c      	ldr	r3, [pc, #496]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005492:	0f1b      	lsrs	r3, r3, #28
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	019a      	lsls	r2, r3, #6
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	061b      	lsls	r3, r3, #24
 80054a6:	431a      	orrs	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	071b      	lsls	r3, r3, #28
 80054ac:	4974      	ldr	r1, [pc, #464]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054b4:	4b72      	ldr	r3, [pc, #456]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ba:	f023 021f 	bic.w	r2, r3, #31
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	496e      	ldr	r1, [pc, #440]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	019a      	lsls	r2, r3, #6
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	071b      	lsls	r3, r3, #28
 80054ec:	4964      	ldr	r1, [pc, #400]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054f4:	4b61      	ldr	r3, [pc, #388]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054fa:	f7fd fdd7 	bl	80030ac <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005502:	f7fd fdd3 	bl	80030ac <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e129      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005514:	4b5a      	ldr	r3, [pc, #360]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005534:	2b00      	cmp	r3, #0
 8005536:	d079      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005538:	4b52      	ldr	r3, [pc, #328]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800553e:	f7fd fdb5 	bl	80030ac <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005546:	f7fd fdb1 	bl	80030ac <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e107      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005558:	4b49      	ldr	r3, [pc, #292]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005564:	d0ef      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d020      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005572:	4b43      	ldr	r3, [pc, #268]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	0f1b      	lsrs	r3, r3, #28
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	019a      	lsls	r2, r3, #6
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	431a      	orrs	r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	071b      	lsls	r3, r3, #28
 8005592:	493b      	ldr	r1, [pc, #236]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800559a:	4b39      	ldr	r3, [pc, #228]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	4934      	ldr	r1, [pc, #208]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01e      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055c0:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	0e1b      	lsrs	r3, r3, #24
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	019a      	lsls	r2, r3, #6
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	061b      	lsls	r3, r3, #24
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	071b      	lsls	r3, r3, #28
 80055e0:	4927      	ldr	r1, [pc, #156]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	4922      	ldr	r1, [pc, #136]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055fe:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005604:	f7fd fd52 	bl	80030ac <HAL_GetTick>
 8005608:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800560a:	e008      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800560c:	f7fd fd4e 	bl	80030ac <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e0a4      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800561e:	4b18      	ldr	r3, [pc, #96]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562a:	d1ef      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 808b 	beq.w	8005750 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005648:	6413      	str	r3, [r2, #64]	; 0x40
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005660:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005662:	f7fd fd23 	bl	80030ac <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005668:	e010      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800566a:	f7fd fd1f 	bl	80030ac <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d909      	bls.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e075      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800567c:	42470068 	.word	0x42470068
 8005680:	40023800 	.word	0x40023800
 8005684:	42470070 	.word	0x42470070
 8005688:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800568c:	4b38      	ldr	r3, [pc, #224]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0e8      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02f      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d028      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c0:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c6:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056cc:	4a29      	ldr	r2, [pc, #164]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056d2:	4b28      	ldr	r3, [pc, #160]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d114      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056de:	f7fd fce5 	bl	80030ac <HAL_GetTick>
 80056e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fd fce1 	bl	80030ac <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e035      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ee      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005714:	d10d      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005716:	4b17      	ldr	r3, [pc, #92]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	4912      	ldr	r1, [pc, #72]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]
 8005730:	e005      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005738:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800573c:	6093      	str	r3, [r2, #8]
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574a:	490a      	ldr	r1, [pc, #40]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800574c:	4313      	orrs	r3, r2
 800574e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005764:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40007000 	.word	0x40007000
 8005774:	40023800 	.word	0x40023800
 8005778:	42470e40 	.word	0x42470e40
 800577c:	424711e0 	.word	0x424711e0

08005780 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e066      	b.n	8005864 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7f5b      	ldrb	r3, [r3, #29]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fd f924 	bl	80029f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	22ca      	movs	r2, #202	; 0xca
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2253      	movs	r2, #83	; 0x53
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f998 	bl	8005af8 <RTC_EnterInitMode>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d12c      	bne.n	800582c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68d2      	ldr	r2, [r2, #12]
 800580c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6919      	ldr	r1, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	041a      	lsls	r2, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f99f 	bl	8005b66 <RTC_ExitInitMode>
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d113      	bne.n	800585a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	22ff      	movs	r2, #255	; 0xff
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	7f1b      	ldrb	r3, [r3, #28]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_RTC_SetTime+0x1c>
 8005884:	2302      	movs	r3, #2
 8005886:	e087      	b.n	8005998 <HAL_RTC_SetTime+0x12c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2202      	movs	r2, #2
 8005892:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d126      	bne.n	80058e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f97c 	bl	8005bb0 <RTC_ByteToBcd2>
 80058b8:	4603      	mov	r3, r0
 80058ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 f975 	bl	8005bb0 <RTC_ByteToBcd2>
 80058c6:	4603      	mov	r3, r0
 80058c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 f96d 	bl	8005bb0 <RTC_ByteToBcd2>
 80058d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	78db      	ldrb	r3, [r3, #3]
 80058e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e018      	b.n	800591a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005908:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800590e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	78db      	ldrb	r3, [r3, #3]
 8005914:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	22ca      	movs	r2, #202	; 0xca
 8005920:	625a      	str	r2, [r3, #36]	; 0x24
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2253      	movs	r2, #83	; 0x53
 8005928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8e4 	bl	8005af8 <RTC_EnterInitMode>
 8005930:	4603      	mov	r3, r0
 8005932:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d120      	bne.n	800597c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005944:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005948:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005958:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6899      	ldr	r1, [r3, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f8f7 	bl	8005b66 <RTC_ExitInitMode>
 8005978:	4603      	mov	r3, r0
 800597a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800597c:	7cfb      	ldrb	r3, [r7, #19]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	771a      	strb	r2, [r3, #28]

  return status;
 8005996:	7cfb      	ldrb	r3, [r7, #19]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}

080059a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	7f1b      	ldrb	r3, [r3, #28]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_RTC_SetDate+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e071      	b.n	8005aa0 <HAL_RTC_SetDate+0x100>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2202      	movs	r2, #2
 80059c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10e      	bne.n	80059ec <HAL_RTC_SetDate+0x4c>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	330a      	adds	r3, #10
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d11c      	bne.n	8005a2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f8da 	bl	8005bb0 <RTC_ByteToBcd2>
 80059fc:	4603      	mov	r3, r0
 80059fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f8d3 	bl	8005bb0 <RTC_ByteToBcd2>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	789b      	ldrb	r3, [r3, #2]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f8cb 	bl	8005bb0 <RTC_ByteToBcd2>
 8005a1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	e00e      	b.n	8005a4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005a3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	22ca      	movs	r2, #202	; 0xca
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2253      	movs	r2, #83	; 0x53
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f84c 	bl	8005af8 <RTC_EnterInitMode>
 8005a60:	4603      	mov	r3, r0
 8005a62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f873 	bl	8005b66 <RTC_ExitInitMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	771a      	strb	r2, [r3, #28]

  return status;
 8005a9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}

08005aa8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ac2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac4:	f7fd faf2 	bl	80030ac <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005aca:	e009      	b.n	8005ae0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005acc:	f7fd faee 	bl	80030ac <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ada:	d901      	bls.n	8005ae0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e007      	b.n	8005af0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0ee      	beq.n	8005acc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d122      	bne.n	8005b5c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b26:	f7fd fac1 	bl	80030ac <HAL_GetTick>
 8005b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b2c:	e00c      	b.n	8005b48 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b2e:	f7fd fabd 	bl	80030ac <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b3c:	d904      	bls.n	8005b48 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2204      	movs	r2, #4
 8005b42:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d102      	bne.n	8005b5c <RTC_EnterInitMode+0x64>
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d1e8      	bne.n	8005b2e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b80:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff89 	bl	8005aa8 <HAL_RTC_WaitForSynchro>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005bbe:	e005      	b.n	8005bcc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	3b0a      	subs	r3, #10
 8005bca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d8f6      	bhi.n	8005bc0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b2db      	uxtb	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e07b      	b.n	8005cf4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c0c:	d009      	beq.n	8005c22 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	61da      	str	r2, [r3, #28]
 8005c14:	e005      	b.n	8005c22 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fc ff03 	bl	8002a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	ea42 0103 	orr.w	r1, r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	0c1b      	lsrs	r3, r3, #16
 8005cc0:	f003 0104 	and.w	r1, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0210 	and.w	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_SPI_Transmit+0x22>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e126      	b.n	8005f6c <HAL_SPI_Transmit+0x270>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d26:	f7fd f9c1 	bl	80030ac <HAL_GetTick>
 8005d2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d40:	e10b      	b.n	8005f5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_Transmit+0x52>
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d52:	e102      	b.n	8005f5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2203      	movs	r2, #3
 8005d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9a:	d10f      	bne.n	8005dbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005daa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d007      	beq.n	8005dda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de2:	d14b      	bne.n	8005e7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_SPI_Transmit+0xf6>
 8005dec:	8afb      	ldrh	r3, [r7, #22]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d13e      	bne.n	8005e70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	881a      	ldrh	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e16:	e02b      	b.n	8005e70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d112      	bne.n	8005e4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	881a      	ldrh	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	1c9a      	adds	r2, r3, #2
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e4a:	e011      	b.n	8005e70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4c:	f7fd f92e 	bl	80030ac <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d803      	bhi.n	8005e64 <HAL_SPI_Transmit+0x168>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e62:	d102      	bne.n	8005e6a <HAL_SPI_Transmit+0x16e>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e6e:	e074      	b.n	8005f5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1ce      	bne.n	8005e18 <HAL_SPI_Transmit+0x11c>
 8005e7a:	e04c      	b.n	8005f16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_SPI_Transmit+0x18e>
 8005e84:	8afb      	ldrh	r3, [r7, #22]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d140      	bne.n	8005f0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eb0:	e02c      	b.n	8005f0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d113      	bne.n	8005ee8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ee6:	e011      	b.n	8005f0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ee8:	f7fd f8e0 	bl	80030ac <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d803      	bhi.n	8005f00 <HAL_SPI_Transmit+0x204>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efe:	d102      	bne.n	8005f06 <HAL_SPI_Transmit+0x20a>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f0a:	e026      	b.n	8005f5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1cd      	bne.n	8005eb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa54 	bl	80063c8 <SPI_EndRxTxTransaction>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e000      	b.n	8005f5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	; 0x30
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f82:	2301      	movs	r3, #1
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x26>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e18a      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x33c>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa2:	f7fd f883 	bl	80030ac <HAL_GetTick>
 8005fa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fb8:	887b      	ldrh	r3, [r7, #2]
 8005fba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d00f      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x70>
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fca:	d107      	bne.n	8005fdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d103      	bne.n	8005fdc <HAL_SPI_TransmitReceive+0x68>
 8005fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d003      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fe2:	e15b      	b.n	800629c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_SPI_TransmitReceive+0x82>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_TransmitReceive+0x82>
 8005ff0:	887b      	ldrh	r3, [r7, #2]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ffc:	e14e      	b.n	800629c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b04      	cmp	r3, #4
 8006008:	d003      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2205      	movs	r2, #5
 800600e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	887a      	ldrh	r2, [r7, #2]
 8006022:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	887a      	ldrh	r2, [r7, #2]
 8006028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	887a      	ldrh	r2, [r7, #2]
 8006034:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	887a      	ldrh	r2, [r7, #2]
 800603a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d007      	beq.n	8006066 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800606e:	d178      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_SPI_TransmitReceive+0x10a>
 8006078:	8b7b      	ldrh	r3, [r7, #26]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d166      	bne.n	800614c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a2:	e053      	b.n	800614c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d11b      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x176>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d016      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x176>
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d113      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	881a      	ldrh	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d119      	bne.n	800612c <HAL_SPI_TransmitReceive+0x1b8>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d014      	beq.n	800612c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	b292      	uxth	r2, r2
 800610e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	1c9a      	adds	r2, r3, #2
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006128:	2301      	movs	r3, #1
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800612c:	f7fc ffbe 	bl	80030ac <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006138:	429a      	cmp	r2, r3
 800613a:	d807      	bhi.n	800614c <HAL_SPI_TransmitReceive+0x1d8>
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006142:	d003      	beq.n	800614c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800614a:	e0a7      	b.n	800629c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1a6      	bne.n	80060a4 <HAL_SPI_TransmitReceive+0x130>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1a1      	bne.n	80060a4 <HAL_SPI_TransmitReceive+0x130>
 8006160:	e07c      	b.n	800625c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x1fc>
 800616a:	8b7b      	ldrh	r3, [r7, #26]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d16b      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006196:	e057      	b.n	8006248 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d11c      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x26c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d017      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x26c>
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d114      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d119      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x2ae>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d014      	beq.n	8006222 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800621e:	2301      	movs	r3, #1
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006222:	f7fc ff43 	bl	80030ac <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622e:	429a      	cmp	r2, r3
 8006230:	d803      	bhi.n	800623a <HAL_SPI_TransmitReceive+0x2c6>
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006238:	d102      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x2cc>
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006246:	e029      	b.n	800629c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1a2      	bne.n	8006198 <HAL_SPI_TransmitReceive+0x224>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d19d      	bne.n	8006198 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f8b1 	bl	80063c8 <SPI_EndRxTxTransaction>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006278:	e010      	b.n	800629c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	e000      	b.n	800629c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800629a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3730      	adds	r7, #48	; 0x30
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062c8:	f7fc fef0 	bl	80030ac <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d8:	f7fc fee8 	bl	80030ac <HAL_GetTick>
 80062dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062de:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	015b      	lsls	r3, r3, #5
 80062e4:	0d1b      	lsrs	r3, r3, #20
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ee:	e054      	b.n	800639a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f6:	d050      	beq.n	800639a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f8:	f7fc fed8 	bl	80030ac <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	429a      	cmp	r2, r3
 8006306:	d902      	bls.n	800630e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d13d      	bne.n	800638a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800631c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006326:	d111      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	d004      	beq.n	800633c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d107      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006354:	d10f      	bne.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e017      	b.n	80063ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3b01      	subs	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d19b      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000010 	.word	0x20000010

080063c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063d4:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <SPI_EndRxTxTransaction+0x7c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <SPI_EndRxTxTransaction+0x80>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	0d5b      	lsrs	r3, r3, #21
 80063e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063e4:	fb02 f303 	mul.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f2:	d112      	bne.n	800641a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff ff5a 	bl	80062b8 <SPI_WaitFlagStateUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f043 0220 	orr.w	r2, r3, #32
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e00f      	b.n	800643a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3b01      	subs	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006430:	2b80      	cmp	r3, #128	; 0x80
 8006432:	d0f2      	beq.n	800641a <SPI_EndRxTxTransaction+0x52>
 8006434:	e000      	b.n	8006438 <SPI_EndRxTxTransaction+0x70>
        break;
 8006436:	bf00      	nop
  }

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000010 	.word	0x20000010
 8006448:	165e9f81 	.word	0x165e9f81

0800644c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e04a      	b.n	80064f4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d111      	bne.n	800648e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fc9c 	bl	8006db0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <HAL_UART_Init+0xb0>)
 8006484:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 ff04 	bl	80072b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	08002ad9 	.word	0x08002ad9

08006500 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	460b      	mov	r3, r1
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e08c      	b.n	8006642 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_UART_RegisterCallback+0x36>
 8006532:	2302      	movs	r3, #2
 8006534:	e085      	b.n	8006642 <HAL_UART_RegisterCallback+0x142>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b20      	cmp	r3, #32
 8006548:	d151      	bne.n	80065ee <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800654a:	7afb      	ldrb	r3, [r7, #11]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d845      	bhi.n	80065dc <HAL_UART_RegisterCallback+0xdc>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <HAL_UART_RegisterCallback+0x58>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800658d 	.word	0x0800658d
 800655c:	08006595 	.word	0x08006595
 8006560:	0800659d 	.word	0x0800659d
 8006564:	080065a5 	.word	0x080065a5
 8006568:	080065ad 	.word	0x080065ad
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065bd 	.word	0x080065bd
 8006574:	080065c5 	.word	0x080065c5
 8006578:	080065dd 	.word	0x080065dd
 800657c:	080065dd 	.word	0x080065dd
 8006580:	080065dd 	.word	0x080065dd
 8006584:	080065cd 	.word	0x080065cd
 8006588:	080065d5 	.word	0x080065d5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006592:	e051      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800659a:	e04d      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80065a2:	e049      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80065aa:	e045      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80065b2:	e041      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80065ba:	e03d      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80065c2:	e039      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80065ca:	e035      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80065d2:	e031      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80065da:	e02d      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
        break;
 80065ec:	e024      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d116      	bne.n	8006628 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80065fa:	7afb      	ldrb	r3, [r7, #11]
 80065fc:	2b0b      	cmp	r3, #11
 80065fe:	d002      	beq.n	8006606 <HAL_UART_RegisterCallback+0x106>
 8006600:	2b0c      	cmp	r3, #12
 8006602:	d004      	beq.n	800660e <HAL_UART_RegisterCallback+0x10e>
 8006604:	e007      	b.n	8006616 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800660c:	e014      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006614:	e010      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
        break;
 8006626:	e007      	b.n	8006638 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	f043 0220 	orr.w	r2, r3, #32
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop

08006650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b20      	cmp	r3, #32
 800666e:	d17c      	bne.n	800676a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_UART_Transmit+0x2c>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e075      	b.n	800676c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_UART_Transmit+0x3e>
 800668a:	2302      	movs	r3, #2
 800668c:	e06e      	b.n	800676c <HAL_UART_Transmit+0x11c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2221      	movs	r2, #33	; 0x21
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a4:	f7fc fd02 	bl	80030ac <HAL_GetTick>
 80066a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d108      	bne.n	80066d2 <HAL_UART_Transmit+0x82>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e003      	b.n	80066da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066e2:	e02a      	b.n	800673a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fb96 	bl	8006e20 <UART_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e036      	b.n	800676c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006712:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	3302      	adds	r3, #2
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	e007      	b.n	800672c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1cf      	bne.n	80066e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	2140      	movs	r1, #64	; 0x40
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fb66 	bl	8006e20 <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e000      	b.n	800676c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800676a:	2302      	movs	r3, #2
  }
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b20      	cmp	r3, #32
 800678c:	d11d      	bne.n	80067ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_UART_Receive_IT+0x26>
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e016      	b.n	80067cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Receive_IT+0x38>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e00f      	b.n	80067cc <HAL_UART_Receive_IT+0x58>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	461a      	mov	r2, r3
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fb9b 	bl	8006efc <UART_Start_Receive_IT>
 80067c6:	4603      	mov	r3, r0
 80067c8:	e000      	b.n	80067cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067ca:	2302      	movs	r3, #2
  }
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b0ba      	sub	sp, #232	; 0xe8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_UART_IRQHandler+0x66>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc81 	bl	800713a <UART_Receive_IT>
      return;
 8006838:	e25b      	b.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800683a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80e1 	beq.w	8006a06 <HAL_UART_IRQHandler+0x232>
 8006844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80d4 	beq.w	8006a06 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <HAL_UART_IRQHandler+0xae>
 800686a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_UART_IRQHandler+0xd2>
 800688e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f043 0202 	orr.w	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <HAL_UART_IRQHandler+0xf6>
 80068b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d011      	beq.n	80068fa <HAL_UART_IRQHandler+0x126>
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0208 	orr.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 81f2 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_UART_IRQHandler+0x14e>
 8006910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fc0c 	bl	800713a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <HAL_UART_IRQHandler+0x17a>
 8006946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d051      	beq.n	80069f2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fb12 	bl	8006f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d142      	bne.n	80069e8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3314      	adds	r3, #20
 800698a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800698e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800699a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1d9      	bne.n	8006962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d013      	beq.n	80069de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	4a7f      	ldr	r2, [pc, #508]	; (8006bb8 <HAL_UART_IRQHandler+0x3e4>)
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd fa42 	bl	8003e4c <HAL_DMA_Abort_IT>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d019      	beq.n	8006a02 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	e011      	b.n	8006a02 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e6:	e00c      	b.n	8006a02 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e007      	b.n	8006a02 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a00:	e172      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a02:	bf00      	nop
    return;
 8006a04:	e170      	b.n	8006ce8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	f040 814c 	bne.w	8006ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8145 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 813e 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	f040 80b5 	bne.w	8006bbc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8142 	beq.w	8006cec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a70:	429a      	cmp	r2, r3
 8006a72:	f080 813b 	bcs.w	8006cec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a88:	f000 8088 	beq.w	8006b9c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ab8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ac4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1d9      	bne.n	8006a8c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3314      	adds	r3, #20
 8006af8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006afc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e1      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e3      	bne.n	8006b14 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6c:	f023 0310 	bic.w	r3, r3, #16
 8006b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd f8e8 	bl	8003d6c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	1a8a      	subs	r2, r1, r2
 8006bac:	b292      	uxth	r2, r2
 8006bae:	4611      	mov	r1, r2
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bb4:	e09a      	b.n	8006cec <HAL_UART_IRQHandler+0x518>
 8006bb6:	bf00      	nop
 8006bb8:	0800703f 	.word	0x0800703f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 808c 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8087 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c06:	647a      	str	r2, [r7, #68]	; 0x44
 8006c08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e3      	bne.n	8006be2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e3      	bne.n	8006c1a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c84:	61fa      	str	r2, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	617b      	str	r3, [r7, #20]
   return(result);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e3      	bne.n	8006c60 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c9c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca6:	e023      	b.n	8006cf0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x4f4>
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f9d1 	bl	8007068 <UART_Transmit_IT>
    return;
 8006cc6:	e014      	b.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa11 	bl	8007108 <UART_EndTransmit_IT>
    return;
 8006ce6:	e004      	b.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006ce8:	bf00      	nop
 8006cea:	e002      	b.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006cf0:	bf00      	nop
  }
}
 8006cf2:	37e8      	adds	r7, #232	; 0xe8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a10      	ldr	r2, [pc, #64]	; (8006dfc <UART_InitCallbacksToDefault+0x4c>)
 8006dbc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a0f      	ldr	r2, [pc, #60]	; (8006e00 <UART_InitCallbacksToDefault+0x50>)
 8006dc2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <UART_InitCallbacksToDefault+0x54>)
 8006dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a0e      	ldr	r2, [pc, #56]	; (8006e08 <UART_InitCallbacksToDefault+0x58>)
 8006dce:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a0e      	ldr	r2, [pc, #56]	; (8006e0c <UART_InitCallbacksToDefault+0x5c>)
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a0d      	ldr	r2, [pc, #52]	; (8006e10 <UART_InitCallbacksToDefault+0x60>)
 8006dda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <UART_InitCallbacksToDefault+0x64>)
 8006de0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <UART_InitCallbacksToDefault+0x68>)
 8006de6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <UART_InitCallbacksToDefault+0x6c>)
 8006dec:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	08006d0d 	.word	0x08006d0d
 8006e00:	08006cf9 	.word	0x08006cf9
 8006e04:	08006d35 	.word	0x08006d35
 8006e08:	08006d21 	.word	0x08006d21
 8006e0c:	08006d49 	.word	0x08006d49
 8006e10:	08006d5d 	.word	0x08006d5d
 8006e14:	08006d71 	.word	0x08006d71
 8006e18:	08006d85 	.word	0x08006d85
 8006e1c:	08006d99 	.word	0x08006d99

08006e20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b090      	sub	sp, #64	; 0x40
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e30:	e050      	b.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e38:	d04c      	beq.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e40:	f7fc f934 	bl	80030ac <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d241      	bcs.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e70:	637a      	str	r2, [r7, #52]	; 0x34
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e5      	bne.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3314      	adds	r3, #20
 8006e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	613b      	str	r3, [r7, #16]
   return(result);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea4:	623a      	str	r2, [r7, #32]
 8006ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	69f9      	ldr	r1, [r7, #28]
 8006eaa:	6a3a      	ldr	r2, [r7, #32]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e5      	bne.n	8006e84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e00f      	b.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4013      	ands	r3, r2
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2301      	moveq	r3, #1
 8006ee6:	2300      	movne	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d09f      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3740      	adds	r7, #64	; 0x40
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	88fa      	ldrh	r2, [r7, #6]
 8006f14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2222      	movs	r2, #34	; 0x22
 8006f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0201 	orr.w	r2, r2, #1
 8006f58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0220 	orr.w	r2, r2, #32
 8006f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b095      	sub	sp, #84	; 0x54
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fa0:	643a      	str	r2, [r7, #64]	; 0x40
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3314      	adds	r3, #20
 8006fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3314      	adds	r3, #20
 8006fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e5      	bne.n	8006fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d119      	bne.n	8007024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f023 0310 	bic.w	r3, r3, #16
 8007006:	647b      	str	r3, [r7, #68]	; 0x44
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	330c      	adds	r3, #12
 800700e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007010:	61ba      	str	r2, [r7, #24]
 8007012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6979      	ldr	r1, [r7, #20]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e5      	bne.n	8006ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007032:	bf00      	nop
 8007034:	3754      	adds	r7, #84	; 0x54
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b21      	cmp	r3, #33	; 0x21
 800707a:	d13e      	bne.n	80070fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007084:	d114      	bne.n	80070b0 <UART_Transmit_IT+0x48>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d110      	bne.n	80070b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	1c9a      	adds	r2, r3, #2
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]
 80070ae:	e008      	b.n	80070c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	1c59      	adds	r1, r3, #1
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6211      	str	r1, [r2, #32]
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4619      	mov	r1, r3
 80070d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10f      	bne.n	80070f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800711e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b08c      	sub	sp, #48	; 0x30
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b22      	cmp	r3, #34	; 0x22
 800714c:	f040 80ad 	bne.w	80072aa <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d117      	bne.n	800718a <UART_Receive_IT+0x50>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d113      	bne.n	800718a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007162:	2300      	movs	r3, #0
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007178:	b29a      	uxth	r2, r3
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	1c9a      	adds	r2, r3, #2
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	629a      	str	r2, [r3, #40]	; 0x28
 8007188:	e026      	b.n	80071d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719c:	d007      	beq.n	80071ae <UART_Receive_IT+0x74>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <UART_Receive_IT+0x82>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	e008      	b.n	80071ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4619      	mov	r1, r3
 80071e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d15c      	bne.n	80072a6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0220 	bic.w	r2, r2, #32
 80071fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800720a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695a      	ldr	r2, [r3, #20]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0201 	bic.w	r2, r2, #1
 800721a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	2b01      	cmp	r3, #1
 800722a:	d136      	bne.n	800729a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	623a      	str	r2, [r7, #32]
 8007254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	69f9      	ldr	r1, [r7, #28]
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b10      	cmp	r3, #16
 8007272:	d10a      	bne.n	800728a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007292:	4611      	mov	r1, r2
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	e003      	b.n	80072a2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e002      	b.n	80072ac <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e000      	b.n	80072ac <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80072aa:	2302      	movs	r3, #2
  }
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3730      	adds	r7, #48	; 0x30
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b8:	b0c0      	sub	sp, #256	; 0x100
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d0:	68d9      	ldr	r1, [r3, #12]
 80072d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	ea40 0301 	orr.w	r3, r0, r1
 80072dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800730c:	f021 010c 	bic.w	r1, r1, #12
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800731a:	430b      	orrs	r3, r1
 800731c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800731e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732e:	6999      	ldr	r1, [r3, #24]
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	ea40 0301 	orr.w	r3, r0, r1
 800733a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b8f      	ldr	r3, [pc, #572]	; (8007580 <UART_SetConfig+0x2cc>)
 8007344:	429a      	cmp	r2, r3
 8007346:	d005      	beq.n	8007354 <UART_SetConfig+0xa0>
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b8d      	ldr	r3, [pc, #564]	; (8007584 <UART_SetConfig+0x2d0>)
 8007350:	429a      	cmp	r2, r3
 8007352:	d104      	bne.n	800735e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007354:	f7fe f840 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 8007358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800735c:	e003      	b.n	8007366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800735e:	f7fe f827 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 8007362:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007370:	f040 810c 	bne.w	800758c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007378:	2200      	movs	r2, #0
 800737a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800737e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007386:	4622      	mov	r2, r4
 8007388:	462b      	mov	r3, r5
 800738a:	1891      	adds	r1, r2, r2
 800738c:	65b9      	str	r1, [r7, #88]	; 0x58
 800738e:	415b      	adcs	r3, r3
 8007390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007396:	4621      	mov	r1, r4
 8007398:	eb12 0801 	adds.w	r8, r2, r1
 800739c:	4629      	mov	r1, r5
 800739e:	eb43 0901 	adc.w	r9, r3, r1
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073b6:	4690      	mov	r8, r2
 80073b8:	4699      	mov	r9, r3
 80073ba:	4623      	mov	r3, r4
 80073bc:	eb18 0303 	adds.w	r3, r8, r3
 80073c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073c4:	462b      	mov	r3, r5
 80073c6:	eb49 0303 	adc.w	r3, r9, r3
 80073ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073e2:	460b      	mov	r3, r1
 80073e4:	18db      	adds	r3, r3, r3
 80073e6:	653b      	str	r3, [r7, #80]	; 0x50
 80073e8:	4613      	mov	r3, r2
 80073ea:	eb42 0303 	adc.w	r3, r2, r3
 80073ee:	657b      	str	r3, [r7, #84]	; 0x54
 80073f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073f8:	f7f9 fc56 	bl	8000ca8 <__aeabi_uldivmod>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4b61      	ldr	r3, [pc, #388]	; (8007588 <UART_SetConfig+0x2d4>)
 8007402:	fba3 2302 	umull	r2, r3, r3, r2
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	011c      	lsls	r4, r3, #4
 800740a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740e:	2200      	movs	r2, #0
 8007410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007414:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	1891      	adds	r1, r2, r2
 8007422:	64b9      	str	r1, [r7, #72]	; 0x48
 8007424:	415b      	adcs	r3, r3
 8007426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800742c:	4641      	mov	r1, r8
 800742e:	eb12 0a01 	adds.w	sl, r2, r1
 8007432:	4649      	mov	r1, r9
 8007434:	eb43 0b01 	adc.w	fp, r3, r1
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800744c:	4692      	mov	sl, r2
 800744e:	469b      	mov	fp, r3
 8007450:	4643      	mov	r3, r8
 8007452:	eb1a 0303 	adds.w	r3, sl, r3
 8007456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800745a:	464b      	mov	r3, r9
 800745c:	eb4b 0303 	adc.w	r3, fp, r3
 8007460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007470:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007478:	460b      	mov	r3, r1
 800747a:	18db      	adds	r3, r3, r3
 800747c:	643b      	str	r3, [r7, #64]	; 0x40
 800747e:	4613      	mov	r3, r2
 8007480:	eb42 0303 	adc.w	r3, r2, r3
 8007484:	647b      	str	r3, [r7, #68]	; 0x44
 8007486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800748a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800748e:	f7f9 fc0b 	bl	8000ca8 <__aeabi_uldivmod>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4611      	mov	r1, r2
 8007498:	4b3b      	ldr	r3, [pc, #236]	; (8007588 <UART_SetConfig+0x2d4>)
 800749a:	fba3 2301 	umull	r2, r3, r3, r1
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	2264      	movs	r2, #100	; 0x64
 80074a2:	fb02 f303 	mul.w	r3, r2, r3
 80074a6:	1acb      	subs	r3, r1, r3
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074ae:	4b36      	ldr	r3, [pc, #216]	; (8007588 <UART_SetConfig+0x2d4>)
 80074b0:	fba3 2302 	umull	r2, r3, r3, r2
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074bc:	441c      	add	r4, r3
 80074be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	1891      	adds	r1, r2, r2
 80074d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80074d8:	415b      	adcs	r3, r3
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074e0:	4641      	mov	r1, r8
 80074e2:	1851      	adds	r1, r2, r1
 80074e4:	6339      	str	r1, [r7, #48]	; 0x30
 80074e6:	4649      	mov	r1, r9
 80074e8:	414b      	adcs	r3, r1
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	f04f 0300 	mov.w	r3, #0
 80074f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074f8:	4659      	mov	r1, fp
 80074fa:	00cb      	lsls	r3, r1, #3
 80074fc:	4651      	mov	r1, sl
 80074fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007502:	4651      	mov	r1, sl
 8007504:	00ca      	lsls	r2, r1, #3
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	4603      	mov	r3, r0
 800750c:	4642      	mov	r2, r8
 800750e:	189b      	adds	r3, r3, r2
 8007510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007514:	464b      	mov	r3, r9
 8007516:	460a      	mov	r2, r1
 8007518:	eb42 0303 	adc.w	r3, r2, r3
 800751c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800752c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007534:	460b      	mov	r3, r1
 8007536:	18db      	adds	r3, r3, r3
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
 800753a:	4613      	mov	r3, r2
 800753c:	eb42 0303 	adc.w	r3, r2, r3
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800754a:	f7f9 fbad 	bl	8000ca8 <__aeabi_uldivmod>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <UART_SetConfig+0x2d4>)
 8007554:	fba3 1302 	umull	r1, r3, r3, r2
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	2164      	movs	r1, #100	; 0x64
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	3332      	adds	r3, #50	; 0x32
 8007566:	4a08      	ldr	r2, [pc, #32]	; (8007588 <UART_SetConfig+0x2d4>)
 8007568:	fba2 2303 	umull	r2, r3, r2, r3
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	f003 0207 	and.w	r2, r3, #7
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4422      	add	r2, r4
 800757a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800757c:	e106      	b.n	800778c <UART_SetConfig+0x4d8>
 800757e:	bf00      	nop
 8007580:	40011000 	.word	0x40011000
 8007584:	40011400 	.word	0x40011400
 8007588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800758c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007590:	2200      	movs	r2, #0
 8007592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007596:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800759a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800759e:	4642      	mov	r2, r8
 80075a0:	464b      	mov	r3, r9
 80075a2:	1891      	adds	r1, r2, r2
 80075a4:	6239      	str	r1, [r7, #32]
 80075a6:	415b      	adcs	r3, r3
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
 80075aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ae:	4641      	mov	r1, r8
 80075b0:	1854      	adds	r4, r2, r1
 80075b2:	4649      	mov	r1, r9
 80075b4:	eb43 0501 	adc.w	r5, r3, r1
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	00eb      	lsls	r3, r5, #3
 80075c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075c6:	00e2      	lsls	r2, r4, #3
 80075c8:	4614      	mov	r4, r2
 80075ca:	461d      	mov	r5, r3
 80075cc:	4643      	mov	r3, r8
 80075ce:	18e3      	adds	r3, r4, r3
 80075d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d4:	464b      	mov	r3, r9
 80075d6:	eb45 0303 	adc.w	r3, r5, r3
 80075da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075fa:	4629      	mov	r1, r5
 80075fc:	008b      	lsls	r3, r1, #2
 80075fe:	4621      	mov	r1, r4
 8007600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007604:	4621      	mov	r1, r4
 8007606:	008a      	lsls	r2, r1, #2
 8007608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800760c:	f7f9 fb4c 	bl	8000ca8 <__aeabi_uldivmod>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4b60      	ldr	r3, [pc, #384]	; (8007798 <UART_SetConfig+0x4e4>)
 8007616:	fba3 2302 	umull	r2, r3, r3, r2
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	011c      	lsls	r4, r3, #4
 800761e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007622:	2200      	movs	r2, #0
 8007624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007628:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800762c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	1891      	adds	r1, r2, r2
 8007636:	61b9      	str	r1, [r7, #24]
 8007638:	415b      	adcs	r3, r3
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007640:	4641      	mov	r1, r8
 8007642:	1851      	adds	r1, r2, r1
 8007644:	6139      	str	r1, [r7, #16]
 8007646:	4649      	mov	r1, r9
 8007648:	414b      	adcs	r3, r1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007658:	4659      	mov	r1, fp
 800765a:	00cb      	lsls	r3, r1, #3
 800765c:	4651      	mov	r1, sl
 800765e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007662:	4651      	mov	r1, sl
 8007664:	00ca      	lsls	r2, r1, #3
 8007666:	4610      	mov	r0, r2
 8007668:	4619      	mov	r1, r3
 800766a:	4603      	mov	r3, r0
 800766c:	4642      	mov	r2, r8
 800766e:	189b      	adds	r3, r3, r2
 8007670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007674:	464b      	mov	r3, r9
 8007676:	460a      	mov	r2, r1
 8007678:	eb42 0303 	adc.w	r3, r2, r3
 800767c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	67bb      	str	r3, [r7, #120]	; 0x78
 800768a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007698:	4649      	mov	r1, r9
 800769a:	008b      	lsls	r3, r1, #2
 800769c:	4641      	mov	r1, r8
 800769e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076a2:	4641      	mov	r1, r8
 80076a4:	008a      	lsls	r2, r1, #2
 80076a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076aa:	f7f9 fafd 	bl	8000ca8 <__aeabi_uldivmod>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	4b38      	ldr	r3, [pc, #224]	; (8007798 <UART_SetConfig+0x4e4>)
 80076b6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	2264      	movs	r2, #100	; 0x64
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	1acb      	subs	r3, r1, r3
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	3332      	adds	r3, #50	; 0x32
 80076c8:	4a33      	ldr	r2, [pc, #204]	; (8007798 <UART_SetConfig+0x4e4>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076d4:	441c      	add	r4, r3
 80076d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076da:	2200      	movs	r2, #0
 80076dc:	673b      	str	r3, [r7, #112]	; 0x70
 80076de:	677a      	str	r2, [r7, #116]	; 0x74
 80076e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076e4:	4642      	mov	r2, r8
 80076e6:	464b      	mov	r3, r9
 80076e8:	1891      	adds	r1, r2, r2
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	415b      	adcs	r3, r3
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076f4:	4641      	mov	r1, r8
 80076f6:	1851      	adds	r1, r2, r1
 80076f8:	6039      	str	r1, [r7, #0]
 80076fa:	4649      	mov	r1, r9
 80076fc:	414b      	adcs	r3, r1
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800770c:	4659      	mov	r1, fp
 800770e:	00cb      	lsls	r3, r1, #3
 8007710:	4651      	mov	r1, sl
 8007712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007716:	4651      	mov	r1, sl
 8007718:	00ca      	lsls	r2, r1, #3
 800771a:	4610      	mov	r0, r2
 800771c:	4619      	mov	r1, r3
 800771e:	4603      	mov	r3, r0
 8007720:	4642      	mov	r2, r8
 8007722:	189b      	adds	r3, r3, r2
 8007724:	66bb      	str	r3, [r7, #104]	; 0x68
 8007726:	464b      	mov	r3, r9
 8007728:	460a      	mov	r2, r1
 800772a:	eb42 0303 	adc.w	r3, r2, r3
 800772e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	663b      	str	r3, [r7, #96]	; 0x60
 800773a:	667a      	str	r2, [r7, #100]	; 0x64
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007748:	4649      	mov	r1, r9
 800774a:	008b      	lsls	r3, r1, #2
 800774c:	4641      	mov	r1, r8
 800774e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007752:	4641      	mov	r1, r8
 8007754:	008a      	lsls	r2, r1, #2
 8007756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800775a:	f7f9 faa5 	bl	8000ca8 <__aeabi_uldivmod>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <UART_SetConfig+0x4e4>)
 8007764:	fba3 1302 	umull	r1, r3, r3, r2
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	2164      	movs	r1, #100	; 0x64
 800776c:	fb01 f303 	mul.w	r3, r1, r3
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	3332      	adds	r3, #50	; 0x32
 8007776:	4a08      	ldr	r2, [pc, #32]	; (8007798 <UART_SetConfig+0x4e4>)
 8007778:	fba2 2303 	umull	r2, r3, r2, r3
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	f003 020f 	and.w	r2, r3, #15
 8007782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4422      	add	r2, r4
 800778a:	609a      	str	r2, [r3, #8]
}
 800778c:	bf00      	nop
 800778e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007792:	46bd      	mov	sp, r7
 8007794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007798:	51eb851f 	.word	0x51eb851f

0800779c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80077a0:	4904      	ldr	r1, [pc, #16]	; (80077b4 <MX_FATFS_Init+0x18>)
 80077a2:	4805      	ldr	r0, [pc, #20]	; (80077b8 <MX_FATFS_Init+0x1c>)
 80077a4:	f001 fa08 	bl	8008bb8 <FATFS_LinkDriver>
 80077a8:	4603      	mov	r3, r0
 80077aa:	461a      	mov	r2, r3
 80077ac:	4b03      	ldr	r3, [pc, #12]	; (80077bc <MX_FATFS_Init+0x20>)
 80077ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80077b0:	bf00      	nop
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20000e50 	.word	0x20000e50
 80077b8:	2000001c 	.word	0x2000001c
 80077bc:	20000e4c 	.word	0x20000e4c

080077c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 f9d7 	bl	8007b80 <USER_SPI_initialize>
 80077d2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fab3 	bl	8007d54 <USER_SPI_status>
 80077ee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007808:	7bf8      	ldrb	r0, [r7, #15]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	f000 fab6 	bl	8007d80 <USER_SPI_read>
 8007814:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800782e:	7bf8      	ldrb	r0, [r7, #15]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	f000 fb09 	bl	8007e4c <USER_SPI_write>
 800783a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	603a      	str	r2, [r7, #0]
 800784e:	71fb      	strb	r3, [r7, #7]
 8007850:	460b      	mov	r3, r1
 8007852:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007854:	79b9      	ldrb	r1, [r7, #6]
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fb72 	bl	8007f44 <USER_SPI_ioctl>
 8007860:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007874:	f7fb fc1a 	bl	80030ac <HAL_GetTick>
 8007878:	4603      	mov	r3, r0
 800787a:	4a04      	ldr	r2, [pc, #16]	; (800788c <SPI_Timer_On+0x20>)
 800787c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800787e:	4a04      	ldr	r2, [pc, #16]	; (8007890 <SPI_Timer_On+0x24>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6013      	str	r3, [r2, #0]
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000e58 	.word	0x20000e58
 8007890:	20000e5c 	.word	0x20000e5c

08007894 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007898:	f7fb fc08 	bl	80030ac <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <SPI_Timer_Status+0x24>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1ad2      	subs	r2, r2, r3
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <SPI_Timer_Status+0x28>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	bf34      	ite	cc
 80078ac:	2301      	movcc	r3, #1
 80078ae:	2300      	movcs	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000e58 	.word	0x20000e58
 80078bc:	20000e5c 	.word	0x20000e5c

080078c0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	4603      	mov	r3, r0
 80078c8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80078ca:	f107 020f 	add.w	r2, r7, #15
 80078ce:	1df9      	adds	r1, r7, #7
 80078d0:	2332      	movs	r3, #50	; 0x32
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2301      	movs	r3, #1
 80078d6:	4804      	ldr	r0, [pc, #16]	; (80078e8 <xchg_spi+0x28>)
 80078d8:	f7fe fb4c 	bl	8005f74 <HAL_SPI_TransmitReceive>
    return rxDat;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000334 	.word	0x20000334

080078ec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80078ec:	b590      	push	{r4, r7, lr}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e00a      	b.n	8007912 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	18d4      	adds	r4, r2, r3
 8007902:	20ff      	movs	r0, #255	; 0xff
 8007904:	f7ff ffdc 	bl	80078c0 <xchg_spi>
 8007908:	4603      	mov	r3, r0
 800790a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d3f0      	bcc.n	80078fc <rcvr_spi_multi+0x10>
	}
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bd90      	pop	{r4, r7, pc}

08007924 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	b29a      	uxth	r2, r3
 8007932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	4803      	ldr	r0, [pc, #12]	; (8007948 <xmit_spi_multi+0x24>)
 800793a:	f7fe f9df 	bl	8005cfc <HAL_SPI_Transmit>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000334 	.word	0x20000334

0800794c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007954:	f7fb fbaa 	bl	80030ac <HAL_GetTick>
 8007958:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800795e:	20ff      	movs	r0, #255	; 0xff
 8007960:	f7ff ffae 	bl	80078c0 <xchg_spi>
 8007964:	4603      	mov	r3, r0
 8007966:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2bff      	cmp	r3, #255	; 0xff
 800796c:	d007      	beq.n	800797e <wait_ready+0x32>
 800796e:	f7fb fb9d 	bl	80030ac <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	429a      	cmp	r2, r3
 800797c:	d8ef      	bhi.n	800795e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2bff      	cmp	r3, #255	; 0xff
 8007982:	bf0c      	ite	eq
 8007984:	2301      	moveq	r3, #1
 8007986:	2300      	movne	r3, #0
 8007988:	b2db      	uxtb	r3, r3
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007998:	2201      	movs	r2, #1
 800799a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800799e:	4804      	ldr	r0, [pc, #16]	; (80079b0 <despiselect+0x1c>)
 80079a0:	f7fc fea4 	bl	80046ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80079a4:	20ff      	movs	r0, #255	; 0xff
 80079a6:	f7ff ff8b 	bl	80078c0 <xchg_spi>

}
 80079aa:	bf00      	nop
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40021000 	.word	0x40021000

080079b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80079b8:	2200      	movs	r2, #0
 80079ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079be:	480a      	ldr	r0, [pc, #40]	; (80079e8 <spiselect+0x34>)
 80079c0:	f7fc fe94 	bl	80046ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80079c4:	20ff      	movs	r0, #255	; 0xff
 80079c6:	f7ff ff7b 	bl	80078c0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80079ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079ce:	f7ff ffbd 	bl	800794c <wait_ready>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <spiselect+0x28>
 80079d8:	2301      	movs	r3, #1
 80079da:	e002      	b.n	80079e2 <spiselect+0x2e>

	despiselect();
 80079dc:	f7ff ffda 	bl	8007994 <despiselect>
	return 0;	/* Timeout */
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40021000 	.word	0x40021000

080079ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80079f6:	20c8      	movs	r0, #200	; 0xc8
 80079f8:	f7ff ff38 	bl	800786c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80079fc:	20ff      	movs	r0, #255	; 0xff
 80079fe:	f7ff ff5f 	bl	80078c0 <xchg_spi>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	2bff      	cmp	r3, #255	; 0xff
 8007a0a:	d104      	bne.n	8007a16 <rcvr_datablock+0x2a>
 8007a0c:	f7ff ff42 	bl	8007894 <SPI_Timer_Status>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1f2      	bne.n	80079fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2bfe      	cmp	r3, #254	; 0xfe
 8007a1a:	d001      	beq.n	8007a20 <rcvr_datablock+0x34>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e00a      	b.n	8007a36 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff ff62 	bl	80078ec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007a28:	20ff      	movs	r0, #255	; 0xff
 8007a2a:	f7ff ff49 	bl	80078c0 <xchg_spi>
 8007a2e:	20ff      	movs	r0, #255	; 0xff
 8007a30:	f7ff ff46 	bl	80078c0 <xchg_spi>

	return 1;						/* Function succeeded */
 8007a34:	2301      	movs	r3, #1
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a4e:	f7ff ff7d 	bl	800794c <wait_ready>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <xmit_datablock+0x1e>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e01e      	b.n	8007a9a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff ff2e 	bl	80078c0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	2bfd      	cmp	r3, #253	; 0xfd
 8007a68:	d016      	beq.n	8007a98 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff ff58 	bl	8007924 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007a74:	20ff      	movs	r0, #255	; 0xff
 8007a76:	f7ff ff23 	bl	80078c0 <xchg_spi>
 8007a7a:	20ff      	movs	r0, #255	; 0xff
 8007a7c:	f7ff ff20 	bl	80078c0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007a80:	20ff      	movs	r0, #255	; 0xff
 8007a82:	f7ff ff1d 	bl	80078c0 <xchg_spi>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2b05      	cmp	r3, #5
 8007a92:	d001      	beq.n	8007a98 <xmit_datablock+0x5a>
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <xmit_datablock+0x5c>
	}
	return 1;
 8007a98:	2301      	movs	r3, #1
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	6039      	str	r1, [r7, #0]
 8007aac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da0e      	bge.n	8007ad4 <send_cmd+0x32>
		cmd &= 0x7F;
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007abe:	2100      	movs	r1, #0
 8007ac0:	2037      	movs	r0, #55	; 0x37
 8007ac2:	f7ff ffee 	bl	8007aa2 <send_cmd>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d901      	bls.n	8007ad4 <send_cmd+0x32>
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	e051      	b.n	8007b78 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d008      	beq.n	8007aec <send_cmd+0x4a>
		despiselect();
 8007ada:	f7ff ff5b 	bl	8007994 <despiselect>
		if (!spiselect()) return 0xFF;
 8007ade:	f7ff ff69 	bl	80079b4 <spiselect>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <send_cmd+0x4a>
 8007ae8:	23ff      	movs	r3, #255	; 0xff
 8007aea:	e045      	b.n	8007b78 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fee3 	bl	80078c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	0e1b      	lsrs	r3, r3, #24
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fedd 	bl	80078c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	0c1b      	lsrs	r3, r3, #16
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fed7 	bl	80078c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fed1 	bl	80078c0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff fecc 	bl	80078c0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <send_cmd+0x94>
 8007b32:	2395      	movs	r3, #149	; 0x95
 8007b34:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d101      	bne.n	8007b40 <send_cmd+0x9e>
 8007b3c:	2387      	movs	r3, #135	; 0x87
 8007b3e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff febc 	bl	80078c0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	2b0c      	cmp	r3, #12
 8007b4c:	d102      	bne.n	8007b54 <send_cmd+0xb2>
 8007b4e:	20ff      	movs	r0, #255	; 0xff
 8007b50:	f7ff feb6 	bl	80078c0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007b54:	230a      	movs	r3, #10
 8007b56:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007b58:	20ff      	movs	r0, #255	; 0xff
 8007b5a:	f7ff feb1 	bl	80078c0 <xchg_spi>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da05      	bge.n	8007b76 <send_cmd+0xd4>
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007b80:	b590      	push	{r4, r7, lr}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <USER_SPI_initialize+0x14>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0d4      	b.n	8007d3e <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007b94:	4b6c      	ldr	r3, [pc, #432]	; (8007d48 <USER_SPI_initialize+0x1c8>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <USER_SPI_initialize+0x2a>
 8007ba2:	4b69      	ldr	r3, [pc, #420]	; (8007d48 <USER_SPI_initialize+0x1c8>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e0c9      	b.n	8007d3e <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8007baa:	4b68      	ldr	r3, [pc, #416]	; (8007d4c <USER_SPI_initialize+0x1cc>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	4b66      	ldr	r3, [pc, #408]	; (8007d4c <USER_SPI_initialize+0x1cc>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8007bb8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007bba:	230a      	movs	r3, #10
 8007bbc:	73fb      	strb	r3, [r7, #15]
 8007bbe:	e005      	b.n	8007bcc <USER_SPI_initialize+0x4c>
 8007bc0:	20ff      	movs	r0, #255	; 0xff
 8007bc2:	f7ff fe7d 	bl	80078c0 <xchg_spi>
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f6      	bne.n	8007bc0 <USER_SPI_initialize+0x40>

	ty = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f7ff ff62 	bl	8007aa2 <send_cmd>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	f040 808b 	bne.w	8007cfc <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bea:	f7ff fe3f 	bl	800786c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007bee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bf2:	2008      	movs	r0, #8
 8007bf4:	f7ff ff55 	bl	8007aa2 <send_cmd>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d151      	bne.n	8007ca2 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
 8007c02:	e00d      	b.n	8007c20 <USER_SPI_initialize+0xa0>
 8007c04:	7bfc      	ldrb	r4, [r7, #15]
 8007c06:	20ff      	movs	r0, #255	; 0xff
 8007c08:	f7ff fe5a 	bl	80078c0 <xchg_spi>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f104 0310 	add.w	r3, r4, #16
 8007c14:	443b      	add	r3, r7
 8007c16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	73fb      	strb	r3, [r7, #15]
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d9ee      	bls.n	8007c04 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007c26:	7abb      	ldrb	r3, [r7, #10]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d167      	bne.n	8007cfc <USER_SPI_initialize+0x17c>
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	2baa      	cmp	r3, #170	; 0xaa
 8007c30:	d164      	bne.n	8007cfc <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007c32:	bf00      	nop
 8007c34:	f7ff fe2e 	bl	8007894 <SPI_Timer_Status>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <USER_SPI_initialize+0xce>
 8007c3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007c42:	20a9      	movs	r0, #169	; 0xa9
 8007c44:	f7ff ff2d 	bl	8007aa2 <send_cmd>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f2      	bne.n	8007c34 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007c4e:	f7ff fe21 	bl	8007894 <SPI_Timer_Status>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d051      	beq.n	8007cfc <USER_SPI_initialize+0x17c>
 8007c58:	2100      	movs	r1, #0
 8007c5a:	203a      	movs	r0, #58	; 0x3a
 8007c5c:	f7ff ff21 	bl	8007aa2 <send_cmd>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d14a      	bne.n	8007cfc <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
 8007c6a:	e00d      	b.n	8007c88 <USER_SPI_initialize+0x108>
 8007c6c:	7bfc      	ldrb	r4, [r7, #15]
 8007c6e:	20ff      	movs	r0, #255	; 0xff
 8007c70:	f7ff fe26 	bl	80078c0 <xchg_spi>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	f104 0310 	add.w	r3, r4, #16
 8007c7c:	443b      	add	r3, r7
 8007c7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	3301      	adds	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d9ee      	bls.n	8007c6c <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007c8e:	7a3b      	ldrb	r3, [r7, #8]
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <USER_SPI_initialize+0x11c>
 8007c98:	230c      	movs	r3, #12
 8007c9a:	e000      	b.n	8007c9e <USER_SPI_initialize+0x11e>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	737b      	strb	r3, [r7, #13]
 8007ca0:	e02c      	b.n	8007cfc <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	20a9      	movs	r0, #169	; 0xa9
 8007ca6:	f7ff fefc 	bl	8007aa2 <send_cmd>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d804      	bhi.n	8007cba <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	737b      	strb	r3, [r7, #13]
 8007cb4:	23a9      	movs	r3, #169	; 0xa9
 8007cb6:	73bb      	strb	r3, [r7, #14]
 8007cb8:	e003      	b.n	8007cc2 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007cba:	2301      	movs	r3, #1
 8007cbc:	737b      	strb	r3, [r7, #13]
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007cc2:	bf00      	nop
 8007cc4:	f7ff fde6 	bl	8007894 <SPI_Timer_Status>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <USER_SPI_initialize+0x15e>
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fee5 	bl	8007aa2 <send_cmd>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f2      	bne.n	8007cc4 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007cde:	f7ff fdd9 	bl	8007894 <SPI_Timer_Status>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <USER_SPI_initialize+0x178>
 8007ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cec:	2010      	movs	r0, #16
 8007cee:	f7ff fed8 	bl	8007aa2 <send_cmd>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <USER_SPI_initialize+0x17c>
				ty = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007cfc:	4a14      	ldr	r2, [pc, #80]	; (8007d50 <USER_SPI_initialize+0x1d0>)
 8007cfe:	7b7b      	ldrb	r3, [r7, #13]
 8007d00:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007d02:	f7ff fe47 	bl	8007994 <despiselect>

	if (ty) {			/* OK */
 8007d06:	7b7b      	ldrb	r3, [r7, #13]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d012      	beq.n	8007d32 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <USER_SPI_initialize+0x1cc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007d16:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <USER_SPI_initialize+0x1cc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0218 	orr.w	r2, r2, #24
 8007d1e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <USER_SPI_initialize+0x1c8>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <USER_SPI_initialize+0x1c8>)
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e002      	b.n	8007d38 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <USER_SPI_initialize+0x1c8>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007d38:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <USER_SPI_initialize+0x1c8>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000030 	.word	0x20000030
 8007d4c:	20000334 	.word	0x20000334
 8007d50:	20000e54 	.word	0x20000e54

08007d54 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <USER_SPI_status+0x14>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e002      	b.n	8007d6e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <USER_SPI_status+0x28>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b2db      	uxtb	r3, r3
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000030 	.word	0x20000030

08007d80 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <USER_SPI_read+0x1c>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USER_SPI_read+0x20>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	e04d      	b.n	8007e3c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <USER_SPI_read+0xc4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <USER_SPI_read+0x32>
 8007dae:	2303      	movs	r3, #3
 8007db0:	e044      	b.n	8007e3c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007db2:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <USER_SPI_read+0xc8>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <USER_SPI_read+0x44>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	025b      	lsls	r3, r3, #9
 8007dc2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d111      	bne.n	8007dee <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	2011      	movs	r0, #17
 8007dce:	f7ff fe68 	bl	8007aa2 <send_cmd>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d129      	bne.n	8007e2c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f7ff fe05 	bl	80079ec <rcvr_datablock>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d021      	beq.n	8007e2c <USER_SPI_read+0xac>
			count = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	e01e      	b.n	8007e2c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	2012      	movs	r0, #18
 8007df2:	f7ff fe56 	bl	8007aa2 <send_cmd>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d117      	bne.n	8007e2c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	f7ff fdf3 	bl	80079ec <rcvr_datablock>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <USER_SPI_read+0xa2>
				buff += 512;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007e12:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1ed      	bne.n	8007dfc <USER_SPI_read+0x7c>
 8007e20:	e000      	b.n	8007e24 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007e22:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007e24:	2100      	movs	r1, #0
 8007e26:	200c      	movs	r0, #12
 8007e28:	f7ff fe3b 	bl	8007aa2 <send_cmd>
		}
	}
	despiselect();
 8007e2c:	f7ff fdb2 	bl	8007994 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bf14      	ite	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	2300      	moveq	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000030 	.word	0x20000030
 8007e48:	20000e54 	.word	0x20000e54

08007e4c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <USER_SPI_write+0x1c>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USER_SPI_write+0x20>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	e063      	b.n	8007f34 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007e6c:	4b33      	ldr	r3, [pc, #204]	; (8007f3c <USER_SPI_write+0xf0>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <USER_SPI_write+0x32>
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e05a      	b.n	8007f34 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007e7e:	4b2f      	ldr	r3, [pc, #188]	; (8007f3c <USER_SPI_write+0xf0>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <USER_SPI_write+0x44>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e051      	b.n	8007f34 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007e90:	4b2b      	ldr	r3, [pc, #172]	; (8007f40 <USER_SPI_write+0xf4>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <USER_SPI_write+0x56>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	025b      	lsls	r3, r3, #9
 8007ea0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d110      	bne.n	8007eca <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	2018      	movs	r0, #24
 8007eac:	f7ff fdf9 	bl	8007aa2 <send_cmd>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d136      	bne.n	8007f24 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007eb6:	21fe      	movs	r1, #254	; 0xfe
 8007eb8:	68b8      	ldr	r0, [r7, #8]
 8007eba:	f7ff fdc0 	bl	8007a3e <xmit_datablock>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02f      	beq.n	8007f24 <USER_SPI_write+0xd8>
			count = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	e02c      	b.n	8007f24 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007eca:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <USER_SPI_write+0xf4>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0306 	and.w	r3, r3, #6
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <USER_SPI_write+0x92>
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	2097      	movs	r0, #151	; 0x97
 8007eda:	f7ff fde2 	bl	8007aa2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	2019      	movs	r0, #25
 8007ee2:	f7ff fdde 	bl	8007aa2 <send_cmd>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d11b      	bne.n	8007f24 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007eec:	21fc      	movs	r1, #252	; 0xfc
 8007eee:	68b8      	ldr	r0, [r7, #8]
 8007ef0:	f7ff fda5 	bl	8007a3e <xmit_datablock>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <USER_SPI_write+0xc4>
				buff += 512;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007f00:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1ee      	bne.n	8007eec <USER_SPI_write+0xa0>
 8007f0e:	e000      	b.n	8007f12 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007f10:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007f12:	21fd      	movs	r1, #253	; 0xfd
 8007f14:	2000      	movs	r0, #0
 8007f16:	f7ff fd92 	bl	8007a3e <xmit_datablock>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <USER_SPI_write+0xd8>
 8007f20:	2301      	movs	r3, #1
 8007f22:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007f24:	f7ff fd36 	bl	8007994 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000030 	.word	0x20000030
 8007f40:	20000e54 	.word	0x20000e54

08007f44 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08c      	sub	sp, #48	; 0x30
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	603a      	str	r2, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
 8007f50:	460b      	mov	r3, r1
 8007f52:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <USER_SPI_ioctl+0x1a>
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	e15a      	b.n	8008214 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007f5e:	4baf      	ldr	r3, [pc, #700]	; (800821c <USER_SPI_ioctl+0x2d8>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <USER_SPI_ioctl+0x2c>
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e151      	b.n	8008214 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007f76:	79bb      	ldrb	r3, [r7, #6]
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	f200 8136 	bhi.w	80081ea <USER_SPI_ioctl+0x2a6>
 8007f7e:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <USER_SPI_ioctl+0x40>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007f99 	.word	0x08007f99
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	080081eb 	.word	0x080081eb
 8007f90:	08008059 	.word	0x08008059
 8007f94:	0800814f 	.word	0x0800814f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007f98:	f7ff fd0c 	bl	80079b4 <spiselect>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8127 	beq.w	80081f2 <USER_SPI_ioctl+0x2ae>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007faa:	e122      	b.n	80081f2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007fac:	2100      	movs	r1, #0
 8007fae:	2009      	movs	r0, #9
 8007fb0:	f7ff fd77 	bl	8007aa2 <send_cmd>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 811d 	bne.w	80081f6 <USER_SPI_ioctl+0x2b2>
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	2110      	movs	r1, #16
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff fd12 	bl	80079ec <rcvr_datablock>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 8113 	beq.w	80081f6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007fd0:	7b3b      	ldrb	r3, [r7, #12]
 8007fd2:	099b      	lsrs	r3, r3, #6
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d111      	bne.n	8007ffe <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007fda:	7d7b      	ldrb	r3, [r7, #21]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	7d3b      	ldrb	r3, [r7, #20]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	4413      	add	r3, r2
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	7cfb      	ldrb	r3, [r7, #19]
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007fee:	4413      	add	r3, r2
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	029a      	lsls	r2, r3, #10
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e028      	b.n	8008050 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007ffe:	7c7b      	ldrb	r3, [r7, #17]
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	b2da      	uxtb	r2, r3
 8008006:	7dbb      	ldrb	r3, [r7, #22]
 8008008:	09db      	lsrs	r3, r3, #7
 800800a:	b2db      	uxtb	r3, r3
 800800c:	4413      	add	r3, r2
 800800e:	b2da      	uxtb	r2, r3
 8008010:	7d7b      	ldrb	r3, [r7, #21]
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 0306 	and.w	r3, r3, #6
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4413      	add	r3, r2
 800801e:	b2db      	uxtb	r3, r3
 8008020:	3302      	adds	r3, #2
 8008022:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008026:	7d3b      	ldrb	r3, [r7, #20]
 8008028:	099b      	lsrs	r3, r3, #6
 800802a:	b2db      	uxtb	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	7cfb      	ldrb	r3, [r7, #19]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	441a      	add	r2, r3
 8008034:	7cbb      	ldrb	r3, [r7, #18]
 8008036:	029b      	lsls	r3, r3, #10
 8008038:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800803c:	4413      	add	r3, r2
 800803e:	3301      	adds	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008042:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008046:	3b09      	subs	r3, #9
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	409a      	lsls	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008056:	e0ce      	b.n	80081f6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008058:	4b71      	ldr	r3, [pc, #452]	; (8008220 <USER_SPI_ioctl+0x2dc>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d031      	beq.n	80080c8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008064:	2100      	movs	r1, #0
 8008066:	208d      	movs	r0, #141	; 0x8d
 8008068:	f7ff fd1b 	bl	8007aa2 <send_cmd>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	f040 80c3 	bne.w	80081fa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008074:	20ff      	movs	r0, #255	; 0xff
 8008076:	f7ff fc23 	bl	80078c0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800807a:	f107 030c 	add.w	r3, r7, #12
 800807e:	2110      	movs	r1, #16
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff fcb3 	bl	80079ec <rcvr_datablock>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80b6 	beq.w	80081fa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800808e:	2330      	movs	r3, #48	; 0x30
 8008090:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008094:	e007      	b.n	80080a6 <USER_SPI_ioctl+0x162>
 8008096:	20ff      	movs	r0, #255	; 0xff
 8008098:	f7ff fc12 	bl	80078c0 <xchg_spi>
 800809c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080a0:	3b01      	subs	r3, #1
 80080a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80080a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f3      	bne.n	8008096 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80080ae:	7dbb      	ldrb	r3, [r7, #22]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	2310      	movs	r3, #16
 80080b8:	fa03 f202 	lsl.w	r2, r3, r2
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80080c6:	e098      	b.n	80081fa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80080c8:	2100      	movs	r1, #0
 80080ca:	2009      	movs	r0, #9
 80080cc:	f7ff fce9 	bl	8007aa2 <send_cmd>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 8091 	bne.w	80081fa <USER_SPI_ioctl+0x2b6>
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	2110      	movs	r1, #16
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff fc84 	bl	80079ec <rcvr_datablock>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 8087 	beq.w	80081fa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80080ec:	4b4c      	ldr	r3, [pc, #304]	; (8008220 <USER_SPI_ioctl+0x2dc>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d012      	beq.n	800811e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80080f8:	7dbb      	ldrb	r3, [r7, #22]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008100:	7dfa      	ldrb	r2, [r7, #23]
 8008102:	09d2      	lsrs	r2, r2, #7
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	4413      	add	r3, r2
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	7e7b      	ldrb	r3, [r7, #25]
 800810c:	099b      	lsrs	r3, r3, #6
 800810e:	b2db      	uxtb	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	461a      	mov	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e013      	b.n	8008146 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800811e:	7dbb      	ldrb	r3, [r7, #22]
 8008120:	109b      	asrs	r3, r3, #2
 8008122:	b29b      	uxth	r3, r3
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	3301      	adds	r3, #1
 800812a:	7dfa      	ldrb	r2, [r7, #23]
 800812c:	00d2      	lsls	r2, r2, #3
 800812e:	f002 0218 	and.w	r2, r2, #24
 8008132:	7df9      	ldrb	r1, [r7, #23]
 8008134:	0949      	lsrs	r1, r1, #5
 8008136:	b2c9      	uxtb	r1, r1
 8008138:	440a      	add	r2, r1
 800813a:	3201      	adds	r2, #1
 800813c:	fb02 f303 	mul.w	r3, r2, r3
 8008140:	461a      	mov	r2, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800814c:	e055      	b.n	80081fa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800814e:	4b34      	ldr	r3, [pc, #208]	; (8008220 <USER_SPI_ioctl+0x2dc>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f003 0306 	and.w	r3, r3, #6
 8008156:	2b00      	cmp	r3, #0
 8008158:	d051      	beq.n	80081fe <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800815a:	f107 020c 	add.w	r2, r7, #12
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	210b      	movs	r1, #11
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff feee 	bl	8007f44 <USER_SPI_ioctl>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d149      	bne.n	8008202 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800816e:	7b3b      	ldrb	r3, [r7, #12]
 8008170:	099b      	lsrs	r3, r3, #6
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d104      	bne.n	8008182 <USER_SPI_ioctl+0x23e>
 8008178:	7dbb      	ldrb	r3, [r7, #22]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d041      	beq.n	8008206 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	623b      	str	r3, [r7, #32]
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008192:	4b23      	ldr	r3, [pc, #140]	; (8008220 <USER_SPI_ioctl+0x2dc>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	025b      	lsls	r3, r3, #9
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	025b      	lsls	r3, r3, #9
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80081aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ac:	2020      	movs	r0, #32
 80081ae:	f7ff fc78 	bl	8007aa2 <send_cmd>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d128      	bne.n	800820a <USER_SPI_ioctl+0x2c6>
 80081b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ba:	2021      	movs	r0, #33	; 0x21
 80081bc:	f7ff fc71 	bl	8007aa2 <send_cmd>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d121      	bne.n	800820a <USER_SPI_ioctl+0x2c6>
 80081c6:	2100      	movs	r1, #0
 80081c8:	2026      	movs	r0, #38	; 0x26
 80081ca:	f7ff fc6a 	bl	8007aa2 <send_cmd>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11a      	bne.n	800820a <USER_SPI_ioctl+0x2c6>
 80081d4:	f247 5030 	movw	r0, #30000	; 0x7530
 80081d8:	f7ff fbb8 	bl	800794c <wait_ready>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d013      	beq.n	800820a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80081e8:	e00f      	b.n	800820a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80081ea:	2304      	movs	r3, #4
 80081ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081f0:	e00c      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		break;
 80081f2:	bf00      	nop
 80081f4:	e00a      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		break;
 80081f6:	bf00      	nop
 80081f8:	e008      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		break;
 80081fa:	bf00      	nop
 80081fc:	e006      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80081fe:	bf00      	nop
 8008200:	e004      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008202:	bf00      	nop
 8008204:	e002      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008206:	bf00      	nop
 8008208:	e000      	b.n	800820c <USER_SPI_ioctl+0x2c8>
		break;
 800820a:	bf00      	nop
	}

	despiselect();
 800820c:	f7ff fbc2 	bl	8007994 <despiselect>

	return res;
 8008210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008214:	4618      	mov	r0, r3
 8008216:	3730      	adds	r7, #48	; 0x30
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20000030 	.word	0x20000030
 8008220:	20000e54 	.word	0x20000e54

08008224 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <disk_status+0x30>)
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	79fa      	ldrb	r2, [r7, #7]
 800823c:	4905      	ldr	r1, [pc, #20]	; (8008254 <disk_status+0x30>)
 800823e:	440a      	add	r2, r1
 8008240:	7a12      	ldrb	r2, [r2, #8]
 8008242:	4610      	mov	r0, r2
 8008244:	4798      	blx	r3
 8008246:	4603      	mov	r3, r0
 8008248:	73fb      	strb	r3, [r7, #15]
  return stat;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000e88 	.word	0x20000e88

08008258 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	4a0d      	ldr	r2, [pc, #52]	; (80082a0 <disk_initialize+0x48>)
 800826a:	5cd3      	ldrb	r3, [r2, r3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d111      	bne.n	8008294 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	4a0b      	ldr	r2, [pc, #44]	; (80082a0 <disk_initialize+0x48>)
 8008274:	2101      	movs	r1, #1
 8008276:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <disk_initialize+0x48>)
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	79fa      	ldrb	r2, [r7, #7]
 8008286:	4906      	ldr	r1, [pc, #24]	; (80082a0 <disk_initialize+0x48>)
 8008288:	440a      	add	r2, r1
 800828a:	7a12      	ldrb	r2, [r2, #8]
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000e88 	.word	0x20000e88

080082a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	4a0a      	ldr	r2, [pc, #40]	; (80082e0 <disk_read+0x3c>)
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	689c      	ldr	r4, [r3, #8]
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	4a07      	ldr	r2, [pc, #28]	; (80082e0 <disk_read+0x3c>)
 80082c4:	4413      	add	r3, r2
 80082c6:	7a18      	ldrb	r0, [r3, #8]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	47a0      	blx	r4
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd90      	pop	{r4, r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000e88 	.word	0x20000e88

080082e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80082e4:	b590      	push	{r4, r7, lr}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <disk_write+0x3c>)
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68dc      	ldr	r4, [r3, #12]
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	4a07      	ldr	r2, [pc, #28]	; (8008320 <disk_write+0x3c>)
 8008304:	4413      	add	r3, r2
 8008306:	7a18      	ldrb	r0, [r3, #8]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	47a0      	blx	r4
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
  return res;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
}
 8008316:	4618      	mov	r0, r3
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	20000e88 	.word	0x20000e88

08008324 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3301      	adds	r3, #1
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008334:	89fb      	ldrh	r3, [r7, #14]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	b21a      	sxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b21b      	sxth	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b21b      	sxth	r3, r3
 8008344:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008346:	89fb      	ldrh	r3, [r7, #14]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3303      	adds	r3, #3
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	3202      	adds	r2, #2
 800836c:	7812      	ldrb	r2, [r2, #0]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	3201      	adds	r2, #1
 800837a:	7812      	ldrb	r2, [r2, #0]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
	return rv;
 800838c:	68fb      	ldr	r3, [r7, #12]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e010      	b.n	80083cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80083aa:	4a0d      	ldr	r2, [pc, #52]	; (80083e0 <clear_lock+0x44>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	4413      	add	r3, r2
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d105      	bne.n	80083c6 <clear_lock+0x2a>
 80083ba:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <clear_lock+0x44>)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	4413      	add	r3, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d9eb      	bls.n	80083aa <clear_lock+0xe>
	}
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20000e68 	.word	0x20000e68

080083e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	78db      	ldrb	r3, [r3, #3]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d034      	beq.n	8008462 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7858      	ldrb	r0, [r3, #1]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008408:	2301      	movs	r3, #1
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	f7ff ff6a 	bl	80082e4 <disk_write>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008416:	2301      	movs	r3, #1
 8008418:	73fb      	strb	r3, [r7, #15]
 800841a:	e022      	b.n	8008462 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	429a      	cmp	r2, r3
 8008430:	d217      	bcs.n	8008462 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	789b      	ldrb	r3, [r3, #2]
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	e010      	b.n	800845c <sync_window+0x78>
					wsect += fs->fsize;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	7858      	ldrb	r0, [r3, #1]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800844e:	2301      	movs	r3, #1
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	f7ff ff47 	bl	80082e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	3b01      	subs	r3, #1
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d8eb      	bhi.n	800843a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d01b      	beq.n	80084bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ffad 	bl	80083e4 <sync_window>
 800848a:	4603      	mov	r3, r0
 800848c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d113      	bne.n	80084bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	7858      	ldrb	r0, [r3, #1]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800849e:	2301      	movs	r3, #1
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	f7ff feff 	bl	80082a4 <disk_read>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b087      	sub	sp, #28
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80084ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d031      	beq.n	8008540 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e002      	b.n	80084ea <get_ldnumber+0x24>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	3301      	adds	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d903      	bls.n	80084fa <get_ldnumber+0x34>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b3a      	cmp	r3, #58	; 0x3a
 80084f8:	d1f4      	bne.n	80084e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b3a      	cmp	r3, #58	; 0x3a
 8008500:	d11c      	bne.n	800853c <get_ldnumber+0x76>
			tp = *path;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	60fa      	str	r2, [r7, #12]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	3b30      	subs	r3, #48	; 0x30
 8008512:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b09      	cmp	r3, #9
 8008518:	d80e      	bhi.n	8008538 <get_ldnumber+0x72>
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	429a      	cmp	r2, r3
 8008520:	d10a      	bne.n	8008538 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d107      	bne.n	8008538 <get_ldnumber+0x72>
					vol = (int)i;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	3301      	adds	r3, #1
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	e002      	b.n	8008542 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008540:	693b      	ldr	r3, [r7, #16]
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	70da      	strb	r2, [r3, #3]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff ff7e 	bl	800846c <move_window>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <check_fs+0x2a>
 8008576:	2304      	movs	r3, #4
 8008578:	e038      	b.n	80085ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3330      	adds	r3, #48	; 0x30
 800857e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fece 	bl	8008324 <ld_word>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008590:	429a      	cmp	r2, r3
 8008592:	d001      	beq.n	8008598 <check_fs+0x48>
 8008594:	2303      	movs	r3, #3
 8008596:	e029      	b.n	80085ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800859e:	2be9      	cmp	r3, #233	; 0xe9
 80085a0:	d009      	beq.n	80085b6 <check_fs+0x66>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085a8:	2beb      	cmp	r3, #235	; 0xeb
 80085aa:	d11e      	bne.n	80085ea <check_fs+0x9a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80085b2:	2b90      	cmp	r3, #144	; 0x90
 80085b4:	d119      	bne.n	80085ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3330      	adds	r3, #48	; 0x30
 80085ba:	3336      	adds	r3, #54	; 0x36
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fec9 	bl	8008354 <ld_dword>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085c8:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <check_fs+0xa4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d101      	bne.n	80085d2 <check_fs+0x82>
 80085ce:	2300      	movs	r3, #0
 80085d0:	e00c      	b.n	80085ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3330      	adds	r3, #48	; 0x30
 80085d6:	3352      	adds	r3, #82	; 0x52
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff febb 	bl	8008354 <ld_dword>
 80085de:	4603      	mov	r3, r0
 80085e0:	4a05      	ldr	r2, [pc, #20]	; (80085f8 <check_fs+0xa8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d101      	bne.n	80085ea <check_fs+0x9a>
 80085e6:	2300      	movs	r3, #0
 80085e8:	e000      	b.n	80085ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80085ea:	2302      	movs	r3, #2
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	00544146 	.word	0x00544146
 80085f8:	33544146 	.word	0x33544146

080085fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b096      	sub	sp, #88	; 0x58
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff ff58 	bl	80084c6 <get_ldnumber>
 8008616:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861a:	2b00      	cmp	r3, #0
 800861c:	da01      	bge.n	8008622 <find_volume+0x26>
 800861e:	230b      	movs	r3, #11
 8008620:	e22d      	b.n	8008a7e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008622:	4aa1      	ldr	r2, [pc, #644]	; (80088a8 <find_volume+0x2ac>)
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <find_volume+0x3a>
 8008632:	230c      	movs	r3, #12
 8008634:	e223      	b.n	8008a7e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800863a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	f023 0301 	bic.w	r3, r3, #1
 8008642:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01a      	beq.n	8008682 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fde7 	bl	8008224 <disk_status>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800865c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10c      	bne.n	8008682 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <find_volume+0x82>
 800866e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800867a:	230a      	movs	r3, #10
 800867c:	e1ff      	b.n	8008a7e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800867e:	2300      	movs	r3, #0
 8008680:	e1fd      	b.n	8008a7e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868a:	b2da      	uxtb	r2, r3
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fddf 	bl	8008258 <disk_initialize>
 800869a:	4603      	mov	r3, r0
 800869c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80086a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80086ac:	2303      	movs	r3, #3
 80086ae:	e1e6      	b.n	8008a7e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <find_volume+0xca>
 80086b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80086c2:	230a      	movs	r3, #10
 80086c4:	e1db      	b.n	8008a7e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80086ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086ce:	f7ff ff3f 	bl	8008550 <check_fs>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80086d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d149      	bne.n	8008774 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086e0:	2300      	movs	r3, #0
 80086e2:	643b      	str	r3, [r7, #64]	; 0x40
 80086e4:	e01e      	b.n	8008724 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80086f4:	4413      	add	r3, r2
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	3304      	adds	r3, #4
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d006      	beq.n	8008710 <find_volume+0x114>
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	3308      	adds	r3, #8
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fe24 	bl	8008354 <ld_dword>
 800870c:	4602      	mov	r2, r0
 800870e:	e000      	b.n	8008712 <find_volume+0x116>
 8008710:	2200      	movs	r2, #0
 8008712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	3358      	adds	r3, #88	; 0x58
 8008718:	443b      	add	r3, r7
 800871a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800871e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008720:	3301      	adds	r3, #1
 8008722:	643b      	str	r3, [r7, #64]	; 0x40
 8008724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008726:	2b03      	cmp	r3, #3
 8008728:	d9dd      	bls.n	80086e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800872a:	2300      	movs	r3, #0
 800872c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800872e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <find_volume+0x13e>
 8008734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008736:	3b01      	subs	r3, #1
 8008738:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800873a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	3358      	adds	r3, #88	; 0x58
 8008740:	443b      	add	r3, r7
 8008742:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008746:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <find_volume+0x15e>
 800874e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008752:	f7ff fefd 	bl	8008550 <check_fs>
 8008756:	4603      	mov	r3, r0
 8008758:	e000      	b.n	800875c <find_volume+0x160>
 800875a:	2303      	movs	r3, #3
 800875c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008764:	2b01      	cmp	r3, #1
 8008766:	d905      	bls.n	8008774 <find_volume+0x178>
 8008768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800876a:	3301      	adds	r3, #1
 800876c:	643b      	str	r3, [r7, #64]	; 0x40
 800876e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008770:	2b03      	cmp	r3, #3
 8008772:	d9e2      	bls.n	800873a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008778:	2b04      	cmp	r3, #4
 800877a:	d101      	bne.n	8008780 <find_volume+0x184>
 800877c:	2301      	movs	r3, #1
 800877e:	e17e      	b.n	8008a7e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008784:	2b01      	cmp	r3, #1
 8008786:	d901      	bls.n	800878c <find_volume+0x190>
 8008788:	230d      	movs	r3, #13
 800878a:	e178      	b.n	8008a7e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	3330      	adds	r3, #48	; 0x30
 8008790:	330b      	adds	r3, #11
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fdc6 	bl	8008324 <ld_word>
 8008798:	4603      	mov	r3, r0
 800879a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879e:	d001      	beq.n	80087a4 <find_volume+0x1a8>
 80087a0:	230d      	movs	r3, #13
 80087a2:	e16c      	b.n	8008a7e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	3330      	adds	r3, #48	; 0x30
 80087a8:	3316      	adds	r3, #22
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fdba 	bl	8008324 <ld_word>
 80087b0:	4603      	mov	r3, r0
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80087b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <find_volume+0x1cc>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	3330      	adds	r3, #48	; 0x30
 80087be:	3324      	adds	r3, #36	; 0x24
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fdc7 	bl	8008354 <ld_dword>
 80087c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	789b      	ldrb	r3, [r3, #2]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d005      	beq.n	80087ec <find_volume+0x1f0>
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	789b      	ldrb	r3, [r3, #2]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d001      	beq.n	80087ec <find_volume+0x1f0>
 80087e8:	230d      	movs	r3, #13
 80087ea:	e148      	b.n	8008a7e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	789b      	ldrb	r3, [r3, #2]
 80087f0:	461a      	mov	r2, r3
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b29a      	uxth	r2, r3
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	895b      	ldrh	r3, [r3, #10]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d008      	beq.n	8008820 <find_volume+0x224>
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	895b      	ldrh	r3, [r3, #10]
 8008812:	461a      	mov	r2, r3
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	895b      	ldrh	r3, [r3, #10]
 8008818:	3b01      	subs	r3, #1
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <find_volume+0x228>
 8008820:	230d      	movs	r3, #13
 8008822:	e12c      	b.n	8008a7e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	3330      	adds	r3, #48	; 0x30
 8008828:	3311      	adds	r3, #17
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fd7a 	bl	8008324 <ld_word>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	891b      	ldrh	r3, [r3, #8]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <find_volume+0x24e>
 8008846:	230d      	movs	r3, #13
 8008848:	e119      	b.n	8008a7e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	3330      	adds	r3, #48	; 0x30
 800884e:	3313      	adds	r3, #19
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fd67 	bl	8008324 <ld_word>
 8008856:	4603      	mov	r3, r0
 8008858:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800885a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885c:	2b00      	cmp	r3, #0
 800885e:	d106      	bne.n	800886e <find_volume+0x272>
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	3330      	adds	r3, #48	; 0x30
 8008864:	3320      	adds	r3, #32
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fd74 	bl	8008354 <ld_dword>
 800886c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	3330      	adds	r3, #48	; 0x30
 8008872:	330e      	adds	r3, #14
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fd55 	bl	8008324 <ld_word>
 800887a:	4603      	mov	r3, r0
 800887c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800887e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <find_volume+0x28c>
 8008884:	230d      	movs	r3, #13
 8008886:	e0fa      	b.n	8008a7e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008888:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800888a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888c:	4413      	add	r3, r2
 800888e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008890:	8912      	ldrh	r2, [r2, #8]
 8008892:	0912      	lsrs	r2, r2, #4
 8008894:	b292      	uxth	r2, r2
 8008896:	4413      	add	r3, r2
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800889a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	429a      	cmp	r2, r3
 80088a0:	d204      	bcs.n	80088ac <find_volume+0x2b0>
 80088a2:	230d      	movs	r3, #13
 80088a4:	e0eb      	b.n	8008a7e <find_volume+0x482>
 80088a6:	bf00      	nop
 80088a8:	20000e60 	.word	0x20000e60
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80088ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b4:	8952      	ldrh	r2, [r2, #10]
 80088b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <find_volume+0x2ca>
 80088c2:	230d      	movs	r3, #13
 80088c4:	e0db      	b.n	8008a7e <find_volume+0x482>
		fmt = FS_FAT32;
 80088c6:	2303      	movs	r3, #3
 80088c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d802      	bhi.n	80088dc <find_volume+0x2e0>
 80088d6:	2302      	movs	r3, #2
 80088d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	f640 72f5 	movw	r2, #4085	; 0xff5
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d802      	bhi.n	80088ec <find_volume+0x2f0>
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	1c9a      	adds	r2, r3, #2
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088f8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80088fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80088fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fe:	441a      	add	r2, r3
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	441a      	add	r2, r3
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800890e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008912:	2b03      	cmp	r3, #3
 8008914:	d11e      	bne.n	8008954 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	3330      	adds	r3, #48	; 0x30
 800891a:	332a      	adds	r3, #42	; 0x2a
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fd01 	bl	8008324 <ld_word>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <find_volume+0x330>
 8008928:	230d      	movs	r3, #13
 800892a:	e0a8      	b.n	8008a7e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <find_volume+0x33c>
 8008934:	230d      	movs	r3, #13
 8008936:	e0a2      	b.n	8008a7e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	3330      	adds	r3, #48	; 0x30
 800893c:	332c      	adds	r3, #44	; 0x2c
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff fd08 	bl	8008354 <ld_dword>
 8008944:	4602      	mov	r2, r0
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	647b      	str	r3, [r7, #68]	; 0x44
 8008952:	e01f      	b.n	8008994 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	891b      	ldrh	r3, [r3, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <find_volume+0x364>
 800895c:	230d      	movs	r3, #13
 800895e:	e08e      	b.n	8008a7e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	6a1a      	ldr	r2, [r3, #32]
 8008964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008966:	441a      	add	r2, r3
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800896c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008970:	2b02      	cmp	r3, #2
 8008972:	d103      	bne.n	800897c <find_volume+0x380>
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	e00a      	b.n	8008992 <find_volume+0x396>
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	695a      	ldr	r2, [r3, #20]
 8008980:	4613      	mov	r3, r2
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	4413      	add	r3, r2
 8008986:	085a      	lsrs	r2, r3, #1
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008992:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800899e:	0a5b      	lsrs	r3, r3, #9
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d201      	bcs.n	80089a8 <find_volume+0x3ac>
 80089a4:	230d      	movs	r3, #13
 80089a6:	e06a      	b.n	8008a7e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ae:	611a      	str	r2, [r3, #16]
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ba:	2280      	movs	r2, #128	; 0x80
 80089bc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80089be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d149      	bne.n	8008a5a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	3330      	adds	r3, #48	; 0x30
 80089ca:	3330      	adds	r3, #48	; 0x30
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fca9 	bl	8008324 <ld_word>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d140      	bne.n	8008a5a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80089d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089da:	3301      	adds	r3, #1
 80089dc:	4619      	mov	r1, r3
 80089de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089e0:	f7ff fd44 	bl	800846c <move_window>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d137      	bne.n	8008a5a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	2200      	movs	r2, #0
 80089ee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	3330      	adds	r3, #48	; 0x30
 80089f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fc93 	bl	8008324 <ld_word>
 80089fe:	4603      	mov	r3, r0
 8008a00:	461a      	mov	r2, r3
 8008a02:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d127      	bne.n	8008a5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	3330      	adds	r3, #48	; 0x30
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff fca0 	bl	8008354 <ld_dword>
 8008a14:	4603      	mov	r3, r0
 8008a16:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <find_volume+0x48c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d11e      	bne.n	8008a5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	3330      	adds	r3, #48	; 0x30
 8008a20:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fc95 	bl	8008354 <ld_dword>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4a17      	ldr	r2, [pc, #92]	; (8008a8c <find_volume+0x490>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d113      	bne.n	8008a5a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	3330      	adds	r3, #48	; 0x30
 8008a36:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff fc8a 	bl	8008354 <ld_dword>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	3330      	adds	r3, #48	; 0x30
 8008a4a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fc80 	bl	8008354 <ld_dword>
 8008a54:	4602      	mov	r2, r0
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008a60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <find_volume+0x494>)
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <find_volume+0x494>)
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	4b08      	ldr	r3, [pc, #32]	; (8008a90 <find_volume+0x494>)
 8008a70:	881a      	ldrh	r2, [r3, #0]
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008a76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a78:	f7ff fc90 	bl	800839c <clear_lock>
#endif
	return FR_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3758      	adds	r7, #88	; 0x58
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	41615252 	.word	0x41615252
 8008a8c:	61417272 	.word	0x61417272
 8008a90:	20000e64 	.word	0x20000e64

08008a94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008aa6:	f107 0310 	add.w	r3, r7, #16
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff fd0b 	bl	80084c6 <get_ldnumber>
 8008ab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	da01      	bge.n	8008abc <f_mount+0x28>
 8008ab8:	230b      	movs	r3, #11
 8008aba:	e02b      	b.n	8008b14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008abc:	4a17      	ldr	r2, [pc, #92]	; (8008b1c <f_mount+0x88>)
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008acc:	69b8      	ldr	r0, [r7, #24]
 8008ace:	f7ff fc65 	bl	800839c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	490d      	ldr	r1, [pc, #52]	; (8008b1c <f_mount+0x88>)
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <f_mount+0x66>
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d001      	beq.n	8008afe <f_mount+0x6a>
 8008afa:	2300      	movs	r3, #0
 8008afc:	e00a      	b.n	8008b14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008afe:	f107 010c 	add.w	r1, r7, #12
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	2200      	movs	r2, #0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fd77 	bl	80085fc <find_volume>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3720      	adds	r7, #32
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20000e60 	.word	0x20000e60

08008b20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b36:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b38:	7a5b      	ldrb	r3, [r3, #9]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d131      	bne.n	8008ba4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b40:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b42:	7a5b      	ldrb	r3, [r3, #9]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b4e:	4b19      	ldr	r3, [pc, #100]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b50:	7a5b      	ldrb	r3, [r3, #9]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	4a17      	ldr	r2, [pc, #92]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b5e:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b60:	7a5b      	ldrb	r3, [r3, #9]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	79fa      	ldrb	r2, [r7, #7]
 8008b6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b6e:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b70:	7a5b      	ldrb	r3, [r3, #9]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	b2d1      	uxtb	r1, r2
 8008b78:	4a0e      	ldr	r2, [pc, #56]	; (8008bb4 <FATFS_LinkDriverEx+0x94>)
 8008b7a:	7251      	strb	r1, [r2, #9]
 8008b7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b7e:	7dbb      	ldrb	r3, [r7, #22]
 8008b80:	3330      	adds	r3, #48	; 0x30
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	223a      	movs	r2, #58	; 0x3a
 8008b8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	3302      	adds	r3, #2
 8008b94:	222f      	movs	r2, #47	; 0x2f
 8008b96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	3303      	adds	r3, #3
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20000e88 	.word	0x20000e88

08008bb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff ffaa 	bl	8008b20 <FATFS_LinkDriverEx>
 8008bcc:	4603      	mov	r3, r0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <atof>:
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	f000 be12 	b.w	8009800 <strtod>

08008bdc <atoi>:
 8008bdc:	220a      	movs	r2, #10
 8008bde:	2100      	movs	r1, #0
 8008be0:	f000 be9c 	b.w	800991c <strtol>

08008be4 <sulp>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4604      	mov	r4, r0
 8008be8:	460d      	mov	r5, r1
 8008bea:	ec45 4b10 	vmov	d0, r4, r5
 8008bee:	4616      	mov	r6, r2
 8008bf0:	f003 fc26 	bl	800c440 <__ulp>
 8008bf4:	ec51 0b10 	vmov	r0, r1, d0
 8008bf8:	b17e      	cbz	r6, 8008c1a <sulp+0x36>
 8008bfa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd09      	ble.n	8008c1a <sulp+0x36>
 8008c06:	051b      	lsls	r3, r3, #20
 8008c08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c0c:	2400      	movs	r4, #0
 8008c0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c12:	4622      	mov	r2, r4
 8008c14:	462b      	mov	r3, r5
 8008c16:	f7f7 fcff 	bl	8000618 <__aeabi_dmul>
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	0000      	movs	r0, r0
	...

08008c20 <_strtod_l>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	ed2d 8b02 	vpush	{d8}
 8008c28:	b09b      	sub	sp, #108	; 0x6c
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c2e:	2200      	movs	r2, #0
 8008c30:	9216      	str	r2, [sp, #88]	; 0x58
 8008c32:	460d      	mov	r5, r1
 8008c34:	f04f 0800 	mov.w	r8, #0
 8008c38:	f04f 0900 	mov.w	r9, #0
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	9215      	str	r2, [sp, #84]	; 0x54
 8008c40:	7811      	ldrb	r1, [r2, #0]
 8008c42:	292b      	cmp	r1, #43	; 0x2b
 8008c44:	d04c      	beq.n	8008ce0 <_strtod_l+0xc0>
 8008c46:	d83a      	bhi.n	8008cbe <_strtod_l+0x9e>
 8008c48:	290d      	cmp	r1, #13
 8008c4a:	d834      	bhi.n	8008cb6 <_strtod_l+0x96>
 8008c4c:	2908      	cmp	r1, #8
 8008c4e:	d834      	bhi.n	8008cba <_strtod_l+0x9a>
 8008c50:	2900      	cmp	r1, #0
 8008c52:	d03d      	beq.n	8008cd0 <_strtod_l+0xb0>
 8008c54:	2200      	movs	r2, #0
 8008c56:	920a      	str	r2, [sp, #40]	; 0x28
 8008c58:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008c5a:	7832      	ldrb	r2, [r6, #0]
 8008c5c:	2a30      	cmp	r2, #48	; 0x30
 8008c5e:	f040 80b4 	bne.w	8008dca <_strtod_l+0x1aa>
 8008c62:	7872      	ldrb	r2, [r6, #1]
 8008c64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c68:	2a58      	cmp	r2, #88	; 0x58
 8008c6a:	d170      	bne.n	8008d4e <_strtod_l+0x12e>
 8008c6c:	9302      	str	r3, [sp, #8]
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	ab16      	add	r3, sp, #88	; 0x58
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4a8e      	ldr	r2, [pc, #568]	; (8008eb0 <_strtod_l+0x290>)
 8008c78:	ab17      	add	r3, sp, #92	; 0x5c
 8008c7a:	a915      	add	r1, sp, #84	; 0x54
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f002 fcbd 	bl	800b5fc <__gethex>
 8008c82:	f010 070f 	ands.w	r7, r0, #15
 8008c86:	4605      	mov	r5, r0
 8008c88:	d005      	beq.n	8008c96 <_strtod_l+0x76>
 8008c8a:	2f06      	cmp	r7, #6
 8008c8c:	d12a      	bne.n	8008ce4 <_strtod_l+0xc4>
 8008c8e:	3601      	adds	r6, #1
 8008c90:	2300      	movs	r3, #0
 8008c92:	9615      	str	r6, [sp, #84]	; 0x54
 8008c94:	930a      	str	r3, [sp, #40]	; 0x28
 8008c96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 857f 	bne.w	800979c <_strtod_l+0xb7c>
 8008c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca0:	b1db      	cbz	r3, 8008cda <_strtod_l+0xba>
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ca8:	ec43 2b10 	vmov	d0, r2, r3
 8008cac:	b01b      	add	sp, #108	; 0x6c
 8008cae:	ecbd 8b02 	vpop	{d8}
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	2920      	cmp	r1, #32
 8008cb8:	d1cc      	bne.n	8008c54 <_strtod_l+0x34>
 8008cba:	3201      	adds	r2, #1
 8008cbc:	e7bf      	b.n	8008c3e <_strtod_l+0x1e>
 8008cbe:	292d      	cmp	r1, #45	; 0x2d
 8008cc0:	d1c8      	bne.n	8008c54 <_strtod_l+0x34>
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	910a      	str	r1, [sp, #40]	; 0x28
 8008cc6:	1c51      	adds	r1, r2, #1
 8008cc8:	9115      	str	r1, [sp, #84]	; 0x54
 8008cca:	7852      	ldrb	r2, [r2, #1]
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	d1c3      	bne.n	8008c58 <_strtod_l+0x38>
 8008cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cd2:	9515      	str	r5, [sp, #84]	; 0x54
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f040 855f 	bne.w	8009798 <_strtod_l+0xb78>
 8008cda:	4642      	mov	r2, r8
 8008cdc:	464b      	mov	r3, r9
 8008cde:	e7e3      	b.n	8008ca8 <_strtod_l+0x88>
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	e7ef      	b.n	8008cc4 <_strtod_l+0xa4>
 8008ce4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ce6:	b13a      	cbz	r2, 8008cf8 <_strtod_l+0xd8>
 8008ce8:	2135      	movs	r1, #53	; 0x35
 8008cea:	a818      	add	r0, sp, #96	; 0x60
 8008cec:	f003 fca5 	bl	800c63a <__copybits>
 8008cf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f003 f878 	bl	800bde8 <_Bfree>
 8008cf8:	3f01      	subs	r7, #1
 8008cfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cfc:	2f04      	cmp	r7, #4
 8008cfe:	d806      	bhi.n	8008d0e <_strtod_l+0xee>
 8008d00:	e8df f007 	tbb	[pc, r7]
 8008d04:	201d0314 	.word	0x201d0314
 8008d08:	14          	.byte	0x14
 8008d09:	00          	.byte	0x00
 8008d0a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008d0e:	05e9      	lsls	r1, r5, #23
 8008d10:	bf48      	it	mi
 8008d12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d1a:	0d1b      	lsrs	r3, r3, #20
 8008d1c:	051b      	lsls	r3, r3, #20
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1b9      	bne.n	8008c96 <_strtod_l+0x76>
 8008d22:	f001 fcf9 	bl	800a718 <__errno>
 8008d26:	2322      	movs	r3, #34	; 0x22
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	e7b4      	b.n	8008c96 <_strtod_l+0x76>
 8008d2c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008d30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d3c:	e7e7      	b.n	8008d0e <_strtod_l+0xee>
 8008d3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008eb8 <_strtod_l+0x298>
 8008d42:	e7e4      	b.n	8008d0e <_strtod_l+0xee>
 8008d44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d48:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008d4c:	e7df      	b.n	8008d0e <_strtod_l+0xee>
 8008d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	9215      	str	r2, [sp, #84]	; 0x54
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	2b30      	cmp	r3, #48	; 0x30
 8008d58:	d0f9      	beq.n	8008d4e <_strtod_l+0x12e>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d09b      	beq.n	8008c96 <_strtod_l+0x76>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f04f 0a00 	mov.w	sl, #0
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d6e:	46d3      	mov	fp, sl
 8008d70:	220a      	movs	r2, #10
 8008d72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008d74:	7806      	ldrb	r6, [r0, #0]
 8008d76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d7a:	b2d9      	uxtb	r1, r3
 8008d7c:	2909      	cmp	r1, #9
 8008d7e:	d926      	bls.n	8008dce <_strtod_l+0x1ae>
 8008d80:	494c      	ldr	r1, [pc, #304]	; (8008eb4 <_strtod_l+0x294>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	f001 fc58 	bl	800a638 <strncmp>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d030      	beq.n	8008dee <_strtod_l+0x1ce>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	4632      	mov	r2, r6
 8008d90:	9005      	str	r0, [sp, #20]
 8008d92:	465e      	mov	r6, fp
 8008d94:	4603      	mov	r3, r0
 8008d96:	2a65      	cmp	r2, #101	; 0x65
 8008d98:	d001      	beq.n	8008d9e <_strtod_l+0x17e>
 8008d9a:	2a45      	cmp	r2, #69	; 0x45
 8008d9c:	d113      	bne.n	8008dc6 <_strtod_l+0x1a6>
 8008d9e:	b91e      	cbnz	r6, 8008da8 <_strtod_l+0x188>
 8008da0:	9a04      	ldr	r2, [sp, #16]
 8008da2:	4302      	orrs	r2, r0
 8008da4:	d094      	beq.n	8008cd0 <_strtod_l+0xb0>
 8008da6:	2600      	movs	r6, #0
 8008da8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008daa:	1c6a      	adds	r2, r5, #1
 8008dac:	9215      	str	r2, [sp, #84]	; 0x54
 8008dae:	786a      	ldrb	r2, [r5, #1]
 8008db0:	2a2b      	cmp	r2, #43	; 0x2b
 8008db2:	d074      	beq.n	8008e9e <_strtod_l+0x27e>
 8008db4:	2a2d      	cmp	r2, #45	; 0x2d
 8008db6:	d078      	beq.n	8008eaa <_strtod_l+0x28a>
 8008db8:	f04f 0c00 	mov.w	ip, #0
 8008dbc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008dc0:	2909      	cmp	r1, #9
 8008dc2:	d97f      	bls.n	8008ec4 <_strtod_l+0x2a4>
 8008dc4:	9515      	str	r5, [sp, #84]	; 0x54
 8008dc6:	2700      	movs	r7, #0
 8008dc8:	e09e      	b.n	8008f08 <_strtod_l+0x2e8>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e7c8      	b.n	8008d60 <_strtod_l+0x140>
 8008dce:	f1bb 0f08 	cmp.w	fp, #8
 8008dd2:	bfd8      	it	le
 8008dd4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008dd6:	f100 0001 	add.w	r0, r0, #1
 8008dda:	bfda      	itte	le
 8008ddc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008de0:	9309      	strle	r3, [sp, #36]	; 0x24
 8008de2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008de6:	f10b 0b01 	add.w	fp, fp, #1
 8008dea:	9015      	str	r0, [sp, #84]	; 0x54
 8008dec:	e7c1      	b.n	8008d72 <_strtod_l+0x152>
 8008dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	9215      	str	r2, [sp, #84]	; 0x54
 8008df4:	785a      	ldrb	r2, [r3, #1]
 8008df6:	f1bb 0f00 	cmp.w	fp, #0
 8008dfa:	d037      	beq.n	8008e6c <_strtod_l+0x24c>
 8008dfc:	9005      	str	r0, [sp, #20]
 8008dfe:	465e      	mov	r6, fp
 8008e00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d912      	bls.n	8008e2e <_strtod_l+0x20e>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e7c4      	b.n	8008d96 <_strtod_l+0x176>
 8008e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	9215      	str	r2, [sp, #84]	; 0x54
 8008e12:	785a      	ldrb	r2, [r3, #1]
 8008e14:	3001      	adds	r0, #1
 8008e16:	2a30      	cmp	r2, #48	; 0x30
 8008e18:	d0f8      	beq.n	8008e0c <_strtod_l+0x1ec>
 8008e1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	f200 84c1 	bhi.w	80097a6 <_strtod_l+0xb86>
 8008e24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e26:	9005      	str	r0, [sp, #20]
 8008e28:	2000      	movs	r0, #0
 8008e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	3a30      	subs	r2, #48	; 0x30
 8008e30:	f100 0301 	add.w	r3, r0, #1
 8008e34:	d014      	beq.n	8008e60 <_strtod_l+0x240>
 8008e36:	9905      	ldr	r1, [sp, #20]
 8008e38:	4419      	add	r1, r3
 8008e3a:	9105      	str	r1, [sp, #20]
 8008e3c:	4633      	mov	r3, r6
 8008e3e:	eb00 0c06 	add.w	ip, r0, r6
 8008e42:	210a      	movs	r1, #10
 8008e44:	4563      	cmp	r3, ip
 8008e46:	d113      	bne.n	8008e70 <_strtod_l+0x250>
 8008e48:	1833      	adds	r3, r6, r0
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	f106 0601 	add.w	r6, r6, #1
 8008e50:	4406      	add	r6, r0
 8008e52:	dc1a      	bgt.n	8008e8a <_strtod_l+0x26a>
 8008e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e56:	230a      	movs	r3, #10
 8008e58:	fb03 2301 	mla	r3, r3, r1, r2
 8008e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e62:	1c51      	adds	r1, r2, #1
 8008e64:	9115      	str	r1, [sp, #84]	; 0x54
 8008e66:	7852      	ldrb	r2, [r2, #1]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	e7c9      	b.n	8008e00 <_strtod_l+0x1e0>
 8008e6c:	4658      	mov	r0, fp
 8008e6e:	e7d2      	b.n	8008e16 <_strtod_l+0x1f6>
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	f103 0301 	add.w	r3, r3, #1
 8008e76:	dc03      	bgt.n	8008e80 <_strtod_l+0x260>
 8008e78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e7a:	434f      	muls	r7, r1
 8008e7c:	9709      	str	r7, [sp, #36]	; 0x24
 8008e7e:	e7e1      	b.n	8008e44 <_strtod_l+0x224>
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	bfd8      	it	le
 8008e84:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008e88:	e7dc      	b.n	8008e44 <_strtod_l+0x224>
 8008e8a:	2e10      	cmp	r6, #16
 8008e8c:	bfdc      	itt	le
 8008e8e:	230a      	movle	r3, #10
 8008e90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008e94:	e7e3      	b.n	8008e5e <_strtod_l+0x23e>
 8008e96:	2300      	movs	r3, #0
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e780      	b.n	8008da0 <_strtod_l+0x180>
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	1caa      	adds	r2, r5, #2
 8008ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8008ea6:	78aa      	ldrb	r2, [r5, #2]
 8008ea8:	e788      	b.n	8008dbc <_strtod_l+0x19c>
 8008eaa:	f04f 0c01 	mov.w	ip, #1
 8008eae:	e7f8      	b.n	8008ea2 <_strtod_l+0x282>
 8008eb0:	0800d390 	.word	0x0800d390
 8008eb4:	0800d38c 	.word	0x0800d38c
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ebe:	1c51      	adds	r1, r2, #1
 8008ec0:	9115      	str	r1, [sp, #84]	; 0x54
 8008ec2:	7852      	ldrb	r2, [r2, #1]
 8008ec4:	2a30      	cmp	r2, #48	; 0x30
 8008ec6:	d0f9      	beq.n	8008ebc <_strtod_l+0x29c>
 8008ec8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ecc:	2908      	cmp	r1, #8
 8008ece:	f63f af7a 	bhi.w	8008dc6 <_strtod_l+0x1a6>
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	9208      	str	r2, [sp, #32]
 8008ed6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ed8:	920c      	str	r2, [sp, #48]	; 0x30
 8008eda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008edc:	1c57      	adds	r7, r2, #1
 8008ede:	9715      	str	r7, [sp, #84]	; 0x54
 8008ee0:	7852      	ldrb	r2, [r2, #1]
 8008ee2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008ee6:	f1be 0f09 	cmp.w	lr, #9
 8008eea:	d938      	bls.n	8008f5e <_strtod_l+0x33e>
 8008eec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008eee:	1a7f      	subs	r7, r7, r1
 8008ef0:	2f08      	cmp	r7, #8
 8008ef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ef6:	dc03      	bgt.n	8008f00 <_strtod_l+0x2e0>
 8008ef8:	9908      	ldr	r1, [sp, #32]
 8008efa:	428f      	cmp	r7, r1
 8008efc:	bfa8      	it	ge
 8008efe:	460f      	movge	r7, r1
 8008f00:	f1bc 0f00 	cmp.w	ip, #0
 8008f04:	d000      	beq.n	8008f08 <_strtod_l+0x2e8>
 8008f06:	427f      	negs	r7, r7
 8008f08:	2e00      	cmp	r6, #0
 8008f0a:	d14f      	bne.n	8008fac <_strtod_l+0x38c>
 8008f0c:	9904      	ldr	r1, [sp, #16]
 8008f0e:	4301      	orrs	r1, r0
 8008f10:	f47f aec1 	bne.w	8008c96 <_strtod_l+0x76>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f47f aedb 	bne.w	8008cd0 <_strtod_l+0xb0>
 8008f1a:	2a69      	cmp	r2, #105	; 0x69
 8008f1c:	d029      	beq.n	8008f72 <_strtod_l+0x352>
 8008f1e:	dc26      	bgt.n	8008f6e <_strtod_l+0x34e>
 8008f20:	2a49      	cmp	r2, #73	; 0x49
 8008f22:	d026      	beq.n	8008f72 <_strtod_l+0x352>
 8008f24:	2a4e      	cmp	r2, #78	; 0x4e
 8008f26:	f47f aed3 	bne.w	8008cd0 <_strtod_l+0xb0>
 8008f2a:	499b      	ldr	r1, [pc, #620]	; (8009198 <_strtod_l+0x578>)
 8008f2c:	a815      	add	r0, sp, #84	; 0x54
 8008f2e:	f002 fda5 	bl	800ba7c <__match>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f43f aecc 	beq.w	8008cd0 <_strtod_l+0xb0>
 8008f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b28      	cmp	r3, #40	; 0x28
 8008f3e:	d12f      	bne.n	8008fa0 <_strtod_l+0x380>
 8008f40:	4996      	ldr	r1, [pc, #600]	; (800919c <_strtod_l+0x57c>)
 8008f42:	aa18      	add	r2, sp, #96	; 0x60
 8008f44:	a815      	add	r0, sp, #84	; 0x54
 8008f46:	f002 fdad 	bl	800baa4 <__hexnan>
 8008f4a:	2805      	cmp	r0, #5
 8008f4c:	d128      	bne.n	8008fa0 <_strtod_l+0x380>
 8008f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f5c:	e69b      	b.n	8008c96 <_strtod_l+0x76>
 8008f5e:	9f08      	ldr	r7, [sp, #32]
 8008f60:	210a      	movs	r1, #10
 8008f62:	fb01 2107 	mla	r1, r1, r7, r2
 8008f66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008f6a:	9208      	str	r2, [sp, #32]
 8008f6c:	e7b5      	b.n	8008eda <_strtod_l+0x2ba>
 8008f6e:	2a6e      	cmp	r2, #110	; 0x6e
 8008f70:	e7d9      	b.n	8008f26 <_strtod_l+0x306>
 8008f72:	498b      	ldr	r1, [pc, #556]	; (80091a0 <_strtod_l+0x580>)
 8008f74:	a815      	add	r0, sp, #84	; 0x54
 8008f76:	f002 fd81 	bl	800ba7c <__match>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f43f aea8 	beq.w	8008cd0 <_strtod_l+0xb0>
 8008f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f82:	4988      	ldr	r1, [pc, #544]	; (80091a4 <_strtod_l+0x584>)
 8008f84:	3b01      	subs	r3, #1
 8008f86:	a815      	add	r0, sp, #84	; 0x54
 8008f88:	9315      	str	r3, [sp, #84]	; 0x54
 8008f8a:	f002 fd77 	bl	800ba7c <__match>
 8008f8e:	b910      	cbnz	r0, 8008f96 <_strtod_l+0x376>
 8008f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f92:	3301      	adds	r3, #1
 8008f94:	9315      	str	r3, [sp, #84]	; 0x54
 8008f96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80091b4 <_strtod_l+0x594>
 8008f9a:	f04f 0800 	mov.w	r8, #0
 8008f9e:	e67a      	b.n	8008c96 <_strtod_l+0x76>
 8008fa0:	4881      	ldr	r0, [pc, #516]	; (80091a8 <_strtod_l+0x588>)
 8008fa2:	f001 fbf5 	bl	800a790 <nan>
 8008fa6:	ec59 8b10 	vmov	r8, r9, d0
 8008faa:	e674      	b.n	8008c96 <_strtod_l+0x76>
 8008fac:	9b05      	ldr	r3, [sp, #20]
 8008fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb0:	1afb      	subs	r3, r7, r3
 8008fb2:	f1bb 0f00 	cmp.w	fp, #0
 8008fb6:	bf08      	it	eq
 8008fb8:	46b3      	moveq	fp, r6
 8008fba:	2e10      	cmp	r6, #16
 8008fbc:	9308      	str	r3, [sp, #32]
 8008fbe:	4635      	mov	r5, r6
 8008fc0:	bfa8      	it	ge
 8008fc2:	2510      	movge	r5, #16
 8008fc4:	f7f7 faae 	bl	8000524 <__aeabi_ui2d>
 8008fc8:	2e09      	cmp	r6, #9
 8008fca:	4680      	mov	r8, r0
 8008fcc:	4689      	mov	r9, r1
 8008fce:	dd13      	ble.n	8008ff8 <_strtod_l+0x3d8>
 8008fd0:	4b76      	ldr	r3, [pc, #472]	; (80091ac <_strtod_l+0x58c>)
 8008fd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008fd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fda:	f7f7 fb1d 	bl	8000618 <__aeabi_dmul>
 8008fde:	4680      	mov	r8, r0
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4689      	mov	r9, r1
 8008fe4:	f7f7 fa9e 	bl	8000524 <__aeabi_ui2d>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 f95c 	bl	80002ac <__adddf3>
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	4689      	mov	r9, r1
 8008ff8:	2e0f      	cmp	r6, #15
 8008ffa:	dc38      	bgt.n	800906e <_strtod_l+0x44e>
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f43f ae49 	beq.w	8008c96 <_strtod_l+0x76>
 8009004:	dd24      	ble.n	8009050 <_strtod_l+0x430>
 8009006:	2b16      	cmp	r3, #22
 8009008:	dc0b      	bgt.n	8009022 <_strtod_l+0x402>
 800900a:	4968      	ldr	r1, [pc, #416]	; (80091ac <_strtod_l+0x58c>)
 800900c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	f7f7 fafe 	bl	8000618 <__aeabi_dmul>
 800901c:	4680      	mov	r8, r0
 800901e:	4689      	mov	r9, r1
 8009020:	e639      	b.n	8008c96 <_strtod_l+0x76>
 8009022:	9a08      	ldr	r2, [sp, #32]
 8009024:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009028:	4293      	cmp	r3, r2
 800902a:	db20      	blt.n	800906e <_strtod_l+0x44e>
 800902c:	4c5f      	ldr	r4, [pc, #380]	; (80091ac <_strtod_l+0x58c>)
 800902e:	f1c6 060f 	rsb	r6, r6, #15
 8009032:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009036:	4642      	mov	r2, r8
 8009038:	464b      	mov	r3, r9
 800903a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800903e:	f7f7 faeb 	bl	8000618 <__aeabi_dmul>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	1b9e      	subs	r6, r3, r6
 8009046:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800904a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800904e:	e7e3      	b.n	8009018 <_strtod_l+0x3f8>
 8009050:	9b08      	ldr	r3, [sp, #32]
 8009052:	3316      	adds	r3, #22
 8009054:	db0b      	blt.n	800906e <_strtod_l+0x44e>
 8009056:	9b05      	ldr	r3, [sp, #20]
 8009058:	1bdf      	subs	r7, r3, r7
 800905a:	4b54      	ldr	r3, [pc, #336]	; (80091ac <_strtod_l+0x58c>)
 800905c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009064:	4640      	mov	r0, r8
 8009066:	4649      	mov	r1, r9
 8009068:	f7f7 fc00 	bl	800086c <__aeabi_ddiv>
 800906c:	e7d6      	b.n	800901c <_strtod_l+0x3fc>
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	1b75      	subs	r5, r6, r5
 8009072:	441d      	add	r5, r3
 8009074:	2d00      	cmp	r5, #0
 8009076:	dd70      	ble.n	800915a <_strtod_l+0x53a>
 8009078:	f015 030f 	ands.w	r3, r5, #15
 800907c:	d00a      	beq.n	8009094 <_strtod_l+0x474>
 800907e:	494b      	ldr	r1, [pc, #300]	; (80091ac <_strtod_l+0x58c>)
 8009080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908c:	f7f7 fac4 	bl	8000618 <__aeabi_dmul>
 8009090:	4680      	mov	r8, r0
 8009092:	4689      	mov	r9, r1
 8009094:	f035 050f 	bics.w	r5, r5, #15
 8009098:	d04d      	beq.n	8009136 <_strtod_l+0x516>
 800909a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800909e:	dd22      	ble.n	80090e6 <_strtod_l+0x4c6>
 80090a0:	2500      	movs	r5, #0
 80090a2:	46ab      	mov	fp, r5
 80090a4:	9509      	str	r5, [sp, #36]	; 0x24
 80090a6:	9505      	str	r5, [sp, #20]
 80090a8:	2322      	movs	r3, #34	; 0x22
 80090aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80091b4 <_strtod_l+0x594>
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	f04f 0800 	mov.w	r8, #0
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f43f aded 	beq.w	8008c96 <_strtod_l+0x76>
 80090bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090be:	4620      	mov	r0, r4
 80090c0:	f002 fe92 	bl	800bde8 <_Bfree>
 80090c4:	9905      	ldr	r1, [sp, #20]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f002 fe8e 	bl	800bde8 <_Bfree>
 80090cc:	4659      	mov	r1, fp
 80090ce:	4620      	mov	r0, r4
 80090d0:	f002 fe8a 	bl	800bde8 <_Bfree>
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	4620      	mov	r0, r4
 80090d8:	f002 fe86 	bl	800bde8 <_Bfree>
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	f002 fe82 	bl	800bde8 <_Bfree>
 80090e4:	e5d7      	b.n	8008c96 <_strtod_l+0x76>
 80090e6:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <_strtod_l+0x590>)
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	2300      	movs	r3, #0
 80090ec:	112d      	asrs	r5, r5, #4
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	469a      	mov	sl, r3
 80090f4:	2d01      	cmp	r5, #1
 80090f6:	dc21      	bgt.n	800913c <_strtod_l+0x51c>
 80090f8:	b10b      	cbz	r3, 80090fe <_strtod_l+0x4de>
 80090fa:	4680      	mov	r8, r0
 80090fc:	4689      	mov	r9, r1
 80090fe:	492c      	ldr	r1, [pc, #176]	; (80091b0 <_strtod_l+0x590>)
 8009100:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009104:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009108:	4642      	mov	r2, r8
 800910a:	464b      	mov	r3, r9
 800910c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009110:	f7f7 fa82 	bl	8000618 <__aeabi_dmul>
 8009114:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <_strtod_l+0x594>)
 8009116:	460a      	mov	r2, r1
 8009118:	400b      	ands	r3, r1
 800911a:	4927      	ldr	r1, [pc, #156]	; (80091b8 <_strtod_l+0x598>)
 800911c:	428b      	cmp	r3, r1
 800911e:	4680      	mov	r8, r0
 8009120:	d8be      	bhi.n	80090a0 <_strtod_l+0x480>
 8009122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009126:	428b      	cmp	r3, r1
 8009128:	bf86      	itte	hi
 800912a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80091bc <_strtod_l+0x59c>
 800912e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009132:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009136:	2300      	movs	r3, #0
 8009138:	9304      	str	r3, [sp, #16]
 800913a:	e07b      	b.n	8009234 <_strtod_l+0x614>
 800913c:	07ea      	lsls	r2, r5, #31
 800913e:	d505      	bpl.n	800914c <_strtod_l+0x52c>
 8009140:	9b04      	ldr	r3, [sp, #16]
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 fa67 	bl	8000618 <__aeabi_dmul>
 800914a:	2301      	movs	r3, #1
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	3208      	adds	r2, #8
 8009150:	f10a 0a01 	add.w	sl, sl, #1
 8009154:	106d      	asrs	r5, r5, #1
 8009156:	9204      	str	r2, [sp, #16]
 8009158:	e7cc      	b.n	80090f4 <_strtod_l+0x4d4>
 800915a:	d0ec      	beq.n	8009136 <_strtod_l+0x516>
 800915c:	426d      	negs	r5, r5
 800915e:	f015 020f 	ands.w	r2, r5, #15
 8009162:	d00a      	beq.n	800917a <_strtod_l+0x55a>
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <_strtod_l+0x58c>)
 8009166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 fb7b 	bl	800086c <__aeabi_ddiv>
 8009176:	4680      	mov	r8, r0
 8009178:	4689      	mov	r9, r1
 800917a:	112d      	asrs	r5, r5, #4
 800917c:	d0db      	beq.n	8009136 <_strtod_l+0x516>
 800917e:	2d1f      	cmp	r5, #31
 8009180:	dd1e      	ble.n	80091c0 <_strtod_l+0x5a0>
 8009182:	2500      	movs	r5, #0
 8009184:	46ab      	mov	fp, r5
 8009186:	9509      	str	r5, [sp, #36]	; 0x24
 8009188:	9505      	str	r5, [sp, #20]
 800918a:	2322      	movs	r3, #34	; 0x22
 800918c:	f04f 0800 	mov.w	r8, #0
 8009190:	f04f 0900 	mov.w	r9, #0
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	e78d      	b.n	80090b4 <_strtod_l+0x494>
 8009198:	0800d4ee 	.word	0x0800d4ee
 800919c:	0800d3a4 	.word	0x0800d3a4
 80091a0:	0800d4e6 	.word	0x0800d4e6
 80091a4:	0800d520 	.word	0x0800d520
 80091a8:	0800d7b0 	.word	0x0800d7b0
 80091ac:	0800d690 	.word	0x0800d690
 80091b0:	0800d668 	.word	0x0800d668
 80091b4:	7ff00000 	.word	0x7ff00000
 80091b8:	7ca00000 	.word	0x7ca00000
 80091bc:	7fefffff 	.word	0x7fefffff
 80091c0:	f015 0310 	ands.w	r3, r5, #16
 80091c4:	bf18      	it	ne
 80091c6:	236a      	movne	r3, #106	; 0x6a
 80091c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800956c <_strtod_l+0x94c>
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	2300      	movs	r3, #0
 80091d4:	07ea      	lsls	r2, r5, #31
 80091d6:	d504      	bpl.n	80091e2 <_strtod_l+0x5c2>
 80091d8:	e9da 2300 	ldrd	r2, r3, [sl]
 80091dc:	f7f7 fa1c 	bl	8000618 <__aeabi_dmul>
 80091e0:	2301      	movs	r3, #1
 80091e2:	106d      	asrs	r5, r5, #1
 80091e4:	f10a 0a08 	add.w	sl, sl, #8
 80091e8:	d1f4      	bne.n	80091d4 <_strtod_l+0x5b4>
 80091ea:	b10b      	cbz	r3, 80091f0 <_strtod_l+0x5d0>
 80091ec:	4680      	mov	r8, r0
 80091ee:	4689      	mov	r9, r1
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	b1bb      	cbz	r3, 8009224 <_strtod_l+0x604>
 80091f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80091f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	4649      	mov	r1, r9
 8009200:	dd10      	ble.n	8009224 <_strtod_l+0x604>
 8009202:	2b1f      	cmp	r3, #31
 8009204:	f340 811e 	ble.w	8009444 <_strtod_l+0x824>
 8009208:	2b34      	cmp	r3, #52	; 0x34
 800920a:	bfde      	ittt	le
 800920c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009214:	4093      	lslle	r3, r2
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	bfcc      	ite	gt
 800921c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009220:	ea03 0901 	andle.w	r9, r3, r1
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4640      	mov	r0, r8
 800922a:	4649      	mov	r1, r9
 800922c:	f7f7 fc5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009230:	2800      	cmp	r0, #0
 8009232:	d1a6      	bne.n	8009182 <_strtod_l+0x562>
 8009234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800923a:	4633      	mov	r3, r6
 800923c:	465a      	mov	r2, fp
 800923e:	4620      	mov	r0, r4
 8009240:	f002 fe3a 	bl	800beb8 <__s2b>
 8009244:	9009      	str	r0, [sp, #36]	; 0x24
 8009246:	2800      	cmp	r0, #0
 8009248:	f43f af2a 	beq.w	80090a0 <_strtod_l+0x480>
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	9b05      	ldr	r3, [sp, #20]
 8009250:	2a00      	cmp	r2, #0
 8009252:	eba3 0307 	sub.w	r3, r3, r7
 8009256:	bfa8      	it	ge
 8009258:	2300      	movge	r3, #0
 800925a:	930c      	str	r3, [sp, #48]	; 0x30
 800925c:	2500      	movs	r5, #0
 800925e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009262:	9312      	str	r3, [sp, #72]	; 0x48
 8009264:	46ab      	mov	fp, r5
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	4620      	mov	r0, r4
 800926a:	6859      	ldr	r1, [r3, #4]
 800926c:	f002 fd7c 	bl	800bd68 <_Balloc>
 8009270:	9005      	str	r0, [sp, #20]
 8009272:	2800      	cmp	r0, #0
 8009274:	f43f af18 	beq.w	80090a8 <_strtod_l+0x488>
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	3202      	adds	r2, #2
 800927e:	f103 010c 	add.w	r1, r3, #12
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	300c      	adds	r0, #12
 8009286:	f001 fa73 	bl	800a770 <memcpy>
 800928a:	ec49 8b10 	vmov	d0, r8, r9
 800928e:	aa18      	add	r2, sp, #96	; 0x60
 8009290:	a917      	add	r1, sp, #92	; 0x5c
 8009292:	4620      	mov	r0, r4
 8009294:	f003 f944 	bl	800c520 <__d2b>
 8009298:	ec49 8b18 	vmov	d8, r8, r9
 800929c:	9016      	str	r0, [sp, #88]	; 0x58
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f af02 	beq.w	80090a8 <_strtod_l+0x488>
 80092a4:	2101      	movs	r1, #1
 80092a6:	4620      	mov	r0, r4
 80092a8:	f002 fe9e 	bl	800bfe8 <__i2b>
 80092ac:	4683      	mov	fp, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f43f aefa 	beq.w	80090a8 <_strtod_l+0x488>
 80092b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	bfab      	itete	ge
 80092bc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80092be:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80092c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092c2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80092c6:	bfac      	ite	ge
 80092c8:	eb06 0a03 	addge.w	sl, r6, r3
 80092cc:	1b9f      	sublt	r7, r3, r6
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	1af6      	subs	r6, r6, r3
 80092d2:	4416      	add	r6, r2
 80092d4:	4ba0      	ldr	r3, [pc, #640]	; (8009558 <_strtod_l+0x938>)
 80092d6:	3e01      	subs	r6, #1
 80092d8:	429e      	cmp	r6, r3
 80092da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092de:	f280 80c4 	bge.w	800946a <_strtod_l+0x84a>
 80092e2:	1b9b      	subs	r3, r3, r6
 80092e4:	2b1f      	cmp	r3, #31
 80092e6:	eba2 0203 	sub.w	r2, r2, r3
 80092ea:	f04f 0101 	mov.w	r1, #1
 80092ee:	f300 80b0 	bgt.w	8009452 <_strtod_l+0x832>
 80092f2:	fa01 f303 	lsl.w	r3, r1, r3
 80092f6:	930e      	str	r3, [sp, #56]	; 0x38
 80092f8:	2300      	movs	r3, #0
 80092fa:	930d      	str	r3, [sp, #52]	; 0x34
 80092fc:	eb0a 0602 	add.w	r6, sl, r2
 8009300:	9b04      	ldr	r3, [sp, #16]
 8009302:	45b2      	cmp	sl, r6
 8009304:	4417      	add	r7, r2
 8009306:	441f      	add	r7, r3
 8009308:	4653      	mov	r3, sl
 800930a:	bfa8      	it	ge
 800930c:	4633      	movge	r3, r6
 800930e:	42bb      	cmp	r3, r7
 8009310:	bfa8      	it	ge
 8009312:	463b      	movge	r3, r7
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfc2      	ittt	gt
 8009318:	1af6      	subgt	r6, r6, r3
 800931a:	1aff      	subgt	r7, r7, r3
 800931c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd17      	ble.n	8009356 <_strtod_l+0x736>
 8009326:	4659      	mov	r1, fp
 8009328:	461a      	mov	r2, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f002 ff1c 	bl	800c168 <__pow5mult>
 8009330:	4683      	mov	fp, r0
 8009332:	2800      	cmp	r0, #0
 8009334:	f43f aeb8 	beq.w	80090a8 <_strtod_l+0x488>
 8009338:	4601      	mov	r1, r0
 800933a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800933c:	4620      	mov	r0, r4
 800933e:	f002 fe69 	bl	800c014 <__multiply>
 8009342:	900b      	str	r0, [sp, #44]	; 0x2c
 8009344:	2800      	cmp	r0, #0
 8009346:	f43f aeaf 	beq.w	80090a8 <_strtod_l+0x488>
 800934a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800934c:	4620      	mov	r0, r4
 800934e:	f002 fd4b 	bl	800bde8 <_Bfree>
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	9316      	str	r3, [sp, #88]	; 0x58
 8009356:	2e00      	cmp	r6, #0
 8009358:	f300 808c 	bgt.w	8009474 <_strtod_l+0x854>
 800935c:	9b08      	ldr	r3, [sp, #32]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd08      	ble.n	8009374 <_strtod_l+0x754>
 8009362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009364:	9905      	ldr	r1, [sp, #20]
 8009366:	4620      	mov	r0, r4
 8009368:	f002 fefe 	bl	800c168 <__pow5mult>
 800936c:	9005      	str	r0, [sp, #20]
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f ae9a 	beq.w	80090a8 <_strtod_l+0x488>
 8009374:	2f00      	cmp	r7, #0
 8009376:	dd08      	ble.n	800938a <_strtod_l+0x76a>
 8009378:	9905      	ldr	r1, [sp, #20]
 800937a:	463a      	mov	r2, r7
 800937c:	4620      	mov	r0, r4
 800937e:	f002 ff4d 	bl	800c21c <__lshift>
 8009382:	9005      	str	r0, [sp, #20]
 8009384:	2800      	cmp	r0, #0
 8009386:	f43f ae8f 	beq.w	80090a8 <_strtod_l+0x488>
 800938a:	f1ba 0f00 	cmp.w	sl, #0
 800938e:	dd08      	ble.n	80093a2 <_strtod_l+0x782>
 8009390:	4659      	mov	r1, fp
 8009392:	4652      	mov	r2, sl
 8009394:	4620      	mov	r0, r4
 8009396:	f002 ff41 	bl	800c21c <__lshift>
 800939a:	4683      	mov	fp, r0
 800939c:	2800      	cmp	r0, #0
 800939e:	f43f ae83 	beq.w	80090a8 <_strtod_l+0x488>
 80093a2:	9a05      	ldr	r2, [sp, #20]
 80093a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80093a6:	4620      	mov	r0, r4
 80093a8:	f002 ffc0 	bl	800c32c <__mdiff>
 80093ac:	4605      	mov	r5, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f43f ae7a 	beq.w	80090a8 <_strtod_l+0x488>
 80093b4:	68c3      	ldr	r3, [r0, #12]
 80093b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80093b8:	2300      	movs	r3, #0
 80093ba:	60c3      	str	r3, [r0, #12]
 80093bc:	4659      	mov	r1, fp
 80093be:	f002 ff99 	bl	800c2f4 <__mcmp>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	da60      	bge.n	8009488 <_strtod_l+0x868>
 80093c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c8:	ea53 0308 	orrs.w	r3, r3, r8
 80093cc:	f040 8084 	bne.w	80094d8 <_strtod_l+0x8b8>
 80093d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d17f      	bne.n	80094d8 <_strtod_l+0x8b8>
 80093d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093dc:	0d1b      	lsrs	r3, r3, #20
 80093de:	051b      	lsls	r3, r3, #20
 80093e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093e4:	d978      	bls.n	80094d8 <_strtod_l+0x8b8>
 80093e6:	696b      	ldr	r3, [r5, #20]
 80093e8:	b913      	cbnz	r3, 80093f0 <_strtod_l+0x7d0>
 80093ea:	692b      	ldr	r3, [r5, #16]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	dd73      	ble.n	80094d8 <_strtod_l+0x8b8>
 80093f0:	4629      	mov	r1, r5
 80093f2:	2201      	movs	r2, #1
 80093f4:	4620      	mov	r0, r4
 80093f6:	f002 ff11 	bl	800c21c <__lshift>
 80093fa:	4659      	mov	r1, fp
 80093fc:	4605      	mov	r5, r0
 80093fe:	f002 ff79 	bl	800c2f4 <__mcmp>
 8009402:	2800      	cmp	r0, #0
 8009404:	dd68      	ble.n	80094d8 <_strtod_l+0x8b8>
 8009406:	9904      	ldr	r1, [sp, #16]
 8009408:	4a54      	ldr	r2, [pc, #336]	; (800955c <_strtod_l+0x93c>)
 800940a:	464b      	mov	r3, r9
 800940c:	2900      	cmp	r1, #0
 800940e:	f000 8084 	beq.w	800951a <_strtod_l+0x8fa>
 8009412:	ea02 0109 	and.w	r1, r2, r9
 8009416:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800941a:	dc7e      	bgt.n	800951a <_strtod_l+0x8fa>
 800941c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009420:	f77f aeb3 	ble.w	800918a <_strtod_l+0x56a>
 8009424:	4b4e      	ldr	r3, [pc, #312]	; (8009560 <_strtod_l+0x940>)
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	2200      	movs	r2, #0
 800942c:	f7f7 f8f4 	bl	8000618 <__aeabi_dmul>
 8009430:	4b4a      	ldr	r3, [pc, #296]	; (800955c <_strtod_l+0x93c>)
 8009432:	400b      	ands	r3, r1
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	2b00      	cmp	r3, #0
 800943a:	f47f ae3f 	bne.w	80090bc <_strtod_l+0x49c>
 800943e:	2322      	movs	r3, #34	; 0x22
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	e63b      	b.n	80090bc <_strtod_l+0x49c>
 8009444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009448:	fa02 f303 	lsl.w	r3, r2, r3
 800944c:	ea03 0808 	and.w	r8, r3, r8
 8009450:	e6e8      	b.n	8009224 <_strtod_l+0x604>
 8009452:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009456:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800945a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800945e:	36e2      	adds	r6, #226	; 0xe2
 8009460:	fa01 f306 	lsl.w	r3, r1, r6
 8009464:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009468:	e748      	b.n	80092fc <_strtod_l+0x6dc>
 800946a:	2100      	movs	r1, #0
 800946c:	2301      	movs	r3, #1
 800946e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009472:	e743      	b.n	80092fc <_strtod_l+0x6dc>
 8009474:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009476:	4632      	mov	r2, r6
 8009478:	4620      	mov	r0, r4
 800947a:	f002 fecf 	bl	800c21c <__lshift>
 800947e:	9016      	str	r0, [sp, #88]	; 0x58
 8009480:	2800      	cmp	r0, #0
 8009482:	f47f af6b 	bne.w	800935c <_strtod_l+0x73c>
 8009486:	e60f      	b.n	80090a8 <_strtod_l+0x488>
 8009488:	46ca      	mov	sl, r9
 800948a:	d171      	bne.n	8009570 <_strtod_l+0x950>
 800948c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800948e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009492:	b352      	cbz	r2, 80094ea <_strtod_l+0x8ca>
 8009494:	4a33      	ldr	r2, [pc, #204]	; (8009564 <_strtod_l+0x944>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d12a      	bne.n	80094f0 <_strtod_l+0x8d0>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	4641      	mov	r1, r8
 800949e:	b1fb      	cbz	r3, 80094e0 <_strtod_l+0x8c0>
 80094a0:	4b2e      	ldr	r3, [pc, #184]	; (800955c <_strtod_l+0x93c>)
 80094a2:	ea09 0303 	and.w	r3, r9, r3
 80094a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ae:	d81a      	bhi.n	80094e6 <_strtod_l+0x8c6>
 80094b0:	0d1b      	lsrs	r3, r3, #20
 80094b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	4299      	cmp	r1, r3
 80094bc:	d118      	bne.n	80094f0 <_strtod_l+0x8d0>
 80094be:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <_strtod_l+0x948>)
 80094c0:	459a      	cmp	sl, r3
 80094c2:	d102      	bne.n	80094ca <_strtod_l+0x8aa>
 80094c4:	3101      	adds	r1, #1
 80094c6:	f43f adef 	beq.w	80090a8 <_strtod_l+0x488>
 80094ca:	4b24      	ldr	r3, [pc, #144]	; (800955c <_strtod_l+0x93c>)
 80094cc:	ea0a 0303 	and.w	r3, sl, r3
 80094d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	9b04      	ldr	r3, [sp, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1a2      	bne.n	8009424 <_strtod_l+0x804>
 80094de:	e5ed      	b.n	80090bc <_strtod_l+0x49c>
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094e4:	e7e9      	b.n	80094ba <_strtod_l+0x89a>
 80094e6:	4613      	mov	r3, r2
 80094e8:	e7e7      	b.n	80094ba <_strtod_l+0x89a>
 80094ea:	ea53 0308 	orrs.w	r3, r3, r8
 80094ee:	d08a      	beq.n	8009406 <_strtod_l+0x7e6>
 80094f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094f2:	b1e3      	cbz	r3, 800952e <_strtod_l+0x90e>
 80094f4:	ea13 0f0a 	tst.w	r3, sl
 80094f8:	d0ee      	beq.n	80094d8 <_strtod_l+0x8b8>
 80094fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094fc:	9a04      	ldr	r2, [sp, #16]
 80094fe:	4640      	mov	r0, r8
 8009500:	4649      	mov	r1, r9
 8009502:	b1c3      	cbz	r3, 8009536 <_strtod_l+0x916>
 8009504:	f7ff fb6e 	bl	8008be4 <sulp>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	ec51 0b18 	vmov	r0, r1, d8
 8009510:	f7f6 fecc 	bl	80002ac <__adddf3>
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	e7de      	b.n	80094d8 <_strtod_l+0x8b8>
 800951a:	4013      	ands	r3, r2
 800951c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009520:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009524:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009528:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800952c:	e7d4      	b.n	80094d8 <_strtod_l+0x8b8>
 800952e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009530:	ea13 0f08 	tst.w	r3, r8
 8009534:	e7e0      	b.n	80094f8 <_strtod_l+0x8d8>
 8009536:	f7ff fb55 	bl	8008be4 <sulp>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	ec51 0b18 	vmov	r0, r1, d8
 8009542:	f7f6 feb1 	bl	80002a8 <__aeabi_dsub>
 8009546:	2200      	movs	r2, #0
 8009548:	2300      	movs	r3, #0
 800954a:	4680      	mov	r8, r0
 800954c:	4689      	mov	r9, r1
 800954e:	f7f7 facb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009552:	2800      	cmp	r0, #0
 8009554:	d0c0      	beq.n	80094d8 <_strtod_l+0x8b8>
 8009556:	e618      	b.n	800918a <_strtod_l+0x56a>
 8009558:	fffffc02 	.word	0xfffffc02
 800955c:	7ff00000 	.word	0x7ff00000
 8009560:	39500000 	.word	0x39500000
 8009564:	000fffff 	.word	0x000fffff
 8009568:	7fefffff 	.word	0x7fefffff
 800956c:	0800d3b8 	.word	0x0800d3b8
 8009570:	4659      	mov	r1, fp
 8009572:	4628      	mov	r0, r5
 8009574:	f003 f82e 	bl	800c5d4 <__ratio>
 8009578:	ec57 6b10 	vmov	r6, r7, d0
 800957c:	ee10 0a10 	vmov	r0, s0
 8009580:	2200      	movs	r2, #0
 8009582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009586:	4639      	mov	r1, r7
 8009588:	f7f7 fac2 	bl	8000b10 <__aeabi_dcmple>
 800958c:	2800      	cmp	r0, #0
 800958e:	d071      	beq.n	8009674 <_strtod_l+0xa54>
 8009590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d17c      	bne.n	8009690 <_strtod_l+0xa70>
 8009596:	f1b8 0f00 	cmp.w	r8, #0
 800959a:	d15a      	bne.n	8009652 <_strtod_l+0xa32>
 800959c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d15d      	bne.n	8009660 <_strtod_l+0xa40>
 80095a4:	4b90      	ldr	r3, [pc, #576]	; (80097e8 <_strtod_l+0xbc8>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f7f7 faa6 	bl	8000afc <__aeabi_dcmplt>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d15c      	bne.n	800966e <_strtod_l+0xa4e>
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	4b8c      	ldr	r3, [pc, #560]	; (80097ec <_strtod_l+0xbcc>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	f7f7 f82c 	bl	8000618 <__aeabi_dmul>
 80095c0:	4606      	mov	r6, r0
 80095c2:	460f      	mov	r7, r1
 80095c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80095c8:	9606      	str	r6, [sp, #24]
 80095ca:	9307      	str	r3, [sp, #28]
 80095cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095d4:	4b86      	ldr	r3, [pc, #536]	; (80097f0 <_strtod_l+0xbd0>)
 80095d6:	ea0a 0303 	and.w	r3, sl, r3
 80095da:	930d      	str	r3, [sp, #52]	; 0x34
 80095dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095de:	4b85      	ldr	r3, [pc, #532]	; (80097f4 <_strtod_l+0xbd4>)
 80095e0:	429a      	cmp	r2, r3
 80095e2:	f040 8090 	bne.w	8009706 <_strtod_l+0xae6>
 80095e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80095ea:	ec49 8b10 	vmov	d0, r8, r9
 80095ee:	f002 ff27 	bl	800c440 <__ulp>
 80095f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095f6:	ec51 0b10 	vmov	r0, r1, d0
 80095fa:	f7f7 f80d 	bl	8000618 <__aeabi_dmul>
 80095fe:	4642      	mov	r2, r8
 8009600:	464b      	mov	r3, r9
 8009602:	f7f6 fe53 	bl	80002ac <__adddf3>
 8009606:	460b      	mov	r3, r1
 8009608:	4979      	ldr	r1, [pc, #484]	; (80097f0 <_strtod_l+0xbd0>)
 800960a:	4a7b      	ldr	r2, [pc, #492]	; (80097f8 <_strtod_l+0xbd8>)
 800960c:	4019      	ands	r1, r3
 800960e:	4291      	cmp	r1, r2
 8009610:	4680      	mov	r8, r0
 8009612:	d944      	bls.n	800969e <_strtod_l+0xa7e>
 8009614:	ee18 2a90 	vmov	r2, s17
 8009618:	4b78      	ldr	r3, [pc, #480]	; (80097fc <_strtod_l+0xbdc>)
 800961a:	429a      	cmp	r2, r3
 800961c:	d104      	bne.n	8009628 <_strtod_l+0xa08>
 800961e:	ee18 3a10 	vmov	r3, s16
 8009622:	3301      	adds	r3, #1
 8009624:	f43f ad40 	beq.w	80090a8 <_strtod_l+0x488>
 8009628:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80097fc <_strtod_l+0xbdc>
 800962c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009630:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009632:	4620      	mov	r0, r4
 8009634:	f002 fbd8 	bl	800bde8 <_Bfree>
 8009638:	9905      	ldr	r1, [sp, #20]
 800963a:	4620      	mov	r0, r4
 800963c:	f002 fbd4 	bl	800bde8 <_Bfree>
 8009640:	4659      	mov	r1, fp
 8009642:	4620      	mov	r0, r4
 8009644:	f002 fbd0 	bl	800bde8 <_Bfree>
 8009648:	4629      	mov	r1, r5
 800964a:	4620      	mov	r0, r4
 800964c:	f002 fbcc 	bl	800bde8 <_Bfree>
 8009650:	e609      	b.n	8009266 <_strtod_l+0x646>
 8009652:	f1b8 0f01 	cmp.w	r8, #1
 8009656:	d103      	bne.n	8009660 <_strtod_l+0xa40>
 8009658:	f1b9 0f00 	cmp.w	r9, #0
 800965c:	f43f ad95 	beq.w	800918a <_strtod_l+0x56a>
 8009660:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80097b8 <_strtod_l+0xb98>
 8009664:	4f60      	ldr	r7, [pc, #384]	; (80097e8 <_strtod_l+0xbc8>)
 8009666:	ed8d 7b06 	vstr	d7, [sp, #24]
 800966a:	2600      	movs	r6, #0
 800966c:	e7ae      	b.n	80095cc <_strtod_l+0x9ac>
 800966e:	4f5f      	ldr	r7, [pc, #380]	; (80097ec <_strtod_l+0xbcc>)
 8009670:	2600      	movs	r6, #0
 8009672:	e7a7      	b.n	80095c4 <_strtod_l+0x9a4>
 8009674:	4b5d      	ldr	r3, [pc, #372]	; (80097ec <_strtod_l+0xbcc>)
 8009676:	4630      	mov	r0, r6
 8009678:	4639      	mov	r1, r7
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 ffcc 	bl	8000618 <__aeabi_dmul>
 8009680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d09c      	beq.n	80095c4 <_strtod_l+0x9a4>
 800968a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800968e:	e79d      	b.n	80095cc <_strtod_l+0x9ac>
 8009690:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80097c0 <_strtod_l+0xba0>
 8009694:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009698:	ec57 6b17 	vmov	r6, r7, d7
 800969c:	e796      	b.n	80095cc <_strtod_l+0x9ac>
 800969e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	46ca      	mov	sl, r9
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1c2      	bne.n	8009630 <_strtod_l+0xa10>
 80096aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096b0:	0d1b      	lsrs	r3, r3, #20
 80096b2:	051b      	lsls	r3, r3, #20
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d1bb      	bne.n	8009630 <_strtod_l+0xa10>
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fb0c 	bl	8000cd8 <__aeabi_d2lz>
 80096c0:	f7f6 ff7c 	bl	80005bc <__aeabi_l2d>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f6 fdec 	bl	80002a8 <__aeabi_dsub>
 80096d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096d6:	ea43 0308 	orr.w	r3, r3, r8
 80096da:	4313      	orrs	r3, r2
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	d054      	beq.n	800978c <_strtod_l+0xb6c>
 80096e2:	a339      	add	r3, pc, #228	; (adr r3, 80097c8 <_strtod_l+0xba8>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f7 fa08 	bl	8000afc <__aeabi_dcmplt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f47f ace5 	bne.w	80090bc <_strtod_l+0x49c>
 80096f2:	a337      	add	r3, pc, #220	; (adr r3, 80097d0 <_strtod_l+0xbb0>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 fa1c 	bl	8000b38 <__aeabi_dcmpgt>
 8009700:	2800      	cmp	r0, #0
 8009702:	d095      	beq.n	8009630 <_strtod_l+0xa10>
 8009704:	e4da      	b.n	80090bc <_strtod_l+0x49c>
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	b333      	cbz	r3, 8009758 <_strtod_l+0xb38>
 800970a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800970c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009710:	d822      	bhi.n	8009758 <_strtod_l+0xb38>
 8009712:	a331      	add	r3, pc, #196	; (adr r3, 80097d8 <_strtod_l+0xbb8>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	f7f7 f9f8 	bl	8000b10 <__aeabi_dcmple>
 8009720:	b1a0      	cbz	r0, 800974c <_strtod_l+0xb2c>
 8009722:	4639      	mov	r1, r7
 8009724:	4630      	mov	r0, r6
 8009726:	f7f7 fa4f 	bl	8000bc8 <__aeabi_d2uiz>
 800972a:	2801      	cmp	r0, #1
 800972c:	bf38      	it	cc
 800972e:	2001      	movcc	r0, #1
 8009730:	f7f6 fef8 	bl	8000524 <__aeabi_ui2d>
 8009734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009736:	4606      	mov	r6, r0
 8009738:	460f      	mov	r7, r1
 800973a:	bb23      	cbnz	r3, 8009786 <_strtod_l+0xb66>
 800973c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009740:	9010      	str	r0, [sp, #64]	; 0x40
 8009742:	9311      	str	r3, [sp, #68]	; 0x44
 8009744:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009748:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800974c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800974e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009750:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009754:	1a9b      	subs	r3, r3, r2
 8009756:	930f      	str	r3, [sp, #60]	; 0x3c
 8009758:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800975c:	eeb0 0a48 	vmov.f32	s0, s16
 8009760:	eef0 0a68 	vmov.f32	s1, s17
 8009764:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009768:	f002 fe6a 	bl	800c440 <__ulp>
 800976c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009770:	ec53 2b10 	vmov	r2, r3, d0
 8009774:	f7f6 ff50 	bl	8000618 <__aeabi_dmul>
 8009778:	ec53 2b18 	vmov	r2, r3, d8
 800977c:	f7f6 fd96 	bl	80002ac <__adddf3>
 8009780:	4680      	mov	r8, r0
 8009782:	4689      	mov	r9, r1
 8009784:	e78d      	b.n	80096a2 <_strtod_l+0xa82>
 8009786:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800978a:	e7db      	b.n	8009744 <_strtod_l+0xb24>
 800978c:	a314      	add	r3, pc, #80	; (adr r3, 80097e0 <_strtod_l+0xbc0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f7 f9b3 	bl	8000afc <__aeabi_dcmplt>
 8009796:	e7b3      	b.n	8009700 <_strtod_l+0xae0>
 8009798:	2300      	movs	r3, #0
 800979a:	930a      	str	r3, [sp, #40]	; 0x28
 800979c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800979e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	f7ff ba7c 	b.w	8008c9e <_strtod_l+0x7e>
 80097a6:	2a65      	cmp	r2, #101	; 0x65
 80097a8:	f43f ab75 	beq.w	8008e96 <_strtod_l+0x276>
 80097ac:	2a45      	cmp	r2, #69	; 0x45
 80097ae:	f43f ab72 	beq.w	8008e96 <_strtod_l+0x276>
 80097b2:	2301      	movs	r3, #1
 80097b4:	f7ff bbaa 	b.w	8008f0c <_strtod_l+0x2ec>
 80097b8:	00000000 	.word	0x00000000
 80097bc:	bff00000 	.word	0xbff00000
 80097c0:	00000000 	.word	0x00000000
 80097c4:	3ff00000 	.word	0x3ff00000
 80097c8:	94a03595 	.word	0x94a03595
 80097cc:	3fdfffff 	.word	0x3fdfffff
 80097d0:	35afe535 	.word	0x35afe535
 80097d4:	3fe00000 	.word	0x3fe00000
 80097d8:	ffc00000 	.word	0xffc00000
 80097dc:	41dfffff 	.word	0x41dfffff
 80097e0:	94a03595 	.word	0x94a03595
 80097e4:	3fcfffff 	.word	0x3fcfffff
 80097e8:	3ff00000 	.word	0x3ff00000
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	7ff00000 	.word	0x7ff00000
 80097f4:	7fe00000 	.word	0x7fe00000
 80097f8:	7c9fffff 	.word	0x7c9fffff
 80097fc:	7fefffff 	.word	0x7fefffff

08009800 <strtod>:
 8009800:	460a      	mov	r2, r1
 8009802:	4601      	mov	r1, r0
 8009804:	4802      	ldr	r0, [pc, #8]	; (8009810 <strtod+0x10>)
 8009806:	4b03      	ldr	r3, [pc, #12]	; (8009814 <strtod+0x14>)
 8009808:	6800      	ldr	r0, [r0, #0]
 800980a:	f7ff ba09 	b.w	8008c20 <_strtod_l>
 800980e:	bf00      	nop
 8009810:	200001f8 	.word	0x200001f8
 8009814:	20000040 	.word	0x20000040

08009818 <_strtol_l.constprop.0>:
 8009818:	2b01      	cmp	r3, #1
 800981a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981e:	d001      	beq.n	8009824 <_strtol_l.constprop.0+0xc>
 8009820:	2b24      	cmp	r3, #36	; 0x24
 8009822:	d906      	bls.n	8009832 <_strtol_l.constprop.0+0x1a>
 8009824:	f000 ff78 	bl	800a718 <__errno>
 8009828:	2316      	movs	r3, #22
 800982a:	6003      	str	r3, [r0, #0]
 800982c:	2000      	movs	r0, #0
 800982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009832:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009918 <_strtol_l.constprop.0+0x100>
 8009836:	460d      	mov	r5, r1
 8009838:	462e      	mov	r6, r5
 800983a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800983e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009842:	f017 0708 	ands.w	r7, r7, #8
 8009846:	d1f7      	bne.n	8009838 <_strtol_l.constprop.0+0x20>
 8009848:	2c2d      	cmp	r4, #45	; 0x2d
 800984a:	d132      	bne.n	80098b2 <_strtol_l.constprop.0+0x9a>
 800984c:	782c      	ldrb	r4, [r5, #0]
 800984e:	2701      	movs	r7, #1
 8009850:	1cb5      	adds	r5, r6, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d05b      	beq.n	800990e <_strtol_l.constprop.0+0xf6>
 8009856:	2b10      	cmp	r3, #16
 8009858:	d109      	bne.n	800986e <_strtol_l.constprop.0+0x56>
 800985a:	2c30      	cmp	r4, #48	; 0x30
 800985c:	d107      	bne.n	800986e <_strtol_l.constprop.0+0x56>
 800985e:	782c      	ldrb	r4, [r5, #0]
 8009860:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009864:	2c58      	cmp	r4, #88	; 0x58
 8009866:	d14d      	bne.n	8009904 <_strtol_l.constprop.0+0xec>
 8009868:	786c      	ldrb	r4, [r5, #1]
 800986a:	2310      	movs	r3, #16
 800986c:	3502      	adds	r5, #2
 800986e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009872:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009876:	f04f 0e00 	mov.w	lr, #0
 800987a:	fbb8 f9f3 	udiv	r9, r8, r3
 800987e:	4676      	mov	r6, lr
 8009880:	fb03 8a19 	mls	sl, r3, r9, r8
 8009884:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009888:	f1bc 0f09 	cmp.w	ip, #9
 800988c:	d816      	bhi.n	80098bc <_strtol_l.constprop.0+0xa4>
 800988e:	4664      	mov	r4, ip
 8009890:	42a3      	cmp	r3, r4
 8009892:	dd24      	ble.n	80098de <_strtol_l.constprop.0+0xc6>
 8009894:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009898:	d008      	beq.n	80098ac <_strtol_l.constprop.0+0x94>
 800989a:	45b1      	cmp	r9, r6
 800989c:	d31c      	bcc.n	80098d8 <_strtol_l.constprop.0+0xc0>
 800989e:	d101      	bne.n	80098a4 <_strtol_l.constprop.0+0x8c>
 80098a0:	45a2      	cmp	sl, r4
 80098a2:	db19      	blt.n	80098d8 <_strtol_l.constprop.0+0xc0>
 80098a4:	fb06 4603 	mla	r6, r6, r3, r4
 80098a8:	f04f 0e01 	mov.w	lr, #1
 80098ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098b0:	e7e8      	b.n	8009884 <_strtol_l.constprop.0+0x6c>
 80098b2:	2c2b      	cmp	r4, #43	; 0x2b
 80098b4:	bf04      	itt	eq
 80098b6:	782c      	ldrbeq	r4, [r5, #0]
 80098b8:	1cb5      	addeq	r5, r6, #2
 80098ba:	e7ca      	b.n	8009852 <_strtol_l.constprop.0+0x3a>
 80098bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098c0:	f1bc 0f19 	cmp.w	ip, #25
 80098c4:	d801      	bhi.n	80098ca <_strtol_l.constprop.0+0xb2>
 80098c6:	3c37      	subs	r4, #55	; 0x37
 80098c8:	e7e2      	b.n	8009890 <_strtol_l.constprop.0+0x78>
 80098ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098ce:	f1bc 0f19 	cmp.w	ip, #25
 80098d2:	d804      	bhi.n	80098de <_strtol_l.constprop.0+0xc6>
 80098d4:	3c57      	subs	r4, #87	; 0x57
 80098d6:	e7db      	b.n	8009890 <_strtol_l.constprop.0+0x78>
 80098d8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80098dc:	e7e6      	b.n	80098ac <_strtol_l.constprop.0+0x94>
 80098de:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80098e2:	d105      	bne.n	80098f0 <_strtol_l.constprop.0+0xd8>
 80098e4:	2322      	movs	r3, #34	; 0x22
 80098e6:	6003      	str	r3, [r0, #0]
 80098e8:	4646      	mov	r6, r8
 80098ea:	b942      	cbnz	r2, 80098fe <_strtol_l.constprop.0+0xe6>
 80098ec:	4630      	mov	r0, r6
 80098ee:	e79e      	b.n	800982e <_strtol_l.constprop.0+0x16>
 80098f0:	b107      	cbz	r7, 80098f4 <_strtol_l.constprop.0+0xdc>
 80098f2:	4276      	negs	r6, r6
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	d0f9      	beq.n	80098ec <_strtol_l.constprop.0+0xd4>
 80098f8:	f1be 0f00 	cmp.w	lr, #0
 80098fc:	d000      	beq.n	8009900 <_strtol_l.constprop.0+0xe8>
 80098fe:	1e69      	subs	r1, r5, #1
 8009900:	6011      	str	r1, [r2, #0]
 8009902:	e7f3      	b.n	80098ec <_strtol_l.constprop.0+0xd4>
 8009904:	2430      	movs	r4, #48	; 0x30
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1b1      	bne.n	800986e <_strtol_l.constprop.0+0x56>
 800990a:	2308      	movs	r3, #8
 800990c:	e7af      	b.n	800986e <_strtol_l.constprop.0+0x56>
 800990e:	2c30      	cmp	r4, #48	; 0x30
 8009910:	d0a5      	beq.n	800985e <_strtol_l.constprop.0+0x46>
 8009912:	230a      	movs	r3, #10
 8009914:	e7ab      	b.n	800986e <_strtol_l.constprop.0+0x56>
 8009916:	bf00      	nop
 8009918:	0800d3e1 	.word	0x0800d3e1

0800991c <strtol>:
 800991c:	4613      	mov	r3, r2
 800991e:	460a      	mov	r2, r1
 8009920:	4601      	mov	r1, r0
 8009922:	4802      	ldr	r0, [pc, #8]	; (800992c <strtol+0x10>)
 8009924:	6800      	ldr	r0, [r0, #0]
 8009926:	f7ff bf77 	b.w	8009818 <_strtol_l.constprop.0>
 800992a:	bf00      	nop
 800992c:	200001f8 	.word	0x200001f8

08009930 <__cvt>:
 8009930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	ec55 4b10 	vmov	r4, r5, d0
 8009938:	2d00      	cmp	r5, #0
 800993a:	460e      	mov	r6, r1
 800993c:	4619      	mov	r1, r3
 800993e:	462b      	mov	r3, r5
 8009940:	bfbb      	ittet	lt
 8009942:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009946:	461d      	movlt	r5, r3
 8009948:	2300      	movge	r3, #0
 800994a:	232d      	movlt	r3, #45	; 0x2d
 800994c:	700b      	strb	r3, [r1, #0]
 800994e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009950:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009954:	4691      	mov	r9, r2
 8009956:	f023 0820 	bic.w	r8, r3, #32
 800995a:	bfbc      	itt	lt
 800995c:	4622      	movlt	r2, r4
 800995e:	4614      	movlt	r4, r2
 8009960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009964:	d005      	beq.n	8009972 <__cvt+0x42>
 8009966:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800996a:	d100      	bne.n	800996e <__cvt+0x3e>
 800996c:	3601      	adds	r6, #1
 800996e:	2102      	movs	r1, #2
 8009970:	e000      	b.n	8009974 <__cvt+0x44>
 8009972:	2103      	movs	r1, #3
 8009974:	ab03      	add	r3, sp, #12
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	ab02      	add	r3, sp, #8
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	ec45 4b10 	vmov	d0, r4, r5
 8009980:	4653      	mov	r3, sl
 8009982:	4632      	mov	r2, r6
 8009984:	f000 ff94 	bl	800a8b0 <_dtoa_r>
 8009988:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800998c:	4607      	mov	r7, r0
 800998e:	d102      	bne.n	8009996 <__cvt+0x66>
 8009990:	f019 0f01 	tst.w	r9, #1
 8009994:	d022      	beq.n	80099dc <__cvt+0xac>
 8009996:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800999a:	eb07 0906 	add.w	r9, r7, r6
 800999e:	d110      	bne.n	80099c2 <__cvt+0x92>
 80099a0:	783b      	ldrb	r3, [r7, #0]
 80099a2:	2b30      	cmp	r3, #48	; 0x30
 80099a4:	d10a      	bne.n	80099bc <__cvt+0x8c>
 80099a6:	2200      	movs	r2, #0
 80099a8:	2300      	movs	r3, #0
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f7 f89b 	bl	8000ae8 <__aeabi_dcmpeq>
 80099b2:	b918      	cbnz	r0, 80099bc <__cvt+0x8c>
 80099b4:	f1c6 0601 	rsb	r6, r6, #1
 80099b8:	f8ca 6000 	str.w	r6, [sl]
 80099bc:	f8da 3000 	ldr.w	r3, [sl]
 80099c0:	4499      	add	r9, r3
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f7 f88d 	bl	8000ae8 <__aeabi_dcmpeq>
 80099ce:	b108      	cbz	r0, 80099d4 <__cvt+0xa4>
 80099d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80099d4:	2230      	movs	r2, #48	; 0x30
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	454b      	cmp	r3, r9
 80099da:	d307      	bcc.n	80099ec <__cvt+0xbc>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099e0:	1bdb      	subs	r3, r3, r7
 80099e2:	4638      	mov	r0, r7
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	b004      	add	sp, #16
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	1c59      	adds	r1, r3, #1
 80099ee:	9103      	str	r1, [sp, #12]
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	e7f0      	b.n	80099d6 <__cvt+0xa6>

080099f4 <__exponent>:
 80099f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f6:	4603      	mov	r3, r0
 80099f8:	2900      	cmp	r1, #0
 80099fa:	bfb8      	it	lt
 80099fc:	4249      	neglt	r1, r1
 80099fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009a02:	bfb4      	ite	lt
 8009a04:	222d      	movlt	r2, #45	; 0x2d
 8009a06:	222b      	movge	r2, #43	; 0x2b
 8009a08:	2909      	cmp	r1, #9
 8009a0a:	7042      	strb	r2, [r0, #1]
 8009a0c:	dd2a      	ble.n	8009a64 <__exponent+0x70>
 8009a0e:	f10d 0207 	add.w	r2, sp, #7
 8009a12:	4617      	mov	r7, r2
 8009a14:	260a      	movs	r6, #10
 8009a16:	4694      	mov	ip, r2
 8009a18:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a1c:	fb06 1415 	mls	r4, r6, r5, r1
 8009a20:	3430      	adds	r4, #48	; 0x30
 8009a22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009a26:	460c      	mov	r4, r1
 8009a28:	2c63      	cmp	r4, #99	; 0x63
 8009a2a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009a2e:	4629      	mov	r1, r5
 8009a30:	dcf1      	bgt.n	8009a16 <__exponent+0x22>
 8009a32:	3130      	adds	r1, #48	; 0x30
 8009a34:	f1ac 0402 	sub.w	r4, ip, #2
 8009a38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a3c:	1c41      	adds	r1, r0, #1
 8009a3e:	4622      	mov	r2, r4
 8009a40:	42ba      	cmp	r2, r7
 8009a42:	d30a      	bcc.n	8009a5a <__exponent+0x66>
 8009a44:	f10d 0209 	add.w	r2, sp, #9
 8009a48:	eba2 020c 	sub.w	r2, r2, ip
 8009a4c:	42bc      	cmp	r4, r7
 8009a4e:	bf88      	it	hi
 8009a50:	2200      	movhi	r2, #0
 8009a52:	4413      	add	r3, r2
 8009a54:	1a18      	subs	r0, r3, r0
 8009a56:	b003      	add	sp, #12
 8009a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009a5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009a62:	e7ed      	b.n	8009a40 <__exponent+0x4c>
 8009a64:	2330      	movs	r3, #48	; 0x30
 8009a66:	3130      	adds	r1, #48	; 0x30
 8009a68:	7083      	strb	r3, [r0, #2]
 8009a6a:	70c1      	strb	r1, [r0, #3]
 8009a6c:	1d03      	adds	r3, r0, #4
 8009a6e:	e7f1      	b.n	8009a54 <__exponent+0x60>

08009a70 <_printf_float>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	ed2d 8b02 	vpush	{d8}
 8009a78:	b08d      	sub	sp, #52	; 0x34
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a80:	4616      	mov	r6, r2
 8009a82:	461f      	mov	r7, r3
 8009a84:	4605      	mov	r5, r0
 8009a86:	f000 fdfd 	bl	800a684 <_localeconv_r>
 8009a8a:	f8d0 a000 	ldr.w	sl, [r0]
 8009a8e:	4650      	mov	r0, sl
 8009a90:	f7f6 fbfe 	bl	8000290 <strlen>
 8009a94:	2300      	movs	r3, #0
 8009a96:	930a      	str	r3, [sp, #40]	; 0x28
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009aa4:	3307      	adds	r3, #7
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	f103 0208 	add.w	r2, r3, #8
 8009aae:	f8c8 2000 	str.w	r2, [r8]
 8009ab2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ac0:	ee08 0a10 	vmov	s16, r0
 8009ac4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009acc:	4b9e      	ldr	r3, [pc, #632]	; (8009d48 <_printf_float+0x2d8>)
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ad2:	f7f7 f83b 	bl	8000b4c <__aeabi_dcmpun>
 8009ad6:	bb88      	cbnz	r0, 8009b3c <_printf_float+0xcc>
 8009ad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009adc:	4b9a      	ldr	r3, [pc, #616]	; (8009d48 <_printf_float+0x2d8>)
 8009ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ae2:	f7f7 f815 	bl	8000b10 <__aeabi_dcmple>
 8009ae6:	bb48      	cbnz	r0, 8009b3c <_printf_float+0xcc>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2300      	movs	r3, #0
 8009aec:	4640      	mov	r0, r8
 8009aee:	4649      	mov	r1, r9
 8009af0:	f7f7 f804 	bl	8000afc <__aeabi_dcmplt>
 8009af4:	b110      	cbz	r0, 8009afc <_printf_float+0x8c>
 8009af6:	232d      	movs	r3, #45	; 0x2d
 8009af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009afc:	4a93      	ldr	r2, [pc, #588]	; (8009d4c <_printf_float+0x2dc>)
 8009afe:	4b94      	ldr	r3, [pc, #592]	; (8009d50 <_printf_float+0x2e0>)
 8009b00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b04:	bf94      	ite	ls
 8009b06:	4690      	movls	r8, r2
 8009b08:	4698      	movhi	r8, r3
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	6123      	str	r3, [r4, #16]
 8009b0e:	9b05      	ldr	r3, [sp, #20]
 8009b10:	f023 0304 	bic.w	r3, r3, #4
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	f04f 0900 	mov.w	r9, #0
 8009b1a:	9700      	str	r7, [sp, #0]
 8009b1c:	4633      	mov	r3, r6
 8009b1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b20:	4621      	mov	r1, r4
 8009b22:	4628      	mov	r0, r5
 8009b24:	f000 f9da 	bl	8009edc <_printf_common>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	f040 8090 	bne.w	8009c4e <_printf_float+0x1de>
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b32:	b00d      	add	sp, #52	; 0x34
 8009b34:	ecbd 8b02 	vpop	{d8}
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	4642      	mov	r2, r8
 8009b3e:	464b      	mov	r3, r9
 8009b40:	4640      	mov	r0, r8
 8009b42:	4649      	mov	r1, r9
 8009b44:	f7f7 f802 	bl	8000b4c <__aeabi_dcmpun>
 8009b48:	b140      	cbz	r0, 8009b5c <_printf_float+0xec>
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfbc      	itt	lt
 8009b50:	232d      	movlt	r3, #45	; 0x2d
 8009b52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b56:	4a7f      	ldr	r2, [pc, #508]	; (8009d54 <_printf_float+0x2e4>)
 8009b58:	4b7f      	ldr	r3, [pc, #508]	; (8009d58 <_printf_float+0x2e8>)
 8009b5a:	e7d1      	b.n	8009b00 <_printf_float+0x90>
 8009b5c:	6863      	ldr	r3, [r4, #4]
 8009b5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b62:	9206      	str	r2, [sp, #24]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	d13f      	bne.n	8009be8 <_printf_float+0x178>
 8009b68:	2306      	movs	r3, #6
 8009b6a:	6063      	str	r3, [r4, #4]
 8009b6c:	9b05      	ldr	r3, [sp, #20]
 8009b6e:	6861      	ldr	r1, [r4, #4]
 8009b70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b74:	2300      	movs	r3, #0
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	ab0a      	add	r3, sp, #40	; 0x28
 8009b7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b7e:	ab09      	add	r3, sp, #36	; 0x24
 8009b80:	ec49 8b10 	vmov	d0, r8, r9
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	6022      	str	r2, [r4, #0]
 8009b88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7ff fecf 	bl	8009930 <__cvt>
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b96:	2b47      	cmp	r3, #71	; 0x47
 8009b98:	4680      	mov	r8, r0
 8009b9a:	d108      	bne.n	8009bae <_printf_float+0x13e>
 8009b9c:	1cc8      	adds	r0, r1, #3
 8009b9e:	db02      	blt.n	8009ba6 <_printf_float+0x136>
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	dd41      	ble.n	8009c2a <_printf_float+0x1ba>
 8009ba6:	f1ab 0302 	sub.w	r3, fp, #2
 8009baa:	fa5f fb83 	uxtb.w	fp, r3
 8009bae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bb2:	d820      	bhi.n	8009bf6 <_printf_float+0x186>
 8009bb4:	3901      	subs	r1, #1
 8009bb6:	465a      	mov	r2, fp
 8009bb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bbc:	9109      	str	r1, [sp, #36]	; 0x24
 8009bbe:	f7ff ff19 	bl	80099f4 <__exponent>
 8009bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc4:	1813      	adds	r3, r2, r0
 8009bc6:	2a01      	cmp	r2, #1
 8009bc8:	4681      	mov	r9, r0
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	dc02      	bgt.n	8009bd4 <_printf_float+0x164>
 8009bce:	6822      	ldr	r2, [r4, #0]
 8009bd0:	07d2      	lsls	r2, r2, #31
 8009bd2:	d501      	bpl.n	8009bd8 <_printf_float+0x168>
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d09c      	beq.n	8009b1a <_printf_float+0xaa>
 8009be0:	232d      	movs	r3, #45	; 0x2d
 8009be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be6:	e798      	b.n	8009b1a <_printf_float+0xaa>
 8009be8:	9a06      	ldr	r2, [sp, #24]
 8009bea:	2a47      	cmp	r2, #71	; 0x47
 8009bec:	d1be      	bne.n	8009b6c <_printf_float+0xfc>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1bc      	bne.n	8009b6c <_printf_float+0xfc>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e7b9      	b.n	8009b6a <_printf_float+0xfa>
 8009bf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bfa:	d118      	bne.n	8009c2e <_printf_float+0x1be>
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	dd0b      	ble.n	8009c1a <_printf_float+0x1aa>
 8009c02:	6121      	str	r1, [r4, #16]
 8009c04:	b913      	cbnz	r3, 8009c0c <_printf_float+0x19c>
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	07d0      	lsls	r0, r2, #31
 8009c0a:	d502      	bpl.n	8009c12 <_printf_float+0x1a2>
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	440b      	add	r3, r1
 8009c10:	6123      	str	r3, [r4, #16]
 8009c12:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c14:	f04f 0900 	mov.w	r9, #0
 8009c18:	e7de      	b.n	8009bd8 <_printf_float+0x168>
 8009c1a:	b913      	cbnz	r3, 8009c22 <_printf_float+0x1b2>
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	07d2      	lsls	r2, r2, #31
 8009c20:	d501      	bpl.n	8009c26 <_printf_float+0x1b6>
 8009c22:	3302      	adds	r3, #2
 8009c24:	e7f4      	b.n	8009c10 <_printf_float+0x1a0>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e7f2      	b.n	8009c10 <_printf_float+0x1a0>
 8009c2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c30:	4299      	cmp	r1, r3
 8009c32:	db05      	blt.n	8009c40 <_printf_float+0x1d0>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	6121      	str	r1, [r4, #16]
 8009c38:	07d8      	lsls	r0, r3, #31
 8009c3a:	d5ea      	bpl.n	8009c12 <_printf_float+0x1a2>
 8009c3c:	1c4b      	adds	r3, r1, #1
 8009c3e:	e7e7      	b.n	8009c10 <_printf_float+0x1a0>
 8009c40:	2900      	cmp	r1, #0
 8009c42:	bfd4      	ite	le
 8009c44:	f1c1 0202 	rsble	r2, r1, #2
 8009c48:	2201      	movgt	r2, #1
 8009c4a:	4413      	add	r3, r2
 8009c4c:	e7e0      	b.n	8009c10 <_printf_float+0x1a0>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	055a      	lsls	r2, r3, #21
 8009c52:	d407      	bmi.n	8009c64 <_printf_float+0x1f4>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	4642      	mov	r2, r8
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	d12c      	bne.n	8009cbc <_printf_float+0x24c>
 8009c62:	e764      	b.n	8009b2e <_printf_float+0xbe>
 8009c64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c68:	f240 80e0 	bls.w	8009e2c <_printf_float+0x3bc>
 8009c6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c70:	2200      	movs	r2, #0
 8009c72:	2300      	movs	r3, #0
 8009c74:	f7f6 ff38 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d034      	beq.n	8009ce6 <_printf_float+0x276>
 8009c7c:	4a37      	ldr	r2, [pc, #220]	; (8009d5c <_printf_float+0x2ec>)
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4631      	mov	r1, r6
 8009c82:	4628      	mov	r0, r5
 8009c84:	47b8      	blx	r7
 8009c86:	3001      	adds	r0, #1
 8009c88:	f43f af51 	beq.w	8009b2e <_printf_float+0xbe>
 8009c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c90:	429a      	cmp	r2, r3
 8009c92:	db02      	blt.n	8009c9a <_printf_float+0x22a>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	07d8      	lsls	r0, r3, #31
 8009c98:	d510      	bpl.n	8009cbc <_printf_float+0x24c>
 8009c9a:	ee18 3a10 	vmov	r3, s16
 8009c9e:	4652      	mov	r2, sl
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	47b8      	blx	r7
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f43f af41 	beq.w	8009b2e <_printf_float+0xbe>
 8009cac:	f04f 0800 	mov.w	r8, #0
 8009cb0:	f104 091a 	add.w	r9, r4, #26
 8009cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	4543      	cmp	r3, r8
 8009cba:	dc09      	bgt.n	8009cd0 <_printf_float+0x260>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	079b      	lsls	r3, r3, #30
 8009cc0:	f100 8107 	bmi.w	8009ed2 <_printf_float+0x462>
 8009cc4:	68e0      	ldr	r0, [r4, #12]
 8009cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc8:	4298      	cmp	r0, r3
 8009cca:	bfb8      	it	lt
 8009ccc:	4618      	movlt	r0, r3
 8009cce:	e730      	b.n	8009b32 <_printf_float+0xc2>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	464a      	mov	r2, r9
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f43f af27 	beq.w	8009b2e <_printf_float+0xbe>
 8009ce0:	f108 0801 	add.w	r8, r8, #1
 8009ce4:	e7e6      	b.n	8009cb4 <_printf_float+0x244>
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dc39      	bgt.n	8009d60 <_printf_float+0x2f0>
 8009cec:	4a1b      	ldr	r2, [pc, #108]	; (8009d5c <_printf_float+0x2ec>)
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f af19 	beq.w	8009b2e <_printf_float+0xbe>
 8009cfc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d00:	4313      	orrs	r3, r2
 8009d02:	d102      	bne.n	8009d0a <_printf_float+0x29a>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	07d9      	lsls	r1, r3, #31
 8009d08:	d5d8      	bpl.n	8009cbc <_printf_float+0x24c>
 8009d0a:	ee18 3a10 	vmov	r3, s16
 8009d0e:	4652      	mov	r2, sl
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af09 	beq.w	8009b2e <_printf_float+0xbe>
 8009d1c:	f04f 0900 	mov.w	r9, #0
 8009d20:	f104 0a1a 	add.w	sl, r4, #26
 8009d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d26:	425b      	negs	r3, r3
 8009d28:	454b      	cmp	r3, r9
 8009d2a:	dc01      	bgt.n	8009d30 <_printf_float+0x2c0>
 8009d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d2e:	e792      	b.n	8009c56 <_printf_float+0x1e6>
 8009d30:	2301      	movs	r3, #1
 8009d32:	4652      	mov	r2, sl
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f43f aef7 	beq.w	8009b2e <_printf_float+0xbe>
 8009d40:	f109 0901 	add.w	r9, r9, #1
 8009d44:	e7ee      	b.n	8009d24 <_printf_float+0x2b4>
 8009d46:	bf00      	nop
 8009d48:	7fefffff 	.word	0x7fefffff
 8009d4c:	0800d4e1 	.word	0x0800d4e1
 8009d50:	0800d4e5 	.word	0x0800d4e5
 8009d54:	0800d4e9 	.word	0x0800d4e9
 8009d58:	0800d4ed 	.word	0x0800d4ed
 8009d5c:	0800d4f1 	.word	0x0800d4f1
 8009d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d64:	429a      	cmp	r2, r3
 8009d66:	bfa8      	it	ge
 8009d68:	461a      	movge	r2, r3
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	4691      	mov	r9, r2
 8009d6e:	dc37      	bgt.n	8009de0 <_printf_float+0x370>
 8009d70:	f04f 0b00 	mov.w	fp, #0
 8009d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d78:	f104 021a 	add.w	r2, r4, #26
 8009d7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	eba3 0309 	sub.w	r3, r3, r9
 8009d84:	455b      	cmp	r3, fp
 8009d86:	dc33      	bgt.n	8009df0 <_printf_float+0x380>
 8009d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	db3b      	blt.n	8009e08 <_printf_float+0x398>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	07da      	lsls	r2, r3, #31
 8009d94:	d438      	bmi.n	8009e08 <_printf_float+0x398>
 8009d96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d9a:	eba2 0903 	sub.w	r9, r2, r3
 8009d9e:	9b05      	ldr	r3, [sp, #20]
 8009da0:	1ad2      	subs	r2, r2, r3
 8009da2:	4591      	cmp	r9, r2
 8009da4:	bfa8      	it	ge
 8009da6:	4691      	movge	r9, r2
 8009da8:	f1b9 0f00 	cmp.w	r9, #0
 8009dac:	dc35      	bgt.n	8009e1a <_printf_float+0x3aa>
 8009dae:	f04f 0800 	mov.w	r8, #0
 8009db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009db6:	f104 0a1a 	add.w	sl, r4, #26
 8009dba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	eba3 0309 	sub.w	r3, r3, r9
 8009dc4:	4543      	cmp	r3, r8
 8009dc6:	f77f af79 	ble.w	8009cbc <_printf_float+0x24c>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4652      	mov	r2, sl
 8009dce:	4631      	mov	r1, r6
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	47b8      	blx	r7
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	f43f aeaa 	beq.w	8009b2e <_printf_float+0xbe>
 8009dda:	f108 0801 	add.w	r8, r8, #1
 8009dde:	e7ec      	b.n	8009dba <_printf_float+0x34a>
 8009de0:	4613      	mov	r3, r2
 8009de2:	4631      	mov	r1, r6
 8009de4:	4642      	mov	r2, r8
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	d1c0      	bne.n	8009d70 <_printf_float+0x300>
 8009dee:	e69e      	b.n	8009b2e <_printf_float+0xbe>
 8009df0:	2301      	movs	r3, #1
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	9205      	str	r2, [sp, #20]
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f ae97 	beq.w	8009b2e <_printf_float+0xbe>
 8009e00:	9a05      	ldr	r2, [sp, #20]
 8009e02:	f10b 0b01 	add.w	fp, fp, #1
 8009e06:	e7b9      	b.n	8009d7c <_printf_float+0x30c>
 8009e08:	ee18 3a10 	vmov	r3, s16
 8009e0c:	4652      	mov	r2, sl
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	d1be      	bne.n	8009d96 <_printf_float+0x326>
 8009e18:	e689      	b.n	8009b2e <_printf_float+0xbe>
 8009e1a:	9a05      	ldr	r2, [sp, #20]
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	4442      	add	r2, r8
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	d1c1      	bne.n	8009dae <_printf_float+0x33e>
 8009e2a:	e680      	b.n	8009b2e <_printf_float+0xbe>
 8009e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e2e:	2a01      	cmp	r2, #1
 8009e30:	dc01      	bgt.n	8009e36 <_printf_float+0x3c6>
 8009e32:	07db      	lsls	r3, r3, #31
 8009e34:	d53a      	bpl.n	8009eac <_printf_float+0x43c>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4642      	mov	r2, r8
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae74 	beq.w	8009b2e <_printf_float+0xbe>
 8009e46:	ee18 3a10 	vmov	r3, s16
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b8      	blx	r7
 8009e52:	3001      	adds	r0, #1
 8009e54:	f43f ae6b 	beq.w	8009b2e <_printf_float+0xbe>
 8009e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009e64:	f7f6 fe40 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e68:	b9d8      	cbnz	r0, 8009ea2 <_printf_float+0x432>
 8009e6a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009e6e:	f108 0201 	add.w	r2, r8, #1
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d10e      	bne.n	8009e9a <_printf_float+0x42a>
 8009e7c:	e657      	b.n	8009b2e <_printf_float+0xbe>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4652      	mov	r2, sl
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f ae50 	beq.w	8009b2e <_printf_float+0xbe>
 8009e8e:	f108 0801 	add.w	r8, r8, #1
 8009e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e94:	3b01      	subs	r3, #1
 8009e96:	4543      	cmp	r3, r8
 8009e98:	dcf1      	bgt.n	8009e7e <_printf_float+0x40e>
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ea0:	e6da      	b.n	8009c58 <_printf_float+0x1e8>
 8009ea2:	f04f 0800 	mov.w	r8, #0
 8009ea6:	f104 0a1a 	add.w	sl, r4, #26
 8009eaa:	e7f2      	b.n	8009e92 <_printf_float+0x422>
 8009eac:	2301      	movs	r3, #1
 8009eae:	4642      	mov	r2, r8
 8009eb0:	e7df      	b.n	8009e72 <_printf_float+0x402>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	464a      	mov	r2, r9
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f ae36 	beq.w	8009b2e <_printf_float+0xbe>
 8009ec2:	f108 0801 	add.w	r8, r8, #1
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eca:	1a5b      	subs	r3, r3, r1
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	dcf0      	bgt.n	8009eb2 <_printf_float+0x442>
 8009ed0:	e6f8      	b.n	8009cc4 <_printf_float+0x254>
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	f104 0919 	add.w	r9, r4, #25
 8009eda:	e7f4      	b.n	8009ec6 <_printf_float+0x456>

08009edc <_printf_common>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	4616      	mov	r6, r2
 8009ee2:	4699      	mov	r9, r3
 8009ee4:	688a      	ldr	r2, [r1, #8]
 8009ee6:	690b      	ldr	r3, [r1, #16]
 8009ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bfb8      	it	lt
 8009ef0:	4613      	movlt	r3, r2
 8009ef2:	6033      	str	r3, [r6, #0]
 8009ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b10a      	cbz	r2, 8009f02 <_printf_common+0x26>
 8009efe:	3301      	adds	r3, #1
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	0699      	lsls	r1, r3, #26
 8009f06:	bf42      	ittt	mi
 8009f08:	6833      	ldrmi	r3, [r6, #0]
 8009f0a:	3302      	addmi	r3, #2
 8009f0c:	6033      	strmi	r3, [r6, #0]
 8009f0e:	6825      	ldr	r5, [r4, #0]
 8009f10:	f015 0506 	ands.w	r5, r5, #6
 8009f14:	d106      	bne.n	8009f24 <_printf_common+0x48>
 8009f16:	f104 0a19 	add.w	sl, r4, #25
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	6832      	ldr	r2, [r6, #0]
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dc26      	bgt.n	8009f72 <_printf_common+0x96>
 8009f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f28:	1e13      	subs	r3, r2, #0
 8009f2a:	6822      	ldr	r2, [r4, #0]
 8009f2c:	bf18      	it	ne
 8009f2e:	2301      	movne	r3, #1
 8009f30:	0692      	lsls	r2, r2, #26
 8009f32:	d42b      	bmi.n	8009f8c <_printf_common+0xb0>
 8009f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	47c0      	blx	r8
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d01e      	beq.n	8009f80 <_printf_common+0xa4>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	f003 0306 	and.w	r3, r3, #6
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	bf02      	ittt	eq
 8009f4e:	68e5      	ldreq	r5, [r4, #12]
 8009f50:	6833      	ldreq	r3, [r6, #0]
 8009f52:	1aed      	subeq	r5, r5, r3
 8009f54:	68a3      	ldr	r3, [r4, #8]
 8009f56:	bf0c      	ite	eq
 8009f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f5c:	2500      	movne	r5, #0
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	bfc4      	itt	gt
 8009f62:	1a9b      	subgt	r3, r3, r2
 8009f64:	18ed      	addgt	r5, r5, r3
 8009f66:	2600      	movs	r6, #0
 8009f68:	341a      	adds	r4, #26
 8009f6a:	42b5      	cmp	r5, r6
 8009f6c:	d11a      	bne.n	8009fa4 <_printf_common+0xc8>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e008      	b.n	8009f84 <_printf_common+0xa8>
 8009f72:	2301      	movs	r3, #1
 8009f74:	4652      	mov	r2, sl
 8009f76:	4649      	mov	r1, r9
 8009f78:	4638      	mov	r0, r7
 8009f7a:	47c0      	blx	r8
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d103      	bne.n	8009f88 <_printf_common+0xac>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f88:	3501      	adds	r5, #1
 8009f8a:	e7c6      	b.n	8009f1a <_printf_common+0x3e>
 8009f8c:	18e1      	adds	r1, r4, r3
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	2030      	movs	r0, #48	; 0x30
 8009f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f96:	4422      	add	r2, r4
 8009f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa0:	3302      	adds	r3, #2
 8009fa2:	e7c7      	b.n	8009f34 <_printf_common+0x58>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4649      	mov	r1, r9
 8009faa:	4638      	mov	r0, r7
 8009fac:	47c0      	blx	r8
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d0e6      	beq.n	8009f80 <_printf_common+0xa4>
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7d9      	b.n	8009f6a <_printf_common+0x8e>
	...

08009fb8 <_printf_i>:
 8009fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	7e0f      	ldrb	r7, [r1, #24]
 8009fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc0:	2f78      	cmp	r7, #120	; 0x78
 8009fc2:	4691      	mov	r9, r2
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fce:	d807      	bhi.n	8009fe0 <_printf_i+0x28>
 8009fd0:	2f62      	cmp	r7, #98	; 0x62
 8009fd2:	d80a      	bhi.n	8009fea <_printf_i+0x32>
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	f000 80d4 	beq.w	800a182 <_printf_i+0x1ca>
 8009fda:	2f58      	cmp	r7, #88	; 0x58
 8009fdc:	f000 80c0 	beq.w	800a160 <_printf_i+0x1a8>
 8009fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fe8:	e03a      	b.n	800a060 <_printf_i+0xa8>
 8009fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fee:	2b15      	cmp	r3, #21
 8009ff0:	d8f6      	bhi.n	8009fe0 <_printf_i+0x28>
 8009ff2:	a101      	add	r1, pc, #4	; (adr r1, 8009ff8 <_printf_i+0x40>)
 8009ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ff8:	0800a051 	.word	0x0800a051
 8009ffc:	0800a065 	.word	0x0800a065
 800a000:	08009fe1 	.word	0x08009fe1
 800a004:	08009fe1 	.word	0x08009fe1
 800a008:	08009fe1 	.word	0x08009fe1
 800a00c:	08009fe1 	.word	0x08009fe1
 800a010:	0800a065 	.word	0x0800a065
 800a014:	08009fe1 	.word	0x08009fe1
 800a018:	08009fe1 	.word	0x08009fe1
 800a01c:	08009fe1 	.word	0x08009fe1
 800a020:	08009fe1 	.word	0x08009fe1
 800a024:	0800a169 	.word	0x0800a169
 800a028:	0800a091 	.word	0x0800a091
 800a02c:	0800a123 	.word	0x0800a123
 800a030:	08009fe1 	.word	0x08009fe1
 800a034:	08009fe1 	.word	0x08009fe1
 800a038:	0800a18b 	.word	0x0800a18b
 800a03c:	08009fe1 	.word	0x08009fe1
 800a040:	0800a091 	.word	0x0800a091
 800a044:	08009fe1 	.word	0x08009fe1
 800a048:	08009fe1 	.word	0x08009fe1
 800a04c:	0800a12b 	.word	0x0800a12b
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	602a      	str	r2, [r5, #0]
 800a058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a060:	2301      	movs	r3, #1
 800a062:	e09f      	b.n	800a1a4 <_printf_i+0x1ec>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	0607      	lsls	r7, r0, #24
 800a06a:	f103 0104 	add.w	r1, r3, #4
 800a06e:	6029      	str	r1, [r5, #0]
 800a070:	d501      	bpl.n	800a076 <_printf_i+0xbe>
 800a072:	681e      	ldr	r6, [r3, #0]
 800a074:	e003      	b.n	800a07e <_printf_i+0xc6>
 800a076:	0646      	lsls	r6, r0, #25
 800a078:	d5fb      	bpl.n	800a072 <_printf_i+0xba>
 800a07a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a07e:	2e00      	cmp	r6, #0
 800a080:	da03      	bge.n	800a08a <_printf_i+0xd2>
 800a082:	232d      	movs	r3, #45	; 0x2d
 800a084:	4276      	negs	r6, r6
 800a086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a08a:	485a      	ldr	r0, [pc, #360]	; (800a1f4 <_printf_i+0x23c>)
 800a08c:	230a      	movs	r3, #10
 800a08e:	e012      	b.n	800a0b6 <_printf_i+0xfe>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	1d19      	adds	r1, r3, #4
 800a096:	6029      	str	r1, [r5, #0]
 800a098:	0605      	lsls	r5, r0, #24
 800a09a:	d501      	bpl.n	800a0a0 <_printf_i+0xe8>
 800a09c:	681e      	ldr	r6, [r3, #0]
 800a09e:	e002      	b.n	800a0a6 <_printf_i+0xee>
 800a0a0:	0641      	lsls	r1, r0, #25
 800a0a2:	d5fb      	bpl.n	800a09c <_printf_i+0xe4>
 800a0a4:	881e      	ldrh	r6, [r3, #0]
 800a0a6:	4853      	ldr	r0, [pc, #332]	; (800a1f4 <_printf_i+0x23c>)
 800a0a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2308      	moveq	r3, #8
 800a0ae:	230a      	movne	r3, #10
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0b6:	6865      	ldr	r5, [r4, #4]
 800a0b8:	60a5      	str	r5, [r4, #8]
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	bfa2      	ittt	ge
 800a0be:	6821      	ldrge	r1, [r4, #0]
 800a0c0:	f021 0104 	bicge.w	r1, r1, #4
 800a0c4:	6021      	strge	r1, [r4, #0]
 800a0c6:	b90e      	cbnz	r6, 800a0cc <_printf_i+0x114>
 800a0c8:	2d00      	cmp	r5, #0
 800a0ca:	d04b      	beq.n	800a164 <_printf_i+0x1ac>
 800a0cc:	4615      	mov	r5, r2
 800a0ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0d2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0d6:	5dc7      	ldrb	r7, [r0, r7]
 800a0d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0dc:	4637      	mov	r7, r6
 800a0de:	42bb      	cmp	r3, r7
 800a0e0:	460e      	mov	r6, r1
 800a0e2:	d9f4      	bls.n	800a0ce <_printf_i+0x116>
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d10b      	bne.n	800a100 <_printf_i+0x148>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	07de      	lsls	r6, r3, #31
 800a0ec:	d508      	bpl.n	800a100 <_printf_i+0x148>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	bfde      	ittt	le
 800a0f6:	2330      	movle	r3, #48	; 0x30
 800a0f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a100:	1b52      	subs	r2, r2, r5
 800a102:	6122      	str	r2, [r4, #16]
 800a104:	f8cd a000 	str.w	sl, [sp]
 800a108:	464b      	mov	r3, r9
 800a10a:	aa03      	add	r2, sp, #12
 800a10c:	4621      	mov	r1, r4
 800a10e:	4640      	mov	r0, r8
 800a110:	f7ff fee4 	bl	8009edc <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	d14a      	bne.n	800a1ae <_printf_i+0x1f6>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a11c:	b004      	add	sp, #16
 800a11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	f043 0320 	orr.w	r3, r3, #32
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	4833      	ldr	r0, [pc, #204]	; (800a1f8 <_printf_i+0x240>)
 800a12c:	2778      	movs	r7, #120	; 0x78
 800a12e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	6829      	ldr	r1, [r5, #0]
 800a136:	061f      	lsls	r7, r3, #24
 800a138:	f851 6b04 	ldr.w	r6, [r1], #4
 800a13c:	d402      	bmi.n	800a144 <_printf_i+0x18c>
 800a13e:	065f      	lsls	r7, r3, #25
 800a140:	bf48      	it	mi
 800a142:	b2b6      	uxthmi	r6, r6
 800a144:	07df      	lsls	r7, r3, #31
 800a146:	bf48      	it	mi
 800a148:	f043 0320 	orrmi.w	r3, r3, #32
 800a14c:	6029      	str	r1, [r5, #0]
 800a14e:	bf48      	it	mi
 800a150:	6023      	strmi	r3, [r4, #0]
 800a152:	b91e      	cbnz	r6, 800a15c <_printf_i+0x1a4>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	f023 0320 	bic.w	r3, r3, #32
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	2310      	movs	r3, #16
 800a15e:	e7a7      	b.n	800a0b0 <_printf_i+0xf8>
 800a160:	4824      	ldr	r0, [pc, #144]	; (800a1f4 <_printf_i+0x23c>)
 800a162:	e7e4      	b.n	800a12e <_printf_i+0x176>
 800a164:	4615      	mov	r5, r2
 800a166:	e7bd      	b.n	800a0e4 <_printf_i+0x12c>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	6826      	ldr	r6, [r4, #0]
 800a16c:	6961      	ldr	r1, [r4, #20]
 800a16e:	1d18      	adds	r0, r3, #4
 800a170:	6028      	str	r0, [r5, #0]
 800a172:	0635      	lsls	r5, r6, #24
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	d501      	bpl.n	800a17c <_printf_i+0x1c4>
 800a178:	6019      	str	r1, [r3, #0]
 800a17a:	e002      	b.n	800a182 <_printf_i+0x1ca>
 800a17c:	0670      	lsls	r0, r6, #25
 800a17e:	d5fb      	bpl.n	800a178 <_printf_i+0x1c0>
 800a180:	8019      	strh	r1, [r3, #0]
 800a182:	2300      	movs	r3, #0
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	4615      	mov	r5, r2
 800a188:	e7bc      	b.n	800a104 <_printf_i+0x14c>
 800a18a:	682b      	ldr	r3, [r5, #0]
 800a18c:	1d1a      	adds	r2, r3, #4
 800a18e:	602a      	str	r2, [r5, #0]
 800a190:	681d      	ldr	r5, [r3, #0]
 800a192:	6862      	ldr	r2, [r4, #4]
 800a194:	2100      	movs	r1, #0
 800a196:	4628      	mov	r0, r5
 800a198:	f7f6 f82a 	bl	80001f0 <memchr>
 800a19c:	b108      	cbz	r0, 800a1a2 <_printf_i+0x1ea>
 800a19e:	1b40      	subs	r0, r0, r5
 800a1a0:	6060      	str	r0, [r4, #4]
 800a1a2:	6863      	ldr	r3, [r4, #4]
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ac:	e7aa      	b.n	800a104 <_printf_i+0x14c>
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	47d0      	blx	sl
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d0ad      	beq.n	800a118 <_printf_i+0x160>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	079b      	lsls	r3, r3, #30
 800a1c0:	d413      	bmi.n	800a1ea <_printf_i+0x232>
 800a1c2:	68e0      	ldr	r0, [r4, #12]
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	4298      	cmp	r0, r3
 800a1c8:	bfb8      	it	lt
 800a1ca:	4618      	movlt	r0, r3
 800a1cc:	e7a6      	b.n	800a11c <_printf_i+0x164>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	47d0      	blx	sl
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d09d      	beq.n	800a118 <_printf_i+0x160>
 800a1dc:	3501      	adds	r5, #1
 800a1de:	68e3      	ldr	r3, [r4, #12]
 800a1e0:	9903      	ldr	r1, [sp, #12]
 800a1e2:	1a5b      	subs	r3, r3, r1
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	dcf2      	bgt.n	800a1ce <_printf_i+0x216>
 800a1e8:	e7eb      	b.n	800a1c2 <_printf_i+0x20a>
 800a1ea:	2500      	movs	r5, #0
 800a1ec:	f104 0619 	add.w	r6, r4, #25
 800a1f0:	e7f5      	b.n	800a1de <_printf_i+0x226>
 800a1f2:	bf00      	nop
 800a1f4:	0800d4f3 	.word	0x0800d4f3
 800a1f8:	0800d504 	.word	0x0800d504

0800a1fc <std>:
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	b510      	push	{r4, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	e9c0 3300 	strd	r3, r3, [r0]
 800a206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a20a:	6083      	str	r3, [r0, #8]
 800a20c:	8181      	strh	r1, [r0, #12]
 800a20e:	6643      	str	r3, [r0, #100]	; 0x64
 800a210:	81c2      	strh	r2, [r0, #14]
 800a212:	6183      	str	r3, [r0, #24]
 800a214:	4619      	mov	r1, r3
 800a216:	2208      	movs	r2, #8
 800a218:	305c      	adds	r0, #92	; 0x5c
 800a21a:	f000 fa05 	bl	800a628 <memset>
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <std+0x38>)
 800a220:	6263      	str	r3, [r4, #36]	; 0x24
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <std+0x3c>)
 800a224:	62a3      	str	r3, [r4, #40]	; 0x28
 800a226:	4b05      	ldr	r3, [pc, #20]	; (800a23c <std+0x40>)
 800a228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <std+0x44>)
 800a22c:	6224      	str	r4, [r4, #32]
 800a22e:	6323      	str	r3, [r4, #48]	; 0x30
 800a230:	bd10      	pop	{r4, pc}
 800a232:	bf00      	nop
 800a234:	0800a479 	.word	0x0800a479
 800a238:	0800a49b 	.word	0x0800a49b
 800a23c:	0800a4d3 	.word	0x0800a4d3
 800a240:	0800a4f7 	.word	0x0800a4f7

0800a244 <stdio_exit_handler>:
 800a244:	4a02      	ldr	r2, [pc, #8]	; (800a250 <stdio_exit_handler+0xc>)
 800a246:	4903      	ldr	r1, [pc, #12]	; (800a254 <stdio_exit_handler+0x10>)
 800a248:	4803      	ldr	r0, [pc, #12]	; (800a258 <stdio_exit_handler+0x14>)
 800a24a:	f000 b869 	b.w	800a320 <_fwalk_sglue>
 800a24e:	bf00      	nop
 800a250:	20000034 	.word	0x20000034
 800a254:	0800cd21 	.word	0x0800cd21
 800a258:	200001ac 	.word	0x200001ac

0800a25c <cleanup_stdio>:
 800a25c:	6841      	ldr	r1, [r0, #4]
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <cleanup_stdio+0x34>)
 800a260:	4299      	cmp	r1, r3
 800a262:	b510      	push	{r4, lr}
 800a264:	4604      	mov	r4, r0
 800a266:	d001      	beq.n	800a26c <cleanup_stdio+0x10>
 800a268:	f002 fd5a 	bl	800cd20 <_fflush_r>
 800a26c:	68a1      	ldr	r1, [r4, #8]
 800a26e:	4b09      	ldr	r3, [pc, #36]	; (800a294 <cleanup_stdio+0x38>)
 800a270:	4299      	cmp	r1, r3
 800a272:	d002      	beq.n	800a27a <cleanup_stdio+0x1e>
 800a274:	4620      	mov	r0, r4
 800a276:	f002 fd53 	bl	800cd20 <_fflush_r>
 800a27a:	68e1      	ldr	r1, [r4, #12]
 800a27c:	4b06      	ldr	r3, [pc, #24]	; (800a298 <cleanup_stdio+0x3c>)
 800a27e:	4299      	cmp	r1, r3
 800a280:	d004      	beq.n	800a28c <cleanup_stdio+0x30>
 800a282:	4620      	mov	r0, r4
 800a284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a288:	f002 bd4a 	b.w	800cd20 <_fflush_r>
 800a28c:	bd10      	pop	{r4, pc}
 800a28e:	bf00      	nop
 800a290:	20000e94 	.word	0x20000e94
 800a294:	20000efc 	.word	0x20000efc
 800a298:	20000f64 	.word	0x20000f64

0800a29c <global_stdio_init.part.0>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <global_stdio_init.part.0+0x30>)
 800a2a0:	4c0b      	ldr	r4, [pc, #44]	; (800a2d0 <global_stdio_init.part.0+0x34>)
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <global_stdio_init.part.0+0x38>)
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2104      	movs	r1, #4
 800a2ac:	f7ff ffa6 	bl	800a1fc <std>
 800a2b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	2109      	movs	r1, #9
 800a2b8:	f7ff ffa0 	bl	800a1fc <std>
 800a2bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c6:	2112      	movs	r1, #18
 800a2c8:	f7ff bf98 	b.w	800a1fc <std>
 800a2cc:	20000fcc 	.word	0x20000fcc
 800a2d0:	20000e94 	.word	0x20000e94
 800a2d4:	0800a245 	.word	0x0800a245

0800a2d8 <__sfp_lock_acquire>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__sfp_lock_acquire+0x8>)
 800a2da:	f000 ba47 	b.w	800a76c <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20000fd5 	.word	0x20000fd5

0800a2e4 <__sfp_lock_release>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__sfp_lock_release+0x8>)
 800a2e6:	f000 ba42 	b.w	800a76e <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20000fd5 	.word	0x20000fd5

0800a2f0 <__sinit>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	f7ff fff0 	bl	800a2d8 <__sfp_lock_acquire>
 800a2f8:	6a23      	ldr	r3, [r4, #32]
 800a2fa:	b11b      	cbz	r3, 800a304 <__sinit+0x14>
 800a2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a300:	f7ff bff0 	b.w	800a2e4 <__sfp_lock_release>
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <__sinit+0x28>)
 800a306:	6223      	str	r3, [r4, #32]
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <__sinit+0x2c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1f5      	bne.n	800a2fc <__sinit+0xc>
 800a310:	f7ff ffc4 	bl	800a29c <global_stdio_init.part.0>
 800a314:	e7f2      	b.n	800a2fc <__sinit+0xc>
 800a316:	bf00      	nop
 800a318:	0800a25d 	.word	0x0800a25d
 800a31c:	20000fcc 	.word	0x20000fcc

0800a320 <_fwalk_sglue>:
 800a320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a324:	4607      	mov	r7, r0
 800a326:	4688      	mov	r8, r1
 800a328:	4614      	mov	r4, r2
 800a32a:	2600      	movs	r6, #0
 800a32c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a330:	f1b9 0901 	subs.w	r9, r9, #1
 800a334:	d505      	bpl.n	800a342 <_fwalk_sglue+0x22>
 800a336:	6824      	ldr	r4, [r4, #0]
 800a338:	2c00      	cmp	r4, #0
 800a33a:	d1f7      	bne.n	800a32c <_fwalk_sglue+0xc>
 800a33c:	4630      	mov	r0, r6
 800a33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d907      	bls.n	800a358 <_fwalk_sglue+0x38>
 800a348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a34c:	3301      	adds	r3, #1
 800a34e:	d003      	beq.n	800a358 <_fwalk_sglue+0x38>
 800a350:	4629      	mov	r1, r5
 800a352:	4638      	mov	r0, r7
 800a354:	47c0      	blx	r8
 800a356:	4306      	orrs	r6, r0
 800a358:	3568      	adds	r5, #104	; 0x68
 800a35a:	e7e9      	b.n	800a330 <_fwalk_sglue+0x10>

0800a35c <iprintf>:
 800a35c:	b40f      	push	{r0, r1, r2, r3}
 800a35e:	b507      	push	{r0, r1, r2, lr}
 800a360:	4906      	ldr	r1, [pc, #24]	; (800a37c <iprintf+0x20>)
 800a362:	ab04      	add	r3, sp, #16
 800a364:	6808      	ldr	r0, [r1, #0]
 800a366:	f853 2b04 	ldr.w	r2, [r3], #4
 800a36a:	6881      	ldr	r1, [r0, #8]
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	f002 fb37 	bl	800c9e0 <_vfiprintf_r>
 800a372:	b003      	add	sp, #12
 800a374:	f85d eb04 	ldr.w	lr, [sp], #4
 800a378:	b004      	add	sp, #16
 800a37a:	4770      	bx	lr
 800a37c:	200001f8 	.word	0x200001f8

0800a380 <_puts_r>:
 800a380:	6a03      	ldr	r3, [r0, #32]
 800a382:	b570      	push	{r4, r5, r6, lr}
 800a384:	6884      	ldr	r4, [r0, #8]
 800a386:	4605      	mov	r5, r0
 800a388:	460e      	mov	r6, r1
 800a38a:	b90b      	cbnz	r3, 800a390 <_puts_r+0x10>
 800a38c:	f7ff ffb0 	bl	800a2f0 <__sinit>
 800a390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a392:	07db      	lsls	r3, r3, #31
 800a394:	d405      	bmi.n	800a3a2 <_puts_r+0x22>
 800a396:	89a3      	ldrh	r3, [r4, #12]
 800a398:	0598      	lsls	r0, r3, #22
 800a39a:	d402      	bmi.n	800a3a2 <_puts_r+0x22>
 800a39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a39e:	f000 f9e5 	bl	800a76c <__retarget_lock_acquire_recursive>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	0719      	lsls	r1, r3, #28
 800a3a6:	d513      	bpl.n	800a3d0 <_puts_r+0x50>
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	b18b      	cbz	r3, 800a3d0 <_puts_r+0x50>
 800a3ac:	3e01      	subs	r6, #1
 800a3ae:	68a3      	ldr	r3, [r4, #8]
 800a3b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	60a3      	str	r3, [r4, #8]
 800a3b8:	b9e9      	cbnz	r1, 800a3f6 <_puts_r+0x76>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da2e      	bge.n	800a41c <_puts_r+0x9c>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	210a      	movs	r1, #10
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 f89b 	bl	800a4fe <__swbuf_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d007      	beq.n	800a3dc <_puts_r+0x5c>
 800a3cc:	250a      	movs	r5, #10
 800a3ce:	e007      	b.n	800a3e0 <_puts_r+0x60>
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f000 f8d0 	bl	800a578 <__swsetup_r>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d0e7      	beq.n	800a3ac <_puts_r+0x2c>
 800a3dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a3e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3e2:	07da      	lsls	r2, r3, #31
 800a3e4:	d405      	bmi.n	800a3f2 <_puts_r+0x72>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	059b      	lsls	r3, r3, #22
 800a3ea:	d402      	bmi.n	800a3f2 <_puts_r+0x72>
 800a3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ee:	f000 f9be 	bl	800a76e <__retarget_lock_release_recursive>
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	bd70      	pop	{r4, r5, r6, pc}
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da04      	bge.n	800a404 <_puts_r+0x84>
 800a3fa:	69a2      	ldr	r2, [r4, #24]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	dc06      	bgt.n	800a40e <_puts_r+0x8e>
 800a400:	290a      	cmp	r1, #10
 800a402:	d004      	beq.n	800a40e <_puts_r+0x8e>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	7019      	strb	r1, [r3, #0]
 800a40c:	e7cf      	b.n	800a3ae <_puts_r+0x2e>
 800a40e:	4622      	mov	r2, r4
 800a410:	4628      	mov	r0, r5
 800a412:	f000 f874 	bl	800a4fe <__swbuf_r>
 800a416:	3001      	adds	r0, #1
 800a418:	d1c9      	bne.n	800a3ae <_puts_r+0x2e>
 800a41a:	e7df      	b.n	800a3dc <_puts_r+0x5c>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	250a      	movs	r5, #10
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	701d      	strb	r5, [r3, #0]
 800a426:	e7db      	b.n	800a3e0 <_puts_r+0x60>

0800a428 <puts>:
 800a428:	4b02      	ldr	r3, [pc, #8]	; (800a434 <puts+0xc>)
 800a42a:	4601      	mov	r1, r0
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f7ff bfa7 	b.w	800a380 <_puts_r>
 800a432:	bf00      	nop
 800a434:	200001f8 	.word	0x200001f8

0800a438 <siprintf>:
 800a438:	b40e      	push	{r1, r2, r3}
 800a43a:	b500      	push	{lr}
 800a43c:	b09c      	sub	sp, #112	; 0x70
 800a43e:	ab1d      	add	r3, sp, #116	; 0x74
 800a440:	9002      	str	r0, [sp, #8]
 800a442:	9006      	str	r0, [sp, #24]
 800a444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a448:	4809      	ldr	r0, [pc, #36]	; (800a470 <siprintf+0x38>)
 800a44a:	9107      	str	r1, [sp, #28]
 800a44c:	9104      	str	r1, [sp, #16]
 800a44e:	4909      	ldr	r1, [pc, #36]	; (800a474 <siprintf+0x3c>)
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	9105      	str	r1, [sp, #20]
 800a456:	6800      	ldr	r0, [r0, #0]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	a902      	add	r1, sp, #8
 800a45c:	f002 f998 	bl	800c790 <_svfiprintf_r>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	b01c      	add	sp, #112	; 0x70
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	b003      	add	sp, #12
 800a46e:	4770      	bx	lr
 800a470:	200001f8 	.word	0x200001f8
 800a474:	ffff0208 	.word	0xffff0208

0800a478 <__sread>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	460c      	mov	r4, r1
 800a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a480:	f000 f926 	bl	800a6d0 <_read_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	bfab      	itete	ge
 800a488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a48a:	89a3      	ldrhlt	r3, [r4, #12]
 800a48c:	181b      	addge	r3, r3, r0
 800a48e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a492:	bfac      	ite	ge
 800a494:	6563      	strge	r3, [r4, #84]	; 0x54
 800a496:	81a3      	strhlt	r3, [r4, #12]
 800a498:	bd10      	pop	{r4, pc}

0800a49a <__swrite>:
 800a49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	461f      	mov	r7, r3
 800a4a0:	898b      	ldrh	r3, [r1, #12]
 800a4a2:	05db      	lsls	r3, r3, #23
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	d505      	bpl.n	800a4b8 <__swrite+0x1e>
 800a4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f000 f8fa 	bl	800a6ac <_lseek_r>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ce:	f000 b911 	b.w	800a6f4 <_write_r>

0800a4d2 <__sseek>:
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4da:	f000 f8e7 	bl	800a6ac <_lseek_r>
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	bf15      	itete	ne
 800a4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4ee:	81a3      	strheq	r3, [r4, #12]
 800a4f0:	bf18      	it	ne
 800a4f2:	81a3      	strhne	r3, [r4, #12]
 800a4f4:	bd10      	pop	{r4, pc}

0800a4f6 <__sclose>:
 800a4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fa:	f000 b8c7 	b.w	800a68c <_close_r>

0800a4fe <__swbuf_r>:
 800a4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a500:	460e      	mov	r6, r1
 800a502:	4614      	mov	r4, r2
 800a504:	4605      	mov	r5, r0
 800a506:	b118      	cbz	r0, 800a510 <__swbuf_r+0x12>
 800a508:	6a03      	ldr	r3, [r0, #32]
 800a50a:	b90b      	cbnz	r3, 800a510 <__swbuf_r+0x12>
 800a50c:	f7ff fef0 	bl	800a2f0 <__sinit>
 800a510:	69a3      	ldr	r3, [r4, #24]
 800a512:	60a3      	str	r3, [r4, #8]
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	071a      	lsls	r2, r3, #28
 800a518:	d525      	bpl.n	800a566 <__swbuf_r+0x68>
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	b31b      	cbz	r3, 800a566 <__swbuf_r+0x68>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6922      	ldr	r2, [r4, #16]
 800a522:	1a98      	subs	r0, r3, r2
 800a524:	6963      	ldr	r3, [r4, #20]
 800a526:	b2f6      	uxtb	r6, r6
 800a528:	4283      	cmp	r3, r0
 800a52a:	4637      	mov	r7, r6
 800a52c:	dc04      	bgt.n	800a538 <__swbuf_r+0x3a>
 800a52e:	4621      	mov	r1, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f002 fbf5 	bl	800cd20 <_fflush_r>
 800a536:	b9e0      	cbnz	r0, 800a572 <__swbuf_r+0x74>
 800a538:	68a3      	ldr	r3, [r4, #8]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	60a3      	str	r3, [r4, #8]
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	6022      	str	r2, [r4, #0]
 800a544:	701e      	strb	r6, [r3, #0]
 800a546:	6962      	ldr	r2, [r4, #20]
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d004      	beq.n	800a558 <__swbuf_r+0x5a>
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	07db      	lsls	r3, r3, #31
 800a552:	d506      	bpl.n	800a562 <__swbuf_r+0x64>
 800a554:	2e0a      	cmp	r6, #10
 800a556:	d104      	bne.n	800a562 <__swbuf_r+0x64>
 800a558:	4621      	mov	r1, r4
 800a55a:	4628      	mov	r0, r5
 800a55c:	f002 fbe0 	bl	800cd20 <_fflush_r>
 800a560:	b938      	cbnz	r0, 800a572 <__swbuf_r+0x74>
 800a562:	4638      	mov	r0, r7
 800a564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a566:	4621      	mov	r1, r4
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 f805 	bl	800a578 <__swsetup_r>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d0d5      	beq.n	800a51e <__swbuf_r+0x20>
 800a572:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a576:	e7f4      	b.n	800a562 <__swbuf_r+0x64>

0800a578 <__swsetup_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4b2a      	ldr	r3, [pc, #168]	; (800a624 <__swsetup_r+0xac>)
 800a57c:	4605      	mov	r5, r0
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	460c      	mov	r4, r1
 800a582:	b118      	cbz	r0, 800a58c <__swsetup_r+0x14>
 800a584:	6a03      	ldr	r3, [r0, #32]
 800a586:	b90b      	cbnz	r3, 800a58c <__swsetup_r+0x14>
 800a588:	f7ff feb2 	bl	800a2f0 <__sinit>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a592:	0718      	lsls	r0, r3, #28
 800a594:	d422      	bmi.n	800a5dc <__swsetup_r+0x64>
 800a596:	06d9      	lsls	r1, r3, #27
 800a598:	d407      	bmi.n	800a5aa <__swsetup_r+0x32>
 800a59a:	2309      	movs	r3, #9
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5a8:	e034      	b.n	800a614 <__swsetup_r+0x9c>
 800a5aa:	0758      	lsls	r0, r3, #29
 800a5ac:	d512      	bpl.n	800a5d4 <__swsetup_r+0x5c>
 800a5ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5b0:	b141      	cbz	r1, 800a5c4 <__swsetup_r+0x4c>
 800a5b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5b6:	4299      	cmp	r1, r3
 800a5b8:	d002      	beq.n	800a5c0 <__swsetup_r+0x48>
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 ff6a 	bl	800b494 <_free_r>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	6363      	str	r3, [r4, #52]	; 0x34
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f043 0308 	orr.w	r3, r3, #8
 800a5da:	81a3      	strh	r3, [r4, #12]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	b94b      	cbnz	r3, 800a5f4 <__swsetup_r+0x7c>
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ea:	d003      	beq.n	800a5f4 <__swsetup_r+0x7c>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f002 fbe4 	bl	800cdbc <__smakebuf_r>
 800a5f4:	89a0      	ldrh	r0, [r4, #12]
 800a5f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5fa:	f010 0301 	ands.w	r3, r0, #1
 800a5fe:	d00a      	beq.n	800a616 <__swsetup_r+0x9e>
 800a600:	2300      	movs	r3, #0
 800a602:	60a3      	str	r3, [r4, #8]
 800a604:	6963      	ldr	r3, [r4, #20]
 800a606:	425b      	negs	r3, r3
 800a608:	61a3      	str	r3, [r4, #24]
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	b943      	cbnz	r3, 800a620 <__swsetup_r+0xa8>
 800a60e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a612:	d1c4      	bne.n	800a59e <__swsetup_r+0x26>
 800a614:	bd38      	pop	{r3, r4, r5, pc}
 800a616:	0781      	lsls	r1, r0, #30
 800a618:	bf58      	it	pl
 800a61a:	6963      	ldrpl	r3, [r4, #20]
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	e7f4      	b.n	800a60a <__swsetup_r+0x92>
 800a620:	2000      	movs	r0, #0
 800a622:	e7f7      	b.n	800a614 <__swsetup_r+0x9c>
 800a624:	200001f8 	.word	0x200001f8

0800a628 <memset>:
 800a628:	4402      	add	r2, r0
 800a62a:	4603      	mov	r3, r0
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d100      	bne.n	800a632 <memset+0xa>
 800a630:	4770      	bx	lr
 800a632:	f803 1b01 	strb.w	r1, [r3], #1
 800a636:	e7f9      	b.n	800a62c <memset+0x4>

0800a638 <strncmp>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	b16a      	cbz	r2, 800a658 <strncmp+0x20>
 800a63c:	3901      	subs	r1, #1
 800a63e:	1884      	adds	r4, r0, r2
 800a640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a648:	429a      	cmp	r2, r3
 800a64a:	d103      	bne.n	800a654 <strncmp+0x1c>
 800a64c:	42a0      	cmp	r0, r4
 800a64e:	d001      	beq.n	800a654 <strncmp+0x1c>
 800a650:	2a00      	cmp	r2, #0
 800a652:	d1f5      	bne.n	800a640 <strncmp+0x8>
 800a654:	1ad0      	subs	r0, r2, r3
 800a656:	bd10      	pop	{r4, pc}
 800a658:	4610      	mov	r0, r2
 800a65a:	e7fc      	b.n	800a656 <strncmp+0x1e>

0800a65c <strncpy>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	3901      	subs	r1, #1
 800a660:	4603      	mov	r3, r0
 800a662:	b132      	cbz	r2, 800a672 <strncpy+0x16>
 800a664:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a668:	f803 4b01 	strb.w	r4, [r3], #1
 800a66c:	3a01      	subs	r2, #1
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d1f7      	bne.n	800a662 <strncpy+0x6>
 800a672:	441a      	add	r2, r3
 800a674:	2100      	movs	r1, #0
 800a676:	4293      	cmp	r3, r2
 800a678:	d100      	bne.n	800a67c <strncpy+0x20>
 800a67a:	bd10      	pop	{r4, pc}
 800a67c:	f803 1b01 	strb.w	r1, [r3], #1
 800a680:	e7f9      	b.n	800a676 <strncpy+0x1a>
	...

0800a684 <_localeconv_r>:
 800a684:	4800      	ldr	r0, [pc, #0]	; (800a688 <_localeconv_r+0x4>)
 800a686:	4770      	bx	lr
 800a688:	20000130 	.word	0x20000130

0800a68c <_close_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d06      	ldr	r5, [pc, #24]	; (800a6a8 <_close_r+0x1c>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f7f8 fbfb 	bl	8002e92 <_close>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_close_r+0x1a>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_close_r+0x1a>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	20000fd0 	.word	0x20000fd0

0800a6ac <_lseek_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_lseek_r+0x20>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7f8 fc10 	bl	8002ee0 <_lseek>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_lseek_r+0x1e>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_lseek_r+0x1e>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	20000fd0 	.word	0x20000fd0

0800a6d0 <_read_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d07      	ldr	r5, [pc, #28]	; (800a6f0 <_read_r+0x20>)
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	4611      	mov	r1, r2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f7f8 fbba 	bl	8002e58 <_read>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_read_r+0x1e>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_read_r+0x1e>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20000fd0 	.word	0x20000fd0

0800a6f4 <_write_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_write_r+0x20>)
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	f7f6 fee2 	bl	80014cc <_write>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_write_r+0x1e>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_write_r+0x1e>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20000fd0 	.word	0x20000fd0

0800a718 <__errno>:
 800a718:	4b01      	ldr	r3, [pc, #4]	; (800a720 <__errno+0x8>)
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	200001f8 	.word	0x200001f8

0800a724 <__libc_init_array>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4d0d      	ldr	r5, [pc, #52]	; (800a75c <__libc_init_array+0x38>)
 800a728:	4c0d      	ldr	r4, [pc, #52]	; (800a760 <__libc_init_array+0x3c>)
 800a72a:	1b64      	subs	r4, r4, r5
 800a72c:	10a4      	asrs	r4, r4, #2
 800a72e:	2600      	movs	r6, #0
 800a730:	42a6      	cmp	r6, r4
 800a732:	d109      	bne.n	800a748 <__libc_init_array+0x24>
 800a734:	4d0b      	ldr	r5, [pc, #44]	; (800a764 <__libc_init_array+0x40>)
 800a736:	4c0c      	ldr	r4, [pc, #48]	; (800a768 <__libc_init_array+0x44>)
 800a738:	f002 fc92 	bl	800d060 <_init>
 800a73c:	1b64      	subs	r4, r4, r5
 800a73e:	10a4      	asrs	r4, r4, #2
 800a740:	2600      	movs	r6, #0
 800a742:	42a6      	cmp	r6, r4
 800a744:	d105      	bne.n	800a752 <__libc_init_array+0x2e>
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74c:	4798      	blx	r3
 800a74e:	3601      	adds	r6, #1
 800a750:	e7ee      	b.n	800a730 <__libc_init_array+0xc>
 800a752:	f855 3b04 	ldr.w	r3, [r5], #4
 800a756:	4798      	blx	r3
 800a758:	3601      	adds	r6, #1
 800a75a:	e7f2      	b.n	800a742 <__libc_init_array+0x1e>
 800a75c:	0800d7bc 	.word	0x0800d7bc
 800a760:	0800d7bc 	.word	0x0800d7bc
 800a764:	0800d7bc 	.word	0x0800d7bc
 800a768:	0800d7c0 	.word	0x0800d7c0

0800a76c <__retarget_lock_acquire_recursive>:
 800a76c:	4770      	bx	lr

0800a76e <__retarget_lock_release_recursive>:
 800a76e:	4770      	bx	lr

0800a770 <memcpy>:
 800a770:	440a      	add	r2, r1
 800a772:	4291      	cmp	r1, r2
 800a774:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a778:	d100      	bne.n	800a77c <memcpy+0xc>
 800a77a:	4770      	bx	lr
 800a77c:	b510      	push	{r4, lr}
 800a77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a782:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a786:	4291      	cmp	r1, r2
 800a788:	d1f9      	bne.n	800a77e <memcpy+0xe>
 800a78a:	bd10      	pop	{r4, pc}
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <nan>:
 800a790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a798 <nan+0x8>
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	00000000 	.word	0x00000000
 800a79c:	7ff80000 	.word	0x7ff80000

0800a7a0 <quorem>:
 800a7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	6903      	ldr	r3, [r0, #16]
 800a7a6:	690c      	ldr	r4, [r1, #16]
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	db7e      	blt.n	800a8ac <quorem+0x10c>
 800a7ae:	3c01      	subs	r4, #1
 800a7b0:	f101 0814 	add.w	r8, r1, #20
 800a7b4:	f100 0514 	add.w	r5, r0, #20
 800a7b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7d6:	d331      	bcc.n	800a83c <quorem+0x9c>
 800a7d8:	f04f 0e00 	mov.w	lr, #0
 800a7dc:	4640      	mov	r0, r8
 800a7de:	46ac      	mov	ip, r5
 800a7e0:	46f2      	mov	sl, lr
 800a7e2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7e6:	b293      	uxth	r3, r2
 800a7e8:	fb06 e303 	mla	r3, r6, r3, lr
 800a7ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7f0:	0c1a      	lsrs	r2, r3, #16
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a7f8:	f8dc a000 	ldr.w	sl, [ip]
 800a7fc:	fa13 f38a 	uxtah	r3, r3, sl
 800a800:	fb06 220e 	mla	r2, r6, lr, r2
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	9b00      	ldr	r3, [sp, #0]
 800a808:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a80c:	b292      	uxth	r2, r2
 800a80e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a816:	f8bd 3000 	ldrh.w	r3, [sp]
 800a81a:	4581      	cmp	r9, r0
 800a81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a820:	f84c 3b04 	str.w	r3, [ip], #4
 800a824:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a828:	d2db      	bcs.n	800a7e2 <quorem+0x42>
 800a82a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a82e:	b92b      	cbnz	r3, 800a83c <quorem+0x9c>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	3b04      	subs	r3, #4
 800a834:	429d      	cmp	r5, r3
 800a836:	461a      	mov	r2, r3
 800a838:	d32c      	bcc.n	800a894 <quorem+0xf4>
 800a83a:	613c      	str	r4, [r7, #16]
 800a83c:	4638      	mov	r0, r7
 800a83e:	f001 fd59 	bl	800c2f4 <__mcmp>
 800a842:	2800      	cmp	r0, #0
 800a844:	db22      	blt.n	800a88c <quorem+0xec>
 800a846:	3601      	adds	r6, #1
 800a848:	4629      	mov	r1, r5
 800a84a:	2000      	movs	r0, #0
 800a84c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a850:	f8d1 c000 	ldr.w	ip, [r1]
 800a854:	b293      	uxth	r3, r2
 800a856:	1ac3      	subs	r3, r0, r3
 800a858:	0c12      	lsrs	r2, r2, #16
 800a85a:	fa13 f38c 	uxtah	r3, r3, ip
 800a85e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a862:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a866:	b29b      	uxth	r3, r3
 800a868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a86c:	45c1      	cmp	r9, r8
 800a86e:	f841 3b04 	str.w	r3, [r1], #4
 800a872:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a876:	d2e9      	bcs.n	800a84c <quorem+0xac>
 800a878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a87c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a880:	b922      	cbnz	r2, 800a88c <quorem+0xec>
 800a882:	3b04      	subs	r3, #4
 800a884:	429d      	cmp	r5, r3
 800a886:	461a      	mov	r2, r3
 800a888:	d30a      	bcc.n	800a8a0 <quorem+0x100>
 800a88a:	613c      	str	r4, [r7, #16]
 800a88c:	4630      	mov	r0, r6
 800a88e:	b003      	add	sp, #12
 800a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a894:	6812      	ldr	r2, [r2, #0]
 800a896:	3b04      	subs	r3, #4
 800a898:	2a00      	cmp	r2, #0
 800a89a:	d1ce      	bne.n	800a83a <quorem+0x9a>
 800a89c:	3c01      	subs	r4, #1
 800a89e:	e7c9      	b.n	800a834 <quorem+0x94>
 800a8a0:	6812      	ldr	r2, [r2, #0]
 800a8a2:	3b04      	subs	r3, #4
 800a8a4:	2a00      	cmp	r2, #0
 800a8a6:	d1f0      	bne.n	800a88a <quorem+0xea>
 800a8a8:	3c01      	subs	r4, #1
 800a8aa:	e7eb      	b.n	800a884 <quorem+0xe4>
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	e7ee      	b.n	800a88e <quorem+0xee>

0800a8b0 <_dtoa_r>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ed2d 8b04 	vpush	{d8-d9}
 800a8b8:	69c5      	ldr	r5, [r0, #28]
 800a8ba:	b093      	sub	sp, #76	; 0x4c
 800a8bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8c0:	ec57 6b10 	vmov	r6, r7, d0
 800a8c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8c8:	9107      	str	r1, [sp, #28]
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a8ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d0:	b975      	cbnz	r5, 800a8f0 <_dtoa_r+0x40>
 800a8d2:	2010      	movs	r0, #16
 800a8d4:	f001 f982 	bl	800bbdc <malloc>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	61e0      	str	r0, [r4, #28]
 800a8dc:	b920      	cbnz	r0, 800a8e8 <_dtoa_r+0x38>
 800a8de:	4bae      	ldr	r3, [pc, #696]	; (800ab98 <_dtoa_r+0x2e8>)
 800a8e0:	21ef      	movs	r1, #239	; 0xef
 800a8e2:	48ae      	ldr	r0, [pc, #696]	; (800ab9c <_dtoa_r+0x2ec>)
 800a8e4:	f002 faf2 	bl	800cecc <__assert_func>
 800a8e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8ec:	6005      	str	r5, [r0, #0]
 800a8ee:	60c5      	str	r5, [r0, #12]
 800a8f0:	69e3      	ldr	r3, [r4, #28]
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	b151      	cbz	r1, 800a90c <_dtoa_r+0x5c>
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	604a      	str	r2, [r1, #4]
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4093      	lsls	r3, r2
 800a8fe:	608b      	str	r3, [r1, #8]
 800a900:	4620      	mov	r0, r4
 800a902:	f001 fa71 	bl	800bde8 <_Bfree>
 800a906:	69e3      	ldr	r3, [r4, #28]
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	1e3b      	subs	r3, r7, #0
 800a90e:	bfbb      	ittet	lt
 800a910:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a914:	9303      	strlt	r3, [sp, #12]
 800a916:	2300      	movge	r3, #0
 800a918:	2201      	movlt	r2, #1
 800a91a:	bfac      	ite	ge
 800a91c:	f8c8 3000 	strge.w	r3, [r8]
 800a920:	f8c8 2000 	strlt.w	r2, [r8]
 800a924:	4b9e      	ldr	r3, [pc, #632]	; (800aba0 <_dtoa_r+0x2f0>)
 800a926:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a92a:	ea33 0308 	bics.w	r3, r3, r8
 800a92e:	d11b      	bne.n	800a968 <_dtoa_r+0xb8>
 800a930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a932:	f242 730f 	movw	r3, #9999	; 0x270f
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a93c:	4333      	orrs	r3, r6
 800a93e:	f000 8593 	beq.w	800b468 <_dtoa_r+0xbb8>
 800a942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a944:	b963      	cbnz	r3, 800a960 <_dtoa_r+0xb0>
 800a946:	4b97      	ldr	r3, [pc, #604]	; (800aba4 <_dtoa_r+0x2f4>)
 800a948:	e027      	b.n	800a99a <_dtoa_r+0xea>
 800a94a:	4b97      	ldr	r3, [pc, #604]	; (800aba8 <_dtoa_r+0x2f8>)
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	9800      	ldr	r0, [sp, #0]
 800a956:	b013      	add	sp, #76	; 0x4c
 800a958:	ecbd 8b04 	vpop	{d8-d9}
 800a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a960:	4b90      	ldr	r3, [pc, #576]	; (800aba4 <_dtoa_r+0x2f4>)
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	3303      	adds	r3, #3
 800a966:	e7f3      	b.n	800a950 <_dtoa_r+0xa0>
 800a968:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a96c:	2200      	movs	r2, #0
 800a96e:	ec51 0b17 	vmov	r0, r1, d7
 800a972:	eeb0 8a47 	vmov.f32	s16, s14
 800a976:	eef0 8a67 	vmov.f32	s17, s15
 800a97a:	2300      	movs	r3, #0
 800a97c:	f7f6 f8b4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a980:	4681      	mov	r9, r0
 800a982:	b160      	cbz	r0, 800a99e <_dtoa_r+0xee>
 800a984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a986:	2301      	movs	r3, #1
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8568 	beq.w	800b462 <_dtoa_r+0xbb2>
 800a992:	4b86      	ldr	r3, [pc, #536]	; (800abac <_dtoa_r+0x2fc>)
 800a994:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	3b01      	subs	r3, #1
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	e7da      	b.n	800a954 <_dtoa_r+0xa4>
 800a99e:	aa10      	add	r2, sp, #64	; 0x40
 800a9a0:	a911      	add	r1, sp, #68	; 0x44
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a9a8:	eef0 0a68 	vmov.f32	s1, s17
 800a9ac:	f001 fdb8 	bl	800c520 <__d2b>
 800a9b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	d07f      	beq.n	800aaba <_dtoa_r+0x20a>
 800a9ba:	ee18 3a90 	vmov	r3, s17
 800a9be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9c6:	ec51 0b18 	vmov	r0, r1, d8
 800a9ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4b75      	ldr	r3, [pc, #468]	; (800abb0 <_dtoa_r+0x300>)
 800a9dc:	f7f5 fc64 	bl	80002a8 <__aeabi_dsub>
 800a9e0:	a367      	add	r3, pc, #412	; (adr r3, 800ab80 <_dtoa_r+0x2d0>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f5 fe17 	bl	8000618 <__aeabi_dmul>
 800a9ea:	a367      	add	r3, pc, #412	; (adr r3, 800ab88 <_dtoa_r+0x2d8>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fc5c 	bl	80002ac <__adddf3>
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	460f      	mov	r7, r1
 800a9fa:	f7f5 fda3 	bl	8000544 <__aeabi_i2d>
 800a9fe:	a364      	add	r3, pc, #400	; (adr r3, 800ab90 <_dtoa_r+0x2e0>)
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 fe08 	bl	8000618 <__aeabi_dmul>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 fc4c 	bl	80002ac <__adddf3>
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	f7f6 f8ae 	bl	8000b78 <__aeabi_d2iz>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4683      	mov	fp, r0
 800aa20:	2300      	movs	r3, #0
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f6 f869 	bl	8000afc <__aeabi_dcmplt>
 800aa2a:	b148      	cbz	r0, 800aa40 <_dtoa_r+0x190>
 800aa2c:	4658      	mov	r0, fp
 800aa2e:	f7f5 fd89 	bl	8000544 <__aeabi_i2d>
 800aa32:	4632      	mov	r2, r6
 800aa34:	463b      	mov	r3, r7
 800aa36:	f7f6 f857 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa3a:	b908      	cbnz	r0, 800aa40 <_dtoa_r+0x190>
 800aa3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aa40:	f1bb 0f16 	cmp.w	fp, #22
 800aa44:	d857      	bhi.n	800aaf6 <_dtoa_r+0x246>
 800aa46:	4b5b      	ldr	r3, [pc, #364]	; (800abb4 <_dtoa_r+0x304>)
 800aa48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	ec51 0b18 	vmov	r0, r1, d8
 800aa54:	f7f6 f852 	bl	8000afc <__aeabi_dcmplt>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d04e      	beq.n	800aafa <_dtoa_r+0x24a>
 800aa5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aa60:	2300      	movs	r3, #0
 800aa62:	930c      	str	r3, [sp, #48]	; 0x30
 800aa64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa66:	1b5b      	subs	r3, r3, r5
 800aa68:	1e5a      	subs	r2, r3, #1
 800aa6a:	bf45      	ittet	mi
 800aa6c:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa70:	9305      	strmi	r3, [sp, #20]
 800aa72:	2300      	movpl	r3, #0
 800aa74:	2300      	movmi	r3, #0
 800aa76:	9206      	str	r2, [sp, #24]
 800aa78:	bf54      	ite	pl
 800aa7a:	9305      	strpl	r3, [sp, #20]
 800aa7c:	9306      	strmi	r3, [sp, #24]
 800aa7e:	f1bb 0f00 	cmp.w	fp, #0
 800aa82:	db3c      	blt.n	800aafe <_dtoa_r+0x24e>
 800aa84:	9b06      	ldr	r3, [sp, #24]
 800aa86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa8a:	445b      	add	r3, fp
 800aa8c:	9306      	str	r3, [sp, #24]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9308      	str	r3, [sp, #32]
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	2b09      	cmp	r3, #9
 800aa96:	d868      	bhi.n	800ab6a <_dtoa_r+0x2ba>
 800aa98:	2b05      	cmp	r3, #5
 800aa9a:	bfc4      	itt	gt
 800aa9c:	3b04      	subgt	r3, #4
 800aa9e:	9307      	strgt	r3, [sp, #28]
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	f1a3 0302 	sub.w	r3, r3, #2
 800aaa6:	bfcc      	ite	gt
 800aaa8:	2500      	movgt	r5, #0
 800aaaa:	2501      	movle	r5, #1
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	f200 8085 	bhi.w	800abbc <_dtoa_r+0x30c>
 800aab2:	e8df f003 	tbb	[pc, r3]
 800aab6:	3b2e      	.short	0x3b2e
 800aab8:	5839      	.short	0x5839
 800aaba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aabe:	441d      	add	r5, r3
 800aac0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	bfc1      	itttt	gt
 800aac8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aacc:	fa08 f803 	lslgt.w	r8, r8, r3
 800aad0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aad4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aad8:	bfd6      	itet	le
 800aada:	f1c3 0320 	rsble	r3, r3, #32
 800aade:	ea48 0003 	orrgt.w	r0, r8, r3
 800aae2:	fa06 f003 	lslle.w	r0, r6, r3
 800aae6:	f7f5 fd1d 	bl	8000524 <__aeabi_ui2d>
 800aaea:	2201      	movs	r2, #1
 800aaec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aaf0:	3d01      	subs	r5, #1
 800aaf2:	920e      	str	r2, [sp, #56]	; 0x38
 800aaf4:	e76f      	b.n	800a9d6 <_dtoa_r+0x126>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e7b3      	b.n	800aa62 <_dtoa_r+0x1b2>
 800aafa:	900c      	str	r0, [sp, #48]	; 0x30
 800aafc:	e7b2      	b.n	800aa64 <_dtoa_r+0x1b4>
 800aafe:	9b05      	ldr	r3, [sp, #20]
 800ab00:	eba3 030b 	sub.w	r3, r3, fp
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	f1cb 0300 	rsb	r3, fp, #0
 800ab0a:	9308      	str	r3, [sp, #32]
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab10:	e7bf      	b.n	800aa92 <_dtoa_r+0x1e2>
 800ab12:	2300      	movs	r3, #0
 800ab14:	9309      	str	r3, [sp, #36]	; 0x24
 800ab16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	dc52      	bgt.n	800abc2 <_dtoa_r+0x312>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	461a      	mov	r2, r3
 800ab24:	920a      	str	r2, [sp, #40]	; 0x28
 800ab26:	e00b      	b.n	800ab40 <_dtoa_r+0x290>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e7f3      	b.n	800ab14 <_dtoa_r+0x264>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab32:	445b      	add	r3, fp
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	3301      	adds	r3, #1
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	bfb8      	it	lt
 800ab3e:	2301      	movlt	r3, #1
 800ab40:	69e0      	ldr	r0, [r4, #28]
 800ab42:	2100      	movs	r1, #0
 800ab44:	2204      	movs	r2, #4
 800ab46:	f102 0614 	add.w	r6, r2, #20
 800ab4a:	429e      	cmp	r6, r3
 800ab4c:	d93d      	bls.n	800abca <_dtoa_r+0x31a>
 800ab4e:	6041      	str	r1, [r0, #4]
 800ab50:	4620      	mov	r0, r4
 800ab52:	f001 f909 	bl	800bd68 <_Balloc>
 800ab56:	9000      	str	r0, [sp, #0]
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d139      	bne.n	800abd0 <_dtoa_r+0x320>
 800ab5c:	4b16      	ldr	r3, [pc, #88]	; (800abb8 <_dtoa_r+0x308>)
 800ab5e:	4602      	mov	r2, r0
 800ab60:	f240 11af 	movw	r1, #431	; 0x1af
 800ab64:	e6bd      	b.n	800a8e2 <_dtoa_r+0x32>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e7e1      	b.n	800ab2e <_dtoa_r+0x27e>
 800ab6a:	2501      	movs	r5, #1
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9307      	str	r3, [sp, #28]
 800ab70:	9509      	str	r5, [sp, #36]	; 0x24
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2312      	movs	r3, #18
 800ab7e:	e7d1      	b.n	800ab24 <_dtoa_r+0x274>
 800ab80:	636f4361 	.word	0x636f4361
 800ab84:	3fd287a7 	.word	0x3fd287a7
 800ab88:	8b60c8b3 	.word	0x8b60c8b3
 800ab8c:	3fc68a28 	.word	0x3fc68a28
 800ab90:	509f79fb 	.word	0x509f79fb
 800ab94:	3fd34413 	.word	0x3fd34413
 800ab98:	0800d52a 	.word	0x0800d52a
 800ab9c:	0800d541 	.word	0x0800d541
 800aba0:	7ff00000 	.word	0x7ff00000
 800aba4:	0800d526 	.word	0x0800d526
 800aba8:	0800d51d 	.word	0x0800d51d
 800abac:	0800d4f2 	.word	0x0800d4f2
 800abb0:	3ff80000 	.word	0x3ff80000
 800abb4:	0800d690 	.word	0x0800d690
 800abb8:	0800d599 	.word	0x0800d599
 800abbc:	2301      	movs	r3, #1
 800abbe:	9309      	str	r3, [sp, #36]	; 0x24
 800abc0:	e7d7      	b.n	800ab72 <_dtoa_r+0x2c2>
 800abc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	9304      	str	r3, [sp, #16]
 800abc8:	e7ba      	b.n	800ab40 <_dtoa_r+0x290>
 800abca:	3101      	adds	r1, #1
 800abcc:	0052      	lsls	r2, r2, #1
 800abce:	e7ba      	b.n	800ab46 <_dtoa_r+0x296>
 800abd0:	69e3      	ldr	r3, [r4, #28]
 800abd2:	9a00      	ldr	r2, [sp, #0]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	2b0e      	cmp	r3, #14
 800abda:	f200 80a8 	bhi.w	800ad2e <_dtoa_r+0x47e>
 800abde:	2d00      	cmp	r5, #0
 800abe0:	f000 80a5 	beq.w	800ad2e <_dtoa_r+0x47e>
 800abe4:	f1bb 0f00 	cmp.w	fp, #0
 800abe8:	dd38      	ble.n	800ac5c <_dtoa_r+0x3ac>
 800abea:	4bc0      	ldr	r3, [pc, #768]	; (800aeec <_dtoa_r+0x63c>)
 800abec:	f00b 020f 	and.w	r2, fp, #15
 800abf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abf4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800abf8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800abfc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ac00:	d019      	beq.n	800ac36 <_dtoa_r+0x386>
 800ac02:	4bbb      	ldr	r3, [pc, #748]	; (800aef0 <_dtoa_r+0x640>)
 800ac04:	ec51 0b18 	vmov	r0, r1, d8
 800ac08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac0c:	f7f5 fe2e 	bl	800086c <__aeabi_ddiv>
 800ac10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac14:	f008 080f 	and.w	r8, r8, #15
 800ac18:	2503      	movs	r5, #3
 800ac1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aef0 <_dtoa_r+0x640>
 800ac1e:	f1b8 0f00 	cmp.w	r8, #0
 800ac22:	d10a      	bne.n	800ac3a <_dtoa_r+0x38a>
 800ac24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac28:	4632      	mov	r2, r6
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	f7f5 fe1e 	bl	800086c <__aeabi_ddiv>
 800ac30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac34:	e02b      	b.n	800ac8e <_dtoa_r+0x3de>
 800ac36:	2502      	movs	r5, #2
 800ac38:	e7ef      	b.n	800ac1a <_dtoa_r+0x36a>
 800ac3a:	f018 0f01 	tst.w	r8, #1
 800ac3e:	d008      	beq.n	800ac52 <_dtoa_r+0x3a2>
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac48:	f7f5 fce6 	bl	8000618 <__aeabi_dmul>
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460f      	mov	r7, r1
 800ac52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac56:	f109 0908 	add.w	r9, r9, #8
 800ac5a:	e7e0      	b.n	800ac1e <_dtoa_r+0x36e>
 800ac5c:	f000 809f 	beq.w	800ad9e <_dtoa_r+0x4ee>
 800ac60:	f1cb 0600 	rsb	r6, fp, #0
 800ac64:	4ba1      	ldr	r3, [pc, #644]	; (800aeec <_dtoa_r+0x63c>)
 800ac66:	4fa2      	ldr	r7, [pc, #648]	; (800aef0 <_dtoa_r+0x640>)
 800ac68:	f006 020f 	and.w	r2, r6, #15
 800ac6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	ec51 0b18 	vmov	r0, r1, d8
 800ac78:	f7f5 fcce 	bl	8000618 <__aeabi_dmul>
 800ac7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac80:	1136      	asrs	r6, r6, #4
 800ac82:	2300      	movs	r3, #0
 800ac84:	2502      	movs	r5, #2
 800ac86:	2e00      	cmp	r6, #0
 800ac88:	d17e      	bne.n	800ad88 <_dtoa_r+0x4d8>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1d0      	bne.n	800ac30 <_dtoa_r+0x380>
 800ac8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8084 	beq.w	800ada2 <_dtoa_r+0x4f2>
 800ac9a:	4b96      	ldr	r3, [pc, #600]	; (800aef4 <_dtoa_r+0x644>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	4640      	mov	r0, r8
 800aca0:	4649      	mov	r1, r9
 800aca2:	f7f5 ff2b 	bl	8000afc <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d07b      	beq.n	800ada2 <_dtoa_r+0x4f2>
 800acaa:	9b04      	ldr	r3, [sp, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d078      	beq.n	800ada2 <_dtoa_r+0x4f2>
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dd39      	ble.n	800ad2a <_dtoa_r+0x47a>
 800acb6:	4b90      	ldr	r3, [pc, #576]	; (800aef8 <_dtoa_r+0x648>)
 800acb8:	2200      	movs	r2, #0
 800acba:	4640      	mov	r0, r8
 800acbc:	4649      	mov	r1, r9
 800acbe:	f7f5 fcab 	bl	8000618 <__aeabi_dmul>
 800acc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc6:	9e01      	ldr	r6, [sp, #4]
 800acc8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800accc:	3501      	adds	r5, #1
 800acce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acd2:	4628      	mov	r0, r5
 800acd4:	f7f5 fc36 	bl	8000544 <__aeabi_i2d>
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	f7f5 fc9c 	bl	8000618 <__aeabi_dmul>
 800ace0:	4b86      	ldr	r3, [pc, #536]	; (800aefc <_dtoa_r+0x64c>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	f7f5 fae2 	bl	80002ac <__adddf3>
 800ace8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800acec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	2e00      	cmp	r6, #0
 800acf4:	d158      	bne.n	800ada8 <_dtoa_r+0x4f8>
 800acf6:	4b82      	ldr	r3, [pc, #520]	; (800af00 <_dtoa_r+0x650>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	4640      	mov	r0, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7f5 fad3 	bl	80002a8 <__aeabi_dsub>
 800ad02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad06:	4680      	mov	r8, r0
 800ad08:	4689      	mov	r9, r1
 800ad0a:	f7f5 ff15 	bl	8000b38 <__aeabi_dcmpgt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f040 8296 	bne.w	800b240 <_dtoa_r+0x990>
 800ad14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad18:	4640      	mov	r0, r8
 800ad1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 feec 	bl	8000afc <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 8289 	bne.w	800b23c <_dtoa_r+0x98c>
 800ad2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f2c0 814e 	blt.w	800afd2 <_dtoa_r+0x722>
 800ad36:	f1bb 0f0e 	cmp.w	fp, #14
 800ad3a:	f300 814a 	bgt.w	800afd2 <_dtoa_r+0x722>
 800ad3e:	4b6b      	ldr	r3, [pc, #428]	; (800aeec <_dtoa_r+0x63c>)
 800ad40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f280 80dc 	bge.w	800af08 <_dtoa_r+0x658>
 800ad50:	9b04      	ldr	r3, [sp, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f300 80d8 	bgt.w	800af08 <_dtoa_r+0x658>
 800ad58:	f040 826f 	bne.w	800b23a <_dtoa_r+0x98a>
 800ad5c:	4b68      	ldr	r3, [pc, #416]	; (800af00 <_dtoa_r+0x650>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4640      	mov	r0, r8
 800ad62:	4649      	mov	r1, r9
 800ad64:	f7f5 fc58 	bl	8000618 <__aeabi_dmul>
 800ad68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad6c:	f7f5 feda 	bl	8000b24 <__aeabi_dcmpge>
 800ad70:	9e04      	ldr	r6, [sp, #16]
 800ad72:	4637      	mov	r7, r6
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f040 8245 	bne.w	800b204 <_dtoa_r+0x954>
 800ad7a:	9d00      	ldr	r5, [sp, #0]
 800ad7c:	2331      	movs	r3, #49	; 0x31
 800ad7e:	f805 3b01 	strb.w	r3, [r5], #1
 800ad82:	f10b 0b01 	add.w	fp, fp, #1
 800ad86:	e241      	b.n	800b20c <_dtoa_r+0x95c>
 800ad88:	07f2      	lsls	r2, r6, #31
 800ad8a:	d505      	bpl.n	800ad98 <_dtoa_r+0x4e8>
 800ad8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad90:	f7f5 fc42 	bl	8000618 <__aeabi_dmul>
 800ad94:	3501      	adds	r5, #1
 800ad96:	2301      	movs	r3, #1
 800ad98:	1076      	asrs	r6, r6, #1
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	e773      	b.n	800ac86 <_dtoa_r+0x3d6>
 800ad9e:	2502      	movs	r5, #2
 800ada0:	e775      	b.n	800ac8e <_dtoa_r+0x3de>
 800ada2:	9e04      	ldr	r6, [sp, #16]
 800ada4:	465f      	mov	r7, fp
 800ada6:	e792      	b.n	800acce <_dtoa_r+0x41e>
 800ada8:	9900      	ldr	r1, [sp, #0]
 800adaa:	4b50      	ldr	r3, [pc, #320]	; (800aeec <_dtoa_r+0x63c>)
 800adac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adb0:	4431      	add	r1, r6
 800adb2:	9102      	str	r1, [sp, #8]
 800adb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adb6:	eeb0 9a47 	vmov.f32	s18, s14
 800adba:	eef0 9a67 	vmov.f32	s19, s15
 800adbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adc6:	2900      	cmp	r1, #0
 800adc8:	d044      	beq.n	800ae54 <_dtoa_r+0x5a4>
 800adca:	494e      	ldr	r1, [pc, #312]	; (800af04 <_dtoa_r+0x654>)
 800adcc:	2000      	movs	r0, #0
 800adce:	f7f5 fd4d 	bl	800086c <__aeabi_ddiv>
 800add2:	ec53 2b19 	vmov	r2, r3, d9
 800add6:	f7f5 fa67 	bl	80002a8 <__aeabi_dsub>
 800adda:	9d00      	ldr	r5, [sp, #0]
 800addc:	ec41 0b19 	vmov	d9, r0, r1
 800ade0:	4649      	mov	r1, r9
 800ade2:	4640      	mov	r0, r8
 800ade4:	f7f5 fec8 	bl	8000b78 <__aeabi_d2iz>
 800ade8:	4606      	mov	r6, r0
 800adea:	f7f5 fbab 	bl	8000544 <__aeabi_i2d>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4640      	mov	r0, r8
 800adf4:	4649      	mov	r1, r9
 800adf6:	f7f5 fa57 	bl	80002a8 <__aeabi_dsub>
 800adfa:	3630      	adds	r6, #48	; 0x30
 800adfc:	f805 6b01 	strb.w	r6, [r5], #1
 800ae00:	ec53 2b19 	vmov	r2, r3, d9
 800ae04:	4680      	mov	r8, r0
 800ae06:	4689      	mov	r9, r1
 800ae08:	f7f5 fe78 	bl	8000afc <__aeabi_dcmplt>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d164      	bne.n	800aeda <_dtoa_r+0x62a>
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	4937      	ldr	r1, [pc, #220]	; (800aef4 <_dtoa_r+0x644>)
 800ae16:	2000      	movs	r0, #0
 800ae18:	f7f5 fa46 	bl	80002a8 <__aeabi_dsub>
 800ae1c:	ec53 2b19 	vmov	r2, r3, d9
 800ae20:	f7f5 fe6c 	bl	8000afc <__aeabi_dcmplt>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f040 80b6 	bne.w	800af96 <_dtoa_r+0x6e6>
 800ae2a:	9b02      	ldr	r3, [sp, #8]
 800ae2c:	429d      	cmp	r5, r3
 800ae2e:	f43f af7c 	beq.w	800ad2a <_dtoa_r+0x47a>
 800ae32:	4b31      	ldr	r3, [pc, #196]	; (800aef8 <_dtoa_r+0x648>)
 800ae34:	ec51 0b19 	vmov	r0, r1, d9
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f7f5 fbed 	bl	8000618 <__aeabi_dmul>
 800ae3e:	4b2e      	ldr	r3, [pc, #184]	; (800aef8 <_dtoa_r+0x648>)
 800ae40:	ec41 0b19 	vmov	d9, r0, r1
 800ae44:	2200      	movs	r2, #0
 800ae46:	4640      	mov	r0, r8
 800ae48:	4649      	mov	r1, r9
 800ae4a:	f7f5 fbe5 	bl	8000618 <__aeabi_dmul>
 800ae4e:	4680      	mov	r8, r0
 800ae50:	4689      	mov	r9, r1
 800ae52:	e7c5      	b.n	800ade0 <_dtoa_r+0x530>
 800ae54:	ec51 0b17 	vmov	r0, r1, d7
 800ae58:	f7f5 fbde 	bl	8000618 <__aeabi_dmul>
 800ae5c:	9b02      	ldr	r3, [sp, #8]
 800ae5e:	9d00      	ldr	r5, [sp, #0]
 800ae60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae62:	ec41 0b19 	vmov	d9, r0, r1
 800ae66:	4649      	mov	r1, r9
 800ae68:	4640      	mov	r0, r8
 800ae6a:	f7f5 fe85 	bl	8000b78 <__aeabi_d2iz>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	f7f5 fb68 	bl	8000544 <__aeabi_i2d>
 800ae74:	3630      	adds	r6, #48	; 0x30
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	f7f5 fa13 	bl	80002a8 <__aeabi_dsub>
 800ae82:	f805 6b01 	strb.w	r6, [r5], #1
 800ae86:	9b02      	ldr	r3, [sp, #8]
 800ae88:	429d      	cmp	r5, r3
 800ae8a:	4680      	mov	r8, r0
 800ae8c:	4689      	mov	r9, r1
 800ae8e:	f04f 0200 	mov.w	r2, #0
 800ae92:	d124      	bne.n	800aede <_dtoa_r+0x62e>
 800ae94:	4b1b      	ldr	r3, [pc, #108]	; (800af04 <_dtoa_r+0x654>)
 800ae96:	ec51 0b19 	vmov	r0, r1, d9
 800ae9a:	f7f5 fa07 	bl	80002ac <__adddf3>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fe47 	bl	8000b38 <__aeabi_dcmpgt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d173      	bne.n	800af96 <_dtoa_r+0x6e6>
 800aeae:	ec53 2b19 	vmov	r2, r3, d9
 800aeb2:	4914      	ldr	r1, [pc, #80]	; (800af04 <_dtoa_r+0x654>)
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	f7f5 f9f7 	bl	80002a8 <__aeabi_dsub>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4640      	mov	r0, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	f7f5 fe1b 	bl	8000afc <__aeabi_dcmplt>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f43f af2f 	beq.w	800ad2a <_dtoa_r+0x47a>
 800aecc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aece:	1e6b      	subs	r3, r5, #1
 800aed0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aed2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aed6:	2b30      	cmp	r3, #48	; 0x30
 800aed8:	d0f8      	beq.n	800aecc <_dtoa_r+0x61c>
 800aeda:	46bb      	mov	fp, r7
 800aedc:	e04a      	b.n	800af74 <_dtoa_r+0x6c4>
 800aede:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <_dtoa_r+0x648>)
 800aee0:	f7f5 fb9a 	bl	8000618 <__aeabi_dmul>
 800aee4:	4680      	mov	r8, r0
 800aee6:	4689      	mov	r9, r1
 800aee8:	e7bd      	b.n	800ae66 <_dtoa_r+0x5b6>
 800aeea:	bf00      	nop
 800aeec:	0800d690 	.word	0x0800d690
 800aef0:	0800d668 	.word	0x0800d668
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	40240000 	.word	0x40240000
 800aefc:	401c0000 	.word	0x401c0000
 800af00:	40140000 	.word	0x40140000
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af0c:	9d00      	ldr	r5, [sp, #0]
 800af0e:	4642      	mov	r2, r8
 800af10:	464b      	mov	r3, r9
 800af12:	4630      	mov	r0, r6
 800af14:	4639      	mov	r1, r7
 800af16:	f7f5 fca9 	bl	800086c <__aeabi_ddiv>
 800af1a:	f7f5 fe2d 	bl	8000b78 <__aeabi_d2iz>
 800af1e:	9001      	str	r0, [sp, #4]
 800af20:	f7f5 fb10 	bl	8000544 <__aeabi_i2d>
 800af24:	4642      	mov	r2, r8
 800af26:	464b      	mov	r3, r9
 800af28:	f7f5 fb76 	bl	8000618 <__aeabi_dmul>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4630      	mov	r0, r6
 800af32:	4639      	mov	r1, r7
 800af34:	f7f5 f9b8 	bl	80002a8 <__aeabi_dsub>
 800af38:	9e01      	ldr	r6, [sp, #4]
 800af3a:	9f04      	ldr	r7, [sp, #16]
 800af3c:	3630      	adds	r6, #48	; 0x30
 800af3e:	f805 6b01 	strb.w	r6, [r5], #1
 800af42:	9e00      	ldr	r6, [sp, #0]
 800af44:	1bae      	subs	r6, r5, r6
 800af46:	42b7      	cmp	r7, r6
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	d134      	bne.n	800afb8 <_dtoa_r+0x708>
 800af4e:	f7f5 f9ad 	bl	80002ac <__adddf3>
 800af52:	4642      	mov	r2, r8
 800af54:	464b      	mov	r3, r9
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	f7f5 fded 	bl	8000b38 <__aeabi_dcmpgt>
 800af5e:	b9c8      	cbnz	r0, 800af94 <_dtoa_r+0x6e4>
 800af60:	4642      	mov	r2, r8
 800af62:	464b      	mov	r3, r9
 800af64:	4630      	mov	r0, r6
 800af66:	4639      	mov	r1, r7
 800af68:	f7f5 fdbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800af6c:	b110      	cbz	r0, 800af74 <_dtoa_r+0x6c4>
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	07db      	lsls	r3, r3, #31
 800af72:	d40f      	bmi.n	800af94 <_dtoa_r+0x6e4>
 800af74:	4651      	mov	r1, sl
 800af76:	4620      	mov	r0, r4
 800af78:	f000 ff36 	bl	800bde8 <_Bfree>
 800af7c:	2300      	movs	r3, #0
 800af7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af80:	702b      	strb	r3, [r5, #0]
 800af82:	f10b 0301 	add.w	r3, fp, #1
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f43f ace2 	beq.w	800a954 <_dtoa_r+0xa4>
 800af90:	601d      	str	r5, [r3, #0]
 800af92:	e4df      	b.n	800a954 <_dtoa_r+0xa4>
 800af94:	465f      	mov	r7, fp
 800af96:	462b      	mov	r3, r5
 800af98:	461d      	mov	r5, r3
 800af9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af9e:	2a39      	cmp	r2, #57	; 0x39
 800afa0:	d106      	bne.n	800afb0 <_dtoa_r+0x700>
 800afa2:	9a00      	ldr	r2, [sp, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d1f7      	bne.n	800af98 <_dtoa_r+0x6e8>
 800afa8:	9900      	ldr	r1, [sp, #0]
 800afaa:	2230      	movs	r2, #48	; 0x30
 800afac:	3701      	adds	r7, #1
 800afae:	700a      	strb	r2, [r1, #0]
 800afb0:	781a      	ldrb	r2, [r3, #0]
 800afb2:	3201      	adds	r2, #1
 800afb4:	701a      	strb	r2, [r3, #0]
 800afb6:	e790      	b.n	800aeda <_dtoa_r+0x62a>
 800afb8:	4ba3      	ldr	r3, [pc, #652]	; (800b248 <_dtoa_r+0x998>)
 800afba:	2200      	movs	r2, #0
 800afbc:	f7f5 fb2c 	bl	8000618 <__aeabi_dmul>
 800afc0:	2200      	movs	r2, #0
 800afc2:	2300      	movs	r3, #0
 800afc4:	4606      	mov	r6, r0
 800afc6:	460f      	mov	r7, r1
 800afc8:	f7f5 fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d09e      	beq.n	800af0e <_dtoa_r+0x65e>
 800afd0:	e7d0      	b.n	800af74 <_dtoa_r+0x6c4>
 800afd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	f000 80ca 	beq.w	800b16e <_dtoa_r+0x8be>
 800afda:	9a07      	ldr	r2, [sp, #28]
 800afdc:	2a01      	cmp	r2, #1
 800afde:	f300 80ad 	bgt.w	800b13c <_dtoa_r+0x88c>
 800afe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	f000 80a5 	beq.w	800b134 <_dtoa_r+0x884>
 800afea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afee:	9e08      	ldr	r6, [sp, #32]
 800aff0:	9d05      	ldr	r5, [sp, #20]
 800aff2:	9a05      	ldr	r2, [sp, #20]
 800aff4:	441a      	add	r2, r3
 800aff6:	9205      	str	r2, [sp, #20]
 800aff8:	9a06      	ldr	r2, [sp, #24]
 800affa:	2101      	movs	r1, #1
 800affc:	441a      	add	r2, r3
 800affe:	4620      	mov	r0, r4
 800b000:	9206      	str	r2, [sp, #24]
 800b002:	f000 fff1 	bl	800bfe8 <__i2b>
 800b006:	4607      	mov	r7, r0
 800b008:	b165      	cbz	r5, 800b024 <_dtoa_r+0x774>
 800b00a:	9b06      	ldr	r3, [sp, #24]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dd09      	ble.n	800b024 <_dtoa_r+0x774>
 800b010:	42ab      	cmp	r3, r5
 800b012:	9a05      	ldr	r2, [sp, #20]
 800b014:	bfa8      	it	ge
 800b016:	462b      	movge	r3, r5
 800b018:	1ad2      	subs	r2, r2, r3
 800b01a:	9205      	str	r2, [sp, #20]
 800b01c:	9a06      	ldr	r2, [sp, #24]
 800b01e:	1aed      	subs	r5, r5, r3
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	9306      	str	r3, [sp, #24]
 800b024:	9b08      	ldr	r3, [sp, #32]
 800b026:	b1f3      	cbz	r3, 800b066 <_dtoa_r+0x7b6>
 800b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 80a3 	beq.w	800b176 <_dtoa_r+0x8c6>
 800b030:	2e00      	cmp	r6, #0
 800b032:	dd10      	ble.n	800b056 <_dtoa_r+0x7a6>
 800b034:	4639      	mov	r1, r7
 800b036:	4632      	mov	r2, r6
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 f895 	bl	800c168 <__pow5mult>
 800b03e:	4652      	mov	r2, sl
 800b040:	4601      	mov	r1, r0
 800b042:	4607      	mov	r7, r0
 800b044:	4620      	mov	r0, r4
 800b046:	f000 ffe5 	bl	800c014 <__multiply>
 800b04a:	4651      	mov	r1, sl
 800b04c:	4680      	mov	r8, r0
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 feca 	bl	800bde8 <_Bfree>
 800b054:	46c2      	mov	sl, r8
 800b056:	9b08      	ldr	r3, [sp, #32]
 800b058:	1b9a      	subs	r2, r3, r6
 800b05a:	d004      	beq.n	800b066 <_dtoa_r+0x7b6>
 800b05c:	4651      	mov	r1, sl
 800b05e:	4620      	mov	r0, r4
 800b060:	f001 f882 	bl	800c168 <__pow5mult>
 800b064:	4682      	mov	sl, r0
 800b066:	2101      	movs	r1, #1
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 ffbd 	bl	800bfe8 <__i2b>
 800b06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b070:	2b00      	cmp	r3, #0
 800b072:	4606      	mov	r6, r0
 800b074:	f340 8081 	ble.w	800b17a <_dtoa_r+0x8ca>
 800b078:	461a      	mov	r2, r3
 800b07a:	4601      	mov	r1, r0
 800b07c:	4620      	mov	r0, r4
 800b07e:	f001 f873 	bl	800c168 <__pow5mult>
 800b082:	9b07      	ldr	r3, [sp, #28]
 800b084:	2b01      	cmp	r3, #1
 800b086:	4606      	mov	r6, r0
 800b088:	dd7a      	ble.n	800b180 <_dtoa_r+0x8d0>
 800b08a:	f04f 0800 	mov.w	r8, #0
 800b08e:	6933      	ldr	r3, [r6, #16]
 800b090:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b094:	6918      	ldr	r0, [r3, #16]
 800b096:	f000 ff59 	bl	800bf4c <__hi0bits>
 800b09a:	f1c0 0020 	rsb	r0, r0, #32
 800b09e:	9b06      	ldr	r3, [sp, #24]
 800b0a0:	4418      	add	r0, r3
 800b0a2:	f010 001f 	ands.w	r0, r0, #31
 800b0a6:	f000 8094 	beq.w	800b1d2 <_dtoa_r+0x922>
 800b0aa:	f1c0 0320 	rsb	r3, r0, #32
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	f340 8085 	ble.w	800b1be <_dtoa_r+0x90e>
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	f1c0 001c 	rsb	r0, r0, #28
 800b0ba:	4403      	add	r3, r0
 800b0bc:	9305      	str	r3, [sp, #20]
 800b0be:	9b06      	ldr	r3, [sp, #24]
 800b0c0:	4403      	add	r3, r0
 800b0c2:	4405      	add	r5, r0
 800b0c4:	9306      	str	r3, [sp, #24]
 800b0c6:	9b05      	ldr	r3, [sp, #20]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dd05      	ble.n	800b0d8 <_dtoa_r+0x828>
 800b0cc:	4651      	mov	r1, sl
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f001 f8a3 	bl	800c21c <__lshift>
 800b0d6:	4682      	mov	sl, r0
 800b0d8:	9b06      	ldr	r3, [sp, #24]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dd05      	ble.n	800b0ea <_dtoa_r+0x83a>
 800b0de:	4631      	mov	r1, r6
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f001 f89a 	bl	800c21c <__lshift>
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d072      	beq.n	800b1d6 <_dtoa_r+0x926>
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	f001 f8fe 	bl	800c2f4 <__mcmp>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	da6c      	bge.n	800b1d6 <_dtoa_r+0x926>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4651      	mov	r1, sl
 800b100:	220a      	movs	r2, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fe92 	bl	800be2c <__multadd>
 800b108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b10e:	4682      	mov	sl, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 81b0 	beq.w	800b476 <_dtoa_r+0xbc6>
 800b116:	2300      	movs	r3, #0
 800b118:	4639      	mov	r1, r7
 800b11a:	220a      	movs	r2, #10
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 fe85 	bl	800be2c <__multadd>
 800b122:	9b01      	ldr	r3, [sp, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	4607      	mov	r7, r0
 800b128:	f300 8096 	bgt.w	800b258 <_dtoa_r+0x9a8>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	dc59      	bgt.n	800b1e6 <_dtoa_r+0x936>
 800b132:	e091      	b.n	800b258 <_dtoa_r+0x9a8>
 800b134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b136:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b13a:	e758      	b.n	800afee <_dtoa_r+0x73e>
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	1e5e      	subs	r6, r3, #1
 800b140:	9b08      	ldr	r3, [sp, #32]
 800b142:	42b3      	cmp	r3, r6
 800b144:	bfbf      	itttt	lt
 800b146:	9b08      	ldrlt	r3, [sp, #32]
 800b148:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b14a:	9608      	strlt	r6, [sp, #32]
 800b14c:	1af3      	sublt	r3, r6, r3
 800b14e:	bfb4      	ite	lt
 800b150:	18d2      	addlt	r2, r2, r3
 800b152:	1b9e      	subge	r6, r3, r6
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	bfbc      	itt	lt
 800b158:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b15a:	2600      	movlt	r6, #0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	bfb7      	itett	lt
 800b160:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b164:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b168:	1a9d      	sublt	r5, r3, r2
 800b16a:	2300      	movlt	r3, #0
 800b16c:	e741      	b.n	800aff2 <_dtoa_r+0x742>
 800b16e:	9e08      	ldr	r6, [sp, #32]
 800b170:	9d05      	ldr	r5, [sp, #20]
 800b172:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b174:	e748      	b.n	800b008 <_dtoa_r+0x758>
 800b176:	9a08      	ldr	r2, [sp, #32]
 800b178:	e770      	b.n	800b05c <_dtoa_r+0x7ac>
 800b17a:	9b07      	ldr	r3, [sp, #28]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	dc19      	bgt.n	800b1b4 <_dtoa_r+0x904>
 800b180:	9b02      	ldr	r3, [sp, #8]
 800b182:	b9bb      	cbnz	r3, 800b1b4 <_dtoa_r+0x904>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18a:	b99b      	cbnz	r3, 800b1b4 <_dtoa_r+0x904>
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b192:	0d1b      	lsrs	r3, r3, #20
 800b194:	051b      	lsls	r3, r3, #20
 800b196:	b183      	cbz	r3, 800b1ba <_dtoa_r+0x90a>
 800b198:	9b05      	ldr	r3, [sp, #20]
 800b19a:	3301      	adds	r3, #1
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	9b06      	ldr	r3, [sp, #24]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	9306      	str	r3, [sp, #24]
 800b1a4:	f04f 0801 	mov.w	r8, #1
 800b1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f47f af6f 	bne.w	800b08e <_dtoa_r+0x7de>
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	e774      	b.n	800b09e <_dtoa_r+0x7ee>
 800b1b4:	f04f 0800 	mov.w	r8, #0
 800b1b8:	e7f6      	b.n	800b1a8 <_dtoa_r+0x8f8>
 800b1ba:	4698      	mov	r8, r3
 800b1bc:	e7f4      	b.n	800b1a8 <_dtoa_r+0x8f8>
 800b1be:	d082      	beq.n	800b0c6 <_dtoa_r+0x816>
 800b1c0:	9a05      	ldr	r2, [sp, #20]
 800b1c2:	331c      	adds	r3, #28
 800b1c4:	441a      	add	r2, r3
 800b1c6:	9205      	str	r2, [sp, #20]
 800b1c8:	9a06      	ldr	r2, [sp, #24]
 800b1ca:	441a      	add	r2, r3
 800b1cc:	441d      	add	r5, r3
 800b1ce:	9206      	str	r2, [sp, #24]
 800b1d0:	e779      	b.n	800b0c6 <_dtoa_r+0x816>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	e7f4      	b.n	800b1c0 <_dtoa_r+0x910>
 800b1d6:	9b04      	ldr	r3, [sp, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dc37      	bgt.n	800b24c <_dtoa_r+0x99c>
 800b1dc:	9b07      	ldr	r3, [sp, #28]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	dd34      	ble.n	800b24c <_dtoa_r+0x99c>
 800b1e2:	9b04      	ldr	r3, [sp, #16]
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	b963      	cbnz	r3, 800b204 <_dtoa_r+0x954>
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 fe1c 	bl	800be2c <__multadd>
 800b1f4:	4601      	mov	r1, r0
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	4650      	mov	r0, sl
 800b1fa:	f001 f87b 	bl	800c2f4 <__mcmp>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	f73f adbb 	bgt.w	800ad7a <_dtoa_r+0x4ca>
 800b204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b206:	9d00      	ldr	r5, [sp, #0]
 800b208:	ea6f 0b03 	mvn.w	fp, r3
 800b20c:	f04f 0800 	mov.w	r8, #0
 800b210:	4631      	mov	r1, r6
 800b212:	4620      	mov	r0, r4
 800b214:	f000 fde8 	bl	800bde8 <_Bfree>
 800b218:	2f00      	cmp	r7, #0
 800b21a:	f43f aeab 	beq.w	800af74 <_dtoa_r+0x6c4>
 800b21e:	f1b8 0f00 	cmp.w	r8, #0
 800b222:	d005      	beq.n	800b230 <_dtoa_r+0x980>
 800b224:	45b8      	cmp	r8, r7
 800b226:	d003      	beq.n	800b230 <_dtoa_r+0x980>
 800b228:	4641      	mov	r1, r8
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fddc 	bl	800bde8 <_Bfree>
 800b230:	4639      	mov	r1, r7
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fdd8 	bl	800bde8 <_Bfree>
 800b238:	e69c      	b.n	800af74 <_dtoa_r+0x6c4>
 800b23a:	2600      	movs	r6, #0
 800b23c:	4637      	mov	r7, r6
 800b23e:	e7e1      	b.n	800b204 <_dtoa_r+0x954>
 800b240:	46bb      	mov	fp, r7
 800b242:	4637      	mov	r7, r6
 800b244:	e599      	b.n	800ad7a <_dtoa_r+0x4ca>
 800b246:	bf00      	nop
 800b248:	40240000 	.word	0x40240000
 800b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 80c8 	beq.w	800b3e4 <_dtoa_r+0xb34>
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	2d00      	cmp	r5, #0
 800b25a:	dd05      	ble.n	800b268 <_dtoa_r+0x9b8>
 800b25c:	4639      	mov	r1, r7
 800b25e:	462a      	mov	r2, r5
 800b260:	4620      	mov	r0, r4
 800b262:	f000 ffdb 	bl	800c21c <__lshift>
 800b266:	4607      	mov	r7, r0
 800b268:	f1b8 0f00 	cmp.w	r8, #0
 800b26c:	d05b      	beq.n	800b326 <_dtoa_r+0xa76>
 800b26e:	6879      	ldr	r1, [r7, #4]
 800b270:	4620      	mov	r0, r4
 800b272:	f000 fd79 	bl	800bd68 <_Balloc>
 800b276:	4605      	mov	r5, r0
 800b278:	b928      	cbnz	r0, 800b286 <_dtoa_r+0x9d6>
 800b27a:	4b83      	ldr	r3, [pc, #524]	; (800b488 <_dtoa_r+0xbd8>)
 800b27c:	4602      	mov	r2, r0
 800b27e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b282:	f7ff bb2e 	b.w	800a8e2 <_dtoa_r+0x32>
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	3202      	adds	r2, #2
 800b28a:	0092      	lsls	r2, r2, #2
 800b28c:	f107 010c 	add.w	r1, r7, #12
 800b290:	300c      	adds	r0, #12
 800b292:	f7ff fa6d 	bl	800a770 <memcpy>
 800b296:	2201      	movs	r2, #1
 800b298:	4629      	mov	r1, r5
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 ffbe 	bl	800c21c <__lshift>
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	9304      	str	r3, [sp, #16]
 800b2a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	9308      	str	r3, [sp, #32]
 800b2ae:	9b02      	ldr	r3, [sp, #8]
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	46b8      	mov	r8, r7
 800b2b6:	9306      	str	r3, [sp, #24]
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	4631      	mov	r1, r6
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	f7ff fa6c 	bl	800a7a0 <quorem>
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	9002      	str	r0, [sp, #8]
 800b2cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f001 f80f 	bl	800c2f4 <__mcmp>
 800b2d6:	463a      	mov	r2, r7
 800b2d8:	9005      	str	r0, [sp, #20]
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f001 f825 	bl	800c32c <__mdiff>
 800b2e2:	68c2      	ldr	r2, [r0, #12]
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	bb02      	cbnz	r2, 800b32a <_dtoa_r+0xa7a>
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f001 f802 	bl	800c2f4 <__mcmp>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f8:	f000 fd76 	bl	800bde8 <_Bfree>
 800b2fc:	9b07      	ldr	r3, [sp, #28]
 800b2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b300:	9d04      	ldr	r5, [sp, #16]
 800b302:	ea43 0102 	orr.w	r1, r3, r2
 800b306:	9b06      	ldr	r3, [sp, #24]
 800b308:	4319      	orrs	r1, r3
 800b30a:	d110      	bne.n	800b32e <_dtoa_r+0xa7e>
 800b30c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b310:	d029      	beq.n	800b366 <_dtoa_r+0xab6>
 800b312:	9b05      	ldr	r3, [sp, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd02      	ble.n	800b31e <_dtoa_r+0xa6e>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	f883 9000 	strb.w	r9, [r3]
 800b324:	e774      	b.n	800b210 <_dtoa_r+0x960>
 800b326:	4638      	mov	r0, r7
 800b328:	e7ba      	b.n	800b2a0 <_dtoa_r+0x9f0>
 800b32a:	2201      	movs	r2, #1
 800b32c:	e7e1      	b.n	800b2f2 <_dtoa_r+0xa42>
 800b32e:	9b05      	ldr	r3, [sp, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	db04      	blt.n	800b33e <_dtoa_r+0xa8e>
 800b334:	9907      	ldr	r1, [sp, #28]
 800b336:	430b      	orrs	r3, r1
 800b338:	9906      	ldr	r1, [sp, #24]
 800b33a:	430b      	orrs	r3, r1
 800b33c:	d120      	bne.n	800b380 <_dtoa_r+0xad0>
 800b33e:	2a00      	cmp	r2, #0
 800b340:	dded      	ble.n	800b31e <_dtoa_r+0xa6e>
 800b342:	4651      	mov	r1, sl
 800b344:	2201      	movs	r2, #1
 800b346:	4620      	mov	r0, r4
 800b348:	f000 ff68 	bl	800c21c <__lshift>
 800b34c:	4631      	mov	r1, r6
 800b34e:	4682      	mov	sl, r0
 800b350:	f000 ffd0 	bl	800c2f4 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	dc03      	bgt.n	800b360 <_dtoa_r+0xab0>
 800b358:	d1e1      	bne.n	800b31e <_dtoa_r+0xa6e>
 800b35a:	f019 0f01 	tst.w	r9, #1
 800b35e:	d0de      	beq.n	800b31e <_dtoa_r+0xa6e>
 800b360:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b364:	d1d8      	bne.n	800b318 <_dtoa_r+0xa68>
 800b366:	9a01      	ldr	r2, [sp, #4]
 800b368:	2339      	movs	r3, #57	; 0x39
 800b36a:	7013      	strb	r3, [r2, #0]
 800b36c:	462b      	mov	r3, r5
 800b36e:	461d      	mov	r5, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b376:	2a39      	cmp	r2, #57	; 0x39
 800b378:	d06c      	beq.n	800b454 <_dtoa_r+0xba4>
 800b37a:	3201      	adds	r2, #1
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	e747      	b.n	800b210 <_dtoa_r+0x960>
 800b380:	2a00      	cmp	r2, #0
 800b382:	dd07      	ble.n	800b394 <_dtoa_r+0xae4>
 800b384:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b388:	d0ed      	beq.n	800b366 <_dtoa_r+0xab6>
 800b38a:	9a01      	ldr	r2, [sp, #4]
 800b38c:	f109 0301 	add.w	r3, r9, #1
 800b390:	7013      	strb	r3, [r2, #0]
 800b392:	e73d      	b.n	800b210 <_dtoa_r+0x960>
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	9a08      	ldr	r2, [sp, #32]
 800b398:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d043      	beq.n	800b428 <_dtoa_r+0xb78>
 800b3a0:	4651      	mov	r1, sl
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	220a      	movs	r2, #10
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fd40 	bl	800be2c <__multadd>
 800b3ac:	45b8      	cmp	r8, r7
 800b3ae:	4682      	mov	sl, r0
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	f04f 020a 	mov.w	r2, #10
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	d107      	bne.n	800b3ce <_dtoa_r+0xb1e>
 800b3be:	f000 fd35 	bl	800be2c <__multadd>
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	e775      	b.n	800b2ba <_dtoa_r+0xa0a>
 800b3ce:	f000 fd2d 	bl	800be2c <__multadd>
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	220a      	movs	r2, #10
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 fd26 	bl	800be2c <__multadd>
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	e7f0      	b.n	800b3c6 <_dtoa_r+0xb16>
 800b3e4:	9b04      	ldr	r3, [sp, #16]
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	9d00      	ldr	r5, [sp, #0]
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4650      	mov	r0, sl
 800b3ee:	f7ff f9d7 	bl	800a7a0 <quorem>
 800b3f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	f805 9b01 	strb.w	r9, [r5], #1
 800b3fc:	1aea      	subs	r2, r5, r3
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	4293      	cmp	r3, r2
 800b402:	dd07      	ble.n	800b414 <_dtoa_r+0xb64>
 800b404:	4651      	mov	r1, sl
 800b406:	2300      	movs	r3, #0
 800b408:	220a      	movs	r2, #10
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 fd0e 	bl	800be2c <__multadd>
 800b410:	4682      	mov	sl, r0
 800b412:	e7ea      	b.n	800b3ea <_dtoa_r+0xb3a>
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	bfc8      	it	gt
 800b41a:	461d      	movgt	r5, r3
 800b41c:	9b00      	ldr	r3, [sp, #0]
 800b41e:	bfd8      	it	le
 800b420:	2501      	movle	r5, #1
 800b422:	441d      	add	r5, r3
 800b424:	f04f 0800 	mov.w	r8, #0
 800b428:	4651      	mov	r1, sl
 800b42a:	2201      	movs	r2, #1
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fef5 	bl	800c21c <__lshift>
 800b432:	4631      	mov	r1, r6
 800b434:	4682      	mov	sl, r0
 800b436:	f000 ff5d 	bl	800c2f4 <__mcmp>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	dc96      	bgt.n	800b36c <_dtoa_r+0xabc>
 800b43e:	d102      	bne.n	800b446 <_dtoa_r+0xb96>
 800b440:	f019 0f01 	tst.w	r9, #1
 800b444:	d192      	bne.n	800b36c <_dtoa_r+0xabc>
 800b446:	462b      	mov	r3, r5
 800b448:	461d      	mov	r5, r3
 800b44a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b44e:	2a30      	cmp	r2, #48	; 0x30
 800b450:	d0fa      	beq.n	800b448 <_dtoa_r+0xb98>
 800b452:	e6dd      	b.n	800b210 <_dtoa_r+0x960>
 800b454:	9a00      	ldr	r2, [sp, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d189      	bne.n	800b36e <_dtoa_r+0xabe>
 800b45a:	f10b 0b01 	add.w	fp, fp, #1
 800b45e:	2331      	movs	r3, #49	; 0x31
 800b460:	e796      	b.n	800b390 <_dtoa_r+0xae0>
 800b462:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <_dtoa_r+0xbdc>)
 800b464:	f7ff ba99 	b.w	800a99a <_dtoa_r+0xea>
 800b468:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f47f aa6d 	bne.w	800a94a <_dtoa_r+0x9a>
 800b470:	4b07      	ldr	r3, [pc, #28]	; (800b490 <_dtoa_r+0xbe0>)
 800b472:	f7ff ba92 	b.w	800a99a <_dtoa_r+0xea>
 800b476:	9b01      	ldr	r3, [sp, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dcb5      	bgt.n	800b3e8 <_dtoa_r+0xb38>
 800b47c:	9b07      	ldr	r3, [sp, #28]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	f73f aeb1 	bgt.w	800b1e6 <_dtoa_r+0x936>
 800b484:	e7b0      	b.n	800b3e8 <_dtoa_r+0xb38>
 800b486:	bf00      	nop
 800b488:	0800d599 	.word	0x0800d599
 800b48c:	0800d4f1 	.word	0x0800d4f1
 800b490:	0800d51d 	.word	0x0800d51d

0800b494 <_free_r>:
 800b494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b496:	2900      	cmp	r1, #0
 800b498:	d044      	beq.n	800b524 <_free_r+0x90>
 800b49a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b49e:	9001      	str	r0, [sp, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4a6:	bfb8      	it	lt
 800b4a8:	18e4      	addlt	r4, r4, r3
 800b4aa:	f000 fc51 	bl	800bd50 <__malloc_lock>
 800b4ae:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <_free_r+0x94>)
 800b4b0:	9801      	ldr	r0, [sp, #4]
 800b4b2:	6813      	ldr	r3, [r2, #0]
 800b4b4:	b933      	cbnz	r3, 800b4c4 <_free_r+0x30>
 800b4b6:	6063      	str	r3, [r4, #4]
 800b4b8:	6014      	str	r4, [r2, #0]
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c0:	f000 bc4c 	b.w	800bd5c <__malloc_unlock>
 800b4c4:	42a3      	cmp	r3, r4
 800b4c6:	d908      	bls.n	800b4da <_free_r+0x46>
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	1961      	adds	r1, r4, r5
 800b4cc:	428b      	cmp	r3, r1
 800b4ce:	bf01      	itttt	eq
 800b4d0:	6819      	ldreq	r1, [r3, #0]
 800b4d2:	685b      	ldreq	r3, [r3, #4]
 800b4d4:	1949      	addeq	r1, r1, r5
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	e7ed      	b.n	800b4b6 <_free_r+0x22>
 800b4da:	461a      	mov	r2, r3
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	b10b      	cbz	r3, 800b4e4 <_free_r+0x50>
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d9fa      	bls.n	800b4da <_free_r+0x46>
 800b4e4:	6811      	ldr	r1, [r2, #0]
 800b4e6:	1855      	adds	r5, r2, r1
 800b4e8:	42a5      	cmp	r5, r4
 800b4ea:	d10b      	bne.n	800b504 <_free_r+0x70>
 800b4ec:	6824      	ldr	r4, [r4, #0]
 800b4ee:	4421      	add	r1, r4
 800b4f0:	1854      	adds	r4, r2, r1
 800b4f2:	42a3      	cmp	r3, r4
 800b4f4:	6011      	str	r1, [r2, #0]
 800b4f6:	d1e0      	bne.n	800b4ba <_free_r+0x26>
 800b4f8:	681c      	ldr	r4, [r3, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	6053      	str	r3, [r2, #4]
 800b4fe:	440c      	add	r4, r1
 800b500:	6014      	str	r4, [r2, #0]
 800b502:	e7da      	b.n	800b4ba <_free_r+0x26>
 800b504:	d902      	bls.n	800b50c <_free_r+0x78>
 800b506:	230c      	movs	r3, #12
 800b508:	6003      	str	r3, [r0, #0]
 800b50a:	e7d6      	b.n	800b4ba <_free_r+0x26>
 800b50c:	6825      	ldr	r5, [r4, #0]
 800b50e:	1961      	adds	r1, r4, r5
 800b510:	428b      	cmp	r3, r1
 800b512:	bf04      	itt	eq
 800b514:	6819      	ldreq	r1, [r3, #0]
 800b516:	685b      	ldreq	r3, [r3, #4]
 800b518:	6063      	str	r3, [r4, #4]
 800b51a:	bf04      	itt	eq
 800b51c:	1949      	addeq	r1, r1, r5
 800b51e:	6021      	streq	r1, [r4, #0]
 800b520:	6054      	str	r4, [r2, #4]
 800b522:	e7ca      	b.n	800b4ba <_free_r+0x26>
 800b524:	b003      	add	sp, #12
 800b526:	bd30      	pop	{r4, r5, pc}
 800b528:	20000fd8 	.word	0x20000fd8

0800b52c <rshift>:
 800b52c:	6903      	ldr	r3, [r0, #16]
 800b52e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b536:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b53a:	f100 0414 	add.w	r4, r0, #20
 800b53e:	dd45      	ble.n	800b5cc <rshift+0xa0>
 800b540:	f011 011f 	ands.w	r1, r1, #31
 800b544:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b548:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b54c:	d10c      	bne.n	800b568 <rshift+0x3c>
 800b54e:	f100 0710 	add.w	r7, r0, #16
 800b552:	4629      	mov	r1, r5
 800b554:	42b1      	cmp	r1, r6
 800b556:	d334      	bcc.n	800b5c2 <rshift+0x96>
 800b558:	1a9b      	subs	r3, r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	1eea      	subs	r2, r5, #3
 800b55e:	4296      	cmp	r6, r2
 800b560:	bf38      	it	cc
 800b562:	2300      	movcc	r3, #0
 800b564:	4423      	add	r3, r4
 800b566:	e015      	b.n	800b594 <rshift+0x68>
 800b568:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b56c:	f1c1 0820 	rsb	r8, r1, #32
 800b570:	40cf      	lsrs	r7, r1
 800b572:	f105 0e04 	add.w	lr, r5, #4
 800b576:	46a1      	mov	r9, r4
 800b578:	4576      	cmp	r6, lr
 800b57a:	46f4      	mov	ip, lr
 800b57c:	d815      	bhi.n	800b5aa <rshift+0x7e>
 800b57e:	1a9a      	subs	r2, r3, r2
 800b580:	0092      	lsls	r2, r2, #2
 800b582:	3a04      	subs	r2, #4
 800b584:	3501      	adds	r5, #1
 800b586:	42ae      	cmp	r6, r5
 800b588:	bf38      	it	cc
 800b58a:	2200      	movcc	r2, #0
 800b58c:	18a3      	adds	r3, r4, r2
 800b58e:	50a7      	str	r7, [r4, r2]
 800b590:	b107      	cbz	r7, 800b594 <rshift+0x68>
 800b592:	3304      	adds	r3, #4
 800b594:	1b1a      	subs	r2, r3, r4
 800b596:	42a3      	cmp	r3, r4
 800b598:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b59c:	bf08      	it	eq
 800b59e:	2300      	moveq	r3, #0
 800b5a0:	6102      	str	r2, [r0, #16]
 800b5a2:	bf08      	it	eq
 800b5a4:	6143      	streq	r3, [r0, #20]
 800b5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5aa:	f8dc c000 	ldr.w	ip, [ip]
 800b5ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b5b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b5b6:	f849 7b04 	str.w	r7, [r9], #4
 800b5ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5be:	40cf      	lsrs	r7, r1
 800b5c0:	e7da      	b.n	800b578 <rshift+0x4c>
 800b5c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b5c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5ca:	e7c3      	b.n	800b554 <rshift+0x28>
 800b5cc:	4623      	mov	r3, r4
 800b5ce:	e7e1      	b.n	800b594 <rshift+0x68>

0800b5d0 <__hexdig_fun>:
 800b5d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b5d4:	2b09      	cmp	r3, #9
 800b5d6:	d802      	bhi.n	800b5de <__hexdig_fun+0xe>
 800b5d8:	3820      	subs	r0, #32
 800b5da:	b2c0      	uxtb	r0, r0
 800b5dc:	4770      	bx	lr
 800b5de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b5e2:	2b05      	cmp	r3, #5
 800b5e4:	d801      	bhi.n	800b5ea <__hexdig_fun+0x1a>
 800b5e6:	3847      	subs	r0, #71	; 0x47
 800b5e8:	e7f7      	b.n	800b5da <__hexdig_fun+0xa>
 800b5ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5ee:	2b05      	cmp	r3, #5
 800b5f0:	d801      	bhi.n	800b5f6 <__hexdig_fun+0x26>
 800b5f2:	3827      	subs	r0, #39	; 0x27
 800b5f4:	e7f1      	b.n	800b5da <__hexdig_fun+0xa>
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	4770      	bx	lr
	...

0800b5fc <__gethex>:
 800b5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	4617      	mov	r7, r2
 800b602:	680a      	ldr	r2, [r1, #0]
 800b604:	b085      	sub	sp, #20
 800b606:	f102 0b02 	add.w	fp, r2, #2
 800b60a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b60e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b612:	4681      	mov	r9, r0
 800b614:	468a      	mov	sl, r1
 800b616:	9302      	str	r3, [sp, #8]
 800b618:	32fe      	adds	r2, #254	; 0xfe
 800b61a:	eb02 030b 	add.w	r3, r2, fp
 800b61e:	46d8      	mov	r8, fp
 800b620:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	2830      	cmp	r0, #48	; 0x30
 800b628:	d0f7      	beq.n	800b61a <__gethex+0x1e>
 800b62a:	f7ff ffd1 	bl	800b5d0 <__hexdig_fun>
 800b62e:	4604      	mov	r4, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	d138      	bne.n	800b6a6 <__gethex+0xaa>
 800b634:	49a7      	ldr	r1, [pc, #668]	; (800b8d4 <__gethex+0x2d8>)
 800b636:	2201      	movs	r2, #1
 800b638:	4640      	mov	r0, r8
 800b63a:	f7fe fffd 	bl	800a638 <strncmp>
 800b63e:	4606      	mov	r6, r0
 800b640:	2800      	cmp	r0, #0
 800b642:	d169      	bne.n	800b718 <__gethex+0x11c>
 800b644:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b648:	465d      	mov	r5, fp
 800b64a:	f7ff ffc1 	bl	800b5d0 <__hexdig_fun>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d064      	beq.n	800b71c <__gethex+0x120>
 800b652:	465a      	mov	r2, fp
 800b654:	7810      	ldrb	r0, [r2, #0]
 800b656:	2830      	cmp	r0, #48	; 0x30
 800b658:	4690      	mov	r8, r2
 800b65a:	f102 0201 	add.w	r2, r2, #1
 800b65e:	d0f9      	beq.n	800b654 <__gethex+0x58>
 800b660:	f7ff ffb6 	bl	800b5d0 <__hexdig_fun>
 800b664:	2301      	movs	r3, #1
 800b666:	fab0 f480 	clz	r4, r0
 800b66a:	0964      	lsrs	r4, r4, #5
 800b66c:	465e      	mov	r6, fp
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	4642      	mov	r2, r8
 800b672:	4615      	mov	r5, r2
 800b674:	3201      	adds	r2, #1
 800b676:	7828      	ldrb	r0, [r5, #0]
 800b678:	f7ff ffaa 	bl	800b5d0 <__hexdig_fun>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1f8      	bne.n	800b672 <__gethex+0x76>
 800b680:	4994      	ldr	r1, [pc, #592]	; (800b8d4 <__gethex+0x2d8>)
 800b682:	2201      	movs	r2, #1
 800b684:	4628      	mov	r0, r5
 800b686:	f7fe ffd7 	bl	800a638 <strncmp>
 800b68a:	b978      	cbnz	r0, 800b6ac <__gethex+0xb0>
 800b68c:	b946      	cbnz	r6, 800b6a0 <__gethex+0xa4>
 800b68e:	1c6e      	adds	r6, r5, #1
 800b690:	4632      	mov	r2, r6
 800b692:	4615      	mov	r5, r2
 800b694:	3201      	adds	r2, #1
 800b696:	7828      	ldrb	r0, [r5, #0]
 800b698:	f7ff ff9a 	bl	800b5d0 <__hexdig_fun>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d1f8      	bne.n	800b692 <__gethex+0x96>
 800b6a0:	1b73      	subs	r3, r6, r5
 800b6a2:	009e      	lsls	r6, r3, #2
 800b6a4:	e004      	b.n	800b6b0 <__gethex+0xb4>
 800b6a6:	2400      	movs	r4, #0
 800b6a8:	4626      	mov	r6, r4
 800b6aa:	e7e1      	b.n	800b670 <__gethex+0x74>
 800b6ac:	2e00      	cmp	r6, #0
 800b6ae:	d1f7      	bne.n	800b6a0 <__gethex+0xa4>
 800b6b0:	782b      	ldrb	r3, [r5, #0]
 800b6b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6b6:	2b50      	cmp	r3, #80	; 0x50
 800b6b8:	d13d      	bne.n	800b736 <__gethex+0x13a>
 800b6ba:	786b      	ldrb	r3, [r5, #1]
 800b6bc:	2b2b      	cmp	r3, #43	; 0x2b
 800b6be:	d02f      	beq.n	800b720 <__gethex+0x124>
 800b6c0:	2b2d      	cmp	r3, #45	; 0x2d
 800b6c2:	d031      	beq.n	800b728 <__gethex+0x12c>
 800b6c4:	1c69      	adds	r1, r5, #1
 800b6c6:	f04f 0b00 	mov.w	fp, #0
 800b6ca:	7808      	ldrb	r0, [r1, #0]
 800b6cc:	f7ff ff80 	bl	800b5d0 <__hexdig_fun>
 800b6d0:	1e42      	subs	r2, r0, #1
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	2a18      	cmp	r2, #24
 800b6d6:	d82e      	bhi.n	800b736 <__gethex+0x13a>
 800b6d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b6dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6e0:	f7ff ff76 	bl	800b5d0 <__hexdig_fun>
 800b6e4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b6e8:	fa5f fc8c 	uxtb.w	ip, ip
 800b6ec:	f1bc 0f18 	cmp.w	ip, #24
 800b6f0:	d91d      	bls.n	800b72e <__gethex+0x132>
 800b6f2:	f1bb 0f00 	cmp.w	fp, #0
 800b6f6:	d000      	beq.n	800b6fa <__gethex+0xfe>
 800b6f8:	4252      	negs	r2, r2
 800b6fa:	4416      	add	r6, r2
 800b6fc:	f8ca 1000 	str.w	r1, [sl]
 800b700:	b1dc      	cbz	r4, 800b73a <__gethex+0x13e>
 800b702:	9b01      	ldr	r3, [sp, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	bf14      	ite	ne
 800b708:	f04f 0800 	movne.w	r8, #0
 800b70c:	f04f 0806 	moveq.w	r8, #6
 800b710:	4640      	mov	r0, r8
 800b712:	b005      	add	sp, #20
 800b714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b718:	4645      	mov	r5, r8
 800b71a:	4626      	mov	r6, r4
 800b71c:	2401      	movs	r4, #1
 800b71e:	e7c7      	b.n	800b6b0 <__gethex+0xb4>
 800b720:	f04f 0b00 	mov.w	fp, #0
 800b724:	1ca9      	adds	r1, r5, #2
 800b726:	e7d0      	b.n	800b6ca <__gethex+0xce>
 800b728:	f04f 0b01 	mov.w	fp, #1
 800b72c:	e7fa      	b.n	800b724 <__gethex+0x128>
 800b72e:	230a      	movs	r3, #10
 800b730:	fb03 0002 	mla	r0, r3, r2, r0
 800b734:	e7d0      	b.n	800b6d8 <__gethex+0xdc>
 800b736:	4629      	mov	r1, r5
 800b738:	e7e0      	b.n	800b6fc <__gethex+0x100>
 800b73a:	eba5 0308 	sub.w	r3, r5, r8
 800b73e:	3b01      	subs	r3, #1
 800b740:	4621      	mov	r1, r4
 800b742:	2b07      	cmp	r3, #7
 800b744:	dc0a      	bgt.n	800b75c <__gethex+0x160>
 800b746:	4648      	mov	r0, r9
 800b748:	f000 fb0e 	bl	800bd68 <_Balloc>
 800b74c:	4604      	mov	r4, r0
 800b74e:	b940      	cbnz	r0, 800b762 <__gethex+0x166>
 800b750:	4b61      	ldr	r3, [pc, #388]	; (800b8d8 <__gethex+0x2dc>)
 800b752:	4602      	mov	r2, r0
 800b754:	21e4      	movs	r1, #228	; 0xe4
 800b756:	4861      	ldr	r0, [pc, #388]	; (800b8dc <__gethex+0x2e0>)
 800b758:	f001 fbb8 	bl	800cecc <__assert_func>
 800b75c:	3101      	adds	r1, #1
 800b75e:	105b      	asrs	r3, r3, #1
 800b760:	e7ef      	b.n	800b742 <__gethex+0x146>
 800b762:	f100 0a14 	add.w	sl, r0, #20
 800b766:	2300      	movs	r3, #0
 800b768:	495a      	ldr	r1, [pc, #360]	; (800b8d4 <__gethex+0x2d8>)
 800b76a:	f8cd a004 	str.w	sl, [sp, #4]
 800b76e:	469b      	mov	fp, r3
 800b770:	45a8      	cmp	r8, r5
 800b772:	d342      	bcc.n	800b7fa <__gethex+0x1fe>
 800b774:	9801      	ldr	r0, [sp, #4]
 800b776:	f840 bb04 	str.w	fp, [r0], #4
 800b77a:	eba0 000a 	sub.w	r0, r0, sl
 800b77e:	1080      	asrs	r0, r0, #2
 800b780:	6120      	str	r0, [r4, #16]
 800b782:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b786:	4658      	mov	r0, fp
 800b788:	f000 fbe0 	bl	800bf4c <__hi0bits>
 800b78c:	683d      	ldr	r5, [r7, #0]
 800b78e:	eba8 0000 	sub.w	r0, r8, r0
 800b792:	42a8      	cmp	r0, r5
 800b794:	dd59      	ble.n	800b84a <__gethex+0x24e>
 800b796:	eba0 0805 	sub.w	r8, r0, r5
 800b79a:	4641      	mov	r1, r8
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 ff6f 	bl	800c680 <__any_on>
 800b7a2:	4683      	mov	fp, r0
 800b7a4:	b1b8      	cbz	r0, 800b7d6 <__gethex+0x1da>
 800b7a6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800b7aa:	1159      	asrs	r1, r3, #5
 800b7ac:	f003 021f 	and.w	r2, r3, #31
 800b7b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b7b4:	f04f 0b01 	mov.w	fp, #1
 800b7b8:	fa0b f202 	lsl.w	r2, fp, r2
 800b7bc:	420a      	tst	r2, r1
 800b7be:	d00a      	beq.n	800b7d6 <__gethex+0x1da>
 800b7c0:	455b      	cmp	r3, fp
 800b7c2:	dd06      	ble.n	800b7d2 <__gethex+0x1d6>
 800b7c4:	f1a8 0102 	sub.w	r1, r8, #2
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 ff59 	bl	800c680 <__any_on>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d138      	bne.n	800b844 <__gethex+0x248>
 800b7d2:	f04f 0b02 	mov.w	fp, #2
 800b7d6:	4641      	mov	r1, r8
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f7ff fea7 	bl	800b52c <rshift>
 800b7de:	4446      	add	r6, r8
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	42b3      	cmp	r3, r6
 800b7e4:	da41      	bge.n	800b86a <__gethex+0x26e>
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4648      	mov	r0, r9
 800b7ea:	f000 fafd 	bl	800bde8 <_Bfree>
 800b7ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b7f8:	e78a      	b.n	800b710 <__gethex+0x114>
 800b7fa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b7fe:	2a2e      	cmp	r2, #46	; 0x2e
 800b800:	d014      	beq.n	800b82c <__gethex+0x230>
 800b802:	2b20      	cmp	r3, #32
 800b804:	d106      	bne.n	800b814 <__gethex+0x218>
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	f843 bb04 	str.w	fp, [r3], #4
 800b80c:	f04f 0b00 	mov.w	fp, #0
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	465b      	mov	r3, fp
 800b814:	7828      	ldrb	r0, [r5, #0]
 800b816:	9303      	str	r3, [sp, #12]
 800b818:	f7ff feda 	bl	800b5d0 <__hexdig_fun>
 800b81c:	9b03      	ldr	r3, [sp, #12]
 800b81e:	f000 000f 	and.w	r0, r0, #15
 800b822:	4098      	lsls	r0, r3
 800b824:	ea4b 0b00 	orr.w	fp, fp, r0
 800b828:	3304      	adds	r3, #4
 800b82a:	e7a1      	b.n	800b770 <__gethex+0x174>
 800b82c:	45a8      	cmp	r8, r5
 800b82e:	d8e8      	bhi.n	800b802 <__gethex+0x206>
 800b830:	2201      	movs	r2, #1
 800b832:	4628      	mov	r0, r5
 800b834:	9303      	str	r3, [sp, #12]
 800b836:	f7fe feff 	bl	800a638 <strncmp>
 800b83a:	4926      	ldr	r1, [pc, #152]	; (800b8d4 <__gethex+0x2d8>)
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	2800      	cmp	r0, #0
 800b840:	d1df      	bne.n	800b802 <__gethex+0x206>
 800b842:	e795      	b.n	800b770 <__gethex+0x174>
 800b844:	f04f 0b03 	mov.w	fp, #3
 800b848:	e7c5      	b.n	800b7d6 <__gethex+0x1da>
 800b84a:	da0b      	bge.n	800b864 <__gethex+0x268>
 800b84c:	eba5 0800 	sub.w	r8, r5, r0
 800b850:	4621      	mov	r1, r4
 800b852:	4642      	mov	r2, r8
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fce1 	bl	800c21c <__lshift>
 800b85a:	eba6 0608 	sub.w	r6, r6, r8
 800b85e:	4604      	mov	r4, r0
 800b860:	f100 0a14 	add.w	sl, r0, #20
 800b864:	f04f 0b00 	mov.w	fp, #0
 800b868:	e7ba      	b.n	800b7e0 <__gethex+0x1e4>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	42b3      	cmp	r3, r6
 800b86e:	dd73      	ble.n	800b958 <__gethex+0x35c>
 800b870:	1b9e      	subs	r6, r3, r6
 800b872:	42b5      	cmp	r5, r6
 800b874:	dc34      	bgt.n	800b8e0 <__gethex+0x2e4>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d023      	beq.n	800b8c4 <__gethex+0x2c8>
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d025      	beq.n	800b8cc <__gethex+0x2d0>
 800b880:	2b01      	cmp	r3, #1
 800b882:	d115      	bne.n	800b8b0 <__gethex+0x2b4>
 800b884:	42b5      	cmp	r5, r6
 800b886:	d113      	bne.n	800b8b0 <__gethex+0x2b4>
 800b888:	2d01      	cmp	r5, #1
 800b88a:	d10b      	bne.n	800b8a4 <__gethex+0x2a8>
 800b88c:	9a02      	ldr	r2, [sp, #8]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	2301      	movs	r3, #1
 800b894:	6123      	str	r3, [r4, #16]
 800b896:	f8ca 3000 	str.w	r3, [sl]
 800b89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b89c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b8a0:	601c      	str	r4, [r3, #0]
 800b8a2:	e735      	b.n	800b710 <__gethex+0x114>
 800b8a4:	1e69      	subs	r1, r5, #1
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 feea 	bl	800c680 <__any_on>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d1ed      	bne.n	800b88c <__gethex+0x290>
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	4648      	mov	r0, r9
 800b8b4:	f000 fa98 	bl	800bde8 <_Bfree>
 800b8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b8c2:	e725      	b.n	800b710 <__gethex+0x114>
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1f2      	bne.n	800b8b0 <__gethex+0x2b4>
 800b8ca:	e7df      	b.n	800b88c <__gethex+0x290>
 800b8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1dc      	bne.n	800b88c <__gethex+0x290>
 800b8d2:	e7ed      	b.n	800b8b0 <__gethex+0x2b4>
 800b8d4:	0800d38c 	.word	0x0800d38c
 800b8d8:	0800d599 	.word	0x0800d599
 800b8dc:	0800d5aa 	.word	0x0800d5aa
 800b8e0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800b8e4:	f1bb 0f00 	cmp.w	fp, #0
 800b8e8:	d133      	bne.n	800b952 <__gethex+0x356>
 800b8ea:	f1b8 0f00 	cmp.w	r8, #0
 800b8ee:	d004      	beq.n	800b8fa <__gethex+0x2fe>
 800b8f0:	4641      	mov	r1, r8
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 fec4 	bl	800c680 <__any_on>
 800b8f8:	4683      	mov	fp, r0
 800b8fa:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b8fe:	2301      	movs	r3, #1
 800b900:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b904:	f008 081f 	and.w	r8, r8, #31
 800b908:	fa03 f308 	lsl.w	r3, r3, r8
 800b90c:	4213      	tst	r3, r2
 800b90e:	4631      	mov	r1, r6
 800b910:	4620      	mov	r0, r4
 800b912:	bf18      	it	ne
 800b914:	f04b 0b02 	orrne.w	fp, fp, #2
 800b918:	1bad      	subs	r5, r5, r6
 800b91a:	f7ff fe07 	bl	800b52c <rshift>
 800b91e:	687e      	ldr	r6, [r7, #4]
 800b920:	f04f 0802 	mov.w	r8, #2
 800b924:	f1bb 0f00 	cmp.w	fp, #0
 800b928:	d04a      	beq.n	800b9c0 <__gethex+0x3c4>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d016      	beq.n	800b95e <__gethex+0x362>
 800b930:	2b03      	cmp	r3, #3
 800b932:	d018      	beq.n	800b966 <__gethex+0x36a>
 800b934:	2b01      	cmp	r3, #1
 800b936:	d109      	bne.n	800b94c <__gethex+0x350>
 800b938:	f01b 0f02 	tst.w	fp, #2
 800b93c:	d006      	beq.n	800b94c <__gethex+0x350>
 800b93e:	f8da 3000 	ldr.w	r3, [sl]
 800b942:	ea4b 0b03 	orr.w	fp, fp, r3
 800b946:	f01b 0f01 	tst.w	fp, #1
 800b94a:	d10f      	bne.n	800b96c <__gethex+0x370>
 800b94c:	f048 0810 	orr.w	r8, r8, #16
 800b950:	e036      	b.n	800b9c0 <__gethex+0x3c4>
 800b952:	f04f 0b01 	mov.w	fp, #1
 800b956:	e7d0      	b.n	800b8fa <__gethex+0x2fe>
 800b958:	f04f 0801 	mov.w	r8, #1
 800b95c:	e7e2      	b.n	800b924 <__gethex+0x328>
 800b95e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b960:	f1c3 0301 	rsb	r3, r3, #1
 800b964:	930f      	str	r3, [sp, #60]	; 0x3c
 800b966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d0ef      	beq.n	800b94c <__gethex+0x350>
 800b96c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b970:	f104 0214 	add.w	r2, r4, #20
 800b974:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b97e:	2300      	movs	r3, #0
 800b980:	4694      	mov	ip, r2
 800b982:	f852 1b04 	ldr.w	r1, [r2], #4
 800b986:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b98a:	d01e      	beq.n	800b9ca <__gethex+0x3ce>
 800b98c:	3101      	adds	r1, #1
 800b98e:	f8cc 1000 	str.w	r1, [ip]
 800b992:	f1b8 0f02 	cmp.w	r8, #2
 800b996:	f104 0214 	add.w	r2, r4, #20
 800b99a:	d13d      	bne.n	800ba18 <__gethex+0x41c>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	d10b      	bne.n	800b9bc <__gethex+0x3c0>
 800b9a4:	1169      	asrs	r1, r5, #5
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	f005 051f 	and.w	r5, r5, #31
 800b9ac:	fa03 f505 	lsl.w	r5, r3, r5
 800b9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9b4:	421d      	tst	r5, r3
 800b9b6:	bf18      	it	ne
 800b9b8:	f04f 0801 	movne.w	r8, #1
 800b9bc:	f048 0820 	orr.w	r8, r8, #32
 800b9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9c2:	601c      	str	r4, [r3, #0]
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	601e      	str	r6, [r3, #0]
 800b9c8:	e6a2      	b.n	800b710 <__gethex+0x114>
 800b9ca:	4290      	cmp	r0, r2
 800b9cc:	f842 3c04 	str.w	r3, [r2, #-4]
 800b9d0:	d8d6      	bhi.n	800b980 <__gethex+0x384>
 800b9d2:	68a2      	ldr	r2, [r4, #8]
 800b9d4:	4593      	cmp	fp, r2
 800b9d6:	db17      	blt.n	800ba08 <__gethex+0x40c>
 800b9d8:	6861      	ldr	r1, [r4, #4]
 800b9da:	4648      	mov	r0, r9
 800b9dc:	3101      	adds	r1, #1
 800b9de:	f000 f9c3 	bl	800bd68 <_Balloc>
 800b9e2:	4682      	mov	sl, r0
 800b9e4:	b918      	cbnz	r0, 800b9ee <__gethex+0x3f2>
 800b9e6:	4b1b      	ldr	r3, [pc, #108]	; (800ba54 <__gethex+0x458>)
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	2184      	movs	r1, #132	; 0x84
 800b9ec:	e6b3      	b.n	800b756 <__gethex+0x15a>
 800b9ee:	6922      	ldr	r2, [r4, #16]
 800b9f0:	3202      	adds	r2, #2
 800b9f2:	f104 010c 	add.w	r1, r4, #12
 800b9f6:	0092      	lsls	r2, r2, #2
 800b9f8:	300c      	adds	r0, #12
 800b9fa:	f7fe feb9 	bl	800a770 <memcpy>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4648      	mov	r0, r9
 800ba02:	f000 f9f1 	bl	800bde8 <_Bfree>
 800ba06:	4654      	mov	r4, sl
 800ba08:	6922      	ldr	r2, [r4, #16]
 800ba0a:	1c51      	adds	r1, r2, #1
 800ba0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ba10:	6121      	str	r1, [r4, #16]
 800ba12:	2101      	movs	r1, #1
 800ba14:	6151      	str	r1, [r2, #20]
 800ba16:	e7bc      	b.n	800b992 <__gethex+0x396>
 800ba18:	6921      	ldr	r1, [r4, #16]
 800ba1a:	4559      	cmp	r1, fp
 800ba1c:	dd0b      	ble.n	800ba36 <__gethex+0x43a>
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7ff fd83 	bl	800b52c <rshift>
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	3601      	adds	r6, #1
 800ba2a:	42b3      	cmp	r3, r6
 800ba2c:	f6ff aedb 	blt.w	800b7e6 <__gethex+0x1ea>
 800ba30:	f04f 0801 	mov.w	r8, #1
 800ba34:	e7c2      	b.n	800b9bc <__gethex+0x3c0>
 800ba36:	f015 051f 	ands.w	r5, r5, #31
 800ba3a:	d0f9      	beq.n	800ba30 <__gethex+0x434>
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	441a      	add	r2, r3
 800ba40:	f1c5 0520 	rsb	r5, r5, #32
 800ba44:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ba48:	f000 fa80 	bl	800bf4c <__hi0bits>
 800ba4c:	42a8      	cmp	r0, r5
 800ba4e:	dbe6      	blt.n	800ba1e <__gethex+0x422>
 800ba50:	e7ee      	b.n	800ba30 <__gethex+0x434>
 800ba52:	bf00      	nop
 800ba54:	0800d599 	.word	0x0800d599

0800ba58 <L_shift>:
 800ba58:	f1c2 0208 	rsb	r2, r2, #8
 800ba5c:	0092      	lsls	r2, r2, #2
 800ba5e:	b570      	push	{r4, r5, r6, lr}
 800ba60:	f1c2 0620 	rsb	r6, r2, #32
 800ba64:	6843      	ldr	r3, [r0, #4]
 800ba66:	6804      	ldr	r4, [r0, #0]
 800ba68:	fa03 f506 	lsl.w	r5, r3, r6
 800ba6c:	432c      	orrs	r4, r5
 800ba6e:	40d3      	lsrs	r3, r2
 800ba70:	6004      	str	r4, [r0, #0]
 800ba72:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba76:	4288      	cmp	r0, r1
 800ba78:	d3f4      	bcc.n	800ba64 <L_shift+0xc>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}

0800ba7c <__match>:
 800ba7c:	b530      	push	{r4, r5, lr}
 800ba7e:	6803      	ldr	r3, [r0, #0]
 800ba80:	3301      	adds	r3, #1
 800ba82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba86:	b914      	cbnz	r4, 800ba8e <__match+0x12>
 800ba88:	6003      	str	r3, [r0, #0]
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	bd30      	pop	{r4, r5, pc}
 800ba8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba96:	2d19      	cmp	r5, #25
 800ba98:	bf98      	it	ls
 800ba9a:	3220      	addls	r2, #32
 800ba9c:	42a2      	cmp	r2, r4
 800ba9e:	d0f0      	beq.n	800ba82 <__match+0x6>
 800baa0:	2000      	movs	r0, #0
 800baa2:	e7f3      	b.n	800ba8c <__match+0x10>

0800baa4 <__hexnan>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	680b      	ldr	r3, [r1, #0]
 800baaa:	6801      	ldr	r1, [r0, #0]
 800baac:	115e      	asrs	r6, r3, #5
 800baae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bab2:	f013 031f 	ands.w	r3, r3, #31
 800bab6:	b087      	sub	sp, #28
 800bab8:	bf18      	it	ne
 800baba:	3604      	addne	r6, #4
 800babc:	2500      	movs	r5, #0
 800babe:	1f37      	subs	r7, r6, #4
 800bac0:	4682      	mov	sl, r0
 800bac2:	4690      	mov	r8, r2
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	f846 5c04 	str.w	r5, [r6, #-4]
 800baca:	46b9      	mov	r9, r7
 800bacc:	463c      	mov	r4, r7
 800bace:	9502      	str	r5, [sp, #8]
 800bad0:	46ab      	mov	fp, r5
 800bad2:	784a      	ldrb	r2, [r1, #1]
 800bad4:	1c4b      	adds	r3, r1, #1
 800bad6:	9303      	str	r3, [sp, #12]
 800bad8:	b342      	cbz	r2, 800bb2c <__hexnan+0x88>
 800bada:	4610      	mov	r0, r2
 800badc:	9105      	str	r1, [sp, #20]
 800bade:	9204      	str	r2, [sp, #16]
 800bae0:	f7ff fd76 	bl	800b5d0 <__hexdig_fun>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d14f      	bne.n	800bb88 <__hexnan+0xe4>
 800bae8:	9a04      	ldr	r2, [sp, #16]
 800baea:	9905      	ldr	r1, [sp, #20]
 800baec:	2a20      	cmp	r2, #32
 800baee:	d818      	bhi.n	800bb22 <__hexnan+0x7e>
 800baf0:	9b02      	ldr	r3, [sp, #8]
 800baf2:	459b      	cmp	fp, r3
 800baf4:	dd13      	ble.n	800bb1e <__hexnan+0x7a>
 800baf6:	454c      	cmp	r4, r9
 800baf8:	d206      	bcs.n	800bb08 <__hexnan+0x64>
 800bafa:	2d07      	cmp	r5, #7
 800bafc:	dc04      	bgt.n	800bb08 <__hexnan+0x64>
 800bafe:	462a      	mov	r2, r5
 800bb00:	4649      	mov	r1, r9
 800bb02:	4620      	mov	r0, r4
 800bb04:	f7ff ffa8 	bl	800ba58 <L_shift>
 800bb08:	4544      	cmp	r4, r8
 800bb0a:	d950      	bls.n	800bbae <__hexnan+0x10a>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f1a4 0904 	sub.w	r9, r4, #4
 800bb12:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb16:	f8cd b008 	str.w	fp, [sp, #8]
 800bb1a:	464c      	mov	r4, r9
 800bb1c:	461d      	mov	r5, r3
 800bb1e:	9903      	ldr	r1, [sp, #12]
 800bb20:	e7d7      	b.n	800bad2 <__hexnan+0x2e>
 800bb22:	2a29      	cmp	r2, #41	; 0x29
 800bb24:	d155      	bne.n	800bbd2 <__hexnan+0x12e>
 800bb26:	3102      	adds	r1, #2
 800bb28:	f8ca 1000 	str.w	r1, [sl]
 800bb2c:	f1bb 0f00 	cmp.w	fp, #0
 800bb30:	d04f      	beq.n	800bbd2 <__hexnan+0x12e>
 800bb32:	454c      	cmp	r4, r9
 800bb34:	d206      	bcs.n	800bb44 <__hexnan+0xa0>
 800bb36:	2d07      	cmp	r5, #7
 800bb38:	dc04      	bgt.n	800bb44 <__hexnan+0xa0>
 800bb3a:	462a      	mov	r2, r5
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f7ff ff8a 	bl	800ba58 <L_shift>
 800bb44:	4544      	cmp	r4, r8
 800bb46:	d934      	bls.n	800bbb2 <__hexnan+0x10e>
 800bb48:	f1a8 0204 	sub.w	r2, r8, #4
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb52:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb56:	429f      	cmp	r7, r3
 800bb58:	d2f9      	bcs.n	800bb4e <__hexnan+0xaa>
 800bb5a:	1b3b      	subs	r3, r7, r4
 800bb5c:	f023 0303 	bic.w	r3, r3, #3
 800bb60:	3304      	adds	r3, #4
 800bb62:	3e03      	subs	r6, #3
 800bb64:	3401      	adds	r4, #1
 800bb66:	42a6      	cmp	r6, r4
 800bb68:	bf38      	it	cc
 800bb6a:	2304      	movcc	r3, #4
 800bb6c:	4443      	add	r3, r8
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f843 2b04 	str.w	r2, [r3], #4
 800bb74:	429f      	cmp	r7, r3
 800bb76:	d2fb      	bcs.n	800bb70 <__hexnan+0xcc>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	b91b      	cbnz	r3, 800bb84 <__hexnan+0xe0>
 800bb7c:	4547      	cmp	r7, r8
 800bb7e:	d126      	bne.n	800bbce <__hexnan+0x12a>
 800bb80:	2301      	movs	r3, #1
 800bb82:	603b      	str	r3, [r7, #0]
 800bb84:	2005      	movs	r0, #5
 800bb86:	e025      	b.n	800bbd4 <__hexnan+0x130>
 800bb88:	3501      	adds	r5, #1
 800bb8a:	2d08      	cmp	r5, #8
 800bb8c:	f10b 0b01 	add.w	fp, fp, #1
 800bb90:	dd06      	ble.n	800bba0 <__hexnan+0xfc>
 800bb92:	4544      	cmp	r4, r8
 800bb94:	d9c3      	bls.n	800bb1e <__hexnan+0x7a>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb9c:	2501      	movs	r5, #1
 800bb9e:	3c04      	subs	r4, #4
 800bba0:	6822      	ldr	r2, [r4, #0]
 800bba2:	f000 000f 	and.w	r0, r0, #15
 800bba6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bbaa:	6020      	str	r0, [r4, #0]
 800bbac:	e7b7      	b.n	800bb1e <__hexnan+0x7a>
 800bbae:	2508      	movs	r5, #8
 800bbb0:	e7b5      	b.n	800bb1e <__hexnan+0x7a>
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d0df      	beq.n	800bb78 <__hexnan+0xd4>
 800bbb8:	f1c3 0320 	rsb	r3, r3, #32
 800bbbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbc0:	40da      	lsrs	r2, r3
 800bbc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bbcc:	e7d4      	b.n	800bb78 <__hexnan+0xd4>
 800bbce:	3f04      	subs	r7, #4
 800bbd0:	e7d2      	b.n	800bb78 <__hexnan+0xd4>
 800bbd2:	2004      	movs	r0, #4
 800bbd4:	b007      	add	sp, #28
 800bbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bbdc <malloc>:
 800bbdc:	4b02      	ldr	r3, [pc, #8]	; (800bbe8 <malloc+0xc>)
 800bbde:	4601      	mov	r1, r0
 800bbe0:	6818      	ldr	r0, [r3, #0]
 800bbe2:	f000 b823 	b.w	800bc2c <_malloc_r>
 800bbe6:	bf00      	nop
 800bbe8:	200001f8 	.word	0x200001f8

0800bbec <sbrk_aligned>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	4e0e      	ldr	r6, [pc, #56]	; (800bc28 <sbrk_aligned+0x3c>)
 800bbf0:	460c      	mov	r4, r1
 800bbf2:	6831      	ldr	r1, [r6, #0]
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	b911      	cbnz	r1, 800bbfe <sbrk_aligned+0x12>
 800bbf8:	f001 f958 	bl	800ceac <_sbrk_r>
 800bbfc:	6030      	str	r0, [r6, #0]
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f001 f953 	bl	800ceac <_sbrk_r>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	d00a      	beq.n	800bc20 <sbrk_aligned+0x34>
 800bc0a:	1cc4      	adds	r4, r0, #3
 800bc0c:	f024 0403 	bic.w	r4, r4, #3
 800bc10:	42a0      	cmp	r0, r4
 800bc12:	d007      	beq.n	800bc24 <sbrk_aligned+0x38>
 800bc14:	1a21      	subs	r1, r4, r0
 800bc16:	4628      	mov	r0, r5
 800bc18:	f001 f948 	bl	800ceac <_sbrk_r>
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	d101      	bne.n	800bc24 <sbrk_aligned+0x38>
 800bc20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc24:	4620      	mov	r0, r4
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	20000fdc 	.word	0x20000fdc

0800bc2c <_malloc_r>:
 800bc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc30:	1ccd      	adds	r5, r1, #3
 800bc32:	f025 0503 	bic.w	r5, r5, #3
 800bc36:	3508      	adds	r5, #8
 800bc38:	2d0c      	cmp	r5, #12
 800bc3a:	bf38      	it	cc
 800bc3c:	250c      	movcc	r5, #12
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	4607      	mov	r7, r0
 800bc42:	db01      	blt.n	800bc48 <_malloc_r+0x1c>
 800bc44:	42a9      	cmp	r1, r5
 800bc46:	d905      	bls.n	800bc54 <_malloc_r+0x28>
 800bc48:	230c      	movs	r3, #12
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	4630      	mov	r0, r6
 800bc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd28 <_malloc_r+0xfc>
 800bc58:	f000 f87a 	bl	800bd50 <__malloc_lock>
 800bc5c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc60:	461c      	mov	r4, r3
 800bc62:	bb5c      	cbnz	r4, 800bcbc <_malloc_r+0x90>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4638      	mov	r0, r7
 800bc68:	f7ff ffc0 	bl	800bbec <sbrk_aligned>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	4604      	mov	r4, r0
 800bc70:	d155      	bne.n	800bd1e <_malloc_r+0xf2>
 800bc72:	f8d8 4000 	ldr.w	r4, [r8]
 800bc76:	4626      	mov	r6, r4
 800bc78:	2e00      	cmp	r6, #0
 800bc7a:	d145      	bne.n	800bd08 <_malloc_r+0xdc>
 800bc7c:	2c00      	cmp	r4, #0
 800bc7e:	d048      	beq.n	800bd12 <_malloc_r+0xe6>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	4631      	mov	r1, r6
 800bc84:	4638      	mov	r0, r7
 800bc86:	eb04 0903 	add.w	r9, r4, r3
 800bc8a:	f001 f90f 	bl	800ceac <_sbrk_r>
 800bc8e:	4581      	cmp	r9, r0
 800bc90:	d13f      	bne.n	800bd12 <_malloc_r+0xe6>
 800bc92:	6821      	ldr	r1, [r4, #0]
 800bc94:	1a6d      	subs	r5, r5, r1
 800bc96:	4629      	mov	r1, r5
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff ffa7 	bl	800bbec <sbrk_aligned>
 800bc9e:	3001      	adds	r0, #1
 800bca0:	d037      	beq.n	800bd12 <_malloc_r+0xe6>
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	442b      	add	r3, r5
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	f8d8 3000 	ldr.w	r3, [r8]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d038      	beq.n	800bd22 <_malloc_r+0xf6>
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	42a2      	cmp	r2, r4
 800bcb4:	d12b      	bne.n	800bd0e <_malloc_r+0xe2>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	e00f      	b.n	800bcdc <_malloc_r+0xb0>
 800bcbc:	6822      	ldr	r2, [r4, #0]
 800bcbe:	1b52      	subs	r2, r2, r5
 800bcc0:	d41f      	bmi.n	800bd02 <_malloc_r+0xd6>
 800bcc2:	2a0b      	cmp	r2, #11
 800bcc4:	d917      	bls.n	800bcf6 <_malloc_r+0xca>
 800bcc6:	1961      	adds	r1, r4, r5
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	6025      	str	r5, [r4, #0]
 800bccc:	bf18      	it	ne
 800bcce:	6059      	strne	r1, [r3, #4]
 800bcd0:	6863      	ldr	r3, [r4, #4]
 800bcd2:	bf08      	it	eq
 800bcd4:	f8c8 1000 	streq.w	r1, [r8]
 800bcd8:	5162      	str	r2, [r4, r5]
 800bcda:	604b      	str	r3, [r1, #4]
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f104 060b 	add.w	r6, r4, #11
 800bce2:	f000 f83b 	bl	800bd5c <__malloc_unlock>
 800bce6:	f026 0607 	bic.w	r6, r6, #7
 800bcea:	1d23      	adds	r3, r4, #4
 800bcec:	1af2      	subs	r2, r6, r3
 800bcee:	d0ae      	beq.n	800bc4e <_malloc_r+0x22>
 800bcf0:	1b9b      	subs	r3, r3, r6
 800bcf2:	50a3      	str	r3, [r4, r2]
 800bcf4:	e7ab      	b.n	800bc4e <_malloc_r+0x22>
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	d1dd      	bne.n	800bcb8 <_malloc_r+0x8c>
 800bcfc:	f8c8 2000 	str.w	r2, [r8]
 800bd00:	e7ec      	b.n	800bcdc <_malloc_r+0xb0>
 800bd02:	4623      	mov	r3, r4
 800bd04:	6864      	ldr	r4, [r4, #4]
 800bd06:	e7ac      	b.n	800bc62 <_malloc_r+0x36>
 800bd08:	4634      	mov	r4, r6
 800bd0a:	6876      	ldr	r6, [r6, #4]
 800bd0c:	e7b4      	b.n	800bc78 <_malloc_r+0x4c>
 800bd0e:	4613      	mov	r3, r2
 800bd10:	e7cc      	b.n	800bcac <_malloc_r+0x80>
 800bd12:	230c      	movs	r3, #12
 800bd14:	603b      	str	r3, [r7, #0]
 800bd16:	4638      	mov	r0, r7
 800bd18:	f000 f820 	bl	800bd5c <__malloc_unlock>
 800bd1c:	e797      	b.n	800bc4e <_malloc_r+0x22>
 800bd1e:	6025      	str	r5, [r4, #0]
 800bd20:	e7dc      	b.n	800bcdc <_malloc_r+0xb0>
 800bd22:	605b      	str	r3, [r3, #4]
 800bd24:	deff      	udf	#255	; 0xff
 800bd26:	bf00      	nop
 800bd28:	20000fd8 	.word	0x20000fd8

0800bd2c <__ascii_mbtowc>:
 800bd2c:	b082      	sub	sp, #8
 800bd2e:	b901      	cbnz	r1, 800bd32 <__ascii_mbtowc+0x6>
 800bd30:	a901      	add	r1, sp, #4
 800bd32:	b142      	cbz	r2, 800bd46 <__ascii_mbtowc+0x1a>
 800bd34:	b14b      	cbz	r3, 800bd4a <__ascii_mbtowc+0x1e>
 800bd36:	7813      	ldrb	r3, [r2, #0]
 800bd38:	600b      	str	r3, [r1, #0]
 800bd3a:	7812      	ldrb	r2, [r2, #0]
 800bd3c:	1e10      	subs	r0, r2, #0
 800bd3e:	bf18      	it	ne
 800bd40:	2001      	movne	r0, #1
 800bd42:	b002      	add	sp, #8
 800bd44:	4770      	bx	lr
 800bd46:	4610      	mov	r0, r2
 800bd48:	e7fb      	b.n	800bd42 <__ascii_mbtowc+0x16>
 800bd4a:	f06f 0001 	mvn.w	r0, #1
 800bd4e:	e7f8      	b.n	800bd42 <__ascii_mbtowc+0x16>

0800bd50 <__malloc_lock>:
 800bd50:	4801      	ldr	r0, [pc, #4]	; (800bd58 <__malloc_lock+0x8>)
 800bd52:	f7fe bd0b 	b.w	800a76c <__retarget_lock_acquire_recursive>
 800bd56:	bf00      	nop
 800bd58:	20000fd4 	.word	0x20000fd4

0800bd5c <__malloc_unlock>:
 800bd5c:	4801      	ldr	r0, [pc, #4]	; (800bd64 <__malloc_unlock+0x8>)
 800bd5e:	f7fe bd06 	b.w	800a76e <__retarget_lock_release_recursive>
 800bd62:	bf00      	nop
 800bd64:	20000fd4 	.word	0x20000fd4

0800bd68 <_Balloc>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	69c6      	ldr	r6, [r0, #28]
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	b976      	cbnz	r6, 800bd90 <_Balloc+0x28>
 800bd72:	2010      	movs	r0, #16
 800bd74:	f7ff ff32 	bl	800bbdc <malloc>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	61e0      	str	r0, [r4, #28]
 800bd7c:	b920      	cbnz	r0, 800bd88 <_Balloc+0x20>
 800bd7e:	4b18      	ldr	r3, [pc, #96]	; (800bde0 <_Balloc+0x78>)
 800bd80:	4818      	ldr	r0, [pc, #96]	; (800bde4 <_Balloc+0x7c>)
 800bd82:	216b      	movs	r1, #107	; 0x6b
 800bd84:	f001 f8a2 	bl	800cecc <__assert_func>
 800bd88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd8c:	6006      	str	r6, [r0, #0]
 800bd8e:	60c6      	str	r6, [r0, #12]
 800bd90:	69e6      	ldr	r6, [r4, #28]
 800bd92:	68f3      	ldr	r3, [r6, #12]
 800bd94:	b183      	cbz	r3, 800bdb8 <_Balloc+0x50>
 800bd96:	69e3      	ldr	r3, [r4, #28]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd9e:	b9b8      	cbnz	r0, 800bdd0 <_Balloc+0x68>
 800bda0:	2101      	movs	r1, #1
 800bda2:	fa01 f605 	lsl.w	r6, r1, r5
 800bda6:	1d72      	adds	r2, r6, #5
 800bda8:	0092      	lsls	r2, r2, #2
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f001 f8ac 	bl	800cf08 <_calloc_r>
 800bdb0:	b160      	cbz	r0, 800bdcc <_Balloc+0x64>
 800bdb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdb6:	e00e      	b.n	800bdd6 <_Balloc+0x6e>
 800bdb8:	2221      	movs	r2, #33	; 0x21
 800bdba:	2104      	movs	r1, #4
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f001 f8a3 	bl	800cf08 <_calloc_r>
 800bdc2:	69e3      	ldr	r3, [r4, #28]
 800bdc4:	60f0      	str	r0, [r6, #12]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e4      	bne.n	800bd96 <_Balloc+0x2e>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	6802      	ldr	r2, [r0, #0]
 800bdd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bddc:	e7f7      	b.n	800bdce <_Balloc+0x66>
 800bdde:	bf00      	nop
 800bde0:	0800d52a 	.word	0x0800d52a
 800bde4:	0800d60a 	.word	0x0800d60a

0800bde8 <_Bfree>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	69c6      	ldr	r6, [r0, #28]
 800bdec:	4605      	mov	r5, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	b976      	cbnz	r6, 800be10 <_Bfree+0x28>
 800bdf2:	2010      	movs	r0, #16
 800bdf4:	f7ff fef2 	bl	800bbdc <malloc>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	61e8      	str	r0, [r5, #28]
 800bdfc:	b920      	cbnz	r0, 800be08 <_Bfree+0x20>
 800bdfe:	4b09      	ldr	r3, [pc, #36]	; (800be24 <_Bfree+0x3c>)
 800be00:	4809      	ldr	r0, [pc, #36]	; (800be28 <_Bfree+0x40>)
 800be02:	218f      	movs	r1, #143	; 0x8f
 800be04:	f001 f862 	bl	800cecc <__assert_func>
 800be08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be0c:	6006      	str	r6, [r0, #0]
 800be0e:	60c6      	str	r6, [r0, #12]
 800be10:	b13c      	cbz	r4, 800be22 <_Bfree+0x3a>
 800be12:	69eb      	ldr	r3, [r5, #28]
 800be14:	6862      	ldr	r2, [r4, #4]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be1c:	6021      	str	r1, [r4, #0]
 800be1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be22:	bd70      	pop	{r4, r5, r6, pc}
 800be24:	0800d52a 	.word	0x0800d52a
 800be28:	0800d60a 	.word	0x0800d60a

0800be2c <__multadd>:
 800be2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be30:	690d      	ldr	r5, [r1, #16]
 800be32:	4607      	mov	r7, r0
 800be34:	460c      	mov	r4, r1
 800be36:	461e      	mov	r6, r3
 800be38:	f101 0c14 	add.w	ip, r1, #20
 800be3c:	2000      	movs	r0, #0
 800be3e:	f8dc 3000 	ldr.w	r3, [ip]
 800be42:	b299      	uxth	r1, r3
 800be44:	fb02 6101 	mla	r1, r2, r1, r6
 800be48:	0c1e      	lsrs	r6, r3, #16
 800be4a:	0c0b      	lsrs	r3, r1, #16
 800be4c:	fb02 3306 	mla	r3, r2, r6, r3
 800be50:	b289      	uxth	r1, r1
 800be52:	3001      	adds	r0, #1
 800be54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be58:	4285      	cmp	r5, r0
 800be5a:	f84c 1b04 	str.w	r1, [ip], #4
 800be5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be62:	dcec      	bgt.n	800be3e <__multadd+0x12>
 800be64:	b30e      	cbz	r6, 800beaa <__multadd+0x7e>
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	42ab      	cmp	r3, r5
 800be6a:	dc19      	bgt.n	800bea0 <__multadd+0x74>
 800be6c:	6861      	ldr	r1, [r4, #4]
 800be6e:	4638      	mov	r0, r7
 800be70:	3101      	adds	r1, #1
 800be72:	f7ff ff79 	bl	800bd68 <_Balloc>
 800be76:	4680      	mov	r8, r0
 800be78:	b928      	cbnz	r0, 800be86 <__multadd+0x5a>
 800be7a:	4602      	mov	r2, r0
 800be7c:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <__multadd+0x84>)
 800be7e:	480d      	ldr	r0, [pc, #52]	; (800beb4 <__multadd+0x88>)
 800be80:	21ba      	movs	r1, #186	; 0xba
 800be82:	f001 f823 	bl	800cecc <__assert_func>
 800be86:	6922      	ldr	r2, [r4, #16]
 800be88:	3202      	adds	r2, #2
 800be8a:	f104 010c 	add.w	r1, r4, #12
 800be8e:	0092      	lsls	r2, r2, #2
 800be90:	300c      	adds	r0, #12
 800be92:	f7fe fc6d 	bl	800a770 <memcpy>
 800be96:	4621      	mov	r1, r4
 800be98:	4638      	mov	r0, r7
 800be9a:	f7ff ffa5 	bl	800bde8 <_Bfree>
 800be9e:	4644      	mov	r4, r8
 800bea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bea4:	3501      	adds	r5, #1
 800bea6:	615e      	str	r6, [r3, #20]
 800bea8:	6125      	str	r5, [r4, #16]
 800beaa:	4620      	mov	r0, r4
 800beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb0:	0800d599 	.word	0x0800d599
 800beb4:	0800d60a 	.word	0x0800d60a

0800beb8 <__s2b>:
 800beb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bebc:	460c      	mov	r4, r1
 800bebe:	4615      	mov	r5, r2
 800bec0:	461f      	mov	r7, r3
 800bec2:	2209      	movs	r2, #9
 800bec4:	3308      	adds	r3, #8
 800bec6:	4606      	mov	r6, r0
 800bec8:	fb93 f3f2 	sdiv	r3, r3, r2
 800becc:	2100      	movs	r1, #0
 800bece:	2201      	movs	r2, #1
 800bed0:	429a      	cmp	r2, r3
 800bed2:	db09      	blt.n	800bee8 <__s2b+0x30>
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff ff47 	bl	800bd68 <_Balloc>
 800beda:	b940      	cbnz	r0, 800beee <__s2b+0x36>
 800bedc:	4602      	mov	r2, r0
 800bede:	4b19      	ldr	r3, [pc, #100]	; (800bf44 <__s2b+0x8c>)
 800bee0:	4819      	ldr	r0, [pc, #100]	; (800bf48 <__s2b+0x90>)
 800bee2:	21d3      	movs	r1, #211	; 0xd3
 800bee4:	f000 fff2 	bl	800cecc <__assert_func>
 800bee8:	0052      	lsls	r2, r2, #1
 800beea:	3101      	adds	r1, #1
 800beec:	e7f0      	b.n	800bed0 <__s2b+0x18>
 800beee:	9b08      	ldr	r3, [sp, #32]
 800bef0:	6143      	str	r3, [r0, #20]
 800bef2:	2d09      	cmp	r5, #9
 800bef4:	f04f 0301 	mov.w	r3, #1
 800bef8:	6103      	str	r3, [r0, #16]
 800befa:	dd16      	ble.n	800bf2a <__s2b+0x72>
 800befc:	f104 0909 	add.w	r9, r4, #9
 800bf00:	46c8      	mov	r8, r9
 800bf02:	442c      	add	r4, r5
 800bf04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf08:	4601      	mov	r1, r0
 800bf0a:	3b30      	subs	r3, #48	; 0x30
 800bf0c:	220a      	movs	r2, #10
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ff8c 	bl	800be2c <__multadd>
 800bf14:	45a0      	cmp	r8, r4
 800bf16:	d1f5      	bne.n	800bf04 <__s2b+0x4c>
 800bf18:	f1a5 0408 	sub.w	r4, r5, #8
 800bf1c:	444c      	add	r4, r9
 800bf1e:	1b2d      	subs	r5, r5, r4
 800bf20:	1963      	adds	r3, r4, r5
 800bf22:	42bb      	cmp	r3, r7
 800bf24:	db04      	blt.n	800bf30 <__s2b+0x78>
 800bf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2a:	340a      	adds	r4, #10
 800bf2c:	2509      	movs	r5, #9
 800bf2e:	e7f6      	b.n	800bf1e <__s2b+0x66>
 800bf30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf34:	4601      	mov	r1, r0
 800bf36:	3b30      	subs	r3, #48	; 0x30
 800bf38:	220a      	movs	r2, #10
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f7ff ff76 	bl	800be2c <__multadd>
 800bf40:	e7ee      	b.n	800bf20 <__s2b+0x68>
 800bf42:	bf00      	nop
 800bf44:	0800d599 	.word	0x0800d599
 800bf48:	0800d60a 	.word	0x0800d60a

0800bf4c <__hi0bits>:
 800bf4c:	0c03      	lsrs	r3, r0, #16
 800bf4e:	041b      	lsls	r3, r3, #16
 800bf50:	b9d3      	cbnz	r3, 800bf88 <__hi0bits+0x3c>
 800bf52:	0400      	lsls	r0, r0, #16
 800bf54:	2310      	movs	r3, #16
 800bf56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf5a:	bf04      	itt	eq
 800bf5c:	0200      	lsleq	r0, r0, #8
 800bf5e:	3308      	addeq	r3, #8
 800bf60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf64:	bf04      	itt	eq
 800bf66:	0100      	lsleq	r0, r0, #4
 800bf68:	3304      	addeq	r3, #4
 800bf6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf6e:	bf04      	itt	eq
 800bf70:	0080      	lsleq	r0, r0, #2
 800bf72:	3302      	addeq	r3, #2
 800bf74:	2800      	cmp	r0, #0
 800bf76:	db05      	blt.n	800bf84 <__hi0bits+0x38>
 800bf78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf7c:	f103 0301 	add.w	r3, r3, #1
 800bf80:	bf08      	it	eq
 800bf82:	2320      	moveq	r3, #32
 800bf84:	4618      	mov	r0, r3
 800bf86:	4770      	bx	lr
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e7e4      	b.n	800bf56 <__hi0bits+0xa>

0800bf8c <__lo0bits>:
 800bf8c:	6803      	ldr	r3, [r0, #0]
 800bf8e:	f013 0207 	ands.w	r2, r3, #7
 800bf92:	d00c      	beq.n	800bfae <__lo0bits+0x22>
 800bf94:	07d9      	lsls	r1, r3, #31
 800bf96:	d422      	bmi.n	800bfde <__lo0bits+0x52>
 800bf98:	079a      	lsls	r2, r3, #30
 800bf9a:	bf49      	itett	mi
 800bf9c:	085b      	lsrmi	r3, r3, #1
 800bf9e:	089b      	lsrpl	r3, r3, #2
 800bfa0:	6003      	strmi	r3, [r0, #0]
 800bfa2:	2201      	movmi	r2, #1
 800bfa4:	bf5c      	itt	pl
 800bfa6:	6003      	strpl	r3, [r0, #0]
 800bfa8:	2202      	movpl	r2, #2
 800bfaa:	4610      	mov	r0, r2
 800bfac:	4770      	bx	lr
 800bfae:	b299      	uxth	r1, r3
 800bfb0:	b909      	cbnz	r1, 800bfb6 <__lo0bits+0x2a>
 800bfb2:	0c1b      	lsrs	r3, r3, #16
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	b2d9      	uxtb	r1, r3
 800bfb8:	b909      	cbnz	r1, 800bfbe <__lo0bits+0x32>
 800bfba:	3208      	adds	r2, #8
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	0719      	lsls	r1, r3, #28
 800bfc0:	bf04      	itt	eq
 800bfc2:	091b      	lsreq	r3, r3, #4
 800bfc4:	3204      	addeq	r2, #4
 800bfc6:	0799      	lsls	r1, r3, #30
 800bfc8:	bf04      	itt	eq
 800bfca:	089b      	lsreq	r3, r3, #2
 800bfcc:	3202      	addeq	r2, #2
 800bfce:	07d9      	lsls	r1, r3, #31
 800bfd0:	d403      	bmi.n	800bfda <__lo0bits+0x4e>
 800bfd2:	085b      	lsrs	r3, r3, #1
 800bfd4:	f102 0201 	add.w	r2, r2, #1
 800bfd8:	d003      	beq.n	800bfe2 <__lo0bits+0x56>
 800bfda:	6003      	str	r3, [r0, #0]
 800bfdc:	e7e5      	b.n	800bfaa <__lo0bits+0x1e>
 800bfde:	2200      	movs	r2, #0
 800bfe0:	e7e3      	b.n	800bfaa <__lo0bits+0x1e>
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	e7e1      	b.n	800bfaa <__lo0bits+0x1e>
	...

0800bfe8 <__i2b>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	460c      	mov	r4, r1
 800bfec:	2101      	movs	r1, #1
 800bfee:	f7ff febb 	bl	800bd68 <_Balloc>
 800bff2:	4602      	mov	r2, r0
 800bff4:	b928      	cbnz	r0, 800c002 <__i2b+0x1a>
 800bff6:	4b05      	ldr	r3, [pc, #20]	; (800c00c <__i2b+0x24>)
 800bff8:	4805      	ldr	r0, [pc, #20]	; (800c010 <__i2b+0x28>)
 800bffa:	f240 1145 	movw	r1, #325	; 0x145
 800bffe:	f000 ff65 	bl	800cecc <__assert_func>
 800c002:	2301      	movs	r3, #1
 800c004:	6144      	str	r4, [r0, #20]
 800c006:	6103      	str	r3, [r0, #16]
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	0800d599 	.word	0x0800d599
 800c010:	0800d60a 	.word	0x0800d60a

0800c014 <__multiply>:
 800c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	4691      	mov	r9, r2
 800c01a:	690a      	ldr	r2, [r1, #16]
 800c01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c020:	429a      	cmp	r2, r3
 800c022:	bfb8      	it	lt
 800c024:	460b      	movlt	r3, r1
 800c026:	460c      	mov	r4, r1
 800c028:	bfbc      	itt	lt
 800c02a:	464c      	movlt	r4, r9
 800c02c:	4699      	movlt	r9, r3
 800c02e:	6927      	ldr	r7, [r4, #16]
 800c030:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c034:	68a3      	ldr	r3, [r4, #8]
 800c036:	6861      	ldr	r1, [r4, #4]
 800c038:	eb07 060a 	add.w	r6, r7, sl
 800c03c:	42b3      	cmp	r3, r6
 800c03e:	b085      	sub	sp, #20
 800c040:	bfb8      	it	lt
 800c042:	3101      	addlt	r1, #1
 800c044:	f7ff fe90 	bl	800bd68 <_Balloc>
 800c048:	b930      	cbnz	r0, 800c058 <__multiply+0x44>
 800c04a:	4602      	mov	r2, r0
 800c04c:	4b44      	ldr	r3, [pc, #272]	; (800c160 <__multiply+0x14c>)
 800c04e:	4845      	ldr	r0, [pc, #276]	; (800c164 <__multiply+0x150>)
 800c050:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c054:	f000 ff3a 	bl	800cecc <__assert_func>
 800c058:	f100 0514 	add.w	r5, r0, #20
 800c05c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c060:	462b      	mov	r3, r5
 800c062:	2200      	movs	r2, #0
 800c064:	4543      	cmp	r3, r8
 800c066:	d321      	bcc.n	800c0ac <__multiply+0x98>
 800c068:	f104 0314 	add.w	r3, r4, #20
 800c06c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c070:	f109 0314 	add.w	r3, r9, #20
 800c074:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c078:	9202      	str	r2, [sp, #8]
 800c07a:	1b3a      	subs	r2, r7, r4
 800c07c:	3a15      	subs	r2, #21
 800c07e:	f022 0203 	bic.w	r2, r2, #3
 800c082:	3204      	adds	r2, #4
 800c084:	f104 0115 	add.w	r1, r4, #21
 800c088:	428f      	cmp	r7, r1
 800c08a:	bf38      	it	cc
 800c08c:	2204      	movcc	r2, #4
 800c08e:	9201      	str	r2, [sp, #4]
 800c090:	9a02      	ldr	r2, [sp, #8]
 800c092:	9303      	str	r3, [sp, #12]
 800c094:	429a      	cmp	r2, r3
 800c096:	d80c      	bhi.n	800c0b2 <__multiply+0x9e>
 800c098:	2e00      	cmp	r6, #0
 800c09a:	dd03      	ble.n	800c0a4 <__multiply+0x90>
 800c09c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d05b      	beq.n	800c15c <__multiply+0x148>
 800c0a4:	6106      	str	r6, [r0, #16]
 800c0a6:	b005      	add	sp, #20
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	f843 2b04 	str.w	r2, [r3], #4
 800c0b0:	e7d8      	b.n	800c064 <__multiply+0x50>
 800c0b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0b6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ba:	d024      	beq.n	800c106 <__multiply+0xf2>
 800c0bc:	f104 0e14 	add.w	lr, r4, #20
 800c0c0:	46a9      	mov	r9, r5
 800c0c2:	f04f 0c00 	mov.w	ip, #0
 800c0c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0ca:	f8d9 1000 	ldr.w	r1, [r9]
 800c0ce:	fa1f fb82 	uxth.w	fp, r2
 800c0d2:	b289      	uxth	r1, r1
 800c0d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0dc:	f8d9 2000 	ldr.w	r2, [r9]
 800c0e0:	4461      	add	r1, ip
 800c0e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0ee:	b289      	uxth	r1, r1
 800c0f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0f4:	4577      	cmp	r7, lr
 800c0f6:	f849 1b04 	str.w	r1, [r9], #4
 800c0fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0fe:	d8e2      	bhi.n	800c0c6 <__multiply+0xb2>
 800c100:	9a01      	ldr	r2, [sp, #4]
 800c102:	f845 c002 	str.w	ip, [r5, r2]
 800c106:	9a03      	ldr	r2, [sp, #12]
 800c108:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c10c:	3304      	adds	r3, #4
 800c10e:	f1b9 0f00 	cmp.w	r9, #0
 800c112:	d021      	beq.n	800c158 <__multiply+0x144>
 800c114:	6829      	ldr	r1, [r5, #0]
 800c116:	f104 0c14 	add.w	ip, r4, #20
 800c11a:	46ae      	mov	lr, r5
 800c11c:	f04f 0a00 	mov.w	sl, #0
 800c120:	f8bc b000 	ldrh.w	fp, [ip]
 800c124:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c128:	fb09 220b 	mla	r2, r9, fp, r2
 800c12c:	4452      	add	r2, sl
 800c12e:	b289      	uxth	r1, r1
 800c130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c134:	f84e 1b04 	str.w	r1, [lr], #4
 800c138:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c13c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c140:	f8be 1000 	ldrh.w	r1, [lr]
 800c144:	fb09 110a 	mla	r1, r9, sl, r1
 800c148:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c14c:	4567      	cmp	r7, ip
 800c14e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c152:	d8e5      	bhi.n	800c120 <__multiply+0x10c>
 800c154:	9a01      	ldr	r2, [sp, #4]
 800c156:	50a9      	str	r1, [r5, r2]
 800c158:	3504      	adds	r5, #4
 800c15a:	e799      	b.n	800c090 <__multiply+0x7c>
 800c15c:	3e01      	subs	r6, #1
 800c15e:	e79b      	b.n	800c098 <__multiply+0x84>
 800c160:	0800d599 	.word	0x0800d599
 800c164:	0800d60a 	.word	0x0800d60a

0800c168 <__pow5mult>:
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	4615      	mov	r5, r2
 800c16e:	f012 0203 	ands.w	r2, r2, #3
 800c172:	4606      	mov	r6, r0
 800c174:	460f      	mov	r7, r1
 800c176:	d007      	beq.n	800c188 <__pow5mult+0x20>
 800c178:	4c25      	ldr	r4, [pc, #148]	; (800c210 <__pow5mult+0xa8>)
 800c17a:	3a01      	subs	r2, #1
 800c17c:	2300      	movs	r3, #0
 800c17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c182:	f7ff fe53 	bl	800be2c <__multadd>
 800c186:	4607      	mov	r7, r0
 800c188:	10ad      	asrs	r5, r5, #2
 800c18a:	d03d      	beq.n	800c208 <__pow5mult+0xa0>
 800c18c:	69f4      	ldr	r4, [r6, #28]
 800c18e:	b97c      	cbnz	r4, 800c1b0 <__pow5mult+0x48>
 800c190:	2010      	movs	r0, #16
 800c192:	f7ff fd23 	bl	800bbdc <malloc>
 800c196:	4602      	mov	r2, r0
 800c198:	61f0      	str	r0, [r6, #28]
 800c19a:	b928      	cbnz	r0, 800c1a8 <__pow5mult+0x40>
 800c19c:	4b1d      	ldr	r3, [pc, #116]	; (800c214 <__pow5mult+0xac>)
 800c19e:	481e      	ldr	r0, [pc, #120]	; (800c218 <__pow5mult+0xb0>)
 800c1a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c1a4:	f000 fe92 	bl	800cecc <__assert_func>
 800c1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1ac:	6004      	str	r4, [r0, #0]
 800c1ae:	60c4      	str	r4, [r0, #12]
 800c1b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1b8:	b94c      	cbnz	r4, 800c1ce <__pow5mult+0x66>
 800c1ba:	f240 2171 	movw	r1, #625	; 0x271
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7ff ff12 	bl	800bfe8 <__i2b>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	f04f 0900 	mov.w	r9, #0
 800c1d2:	07eb      	lsls	r3, r5, #31
 800c1d4:	d50a      	bpl.n	800c1ec <__pow5mult+0x84>
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	4622      	mov	r2, r4
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f7ff ff1a 	bl	800c014 <__multiply>
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff fdff 	bl	800bde8 <_Bfree>
 800c1ea:	4647      	mov	r7, r8
 800c1ec:	106d      	asrs	r5, r5, #1
 800c1ee:	d00b      	beq.n	800c208 <__pow5mult+0xa0>
 800c1f0:	6820      	ldr	r0, [r4, #0]
 800c1f2:	b938      	cbnz	r0, 800c204 <__pow5mult+0x9c>
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f7ff ff0b 	bl	800c014 <__multiply>
 800c1fe:	6020      	str	r0, [r4, #0]
 800c200:	f8c0 9000 	str.w	r9, [r0]
 800c204:	4604      	mov	r4, r0
 800c206:	e7e4      	b.n	800c1d2 <__pow5mult+0x6a>
 800c208:	4638      	mov	r0, r7
 800c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20e:	bf00      	nop
 800c210:	0800d758 	.word	0x0800d758
 800c214:	0800d52a 	.word	0x0800d52a
 800c218:	0800d60a 	.word	0x0800d60a

0800c21c <__lshift>:
 800c21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	6849      	ldr	r1, [r1, #4]
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	4607      	mov	r7, r0
 800c22e:	4691      	mov	r9, r2
 800c230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c234:	f108 0601 	add.w	r6, r8, #1
 800c238:	42b3      	cmp	r3, r6
 800c23a:	db0b      	blt.n	800c254 <__lshift+0x38>
 800c23c:	4638      	mov	r0, r7
 800c23e:	f7ff fd93 	bl	800bd68 <_Balloc>
 800c242:	4605      	mov	r5, r0
 800c244:	b948      	cbnz	r0, 800c25a <__lshift+0x3e>
 800c246:	4602      	mov	r2, r0
 800c248:	4b28      	ldr	r3, [pc, #160]	; (800c2ec <__lshift+0xd0>)
 800c24a:	4829      	ldr	r0, [pc, #164]	; (800c2f0 <__lshift+0xd4>)
 800c24c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c250:	f000 fe3c 	bl	800cecc <__assert_func>
 800c254:	3101      	adds	r1, #1
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	e7ee      	b.n	800c238 <__lshift+0x1c>
 800c25a:	2300      	movs	r3, #0
 800c25c:	f100 0114 	add.w	r1, r0, #20
 800c260:	f100 0210 	add.w	r2, r0, #16
 800c264:	4618      	mov	r0, r3
 800c266:	4553      	cmp	r3, sl
 800c268:	db33      	blt.n	800c2d2 <__lshift+0xb6>
 800c26a:	6920      	ldr	r0, [r4, #16]
 800c26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c270:	f104 0314 	add.w	r3, r4, #20
 800c274:	f019 091f 	ands.w	r9, r9, #31
 800c278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c27c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c280:	d02b      	beq.n	800c2da <__lshift+0xbe>
 800c282:	f1c9 0e20 	rsb	lr, r9, #32
 800c286:	468a      	mov	sl, r1
 800c288:	2200      	movs	r2, #0
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	fa00 f009 	lsl.w	r0, r0, r9
 800c290:	4310      	orrs	r0, r2
 800c292:	f84a 0b04 	str.w	r0, [sl], #4
 800c296:	f853 2b04 	ldr.w	r2, [r3], #4
 800c29a:	459c      	cmp	ip, r3
 800c29c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2a0:	d8f3      	bhi.n	800c28a <__lshift+0x6e>
 800c2a2:	ebac 0304 	sub.w	r3, ip, r4
 800c2a6:	3b15      	subs	r3, #21
 800c2a8:	f023 0303 	bic.w	r3, r3, #3
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	f104 0015 	add.w	r0, r4, #21
 800c2b2:	4584      	cmp	ip, r0
 800c2b4:	bf38      	it	cc
 800c2b6:	2304      	movcc	r3, #4
 800c2b8:	50ca      	str	r2, [r1, r3]
 800c2ba:	b10a      	cbz	r2, 800c2c0 <__lshift+0xa4>
 800c2bc:	f108 0602 	add.w	r6, r8, #2
 800c2c0:	3e01      	subs	r6, #1
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	612e      	str	r6, [r5, #16]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	f7ff fd8e 	bl	800bde8 <_Bfree>
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	e7c5      	b.n	800c266 <__lshift+0x4a>
 800c2da:	3904      	subs	r1, #4
 800c2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2e4:	459c      	cmp	ip, r3
 800c2e6:	d8f9      	bhi.n	800c2dc <__lshift+0xc0>
 800c2e8:	e7ea      	b.n	800c2c0 <__lshift+0xa4>
 800c2ea:	bf00      	nop
 800c2ec:	0800d599 	.word	0x0800d599
 800c2f0:	0800d60a 	.word	0x0800d60a

0800c2f4 <__mcmp>:
 800c2f4:	b530      	push	{r4, r5, lr}
 800c2f6:	6902      	ldr	r2, [r0, #16]
 800c2f8:	690c      	ldr	r4, [r1, #16]
 800c2fa:	1b12      	subs	r2, r2, r4
 800c2fc:	d10e      	bne.n	800c31c <__mcmp+0x28>
 800c2fe:	f100 0314 	add.w	r3, r0, #20
 800c302:	3114      	adds	r1, #20
 800c304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c30c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c314:	42a5      	cmp	r5, r4
 800c316:	d003      	beq.n	800c320 <__mcmp+0x2c>
 800c318:	d305      	bcc.n	800c326 <__mcmp+0x32>
 800c31a:	2201      	movs	r2, #1
 800c31c:	4610      	mov	r0, r2
 800c31e:	bd30      	pop	{r4, r5, pc}
 800c320:	4283      	cmp	r3, r0
 800c322:	d3f3      	bcc.n	800c30c <__mcmp+0x18>
 800c324:	e7fa      	b.n	800c31c <__mcmp+0x28>
 800c326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c32a:	e7f7      	b.n	800c31c <__mcmp+0x28>

0800c32c <__mdiff>:
 800c32c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	4606      	mov	r6, r0
 800c334:	4611      	mov	r1, r2
 800c336:	4620      	mov	r0, r4
 800c338:	4690      	mov	r8, r2
 800c33a:	f7ff ffdb 	bl	800c2f4 <__mcmp>
 800c33e:	1e05      	subs	r5, r0, #0
 800c340:	d110      	bne.n	800c364 <__mdiff+0x38>
 800c342:	4629      	mov	r1, r5
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff fd0f 	bl	800bd68 <_Balloc>
 800c34a:	b930      	cbnz	r0, 800c35a <__mdiff+0x2e>
 800c34c:	4b3a      	ldr	r3, [pc, #232]	; (800c438 <__mdiff+0x10c>)
 800c34e:	4602      	mov	r2, r0
 800c350:	f240 2137 	movw	r1, #567	; 0x237
 800c354:	4839      	ldr	r0, [pc, #228]	; (800c43c <__mdiff+0x110>)
 800c356:	f000 fdb9 	bl	800cecc <__assert_func>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	bfa4      	itt	ge
 800c366:	4643      	movge	r3, r8
 800c368:	46a0      	movge	r8, r4
 800c36a:	4630      	mov	r0, r6
 800c36c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c370:	bfa6      	itte	ge
 800c372:	461c      	movge	r4, r3
 800c374:	2500      	movge	r5, #0
 800c376:	2501      	movlt	r5, #1
 800c378:	f7ff fcf6 	bl	800bd68 <_Balloc>
 800c37c:	b920      	cbnz	r0, 800c388 <__mdiff+0x5c>
 800c37e:	4b2e      	ldr	r3, [pc, #184]	; (800c438 <__mdiff+0x10c>)
 800c380:	4602      	mov	r2, r0
 800c382:	f240 2145 	movw	r1, #581	; 0x245
 800c386:	e7e5      	b.n	800c354 <__mdiff+0x28>
 800c388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c38c:	6926      	ldr	r6, [r4, #16]
 800c38e:	60c5      	str	r5, [r0, #12]
 800c390:	f104 0914 	add.w	r9, r4, #20
 800c394:	f108 0514 	add.w	r5, r8, #20
 800c398:	f100 0e14 	add.w	lr, r0, #20
 800c39c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3a4:	f108 0210 	add.w	r2, r8, #16
 800c3a8:	46f2      	mov	sl, lr
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3b4:	fa11 f88b 	uxtah	r8, r1, fp
 800c3b8:	b299      	uxth	r1, r3
 800c3ba:	0c1b      	lsrs	r3, r3, #16
 800c3bc:	eba8 0801 	sub.w	r8, r8, r1
 800c3c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3c8:	fa1f f888 	uxth.w	r8, r8
 800c3cc:	1419      	asrs	r1, r3, #16
 800c3ce:	454e      	cmp	r6, r9
 800c3d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3d4:	f84a 3b04 	str.w	r3, [sl], #4
 800c3d8:	d8e8      	bhi.n	800c3ac <__mdiff+0x80>
 800c3da:	1b33      	subs	r3, r6, r4
 800c3dc:	3b15      	subs	r3, #21
 800c3de:	f023 0303 	bic.w	r3, r3, #3
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	3415      	adds	r4, #21
 800c3e6:	42a6      	cmp	r6, r4
 800c3e8:	bf38      	it	cc
 800c3ea:	2304      	movcc	r3, #4
 800c3ec:	441d      	add	r5, r3
 800c3ee:	4473      	add	r3, lr
 800c3f0:	469e      	mov	lr, r3
 800c3f2:	462e      	mov	r6, r5
 800c3f4:	4566      	cmp	r6, ip
 800c3f6:	d30e      	bcc.n	800c416 <__mdiff+0xea>
 800c3f8:	f10c 0203 	add.w	r2, ip, #3
 800c3fc:	1b52      	subs	r2, r2, r5
 800c3fe:	f022 0203 	bic.w	r2, r2, #3
 800c402:	3d03      	subs	r5, #3
 800c404:	45ac      	cmp	ip, r5
 800c406:	bf38      	it	cc
 800c408:	2200      	movcc	r2, #0
 800c40a:	4413      	add	r3, r2
 800c40c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c410:	b17a      	cbz	r2, 800c432 <__mdiff+0x106>
 800c412:	6107      	str	r7, [r0, #16]
 800c414:	e7a4      	b.n	800c360 <__mdiff+0x34>
 800c416:	f856 8b04 	ldr.w	r8, [r6], #4
 800c41a:	fa11 f288 	uxtah	r2, r1, r8
 800c41e:	1414      	asrs	r4, r2, #16
 800c420:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c424:	b292      	uxth	r2, r2
 800c426:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c42a:	f84e 2b04 	str.w	r2, [lr], #4
 800c42e:	1421      	asrs	r1, r4, #16
 800c430:	e7e0      	b.n	800c3f4 <__mdiff+0xc8>
 800c432:	3f01      	subs	r7, #1
 800c434:	e7ea      	b.n	800c40c <__mdiff+0xe0>
 800c436:	bf00      	nop
 800c438:	0800d599 	.word	0x0800d599
 800c43c:	0800d60a 	.word	0x0800d60a

0800c440 <__ulp>:
 800c440:	b082      	sub	sp, #8
 800c442:	ed8d 0b00 	vstr	d0, [sp]
 800c446:	9a01      	ldr	r2, [sp, #4]
 800c448:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <__ulp+0x48>)
 800c44a:	4013      	ands	r3, r2
 800c44c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c450:	2b00      	cmp	r3, #0
 800c452:	dc08      	bgt.n	800c466 <__ulp+0x26>
 800c454:	425b      	negs	r3, r3
 800c456:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c45a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c45e:	da04      	bge.n	800c46a <__ulp+0x2a>
 800c460:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c464:	4113      	asrs	r3, r2
 800c466:	2200      	movs	r2, #0
 800c468:	e008      	b.n	800c47c <__ulp+0x3c>
 800c46a:	f1a2 0314 	sub.w	r3, r2, #20
 800c46e:	2b1e      	cmp	r3, #30
 800c470:	bfda      	itte	le
 800c472:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c476:	40da      	lsrle	r2, r3
 800c478:	2201      	movgt	r2, #1
 800c47a:	2300      	movs	r3, #0
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	ec41 0b10 	vmov	d0, r0, r1
 800c484:	b002      	add	sp, #8
 800c486:	4770      	bx	lr
 800c488:	7ff00000 	.word	0x7ff00000

0800c48c <__b2d>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	6906      	ldr	r6, [r0, #16]
 800c492:	f100 0814 	add.w	r8, r0, #20
 800c496:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c49a:	1f37      	subs	r7, r6, #4
 800c49c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7ff fd53 	bl	800bf4c <__hi0bits>
 800c4a6:	f1c0 0320 	rsb	r3, r0, #32
 800c4aa:	280a      	cmp	r0, #10
 800c4ac:	600b      	str	r3, [r1, #0]
 800c4ae:	491b      	ldr	r1, [pc, #108]	; (800c51c <__b2d+0x90>)
 800c4b0:	dc15      	bgt.n	800c4de <__b2d+0x52>
 800c4b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c4ba:	45b8      	cmp	r8, r7
 800c4bc:	ea43 0501 	orr.w	r5, r3, r1
 800c4c0:	bf34      	ite	cc
 800c4c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4c6:	2300      	movcs	r3, #0
 800c4c8:	3015      	adds	r0, #21
 800c4ca:	fa02 f000 	lsl.w	r0, r2, r0
 800c4ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800c4d2:	4303      	orrs	r3, r0
 800c4d4:	461c      	mov	r4, r3
 800c4d6:	ec45 4b10 	vmov	d0, r4, r5
 800c4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4de:	45b8      	cmp	r8, r7
 800c4e0:	bf3a      	itte	cc
 800c4e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c4ea:	2300      	movcs	r3, #0
 800c4ec:	380b      	subs	r0, #11
 800c4ee:	d012      	beq.n	800c516 <__b2d+0x8a>
 800c4f0:	f1c0 0120 	rsb	r1, r0, #32
 800c4f4:	fa23 f401 	lsr.w	r4, r3, r1
 800c4f8:	4082      	lsls	r2, r0
 800c4fa:	4322      	orrs	r2, r4
 800c4fc:	4547      	cmp	r7, r8
 800c4fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c502:	bf8c      	ite	hi
 800c504:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c508:	2200      	movls	r2, #0
 800c50a:	4083      	lsls	r3, r0
 800c50c:	40ca      	lsrs	r2, r1
 800c50e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c512:	4313      	orrs	r3, r2
 800c514:	e7de      	b.n	800c4d4 <__b2d+0x48>
 800c516:	ea42 0501 	orr.w	r5, r2, r1
 800c51a:	e7db      	b.n	800c4d4 <__b2d+0x48>
 800c51c:	3ff00000 	.word	0x3ff00000

0800c520 <__d2b>:
 800c520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c524:	460f      	mov	r7, r1
 800c526:	2101      	movs	r1, #1
 800c528:	ec59 8b10 	vmov	r8, r9, d0
 800c52c:	4616      	mov	r6, r2
 800c52e:	f7ff fc1b 	bl	800bd68 <_Balloc>
 800c532:	4604      	mov	r4, r0
 800c534:	b930      	cbnz	r0, 800c544 <__d2b+0x24>
 800c536:	4602      	mov	r2, r0
 800c538:	4b24      	ldr	r3, [pc, #144]	; (800c5cc <__d2b+0xac>)
 800c53a:	4825      	ldr	r0, [pc, #148]	; (800c5d0 <__d2b+0xb0>)
 800c53c:	f240 310f 	movw	r1, #783	; 0x30f
 800c540:	f000 fcc4 	bl	800cecc <__assert_func>
 800c544:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c54c:	bb2d      	cbnz	r5, 800c59a <__d2b+0x7a>
 800c54e:	9301      	str	r3, [sp, #4]
 800c550:	f1b8 0300 	subs.w	r3, r8, #0
 800c554:	d026      	beq.n	800c5a4 <__d2b+0x84>
 800c556:	4668      	mov	r0, sp
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	f7ff fd17 	bl	800bf8c <__lo0bits>
 800c55e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c562:	b1e8      	cbz	r0, 800c5a0 <__d2b+0x80>
 800c564:	f1c0 0320 	rsb	r3, r0, #32
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	430b      	orrs	r3, r1
 800c56e:	40c2      	lsrs	r2, r0
 800c570:	6163      	str	r3, [r4, #20]
 800c572:	9201      	str	r2, [sp, #4]
 800c574:	9b01      	ldr	r3, [sp, #4]
 800c576:	61a3      	str	r3, [r4, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bf14      	ite	ne
 800c57c:	2202      	movne	r2, #2
 800c57e:	2201      	moveq	r2, #1
 800c580:	6122      	str	r2, [r4, #16]
 800c582:	b1bd      	cbz	r5, 800c5b4 <__d2b+0x94>
 800c584:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c588:	4405      	add	r5, r0
 800c58a:	603d      	str	r5, [r7, #0]
 800c58c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c590:	6030      	str	r0, [r6, #0]
 800c592:	4620      	mov	r0, r4
 800c594:	b003      	add	sp, #12
 800c596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c59a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c59e:	e7d6      	b.n	800c54e <__d2b+0x2e>
 800c5a0:	6161      	str	r1, [r4, #20]
 800c5a2:	e7e7      	b.n	800c574 <__d2b+0x54>
 800c5a4:	a801      	add	r0, sp, #4
 800c5a6:	f7ff fcf1 	bl	800bf8c <__lo0bits>
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	6163      	str	r3, [r4, #20]
 800c5ae:	3020      	adds	r0, #32
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	e7e5      	b.n	800c580 <__d2b+0x60>
 800c5b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5bc:	6038      	str	r0, [r7, #0]
 800c5be:	6918      	ldr	r0, [r3, #16]
 800c5c0:	f7ff fcc4 	bl	800bf4c <__hi0bits>
 800c5c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5c8:	e7e2      	b.n	800c590 <__d2b+0x70>
 800c5ca:	bf00      	nop
 800c5cc:	0800d599 	.word	0x0800d599
 800c5d0:	0800d60a 	.word	0x0800d60a

0800c5d4 <__ratio>:
 800c5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	4688      	mov	r8, r1
 800c5da:	4669      	mov	r1, sp
 800c5dc:	4681      	mov	r9, r0
 800c5de:	f7ff ff55 	bl	800c48c <__b2d>
 800c5e2:	a901      	add	r1, sp, #4
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	ec55 4b10 	vmov	r4, r5, d0
 800c5ea:	f7ff ff4f 	bl	800c48c <__b2d>
 800c5ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5f6:	eba3 0c02 	sub.w	ip, r3, r2
 800c5fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5fe:	1a9b      	subs	r3, r3, r2
 800c600:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c604:	ec51 0b10 	vmov	r0, r1, d0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bfd6      	itet	le
 800c60c:	460a      	movle	r2, r1
 800c60e:	462a      	movgt	r2, r5
 800c610:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c614:	468b      	mov	fp, r1
 800c616:	462f      	mov	r7, r5
 800c618:	bfd4      	ite	le
 800c61a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c61e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c622:	4620      	mov	r0, r4
 800c624:	ee10 2a10 	vmov	r2, s0
 800c628:	465b      	mov	r3, fp
 800c62a:	4639      	mov	r1, r7
 800c62c:	f7f4 f91e 	bl	800086c <__aeabi_ddiv>
 800c630:	ec41 0b10 	vmov	d0, r0, r1
 800c634:	b003      	add	sp, #12
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c63a <__copybits>:
 800c63a:	3901      	subs	r1, #1
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	1149      	asrs	r1, r1, #5
 800c640:	6914      	ldr	r4, [r2, #16]
 800c642:	3101      	adds	r1, #1
 800c644:	f102 0314 	add.w	r3, r2, #20
 800c648:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c64c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c650:	1f05      	subs	r5, r0, #4
 800c652:	42a3      	cmp	r3, r4
 800c654:	d30c      	bcc.n	800c670 <__copybits+0x36>
 800c656:	1aa3      	subs	r3, r4, r2
 800c658:	3b11      	subs	r3, #17
 800c65a:	f023 0303 	bic.w	r3, r3, #3
 800c65e:	3211      	adds	r2, #17
 800c660:	42a2      	cmp	r2, r4
 800c662:	bf88      	it	hi
 800c664:	2300      	movhi	r3, #0
 800c666:	4418      	add	r0, r3
 800c668:	2300      	movs	r3, #0
 800c66a:	4288      	cmp	r0, r1
 800c66c:	d305      	bcc.n	800c67a <__copybits+0x40>
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	f853 6b04 	ldr.w	r6, [r3], #4
 800c674:	f845 6f04 	str.w	r6, [r5, #4]!
 800c678:	e7eb      	b.n	800c652 <__copybits+0x18>
 800c67a:	f840 3b04 	str.w	r3, [r0], #4
 800c67e:	e7f4      	b.n	800c66a <__copybits+0x30>

0800c680 <__any_on>:
 800c680:	f100 0214 	add.w	r2, r0, #20
 800c684:	6900      	ldr	r0, [r0, #16]
 800c686:	114b      	asrs	r3, r1, #5
 800c688:	4298      	cmp	r0, r3
 800c68a:	b510      	push	{r4, lr}
 800c68c:	db11      	blt.n	800c6b2 <__any_on+0x32>
 800c68e:	dd0a      	ble.n	800c6a6 <__any_on+0x26>
 800c690:	f011 011f 	ands.w	r1, r1, #31
 800c694:	d007      	beq.n	800c6a6 <__any_on+0x26>
 800c696:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c69a:	fa24 f001 	lsr.w	r0, r4, r1
 800c69e:	fa00 f101 	lsl.w	r1, r0, r1
 800c6a2:	428c      	cmp	r4, r1
 800c6a4:	d10b      	bne.n	800c6be <__any_on+0x3e>
 800c6a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d803      	bhi.n	800c6b6 <__any_on+0x36>
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	bd10      	pop	{r4, pc}
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	e7f7      	b.n	800c6a6 <__any_on+0x26>
 800c6b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	d0f5      	beq.n	800c6aa <__any_on+0x2a>
 800c6be:	2001      	movs	r0, #1
 800c6c0:	e7f6      	b.n	800c6b0 <__any_on+0x30>

0800c6c2 <__ascii_wctomb>:
 800c6c2:	b149      	cbz	r1, 800c6d8 <__ascii_wctomb+0x16>
 800c6c4:	2aff      	cmp	r2, #255	; 0xff
 800c6c6:	bf85      	ittet	hi
 800c6c8:	238a      	movhi	r3, #138	; 0x8a
 800c6ca:	6003      	strhi	r3, [r0, #0]
 800c6cc:	700a      	strbls	r2, [r1, #0]
 800c6ce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c6d2:	bf98      	it	ls
 800c6d4:	2001      	movls	r0, #1
 800c6d6:	4770      	bx	lr
 800c6d8:	4608      	mov	r0, r1
 800c6da:	4770      	bx	lr

0800c6dc <__ssputs_r>:
 800c6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e0:	688e      	ldr	r6, [r1, #8]
 800c6e2:	461f      	mov	r7, r3
 800c6e4:	42be      	cmp	r6, r7
 800c6e6:	680b      	ldr	r3, [r1, #0]
 800c6e8:	4682      	mov	sl, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	4690      	mov	r8, r2
 800c6ee:	d82c      	bhi.n	800c74a <__ssputs_r+0x6e>
 800c6f0:	898a      	ldrh	r2, [r1, #12]
 800c6f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6f6:	d026      	beq.n	800c746 <__ssputs_r+0x6a>
 800c6f8:	6965      	ldr	r5, [r4, #20]
 800c6fa:	6909      	ldr	r1, [r1, #16]
 800c6fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c700:	eba3 0901 	sub.w	r9, r3, r1
 800c704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c708:	1c7b      	adds	r3, r7, #1
 800c70a:	444b      	add	r3, r9
 800c70c:	106d      	asrs	r5, r5, #1
 800c70e:	429d      	cmp	r5, r3
 800c710:	bf38      	it	cc
 800c712:	461d      	movcc	r5, r3
 800c714:	0553      	lsls	r3, r2, #21
 800c716:	d527      	bpl.n	800c768 <__ssputs_r+0x8c>
 800c718:	4629      	mov	r1, r5
 800c71a:	f7ff fa87 	bl	800bc2c <_malloc_r>
 800c71e:	4606      	mov	r6, r0
 800c720:	b360      	cbz	r0, 800c77c <__ssputs_r+0xa0>
 800c722:	6921      	ldr	r1, [r4, #16]
 800c724:	464a      	mov	r2, r9
 800c726:	f7fe f823 	bl	800a770 <memcpy>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c734:	81a3      	strh	r3, [r4, #12]
 800c736:	6126      	str	r6, [r4, #16]
 800c738:	6165      	str	r5, [r4, #20]
 800c73a:	444e      	add	r6, r9
 800c73c:	eba5 0509 	sub.w	r5, r5, r9
 800c740:	6026      	str	r6, [r4, #0]
 800c742:	60a5      	str	r5, [r4, #8]
 800c744:	463e      	mov	r6, r7
 800c746:	42be      	cmp	r6, r7
 800c748:	d900      	bls.n	800c74c <__ssputs_r+0x70>
 800c74a:	463e      	mov	r6, r7
 800c74c:	6820      	ldr	r0, [r4, #0]
 800c74e:	4632      	mov	r2, r6
 800c750:	4641      	mov	r1, r8
 800c752:	f000 fb6f 	bl	800ce34 <memmove>
 800c756:	68a3      	ldr	r3, [r4, #8]
 800c758:	1b9b      	subs	r3, r3, r6
 800c75a:	60a3      	str	r3, [r4, #8]
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	4433      	add	r3, r6
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	2000      	movs	r0, #0
 800c764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c768:	462a      	mov	r2, r5
 800c76a:	f000 fbe3 	bl	800cf34 <_realloc_r>
 800c76e:	4606      	mov	r6, r0
 800c770:	2800      	cmp	r0, #0
 800c772:	d1e0      	bne.n	800c736 <__ssputs_r+0x5a>
 800c774:	6921      	ldr	r1, [r4, #16]
 800c776:	4650      	mov	r0, sl
 800c778:	f7fe fe8c 	bl	800b494 <_free_r>
 800c77c:	230c      	movs	r3, #12
 800c77e:	f8ca 3000 	str.w	r3, [sl]
 800c782:	89a3      	ldrh	r3, [r4, #12]
 800c784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c78e:	e7e9      	b.n	800c764 <__ssputs_r+0x88>

0800c790 <_svfiprintf_r>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	4698      	mov	r8, r3
 800c796:	898b      	ldrh	r3, [r1, #12]
 800c798:	061b      	lsls	r3, r3, #24
 800c79a:	b09d      	sub	sp, #116	; 0x74
 800c79c:	4607      	mov	r7, r0
 800c79e:	460d      	mov	r5, r1
 800c7a0:	4614      	mov	r4, r2
 800c7a2:	d50e      	bpl.n	800c7c2 <_svfiprintf_r+0x32>
 800c7a4:	690b      	ldr	r3, [r1, #16]
 800c7a6:	b963      	cbnz	r3, 800c7c2 <_svfiprintf_r+0x32>
 800c7a8:	2140      	movs	r1, #64	; 0x40
 800c7aa:	f7ff fa3f 	bl	800bc2c <_malloc_r>
 800c7ae:	6028      	str	r0, [r5, #0]
 800c7b0:	6128      	str	r0, [r5, #16]
 800c7b2:	b920      	cbnz	r0, 800c7be <_svfiprintf_r+0x2e>
 800c7b4:	230c      	movs	r3, #12
 800c7b6:	603b      	str	r3, [r7, #0]
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7bc:	e0d0      	b.n	800c960 <_svfiprintf_r+0x1d0>
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	616b      	str	r3, [r5, #20]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c6:	2320      	movs	r3, #32
 800c7c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7d0:	2330      	movs	r3, #48	; 0x30
 800c7d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c978 <_svfiprintf_r+0x1e8>
 800c7d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7da:	f04f 0901 	mov.w	r9, #1
 800c7de:	4623      	mov	r3, r4
 800c7e0:	469a      	mov	sl, r3
 800c7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e6:	b10a      	cbz	r2, 800c7ec <_svfiprintf_r+0x5c>
 800c7e8:	2a25      	cmp	r2, #37	; 0x25
 800c7ea:	d1f9      	bne.n	800c7e0 <_svfiprintf_r+0x50>
 800c7ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c7f0:	d00b      	beq.n	800c80a <_svfiprintf_r+0x7a>
 800c7f2:	465b      	mov	r3, fp
 800c7f4:	4622      	mov	r2, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7ff ff6f 	bl	800c6dc <__ssputs_r>
 800c7fe:	3001      	adds	r0, #1
 800c800:	f000 80a9 	beq.w	800c956 <_svfiprintf_r+0x1c6>
 800c804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c806:	445a      	add	r2, fp
 800c808:	9209      	str	r2, [sp, #36]	; 0x24
 800c80a:	f89a 3000 	ldrb.w	r3, [sl]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 80a1 	beq.w	800c956 <_svfiprintf_r+0x1c6>
 800c814:	2300      	movs	r3, #0
 800c816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c81a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c81e:	f10a 0a01 	add.w	sl, sl, #1
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	9307      	str	r3, [sp, #28]
 800c826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c82a:	931a      	str	r3, [sp, #104]	; 0x68
 800c82c:	4654      	mov	r4, sl
 800c82e:	2205      	movs	r2, #5
 800c830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c834:	4850      	ldr	r0, [pc, #320]	; (800c978 <_svfiprintf_r+0x1e8>)
 800c836:	f7f3 fcdb 	bl	80001f0 <memchr>
 800c83a:	9a04      	ldr	r2, [sp, #16]
 800c83c:	b9d8      	cbnz	r0, 800c876 <_svfiprintf_r+0xe6>
 800c83e:	06d0      	lsls	r0, r2, #27
 800c840:	bf44      	itt	mi
 800c842:	2320      	movmi	r3, #32
 800c844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c848:	0711      	lsls	r1, r2, #28
 800c84a:	bf44      	itt	mi
 800c84c:	232b      	movmi	r3, #43	; 0x2b
 800c84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c852:	f89a 3000 	ldrb.w	r3, [sl]
 800c856:	2b2a      	cmp	r3, #42	; 0x2a
 800c858:	d015      	beq.n	800c886 <_svfiprintf_r+0xf6>
 800c85a:	9a07      	ldr	r2, [sp, #28]
 800c85c:	4654      	mov	r4, sl
 800c85e:	2000      	movs	r0, #0
 800c860:	f04f 0c0a 	mov.w	ip, #10
 800c864:	4621      	mov	r1, r4
 800c866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c86a:	3b30      	subs	r3, #48	; 0x30
 800c86c:	2b09      	cmp	r3, #9
 800c86e:	d94d      	bls.n	800c90c <_svfiprintf_r+0x17c>
 800c870:	b1b0      	cbz	r0, 800c8a0 <_svfiprintf_r+0x110>
 800c872:	9207      	str	r2, [sp, #28]
 800c874:	e014      	b.n	800c8a0 <_svfiprintf_r+0x110>
 800c876:	eba0 0308 	sub.w	r3, r0, r8
 800c87a:	fa09 f303 	lsl.w	r3, r9, r3
 800c87e:	4313      	orrs	r3, r2
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	46a2      	mov	sl, r4
 800c884:	e7d2      	b.n	800c82c <_svfiprintf_r+0x9c>
 800c886:	9b03      	ldr	r3, [sp, #12]
 800c888:	1d19      	adds	r1, r3, #4
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	9103      	str	r1, [sp, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bfbb      	ittet	lt
 800c892:	425b      	neglt	r3, r3
 800c894:	f042 0202 	orrlt.w	r2, r2, #2
 800c898:	9307      	strge	r3, [sp, #28]
 800c89a:	9307      	strlt	r3, [sp, #28]
 800c89c:	bfb8      	it	lt
 800c89e:	9204      	strlt	r2, [sp, #16]
 800c8a0:	7823      	ldrb	r3, [r4, #0]
 800c8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8a4:	d10c      	bne.n	800c8c0 <_svfiprintf_r+0x130>
 800c8a6:	7863      	ldrb	r3, [r4, #1]
 800c8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8aa:	d134      	bne.n	800c916 <_svfiprintf_r+0x186>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
 800c8ae:	1d1a      	adds	r2, r3, #4
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	9203      	str	r2, [sp, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	bfb8      	it	lt
 800c8b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8bc:	3402      	adds	r4, #2
 800c8be:	9305      	str	r3, [sp, #20]
 800c8c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c988 <_svfiprintf_r+0x1f8>
 800c8c4:	7821      	ldrb	r1, [r4, #0]
 800c8c6:	2203      	movs	r2, #3
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	f7f3 fc91 	bl	80001f0 <memchr>
 800c8ce:	b138      	cbz	r0, 800c8e0 <_svfiprintf_r+0x150>
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	eba0 000a 	sub.w	r0, r0, sl
 800c8d6:	2240      	movs	r2, #64	; 0x40
 800c8d8:	4082      	lsls	r2, r0
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	3401      	adds	r4, #1
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e4:	4825      	ldr	r0, [pc, #148]	; (800c97c <_svfiprintf_r+0x1ec>)
 800c8e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ea:	2206      	movs	r2, #6
 800c8ec:	f7f3 fc80 	bl	80001f0 <memchr>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d038      	beq.n	800c966 <_svfiprintf_r+0x1d6>
 800c8f4:	4b22      	ldr	r3, [pc, #136]	; (800c980 <_svfiprintf_r+0x1f0>)
 800c8f6:	bb1b      	cbnz	r3, 800c940 <_svfiprintf_r+0x1b0>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	3307      	adds	r3, #7
 800c8fc:	f023 0307 	bic.w	r3, r3, #7
 800c900:	3308      	adds	r3, #8
 800c902:	9303      	str	r3, [sp, #12]
 800c904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c906:	4433      	add	r3, r6
 800c908:	9309      	str	r3, [sp, #36]	; 0x24
 800c90a:	e768      	b.n	800c7de <_svfiprintf_r+0x4e>
 800c90c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c910:	460c      	mov	r4, r1
 800c912:	2001      	movs	r0, #1
 800c914:	e7a6      	b.n	800c864 <_svfiprintf_r+0xd4>
 800c916:	2300      	movs	r3, #0
 800c918:	3401      	adds	r4, #1
 800c91a:	9305      	str	r3, [sp, #20]
 800c91c:	4619      	mov	r1, r3
 800c91e:	f04f 0c0a 	mov.w	ip, #10
 800c922:	4620      	mov	r0, r4
 800c924:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c928:	3a30      	subs	r2, #48	; 0x30
 800c92a:	2a09      	cmp	r2, #9
 800c92c:	d903      	bls.n	800c936 <_svfiprintf_r+0x1a6>
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0c6      	beq.n	800c8c0 <_svfiprintf_r+0x130>
 800c932:	9105      	str	r1, [sp, #20]
 800c934:	e7c4      	b.n	800c8c0 <_svfiprintf_r+0x130>
 800c936:	fb0c 2101 	mla	r1, ip, r1, r2
 800c93a:	4604      	mov	r4, r0
 800c93c:	2301      	movs	r3, #1
 800c93e:	e7f0      	b.n	800c922 <_svfiprintf_r+0x192>
 800c940:	ab03      	add	r3, sp, #12
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	462a      	mov	r2, r5
 800c946:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <_svfiprintf_r+0x1f4>)
 800c948:	a904      	add	r1, sp, #16
 800c94a:	4638      	mov	r0, r7
 800c94c:	f7fd f890 	bl	8009a70 <_printf_float>
 800c950:	1c42      	adds	r2, r0, #1
 800c952:	4606      	mov	r6, r0
 800c954:	d1d6      	bne.n	800c904 <_svfiprintf_r+0x174>
 800c956:	89ab      	ldrh	r3, [r5, #12]
 800c958:	065b      	lsls	r3, r3, #25
 800c95a:	f53f af2d 	bmi.w	800c7b8 <_svfiprintf_r+0x28>
 800c95e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c960:	b01d      	add	sp, #116	; 0x74
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	ab03      	add	r3, sp, #12
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	462a      	mov	r2, r5
 800c96c:	4b05      	ldr	r3, [pc, #20]	; (800c984 <_svfiprintf_r+0x1f4>)
 800c96e:	a904      	add	r1, sp, #16
 800c970:	4638      	mov	r0, r7
 800c972:	f7fd fb21 	bl	8009fb8 <_printf_i>
 800c976:	e7eb      	b.n	800c950 <_svfiprintf_r+0x1c0>
 800c978:	0800d764 	.word	0x0800d764
 800c97c:	0800d76e 	.word	0x0800d76e
 800c980:	08009a71 	.word	0x08009a71
 800c984:	0800c6dd 	.word	0x0800c6dd
 800c988:	0800d76a 	.word	0x0800d76a

0800c98c <__sfputc_r>:
 800c98c:	6893      	ldr	r3, [r2, #8]
 800c98e:	3b01      	subs	r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	b410      	push	{r4}
 800c994:	6093      	str	r3, [r2, #8]
 800c996:	da08      	bge.n	800c9aa <__sfputc_r+0x1e>
 800c998:	6994      	ldr	r4, [r2, #24]
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	db01      	blt.n	800c9a2 <__sfputc_r+0x16>
 800c99e:	290a      	cmp	r1, #10
 800c9a0:	d103      	bne.n	800c9aa <__sfputc_r+0x1e>
 800c9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a6:	f7fd bdaa 	b.w	800a4fe <__swbuf_r>
 800c9aa:	6813      	ldr	r3, [r2, #0]
 800c9ac:	1c58      	adds	r0, r3, #1
 800c9ae:	6010      	str	r0, [r2, #0]
 800c9b0:	7019      	strb	r1, [r3, #0]
 800c9b2:	4608      	mov	r0, r1
 800c9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <__sfputs_r>:
 800c9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9bc:	4606      	mov	r6, r0
 800c9be:	460f      	mov	r7, r1
 800c9c0:	4614      	mov	r4, r2
 800c9c2:	18d5      	adds	r5, r2, r3
 800c9c4:	42ac      	cmp	r4, r5
 800c9c6:	d101      	bne.n	800c9cc <__sfputs_r+0x12>
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e007      	b.n	800c9dc <__sfputs_r+0x22>
 800c9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d0:	463a      	mov	r2, r7
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7ff ffda 	bl	800c98c <__sfputc_r>
 800c9d8:	1c43      	adds	r3, r0, #1
 800c9da:	d1f3      	bne.n	800c9c4 <__sfputs_r+0xa>
 800c9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9e0 <_vfiprintf_r>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	b09d      	sub	sp, #116	; 0x74
 800c9e8:	4614      	mov	r4, r2
 800c9ea:	4698      	mov	r8, r3
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	b118      	cbz	r0, 800c9f8 <_vfiprintf_r+0x18>
 800c9f0:	6a03      	ldr	r3, [r0, #32]
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <_vfiprintf_r+0x18>
 800c9f4:	f7fd fc7c 	bl	800a2f0 <__sinit>
 800c9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9fa:	07d9      	lsls	r1, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_vfiprintf_r+0x2a>
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	059a      	lsls	r2, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_vfiprintf_r+0x2a>
 800ca04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca06:	f7fd feb1 	bl	800a76c <__retarget_lock_acquire_recursive>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	071b      	lsls	r3, r3, #28
 800ca0e:	d501      	bpl.n	800ca14 <_vfiprintf_r+0x34>
 800ca10:	692b      	ldr	r3, [r5, #16]
 800ca12:	b99b      	cbnz	r3, 800ca3c <_vfiprintf_r+0x5c>
 800ca14:	4629      	mov	r1, r5
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7fd fdae 	bl	800a578 <__swsetup_r>
 800ca1c:	b170      	cbz	r0, 800ca3c <_vfiprintf_r+0x5c>
 800ca1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca20:	07dc      	lsls	r4, r3, #31
 800ca22:	d504      	bpl.n	800ca2e <_vfiprintf_r+0x4e>
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca28:	b01d      	add	sp, #116	; 0x74
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	0598      	lsls	r0, r3, #22
 800ca32:	d4f7      	bmi.n	800ca24 <_vfiprintf_r+0x44>
 800ca34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca36:	f7fd fe9a 	bl	800a76e <__retarget_lock_release_recursive>
 800ca3a:	e7f3      	b.n	800ca24 <_vfiprintf_r+0x44>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca40:	2320      	movs	r3, #32
 800ca42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca4a:	2330      	movs	r3, #48	; 0x30
 800ca4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc00 <_vfiprintf_r+0x220>
 800ca50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca54:	f04f 0901 	mov.w	r9, #1
 800ca58:	4623      	mov	r3, r4
 800ca5a:	469a      	mov	sl, r3
 800ca5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca60:	b10a      	cbz	r2, 800ca66 <_vfiprintf_r+0x86>
 800ca62:	2a25      	cmp	r2, #37	; 0x25
 800ca64:	d1f9      	bne.n	800ca5a <_vfiprintf_r+0x7a>
 800ca66:	ebba 0b04 	subs.w	fp, sl, r4
 800ca6a:	d00b      	beq.n	800ca84 <_vfiprintf_r+0xa4>
 800ca6c:	465b      	mov	r3, fp
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7ff ffa1 	bl	800c9ba <__sfputs_r>
 800ca78:	3001      	adds	r0, #1
 800ca7a:	f000 80a9 	beq.w	800cbd0 <_vfiprintf_r+0x1f0>
 800ca7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca80:	445a      	add	r2, fp
 800ca82:	9209      	str	r2, [sp, #36]	; 0x24
 800ca84:	f89a 3000 	ldrb.w	r3, [sl]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 80a1 	beq.w	800cbd0 <_vfiprintf_r+0x1f0>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca98:	f10a 0a01 	add.w	sl, sl, #1
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	9307      	str	r3, [sp, #28]
 800caa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caa4:	931a      	str	r3, [sp, #104]	; 0x68
 800caa6:	4654      	mov	r4, sl
 800caa8:	2205      	movs	r2, #5
 800caaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caae:	4854      	ldr	r0, [pc, #336]	; (800cc00 <_vfiprintf_r+0x220>)
 800cab0:	f7f3 fb9e 	bl	80001f0 <memchr>
 800cab4:	9a04      	ldr	r2, [sp, #16]
 800cab6:	b9d8      	cbnz	r0, 800caf0 <_vfiprintf_r+0x110>
 800cab8:	06d1      	lsls	r1, r2, #27
 800caba:	bf44      	itt	mi
 800cabc:	2320      	movmi	r3, #32
 800cabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cac2:	0713      	lsls	r3, r2, #28
 800cac4:	bf44      	itt	mi
 800cac6:	232b      	movmi	r3, #43	; 0x2b
 800cac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cacc:	f89a 3000 	ldrb.w	r3, [sl]
 800cad0:	2b2a      	cmp	r3, #42	; 0x2a
 800cad2:	d015      	beq.n	800cb00 <_vfiprintf_r+0x120>
 800cad4:	9a07      	ldr	r2, [sp, #28]
 800cad6:	4654      	mov	r4, sl
 800cad8:	2000      	movs	r0, #0
 800cada:	f04f 0c0a 	mov.w	ip, #10
 800cade:	4621      	mov	r1, r4
 800cae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cae4:	3b30      	subs	r3, #48	; 0x30
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	d94d      	bls.n	800cb86 <_vfiprintf_r+0x1a6>
 800caea:	b1b0      	cbz	r0, 800cb1a <_vfiprintf_r+0x13a>
 800caec:	9207      	str	r2, [sp, #28]
 800caee:	e014      	b.n	800cb1a <_vfiprintf_r+0x13a>
 800caf0:	eba0 0308 	sub.w	r3, r0, r8
 800caf4:	fa09 f303 	lsl.w	r3, r9, r3
 800caf8:	4313      	orrs	r3, r2
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	46a2      	mov	sl, r4
 800cafe:	e7d2      	b.n	800caa6 <_vfiprintf_r+0xc6>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	1d19      	adds	r1, r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	9103      	str	r1, [sp, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbb      	ittet	lt
 800cb0c:	425b      	neglt	r3, r3
 800cb0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb12:	9307      	strge	r3, [sp, #28]
 800cb14:	9307      	strlt	r3, [sp, #28]
 800cb16:	bfb8      	it	lt
 800cb18:	9204      	strlt	r2, [sp, #16]
 800cb1a:	7823      	ldrb	r3, [r4, #0]
 800cb1c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb1e:	d10c      	bne.n	800cb3a <_vfiprintf_r+0x15a>
 800cb20:	7863      	ldrb	r3, [r4, #1]
 800cb22:	2b2a      	cmp	r3, #42	; 0x2a
 800cb24:	d134      	bne.n	800cb90 <_vfiprintf_r+0x1b0>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	1d1a      	adds	r2, r3, #4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	9203      	str	r2, [sp, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfb8      	it	lt
 800cb32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb36:	3402      	adds	r4, #2
 800cb38:	9305      	str	r3, [sp, #20]
 800cb3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cc10 <_vfiprintf_r+0x230>
 800cb3e:	7821      	ldrb	r1, [r4, #0]
 800cb40:	2203      	movs	r2, #3
 800cb42:	4650      	mov	r0, sl
 800cb44:	f7f3 fb54 	bl	80001f0 <memchr>
 800cb48:	b138      	cbz	r0, 800cb5a <_vfiprintf_r+0x17a>
 800cb4a:	9b04      	ldr	r3, [sp, #16]
 800cb4c:	eba0 000a 	sub.w	r0, r0, sl
 800cb50:	2240      	movs	r2, #64	; 0x40
 800cb52:	4082      	lsls	r2, r0
 800cb54:	4313      	orrs	r3, r2
 800cb56:	3401      	adds	r4, #1
 800cb58:	9304      	str	r3, [sp, #16]
 800cb5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5e:	4829      	ldr	r0, [pc, #164]	; (800cc04 <_vfiprintf_r+0x224>)
 800cb60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb64:	2206      	movs	r2, #6
 800cb66:	f7f3 fb43 	bl	80001f0 <memchr>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d03f      	beq.n	800cbee <_vfiprintf_r+0x20e>
 800cb6e:	4b26      	ldr	r3, [pc, #152]	; (800cc08 <_vfiprintf_r+0x228>)
 800cb70:	bb1b      	cbnz	r3, 800cbba <_vfiprintf_r+0x1da>
 800cb72:	9b03      	ldr	r3, [sp, #12]
 800cb74:	3307      	adds	r3, #7
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	3308      	adds	r3, #8
 800cb7c:	9303      	str	r3, [sp, #12]
 800cb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb80:	443b      	add	r3, r7
 800cb82:	9309      	str	r3, [sp, #36]	; 0x24
 800cb84:	e768      	b.n	800ca58 <_vfiprintf_r+0x78>
 800cb86:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb8a:	460c      	mov	r4, r1
 800cb8c:	2001      	movs	r0, #1
 800cb8e:	e7a6      	b.n	800cade <_vfiprintf_r+0xfe>
 800cb90:	2300      	movs	r3, #0
 800cb92:	3401      	adds	r4, #1
 800cb94:	9305      	str	r3, [sp, #20]
 800cb96:	4619      	mov	r1, r3
 800cb98:	f04f 0c0a 	mov.w	ip, #10
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cba2:	3a30      	subs	r2, #48	; 0x30
 800cba4:	2a09      	cmp	r2, #9
 800cba6:	d903      	bls.n	800cbb0 <_vfiprintf_r+0x1d0>
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d0c6      	beq.n	800cb3a <_vfiprintf_r+0x15a>
 800cbac:	9105      	str	r1, [sp, #20]
 800cbae:	e7c4      	b.n	800cb3a <_vfiprintf_r+0x15a>
 800cbb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e7f0      	b.n	800cb9c <_vfiprintf_r+0x1bc>
 800cbba:	ab03      	add	r3, sp, #12
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	462a      	mov	r2, r5
 800cbc0:	4b12      	ldr	r3, [pc, #72]	; (800cc0c <_vfiprintf_r+0x22c>)
 800cbc2:	a904      	add	r1, sp, #16
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7fc ff53 	bl	8009a70 <_printf_float>
 800cbca:	4607      	mov	r7, r0
 800cbcc:	1c78      	adds	r0, r7, #1
 800cbce:	d1d6      	bne.n	800cb7e <_vfiprintf_r+0x19e>
 800cbd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbd2:	07d9      	lsls	r1, r3, #31
 800cbd4:	d405      	bmi.n	800cbe2 <_vfiprintf_r+0x202>
 800cbd6:	89ab      	ldrh	r3, [r5, #12]
 800cbd8:	059a      	lsls	r2, r3, #22
 800cbda:	d402      	bmi.n	800cbe2 <_vfiprintf_r+0x202>
 800cbdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbde:	f7fd fdc6 	bl	800a76e <__retarget_lock_release_recursive>
 800cbe2:	89ab      	ldrh	r3, [r5, #12]
 800cbe4:	065b      	lsls	r3, r3, #25
 800cbe6:	f53f af1d 	bmi.w	800ca24 <_vfiprintf_r+0x44>
 800cbea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbec:	e71c      	b.n	800ca28 <_vfiprintf_r+0x48>
 800cbee:	ab03      	add	r3, sp, #12
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <_vfiprintf_r+0x22c>)
 800cbf6:	a904      	add	r1, sp, #16
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7fd f9dd 	bl	8009fb8 <_printf_i>
 800cbfe:	e7e4      	b.n	800cbca <_vfiprintf_r+0x1ea>
 800cc00:	0800d764 	.word	0x0800d764
 800cc04:	0800d76e 	.word	0x0800d76e
 800cc08:	08009a71 	.word	0x08009a71
 800cc0c:	0800c9bb 	.word	0x0800c9bb
 800cc10:	0800d76a 	.word	0x0800d76a

0800cc14 <__sflush_r>:
 800cc14:	898a      	ldrh	r2, [r1, #12]
 800cc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	0710      	lsls	r0, r2, #28
 800cc1e:	460c      	mov	r4, r1
 800cc20:	d458      	bmi.n	800ccd4 <__sflush_r+0xc0>
 800cc22:	684b      	ldr	r3, [r1, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dc05      	bgt.n	800cc34 <__sflush_r+0x20>
 800cc28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	dc02      	bgt.n	800cc34 <__sflush_r+0x20>
 800cc2e:	2000      	movs	r0, #0
 800cc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc36:	2e00      	cmp	r6, #0
 800cc38:	d0f9      	beq.n	800cc2e <__sflush_r+0x1a>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc40:	682f      	ldr	r7, [r5, #0]
 800cc42:	6a21      	ldr	r1, [r4, #32]
 800cc44:	602b      	str	r3, [r5, #0]
 800cc46:	d032      	beq.n	800ccae <__sflush_r+0x9a>
 800cc48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	075a      	lsls	r2, r3, #29
 800cc4e:	d505      	bpl.n	800cc5c <__sflush_r+0x48>
 800cc50:	6863      	ldr	r3, [r4, #4]
 800cc52:	1ac0      	subs	r0, r0, r3
 800cc54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc56:	b10b      	cbz	r3, 800cc5c <__sflush_r+0x48>
 800cc58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc5a:	1ac0      	subs	r0, r0, r3
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4602      	mov	r2, r0
 800cc60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc62:	6a21      	ldr	r1, [r4, #32]
 800cc64:	4628      	mov	r0, r5
 800cc66:	47b0      	blx	r6
 800cc68:	1c43      	adds	r3, r0, #1
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	d106      	bne.n	800cc7c <__sflush_r+0x68>
 800cc6e:	6829      	ldr	r1, [r5, #0]
 800cc70:	291d      	cmp	r1, #29
 800cc72:	d82b      	bhi.n	800cccc <__sflush_r+0xb8>
 800cc74:	4a29      	ldr	r2, [pc, #164]	; (800cd1c <__sflush_r+0x108>)
 800cc76:	410a      	asrs	r2, r1
 800cc78:	07d6      	lsls	r6, r2, #31
 800cc7a:	d427      	bmi.n	800cccc <__sflush_r+0xb8>
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	6062      	str	r2, [r4, #4]
 800cc80:	04d9      	lsls	r1, r3, #19
 800cc82:	6922      	ldr	r2, [r4, #16]
 800cc84:	6022      	str	r2, [r4, #0]
 800cc86:	d504      	bpl.n	800cc92 <__sflush_r+0x7e>
 800cc88:	1c42      	adds	r2, r0, #1
 800cc8a:	d101      	bne.n	800cc90 <__sflush_r+0x7c>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	b903      	cbnz	r3, 800cc92 <__sflush_r+0x7e>
 800cc90:	6560      	str	r0, [r4, #84]	; 0x54
 800cc92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc94:	602f      	str	r7, [r5, #0]
 800cc96:	2900      	cmp	r1, #0
 800cc98:	d0c9      	beq.n	800cc2e <__sflush_r+0x1a>
 800cc9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc9e:	4299      	cmp	r1, r3
 800cca0:	d002      	beq.n	800cca8 <__sflush_r+0x94>
 800cca2:	4628      	mov	r0, r5
 800cca4:	f7fe fbf6 	bl	800b494 <_free_r>
 800cca8:	2000      	movs	r0, #0
 800ccaa:	6360      	str	r0, [r4, #52]	; 0x34
 800ccac:	e7c0      	b.n	800cc30 <__sflush_r+0x1c>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	47b0      	blx	r6
 800ccb4:	1c41      	adds	r1, r0, #1
 800ccb6:	d1c8      	bne.n	800cc4a <__sflush_r+0x36>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d0c5      	beq.n	800cc4a <__sflush_r+0x36>
 800ccbe:	2b1d      	cmp	r3, #29
 800ccc0:	d001      	beq.n	800ccc6 <__sflush_r+0xb2>
 800ccc2:	2b16      	cmp	r3, #22
 800ccc4:	d101      	bne.n	800ccca <__sflush_r+0xb6>
 800ccc6:	602f      	str	r7, [r5, #0]
 800ccc8:	e7b1      	b.n	800cc2e <__sflush_r+0x1a>
 800ccca:	89a3      	ldrh	r3, [r4, #12]
 800cccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd0:	81a3      	strh	r3, [r4, #12]
 800ccd2:	e7ad      	b.n	800cc30 <__sflush_r+0x1c>
 800ccd4:	690f      	ldr	r7, [r1, #16]
 800ccd6:	2f00      	cmp	r7, #0
 800ccd8:	d0a9      	beq.n	800cc2e <__sflush_r+0x1a>
 800ccda:	0793      	lsls	r3, r2, #30
 800ccdc:	680e      	ldr	r6, [r1, #0]
 800ccde:	bf08      	it	eq
 800cce0:	694b      	ldreq	r3, [r1, #20]
 800cce2:	600f      	str	r7, [r1, #0]
 800cce4:	bf18      	it	ne
 800cce6:	2300      	movne	r3, #0
 800cce8:	eba6 0807 	sub.w	r8, r6, r7
 800ccec:	608b      	str	r3, [r1, #8]
 800ccee:	f1b8 0f00 	cmp.w	r8, #0
 800ccf2:	dd9c      	ble.n	800cc2e <__sflush_r+0x1a>
 800ccf4:	6a21      	ldr	r1, [r4, #32]
 800ccf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccf8:	4643      	mov	r3, r8
 800ccfa:	463a      	mov	r2, r7
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b0      	blx	r6
 800cd00:	2800      	cmp	r0, #0
 800cd02:	dc06      	bgt.n	800cd12 <__sflush_r+0xfe>
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd10:	e78e      	b.n	800cc30 <__sflush_r+0x1c>
 800cd12:	4407      	add	r7, r0
 800cd14:	eba8 0800 	sub.w	r8, r8, r0
 800cd18:	e7e9      	b.n	800ccee <__sflush_r+0xda>
 800cd1a:	bf00      	nop
 800cd1c:	dfbffffe 	.word	0xdfbffffe

0800cd20 <_fflush_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	690b      	ldr	r3, [r1, #16]
 800cd24:	4605      	mov	r5, r0
 800cd26:	460c      	mov	r4, r1
 800cd28:	b913      	cbnz	r3, 800cd30 <_fflush_r+0x10>
 800cd2a:	2500      	movs	r5, #0
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	bd38      	pop	{r3, r4, r5, pc}
 800cd30:	b118      	cbz	r0, 800cd3a <_fflush_r+0x1a>
 800cd32:	6a03      	ldr	r3, [r0, #32]
 800cd34:	b90b      	cbnz	r3, 800cd3a <_fflush_r+0x1a>
 800cd36:	f7fd fadb 	bl	800a2f0 <__sinit>
 800cd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0f3      	beq.n	800cd2a <_fflush_r+0xa>
 800cd42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd44:	07d0      	lsls	r0, r2, #31
 800cd46:	d404      	bmi.n	800cd52 <_fflush_r+0x32>
 800cd48:	0599      	lsls	r1, r3, #22
 800cd4a:	d402      	bmi.n	800cd52 <_fflush_r+0x32>
 800cd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd4e:	f7fd fd0d 	bl	800a76c <__retarget_lock_acquire_recursive>
 800cd52:	4628      	mov	r0, r5
 800cd54:	4621      	mov	r1, r4
 800cd56:	f7ff ff5d 	bl	800cc14 <__sflush_r>
 800cd5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd5c:	07da      	lsls	r2, r3, #31
 800cd5e:	4605      	mov	r5, r0
 800cd60:	d4e4      	bmi.n	800cd2c <_fflush_r+0xc>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	059b      	lsls	r3, r3, #22
 800cd66:	d4e1      	bmi.n	800cd2c <_fflush_r+0xc>
 800cd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd6a:	f7fd fd00 	bl	800a76e <__retarget_lock_release_recursive>
 800cd6e:	e7dd      	b.n	800cd2c <_fflush_r+0xc>

0800cd70 <__swhatbuf_r>:
 800cd70:	b570      	push	{r4, r5, r6, lr}
 800cd72:	460c      	mov	r4, r1
 800cd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	b096      	sub	sp, #88	; 0x58
 800cd7c:	4615      	mov	r5, r2
 800cd7e:	461e      	mov	r6, r3
 800cd80:	da0d      	bge.n	800cd9e <__swhatbuf_r+0x2e>
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd88:	f04f 0100 	mov.w	r1, #0
 800cd8c:	bf0c      	ite	eq
 800cd8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd92:	2340      	movne	r3, #64	; 0x40
 800cd94:	2000      	movs	r0, #0
 800cd96:	6031      	str	r1, [r6, #0]
 800cd98:	602b      	str	r3, [r5, #0]
 800cd9a:	b016      	add	sp, #88	; 0x58
 800cd9c:	bd70      	pop	{r4, r5, r6, pc}
 800cd9e:	466a      	mov	r2, sp
 800cda0:	f000 f862 	bl	800ce68 <_fstat_r>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	dbec      	blt.n	800cd82 <__swhatbuf_r+0x12>
 800cda8:	9901      	ldr	r1, [sp, #4]
 800cdaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdb2:	4259      	negs	r1, r3
 800cdb4:	4159      	adcs	r1, r3
 800cdb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdba:	e7eb      	b.n	800cd94 <__swhatbuf_r+0x24>

0800cdbc <__smakebuf_r>:
 800cdbc:	898b      	ldrh	r3, [r1, #12]
 800cdbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdc0:	079d      	lsls	r5, r3, #30
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	d507      	bpl.n	800cdd8 <__smakebuf_r+0x1c>
 800cdc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	6163      	str	r3, [r4, #20]
 800cdd4:	b002      	add	sp, #8
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	ab01      	add	r3, sp, #4
 800cdda:	466a      	mov	r2, sp
 800cddc:	f7ff ffc8 	bl	800cd70 <__swhatbuf_r>
 800cde0:	9900      	ldr	r1, [sp, #0]
 800cde2:	4605      	mov	r5, r0
 800cde4:	4630      	mov	r0, r6
 800cde6:	f7fe ff21 	bl	800bc2c <_malloc_r>
 800cdea:	b948      	cbnz	r0, 800ce00 <__smakebuf_r+0x44>
 800cdec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf0:	059a      	lsls	r2, r3, #22
 800cdf2:	d4ef      	bmi.n	800cdd4 <__smakebuf_r+0x18>
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	f043 0302 	orr.w	r3, r3, #2
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	e7e3      	b.n	800cdc8 <__smakebuf_r+0xc>
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	6020      	str	r0, [r4, #0]
 800ce04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce08:	81a3      	strh	r3, [r4, #12]
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	6163      	str	r3, [r4, #20]
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	6120      	str	r0, [r4, #16]
 800ce12:	b15b      	cbz	r3, 800ce2c <__smakebuf_r+0x70>
 800ce14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 f837 	bl	800ce8c <_isatty_r>
 800ce1e:	b128      	cbz	r0, 800ce2c <__smakebuf_r+0x70>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	f043 0301 	orr.w	r3, r3, #1
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	431d      	orrs	r5, r3
 800ce30:	81a5      	strh	r5, [r4, #12]
 800ce32:	e7cf      	b.n	800cdd4 <__smakebuf_r+0x18>

0800ce34 <memmove>:
 800ce34:	4288      	cmp	r0, r1
 800ce36:	b510      	push	{r4, lr}
 800ce38:	eb01 0402 	add.w	r4, r1, r2
 800ce3c:	d902      	bls.n	800ce44 <memmove+0x10>
 800ce3e:	4284      	cmp	r4, r0
 800ce40:	4623      	mov	r3, r4
 800ce42:	d807      	bhi.n	800ce54 <memmove+0x20>
 800ce44:	1e43      	subs	r3, r0, #1
 800ce46:	42a1      	cmp	r1, r4
 800ce48:	d008      	beq.n	800ce5c <memmove+0x28>
 800ce4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce52:	e7f8      	b.n	800ce46 <memmove+0x12>
 800ce54:	4402      	add	r2, r0
 800ce56:	4601      	mov	r1, r0
 800ce58:	428a      	cmp	r2, r1
 800ce5a:	d100      	bne.n	800ce5e <memmove+0x2a>
 800ce5c:	bd10      	pop	{r4, pc}
 800ce5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce66:	e7f7      	b.n	800ce58 <memmove+0x24>

0800ce68 <_fstat_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4d07      	ldr	r5, [pc, #28]	; (800ce88 <_fstat_r+0x20>)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	4608      	mov	r0, r1
 800ce72:	4611      	mov	r1, r2
 800ce74:	602b      	str	r3, [r5, #0]
 800ce76:	f7f6 f818 	bl	8002eaa <_fstat>
 800ce7a:	1c43      	adds	r3, r0, #1
 800ce7c:	d102      	bne.n	800ce84 <_fstat_r+0x1c>
 800ce7e:	682b      	ldr	r3, [r5, #0]
 800ce80:	b103      	cbz	r3, 800ce84 <_fstat_r+0x1c>
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	bd38      	pop	{r3, r4, r5, pc}
 800ce86:	bf00      	nop
 800ce88:	20000fd0 	.word	0x20000fd0

0800ce8c <_isatty_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d06      	ldr	r5, [pc, #24]	; (800cea8 <_isatty_r+0x1c>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	602b      	str	r3, [r5, #0]
 800ce98:	f7f6 f817 	bl	8002eca <_isatty>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_isatty_r+0x1a>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_isatty_r+0x1a>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20000fd0 	.word	0x20000fd0

0800ceac <_sbrk_r>:
 800ceac:	b538      	push	{r3, r4, r5, lr}
 800ceae:	4d06      	ldr	r5, [pc, #24]	; (800cec8 <_sbrk_r+0x1c>)
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	4608      	mov	r0, r1
 800ceb6:	602b      	str	r3, [r5, #0]
 800ceb8:	f7f6 f820 	bl	8002efc <_sbrk>
 800cebc:	1c43      	adds	r3, r0, #1
 800cebe:	d102      	bne.n	800cec6 <_sbrk_r+0x1a>
 800cec0:	682b      	ldr	r3, [r5, #0]
 800cec2:	b103      	cbz	r3, 800cec6 <_sbrk_r+0x1a>
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	bd38      	pop	{r3, r4, r5, pc}
 800cec8:	20000fd0 	.word	0x20000fd0

0800cecc <__assert_func>:
 800cecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cece:	4614      	mov	r4, r2
 800ced0:	461a      	mov	r2, r3
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <__assert_func+0x2c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4605      	mov	r5, r0
 800ced8:	68d8      	ldr	r0, [r3, #12]
 800ceda:	b14c      	cbz	r4, 800cef0 <__assert_func+0x24>
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <__assert_func+0x30>)
 800cede:	9100      	str	r1, [sp, #0]
 800cee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cee4:	4906      	ldr	r1, [pc, #24]	; (800cf00 <__assert_func+0x34>)
 800cee6:	462b      	mov	r3, r5
 800cee8:	f000 f854 	bl	800cf94 <fiprintf>
 800ceec:	f000 f864 	bl	800cfb8 <abort>
 800cef0:	4b04      	ldr	r3, [pc, #16]	; (800cf04 <__assert_func+0x38>)
 800cef2:	461c      	mov	r4, r3
 800cef4:	e7f3      	b.n	800cede <__assert_func+0x12>
 800cef6:	bf00      	nop
 800cef8:	200001f8 	.word	0x200001f8
 800cefc:	0800d775 	.word	0x0800d775
 800cf00:	0800d782 	.word	0x0800d782
 800cf04:	0800d7b0 	.word	0x0800d7b0

0800cf08 <_calloc_r>:
 800cf08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf0a:	fba1 2402 	umull	r2, r4, r1, r2
 800cf0e:	b94c      	cbnz	r4, 800cf24 <_calloc_r+0x1c>
 800cf10:	4611      	mov	r1, r2
 800cf12:	9201      	str	r2, [sp, #4]
 800cf14:	f7fe fe8a 	bl	800bc2c <_malloc_r>
 800cf18:	9a01      	ldr	r2, [sp, #4]
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	b930      	cbnz	r0, 800cf2c <_calloc_r+0x24>
 800cf1e:	4628      	mov	r0, r5
 800cf20:	b003      	add	sp, #12
 800cf22:	bd30      	pop	{r4, r5, pc}
 800cf24:	220c      	movs	r2, #12
 800cf26:	6002      	str	r2, [r0, #0]
 800cf28:	2500      	movs	r5, #0
 800cf2a:	e7f8      	b.n	800cf1e <_calloc_r+0x16>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	f7fd fb7b 	bl	800a628 <memset>
 800cf32:	e7f4      	b.n	800cf1e <_calloc_r+0x16>

0800cf34 <_realloc_r>:
 800cf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf38:	4680      	mov	r8, r0
 800cf3a:	4614      	mov	r4, r2
 800cf3c:	460e      	mov	r6, r1
 800cf3e:	b921      	cbnz	r1, 800cf4a <_realloc_r+0x16>
 800cf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf44:	4611      	mov	r1, r2
 800cf46:	f7fe be71 	b.w	800bc2c <_malloc_r>
 800cf4a:	b92a      	cbnz	r2, 800cf58 <_realloc_r+0x24>
 800cf4c:	f7fe faa2 	bl	800b494 <_free_r>
 800cf50:	4625      	mov	r5, r4
 800cf52:	4628      	mov	r0, r5
 800cf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf58:	f000 f835 	bl	800cfc6 <_malloc_usable_size_r>
 800cf5c:	4284      	cmp	r4, r0
 800cf5e:	4607      	mov	r7, r0
 800cf60:	d802      	bhi.n	800cf68 <_realloc_r+0x34>
 800cf62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf66:	d812      	bhi.n	800cf8e <_realloc_r+0x5a>
 800cf68:	4621      	mov	r1, r4
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	f7fe fe5e 	bl	800bc2c <_malloc_r>
 800cf70:	4605      	mov	r5, r0
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0ed      	beq.n	800cf52 <_realloc_r+0x1e>
 800cf76:	42bc      	cmp	r4, r7
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	bf28      	it	cs
 800cf7e:	463a      	movcs	r2, r7
 800cf80:	f7fd fbf6 	bl	800a770 <memcpy>
 800cf84:	4631      	mov	r1, r6
 800cf86:	4640      	mov	r0, r8
 800cf88:	f7fe fa84 	bl	800b494 <_free_r>
 800cf8c:	e7e1      	b.n	800cf52 <_realloc_r+0x1e>
 800cf8e:	4635      	mov	r5, r6
 800cf90:	e7df      	b.n	800cf52 <_realloc_r+0x1e>
	...

0800cf94 <fiprintf>:
 800cf94:	b40e      	push	{r1, r2, r3}
 800cf96:	b503      	push	{r0, r1, lr}
 800cf98:	4601      	mov	r1, r0
 800cf9a:	ab03      	add	r3, sp, #12
 800cf9c:	4805      	ldr	r0, [pc, #20]	; (800cfb4 <fiprintf+0x20>)
 800cf9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa2:	6800      	ldr	r0, [r0, #0]
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	f7ff fd1b 	bl	800c9e0 <_vfiprintf_r>
 800cfaa:	b002      	add	sp, #8
 800cfac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfb0:	b003      	add	sp, #12
 800cfb2:	4770      	bx	lr
 800cfb4:	200001f8 	.word	0x200001f8

0800cfb8 <abort>:
 800cfb8:	b508      	push	{r3, lr}
 800cfba:	2006      	movs	r0, #6
 800cfbc:	f000 f834 	bl	800d028 <raise>
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f7f5 ff3f 	bl	8002e44 <_exit>

0800cfc6 <_malloc_usable_size_r>:
 800cfc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfca:	1f18      	subs	r0, r3, #4
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	bfbc      	itt	lt
 800cfd0:	580b      	ldrlt	r3, [r1, r0]
 800cfd2:	18c0      	addlt	r0, r0, r3
 800cfd4:	4770      	bx	lr

0800cfd6 <_raise_r>:
 800cfd6:	291f      	cmp	r1, #31
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4604      	mov	r4, r0
 800cfdc:	460d      	mov	r5, r1
 800cfde:	d904      	bls.n	800cfea <_raise_r+0x14>
 800cfe0:	2316      	movs	r3, #22
 800cfe2:	6003      	str	r3, [r0, #0]
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfe8:	bd38      	pop	{r3, r4, r5, pc}
 800cfea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cfec:	b112      	cbz	r2, 800cff4 <_raise_r+0x1e>
 800cfee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cff2:	b94b      	cbnz	r3, 800d008 <_raise_r+0x32>
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 f831 	bl	800d05c <_getpid_r>
 800cffa:	462a      	mov	r2, r5
 800cffc:	4601      	mov	r1, r0
 800cffe:	4620      	mov	r0, r4
 800d000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d004:	f000 b818 	b.w	800d038 <_kill_r>
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d00a      	beq.n	800d022 <_raise_r+0x4c>
 800d00c:	1c59      	adds	r1, r3, #1
 800d00e:	d103      	bne.n	800d018 <_raise_r+0x42>
 800d010:	2316      	movs	r3, #22
 800d012:	6003      	str	r3, [r0, #0]
 800d014:	2001      	movs	r0, #1
 800d016:	e7e7      	b.n	800cfe8 <_raise_r+0x12>
 800d018:	2400      	movs	r4, #0
 800d01a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d01e:	4628      	mov	r0, r5
 800d020:	4798      	blx	r3
 800d022:	2000      	movs	r0, #0
 800d024:	e7e0      	b.n	800cfe8 <_raise_r+0x12>
	...

0800d028 <raise>:
 800d028:	4b02      	ldr	r3, [pc, #8]	; (800d034 <raise+0xc>)
 800d02a:	4601      	mov	r1, r0
 800d02c:	6818      	ldr	r0, [r3, #0]
 800d02e:	f7ff bfd2 	b.w	800cfd6 <_raise_r>
 800d032:	bf00      	nop
 800d034:	200001f8 	.word	0x200001f8

0800d038 <_kill_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4d07      	ldr	r5, [pc, #28]	; (800d058 <_kill_r+0x20>)
 800d03c:	2300      	movs	r3, #0
 800d03e:	4604      	mov	r4, r0
 800d040:	4608      	mov	r0, r1
 800d042:	4611      	mov	r1, r2
 800d044:	602b      	str	r3, [r5, #0]
 800d046:	f7f5 feed 	bl	8002e24 <_kill>
 800d04a:	1c43      	adds	r3, r0, #1
 800d04c:	d102      	bne.n	800d054 <_kill_r+0x1c>
 800d04e:	682b      	ldr	r3, [r5, #0]
 800d050:	b103      	cbz	r3, 800d054 <_kill_r+0x1c>
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	bf00      	nop
 800d058:	20000fd0 	.word	0x20000fd0

0800d05c <_getpid_r>:
 800d05c:	f7f5 beda 	b.w	8002e14 <_getpid>

0800d060 <_init>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	bf00      	nop
 800d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d066:	bc08      	pop	{r3}
 800d068:	469e      	mov	lr, r3
 800d06a:	4770      	bx	lr

0800d06c <_fini>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr
